version: '3.9'

# Bot4 Multi-Agent Trading Platform
# Docker-based MCP Architecture with 8 Specialized Agents

networks:
  bot4-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  postgres-data:
  redis-data:
  grafana-data:
  prometheus-data:
  mcp-shared-context:

services:
  # ===== INFRASTRUCTURE SERVICES =====
  
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: bot4-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: bot4user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-bot4pass}
      POSTGRES_DB: bot4trading
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./sql:/docker-entrypoint-initdb.d
    networks:
      bot4-network:
        ipv4_address: 172.28.1.2
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bot4user"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: bot4-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      bot4-network:
        ipv4_address: 172.28.1.3
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ===== MCP COORDINATOR =====
  
  mcp-coordinator:
    build:
      context: ./mcp/coordinator
      dockerfile: Dockerfile
    container_name: bot4-mcp-coordinator
    restart: unless-stopped
    environment:
      REDIS_URL: redis://redis:6379
      POSTGRES_URL: postgresql://bot4user:${POSTGRES_PASSWORD:-bot4pass}@postgres:5432/bot4trading
      MCP_DEBUG: "true"
    depends_on:
      - redis
      - postgres
    volumes:
      - mcp-shared-context:/mcp/shared
      - ./mcp/config:/mcp/config:ro
    networks:
      bot4-network:
        ipv4_address: 172.28.2.1
    ports:
      - "8000:8000"  # MCP HTTP interface

  # ===== SPECIALIST AGENTS (RUST-BASED) =====
  
  agent-architect:
    build:
      context: ./mcp/agents/architect
      dockerfile: Dockerfile
      args:
        FEATURES: "server,transport,docker"
    container_name: bot4-agent-architect
    restart: unless-stopped
    environment:
      AGENT_TYPE: architect
      MCP_TRANSPORT: docker
      REDIS_URL: redis://redis:6379
      SHARED_CONTEXT: /mcp/shared/context.json
    depends_on:
      - mcp-coordinator
    volumes:
      - mcp-shared-context:/mcp/shared
      - ./rust_core:/workspace/rust_core:ro
    networks:
      bot4-network:
        ipv4_address: 172.28.3.1

  agent-riskquant:
    build:
      context: ./mcp/agents/riskquant
      dockerfile: Dockerfile
      args:
        FEATURES: "server,transport,docker,math"
    container_name: bot4-agent-riskquant
    restart: unless-stopped
    environment:
      AGENT_TYPE: riskquant
      MCP_TRANSPORT: docker
      REDIS_URL: redis://redis:6379
      MAX_KELLY_FRACTION: "0.25"
      VAR_CONFIDENCE: "0.95"
    depends_on:
      - mcp-coordinator
    volumes:
      - mcp-shared-context:/mcp/shared
    networks:
      bot4-network:
        ipv4_address: 172.28.3.2

  # Additional agents truncated for brevity - see full implementation below

  # ===== TRADING ENGINE (MAIN RUST APPLICATION) =====
  
  trading-engine:
    build:
      context: ./rust_core
      dockerfile: Dockerfile
      target: production
      args:
        FEATURES: "docker,mcp,simd,ml"
    container_name: bot4-trading-engine
    restart: unless-stopped
    environment:
      RUST_LOG: info
      RUST_BACKTRACE: 1
      DATABASE_URL: postgresql://bot4user:${POSTGRES_PASSWORD:-bot4pass}@postgres:5432/bot4trading
      REDIS_URL: redis://redis:6379
      MCP_COORDINATOR: http://mcp-coordinator:8000
      TRADING_MODE: ${TRADING_MODE:-paper}
      MAX_POSITION_SIZE: "0.02"
      MAX_LEVERAGE: "3"
      REQUIRE_STOP_LOSS: "true"
      MAX_DRAWDOWN: "0.15"
    depends_on:
      - postgres
      - redis
      - mcp-coordinator
    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs
    networks:
      bot4-network:
        ipv4_address: 172.28.6.1
    ports:
      - "8080:8080"  # API
      - "9091:9091"  # Metrics