version: '3.8'

services:
  # PostgreSQL Database with TimescaleDB
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: bot3-postgres
    environment:
      POSTGRES_DB: bot3trading
      POSTGRES_USER: bot3user
      POSTGRES_PASSWORD: bot3pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/001_core_schema.sql:/docker-entrypoint-initdb.d/001_core_schema.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bot3user"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - bot3-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: bot3-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - bot3-network

  # TimescaleDB for time-series data
  timescale:
    image: timescale/timescaledb:latest-pg15
    container_name: bot3-timescale
    environment:
      POSTGRES_DB: bot3_timeseries
      POSTGRES_USER: bot3user
      POSTGRES_PASSWORD: bot3pass
    volumes:
      - timescale_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - bot3-network

  # Main Trading Engine
  trading-engine:
    build:
      context: .
      dockerfile: Dockerfile.simple
    container_name: bot3-trading-engine
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=bot3trading
      - DB_USER=bot3user
      - DB_PASSWORD=bot3pass
      - REDIS_URL=redis://redis:6379/0
      - TRADING_MODE=${TRADING_MODE:-paper}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./logs:/var/log/bot3
      - ./models:/app/models
      - ./data:/app/data
    ports:
      - "8080:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - bot3-network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: bot3-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    networks:
      - bot3-network

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: bot3-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=bot3admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - bot3-network

  # Frontend (React)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: bot3-frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000/ws
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - trading-engine
    networks:
      - bot3-network

  # Nginx reverse proxy (production)
  nginx:
    image: nginx:alpine
    container_name: bot3-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - trading-engine
      - frontend
    networks:
      - bot3-network
    profiles:
      - production

networks:
  bot3-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  timescale_data:
  prometheus_data:
  grafana_data: