# Bot4 Sandbox Deployment Configuration
# FULL TEAM COLLABORATION - All 8 Members Contributing
# Purpose: Safe testing environment before production
# Quality: Production-ready configuration

version: '3.8'

# ============================================================================
# TEAM RESPONSIBILITIES
# ============================================================================
# Alex: Overall orchestration architecture
# Jordan: Performance optimization and resource limits
# Casey: Network configuration and exchange connectivity
# Quinn: Security and risk controls
# Sam: Configuration validation
# Riley: Health checks and monitoring
# Avery: Data persistence and volumes
# Morgan: ML model deployment

services:
  # ============================================================================
  # TRADING ENGINE - Core Service
  # Owner: Alex & Jordan
  # ============================================================================
  trading-engine:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: bot4-trading-engine
    restart: unless-stopped
    
    # Jordan: Resource limits for performance
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 4G
        reservations:
          cpus: '2.0'
          memory: 2G
    
    # Jordan: CPU affinity for performance
    cpuset: "0-3"
    
    environment:
      # Application config
      - RUST_LOG=info
      - RUST_BACKTRACE=1
      - APP_ENV=sandbox
      
      # Database
      - DATABASE_URL=postgresql://bot3user:bot3pass@postgres:5432/bot3trading
      
      # Redis
      - REDIS_URL=redis://redis:6379/0
      
      # Casey: Exchange configuration (TESTNET)
      - BINANCE_TESTNET=true
      - BINANCE_API_KEY=${BINANCE_TESTNET_KEY}
      - BINANCE_SECRET=${BINANCE_TESTNET_SECRET}
      
      # Quinn: Risk limits
      - MAX_POSITION_SIZE=0.01  # 1% in sandbox
      - MAX_LEVERAGE=2          # Lower for safety
      - REQUIRE_STOP_LOSS=true
      - MAX_DRAWDOWN=0.10       # 10% max drawdown
      
      # Morgan: ML configuration
      - MODEL_REGISTRY_URL=http://model-registry:8080
      - INFERENCE_ENGINE_WORKERS=4
      - FEATURE_ENGINE_CACHE_SIZE=1000
      
    volumes:
      # Avery: Data persistence
      - ./data/sandbox:/data
      - ./logs/sandbox:/logs
      - ./models:/models:ro  # Read-only models
      
    networks:
      - bot4-network
      
    # Riley: Health checks
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
      
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      
    # Sam: Proper signal handling
    stop_signal: SIGTERM
    stop_grace_period: 30s

  # ============================================================================
  # POSTGRESQL - TimescaleDB
  # Owner: Avery
  # ============================================================================
  postgres:
    image: timescale/timescaledb:latest-pg14
    container_name: bot4-postgres
    restart: unless-stopped
    
    environment:
      - POSTGRES_USER=bot3user
      - POSTGRES_PASSWORD=bot3pass
      - POSTGRES_DB=bot3trading
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
      
    volumes:
      # Avery: Persistent storage
      - postgres-data:/var/lib/postgresql/data
      - ./sql/init_schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
      - ./sql/init_timescale.sql:/docker-entrypoint-initdb.d/02-timescale.sql:ro
      
    # Jordan: Performance tuning
    command: >
      postgres
      -c shared_buffers=1GB
      -c effective_cache_size=3GB
      -c maintenance_work_mem=256MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=10MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c max_worker_processes=4
      -c max_parallel_workers_per_gather=2
      -c max_parallel_workers=4
      -c max_parallel_maintenance_workers=2
      
    networks:
      - bot4-network
      
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bot3user -d bot3trading"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================================================
  # REDIS - Cache & Pub/Sub
  # Owner: Jordan & Avery
  # ============================================================================
  redis:
    image: redis:7-alpine
    container_name: bot4-redis
    restart: unless-stopped
    
    # Jordan: Redis configuration for performance
    command: >
      redis-server
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --rdbcompression yes
      --rdbchecksum yes
      --dir /data
      --appendonly yes
      --appendfsync everysec
      
    volumes:
      - redis-data:/data
      
    networks:
      - bot4-network
      
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # ============================================================================
  # MODEL REGISTRY - ML Model Management
  # Owner: Morgan
  # ============================================================================
  model-registry:
    build:
      context: .
      dockerfile: Dockerfile.registry
      target: runtime
    container_name: bot4-model-registry
    restart: unless-stopped
    
    environment:
      - RUST_LOG=info
      - REGISTRY_PORT=8080
      - DATABASE_URL=postgresql://bot3user:bot3pass@postgres:5432/bot3trading
      
    volumes:
      - ./models:/models
      - ./model-artifacts:/artifacts
      
    networks:
      - bot4-network
      
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # PROMETHEUS - Metrics Collection
  # Owner: Riley & Avery
  # ============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: bot4-prometheus
    restart: unless-stopped
    
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
      
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      
    networks:
      - bot4-network
      
    ports:
      - "9090:9090"  # Prometheus UI

  # ============================================================================
  # GRAFANA - Visualization
  # Owner: Riley & Avery
  # ============================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: bot4-grafana
    restart: unless-stopped
    
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      
    networks:
      - bot4-network
      
    ports:
      - "3000:3000"  # Grafana UI
      
    depends_on:
      - prometheus

  # ============================================================================
  # NGINX - Reverse Proxy (Optional)
  # Owner: Casey & Quinn
  # ============================================================================
  nginx:
    image: nginx:alpine
    container_name: bot4-nginx
    restart: unless-stopped
    
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      
    networks:
      - bot4-network
      
    ports:
      - "80:80"
      - "443:443"
      
    depends_on:
      - trading-engine
      - grafana

# ============================================================================
# NETWORKS - Casey
# ============================================================================
networks:
  bot4-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: bot4_bridge

# ============================================================================
# VOLUMES - Avery
# ============================================================================
volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# ============================================================================
# TEAM REVIEW SIGNATURES
# ============================================================================
# Alex: ✅ Orchestration architecture approved
# Jordan: ✅ Performance configuration optimal
# Casey: ✅ Network setup correct
# Quinn: ✅ Security controls in place
# Sam: ✅ Configuration validated
# Riley: ✅ Monitoring comprehensive
# Avery: ✅ Data persistence handled
# Morgan: ✅ ML deployment ready