name: Supply Chain Security
# Owner: Alex | Pre-Production Requirement #8 from Sophia
# Target: Secure dependency management and vulnerability scanning

on:
  push:
    branches: [main]
  pull_request:
  schedule:
    - cron: '0 0 * * *'  # Daily security scan

jobs:
  security-audit:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Install security tools
      run: |
        cargo install cargo-audit
        cargo install cargo-deny
        cargo install cargo-sbom
        cargo install cargo-license
    
    - name: Run cargo audit
      run: |
        cargo audit --json > audit_report.json
        cargo audit
    
    - name: Run cargo deny
      run: |
        cat > deny.toml << EOF
        [bans]
        multiple-versions = "warn"
        wildcards = "deny"
        highlight = "all"
        
        [licenses]
        unlicensed = "deny"
        allow = [
          "MIT",
          "Apache-2.0",
          "Apache-2.0 WITH LLVM-exception",
          "BSD-3-Clause",
        ]
        deny = ["GPL-3.0", "AGPL-3.0"]
        copyleft = "warn"
        
        [sources]
        unknown-registry = "deny"
        unknown-git = "warn"
        allow-registry = ["https://github.com/rust-lang/crates.io-index"]
        EOF
        
        cargo deny check
    
    - name: Generate SBOM
      run: |
        cargo sbom > sbom.json
        echo "## Software Bill of Materials" > sbom_summary.md
        echo "Generated: $(date)" >> sbom_summary.md
        echo "" >> sbom_summary.md
        echo "Total dependencies: $(cargo tree | wc -l)" >> sbom_summary.md
    
    - name: Check for known vulnerabilities
      run: |
        python3 scripts/check_vulnerabilities.py audit_report.json
    
    - name: License compliance check
      run: |
        cargo license --json > licenses.json
        python3 scripts/check_licenses.py licenses.json
    
    - name: Upload security artifacts
      uses: actions/upload-artifact@v3
      with:
        name: security-artifacts
        path: |
          audit_report.json
          sbom.json
          licenses.json
          sbom_summary.md
    
    - name: Create security report
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const audit = JSON.parse(fs.readFileSync('audit_report.json', 'utf8'));
          
          let vulnCount = audit.vulnerabilities?.count || 0;
          let status = vulnCount === 0 ? '✅' : '⚠️';
          
          const comment = `## ${status} Supply Chain Security Report
          
          ### Vulnerability Scan
          - Critical: ${audit.vulnerabilities?.critical || 0}
          - High: ${audit.vulnerabilities?.high || 0}
          - Medium: ${audit.vulnerabilities?.medium || 0}
          - Low: ${audit.vulnerabilities?.low || 0}
          
          ### Dependencies
          - Total: ${audit.dependencies?.count || 0}
          - Outdated: ${audit.dependencies?.outdated || 0}
          
          ### License Compliance
          - All licenses verified ✅
          - No GPL/AGPL dependencies ✅
          
          ${vulnCount === 0 ? '✅ No known vulnerabilities detected!' : '⚠️ Please review and update vulnerable dependencies'}`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.name,
            body: comment
          });
    
    - name: Fail on critical vulnerabilities
      run: |
        if [ -f audit_report.json ]; then
          CRITICAL=$(jq '.vulnerabilities.critical // 0' audit_report.json)
          if [ "$CRITICAL" -gt 0 ]; then
            echo "❌ Critical vulnerabilities found!"
            exit 1
          fi
        fi