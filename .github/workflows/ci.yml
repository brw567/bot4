name: Bot4 CI Pipeline

# Sophia Issue #9: Wire CI gates for coverage and no-fakes enforcement
# Nexus requirement: Include raw perf data in artifacts

on:
  push:
    branches: [ main, develop, "feature/*", "fix/*" ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  
jobs:
  # Job 1: No-fakes validation (Sam's requirement)
  validate-no-fakes:
    name: "🚫 No Fake Implementations Check"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: "Check for fake implementations in Rust"
        run: |
          echo "Running fake implementation detection..."
          python3 scripts/validate_no_fakes_rust.py
          
      - name: "Check for todo!() and unimplemented!()"
        run: |
          if grep -r "todo!()" --include="*.rs" rust_core/; then
            echo "❌ Found todo!() in code!"
            exit 1
          fi
          if grep -r "unimplemented!()" --include="*.rs" rust_core/; then
            echo "❌ Found unimplemented!() in code!"
            exit 1
          fi
          echo "✅ No fake implementations found"

  # Job 2: Build and test
  build-and-test:
    name: "🔨 Build & Test"
    runs-on: ubuntu-latest
    needs: validate-no-fakes
    
    services:
      postgres:
        image: timescale/timescaledb:latest-pg15
        env:
          POSTGRES_USER: bot3user
          POSTGRES_PASSWORD: bot3pass
          POSTGRES_DB: bot3trading
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: "Setup Rust"
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy
          
      - name: "Cache dependencies"
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          
      - name: "Format check"
        run: |
          cd rust_core
          cargo fmt --all -- --check
          
      - name: "Clippy lints"
        run: |
          cd rust_core
          cargo clippy --all-targets --all-features -- -D warnings
          
      - name: "Build"
        run: |
          cd rust_core
          cargo build --release --all
          
      - name: "Run tests"
        run: |
          cd rust_core
          cargo test --all --release
        env:
          DATABASE_URL: postgresql://bot3user:bot3pass@localhost:5432/bot3trading
          REDIS_URL: redis://localhost:6379/0

  # Job 3: Code coverage (Riley's 95% requirement)
  coverage:
    name: "📊 Code Coverage"
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      - uses: actions/checkout@v4
      
      - name: "Setup Rust with llvm-tools"
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: llvm-tools-preview
          
      - name: "Install grcov"
        run: |
          cargo install grcov
          
      - name: "Build for coverage"
        run: |
          cd rust_core
          export RUSTFLAGS="-Cinstrument-coverage"
          export LLVM_PROFILE_FILE="bot4-%p-%m.profraw"
          cargo build --all
          
      - name: "Run tests with coverage"
        run: |
          cd rust_core
          export RUSTFLAGS="-Cinstrument-coverage"
          export LLVM_PROFILE_FILE="bot4-%p-%m.profraw"
          cargo test --all
          
      - name: "Generate coverage report"
        run: |
          cd rust_core
          grcov . --binary-path ./target/debug/ \
            -s . -t html --branch --ignore-not-existing \
            -o ./target/coverage/
          
          # Check coverage threshold
          COVERAGE=$(grcov . --binary-path ./target/debug/ \
            -s . -t markdown --branch --ignore-not-existing | \
            grep "Total" | awk '{print $2}' | sed 's/%//')
          
          echo "Coverage: ${COVERAGE}%"
          
          if (( $(echo "$COVERAGE < 95" | bc -l) )); then
            echo "❌ Coverage ${COVERAGE}% is below 95% threshold!"
            exit 1
          fi
          
          echo "✅ Coverage ${COVERAGE}% meets requirements"
          
      - name: "Upload coverage report"
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: rust_core/target/coverage/

  # Job 4: Performance benchmarks
  performance:
    name: "⚡ Performance Benchmarks"
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      - uses: actions/checkout@v4
      
      - name: "Setup Rust"
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          
      - name: "Install perf tools"
        run: |
          sudo apt-get update
          sudo apt-get install -y linux-tools-common linux-tools-generic
          
      - name: "Run benchmarks with perf"
        run: |
          cd rust_core
          chmod +x run_benchmarks.sh
          
          # Run with perf permissions
          sudo sh -c 'echo 1 > /proc/sys/kernel/perf_event_paranoid'
          
          # Execute benchmark suite
          ./run_benchmarks.sh
          
      - name: "Validate performance targets"
        run: |
          cd rust_core
          
          # Check if any benchmarks exceeded targets
          if grep -q "exceeding" benchmark_results_*/risk_engine_bench_results.txt 2>/dev/null; then
            echo "❌ Risk engine exceeded 10μs target!"
            exit 1
          fi
          
          if grep -q "exceeding" benchmark_results_*/order_management_bench_results.txt 2>/dev/null; then
            echo "❌ Order management exceeded 100μs target!"
            exit 1
          fi
          
          echo "✅ All performance targets met"
          
      - name: "Upload benchmark results"
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: |
            rust_core/benchmark_results_*
            rust_core/target/criterion/

  # Job 5: Security audit
  security:
    name: "🔒 Security Audit"
    runs-on: ubuntu-latest
    needs: validate-no-fakes
    
    steps:
      - uses: actions/checkout@v4
      
      - name: "Setup Rust"
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          
      - name: "Install cargo-audit"
        run: cargo install cargo-audit
        
      - name: "Run security audit"
        run: |
          cd rust_core
          cargo audit
          
  # Job 6: Documentation check
  documentation:
    name: "📚 Documentation"
    runs-on: ubuntu-latest
    needs: validate-no-fakes
    
    steps:
      - uses: actions/checkout@v4
      
      - name: "Setup Rust"
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          
      - name: "Build documentation"
        run: |
          cd rust_core
          cargo doc --all --no-deps
          
      - name: "Check documentation coverage"
        run: |
          cd rust_core
          # Count undocumented public items
          UNDOCUMENTED=$(cargo doc --all --no-deps 2>&1 | grep -c "warning: missing documentation" || true)
          
          if [ "$UNDOCUMENTED" -gt "10" ]; then
            echo "⚠️  Warning: $UNDOCUMENTED undocumented public items"
          fi

  # Final gate job
  ci-gate:
    name: "✅ CI Gate"
    runs-on: ubuntu-latest
    needs: [validate-no-fakes, build-and-test, coverage, performance, security, documentation]
    
    steps:
      - name: "CI Gate Passed"
        run: |
          echo "==================================="
          echo "✅ All CI checks passed!"
          echo "==================================="
          echo "- No fake implementations ✅"
          echo "- Build and tests pass ✅"
          echo "- Coverage >= 95% ✅"
          echo "- Performance targets met ✅"
          echo "- Security audit clean ✅"
          echo "- Documentation built ✅"
          echo "==================================="
          echo "Ready for merge!"