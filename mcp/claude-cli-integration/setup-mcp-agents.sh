#!/bin/bash
# Setup script to register all Bot4 MCP agents with Claude CLI
# This script creates wrapper scripts and registers them with claude mcp add

set -e

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
MCP_DIR="/home/hamster/bot4/mcp"

echo "ðŸš€ Setting up Bot4 MCP Agents for Claude CLI"
echo "==========================================="

# Function to create a simple stdio wrapper for each agent
create_wrapper() {
    local agent_name=$1
    local container_name=$2
    local executable=$3
    
    cat > "$SCRIPT_DIR/bot4-${agent_name}.sh" << EOF
#!/bin/bash
# MCP Wrapper for ${agent_name}
# Auto-generated by setup-mcp-agents.sh

# Ensure container is running
if ! docker ps --filter "name=${container_name}" --format "{{.Names}}" | grep -q "${container_name}"; then
    echo "Starting ${container_name} container..." >&2
    docker-compose -f "$MCP_DIR/docker-compose-agents.yml" up -d ${agent_name} >&2
    sleep 3
fi

# Forward stdio to Docker container
exec docker exec -i ${container_name} ${executable}
EOF
    
    chmod +x "$SCRIPT_DIR/bot4-${agent_name}.sh"
    echo "âœ“ Created wrapper for ${agent_name}"
}

# Create wrappers for all agents
echo ""
echo "Creating wrapper scripts..."
create_wrapper "coordinator" "mcp-coordinator" "/app/coordinator"
create_wrapper "architect" "mcp-architect" "/app/architect"
create_wrapper "riskquant" "mcp-riskquant" "/app/riskquant"
create_wrapper "mlengineer" "mcp-mlengineer" "/app/mlengineer"
create_wrapper "exchangespec" "mcp-exchangespec" "/app/exchangespec"
create_wrapper "infraengineer" "mcp-infraengineer" "/app/infraengineer"
create_wrapper "qualitygate" "mcp-qualitygate" "/app/qualitygate"
create_wrapper "integrationvalidator" "mcp-integrationvalidator" "/app/integrationvalidator"
create_wrapper "complianceauditor" "mcp-complianceauditor" "/app/complianceauditor"

# Remove existing MCP servers if they exist
echo ""
echo "Cleaning up existing MCP registrations..."
for agent in coordinator architect riskquant mlengineer exchangespec infraengineer qualitygate integrationvalidator complianceauditor; do
    claude mcp remove "bot4-${agent}" 2>/dev/null || true
done

# Register all agents with Claude CLI
echo ""
echo "Registering MCP servers with Claude CLI..."

# Coordinator
claude mcp add "bot4-coordinator" "$SCRIPT_DIR/bot4-coordinator.sh"
echo "âœ“ Registered bot4-coordinator"

# Architect
claude mcp add "bot4-architect" "$SCRIPT_DIR/bot4-architect.sh"
echo "âœ“ Registered bot4-architect"

# RiskQuant
claude mcp add "bot4-riskquant" "$SCRIPT_DIR/bot4-riskquant.sh"
echo "âœ“ Registered bot4-riskquant"

# MLEngineer
claude mcp add "bot4-mlengineer" "$SCRIPT_DIR/bot4-mlengineer.sh"
echo "âœ“ Registered bot4-mlengineer"

# ExchangeSpec
claude mcp add "bot4-exchangespec" "$SCRIPT_DIR/bot4-exchangespec.sh"
echo "âœ“ Registered bot4-exchangespec"

# InfraEngineer
claude mcp add "bot4-infraengineer" "$SCRIPT_DIR/bot4-infraengineer.sh"
echo "âœ“ Registered bot4-infraengineer"

# QualityGate
claude mcp add "bot4-qualitygate" "$SCRIPT_DIR/bot4-qualitygate.sh"
echo "âœ“ Registered bot4-qualitygate"

# IntegrationValidator
claude mcp add "bot4-integrationvalidator" "$SCRIPT_DIR/bot4-integrationvalidator.sh"
echo "âœ“ Registered bot4-integrationvalidator"

# ComplianceAuditor
claude mcp add "bot4-complianceauditor" "$SCRIPT_DIR/bot4-complianceauditor.sh"
echo "âœ“ Registered bot4-complianceauditor"

echo ""
echo "==========================================="
echo "âœ… Setup complete!"
echo ""
echo "To verify the agents are registered, run:"
echo "  claude mcp list"
echo ""
echo "To start all Docker containers, run:"
echo "  docker-compose -f $MCP_DIR/docker-compose.yml up -d"
echo ""
echo "To use in Claude CLI:"
echo "  claude chat"
echo "  Then use /mcp or /agents to see available servers"
echo ""