{
  "summary": {
    "total_files": 305,
    "total_structs": 1722,
    "total_enums": 415,
    "total_traits": 71,
    "total_functions": 321,
    "total_impls": 760,
    "total_trait_impls": 353
  },
  "components": {
    "structs": [
      {
        "name": "AlignedBuffer",
        "file": "test_simd_standalone.rs",
        "line": 6,
        "fields": [
          [
            "data",
            "[f64; 256]"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "AlignedBuffer",
        "file": "test_simd_detailed.rs",
        "line": 6,
        "fields": [
          [
            "data",
            "[f64; 256]"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "Timer",
        "file": "bot4-main/src/observability/metrics.rs",
        "line": 198,
        "fields": [
          [
            "start",
            "Instant"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "STPService",
        "file": "domain/services/stp_policy.rs",
        "line": 49,
        "fields": [
          [
            "Avery",
            "\"Using RwLock for read-heavy workload\"\n    active_orders: Arc<RwLock<HashMap<Symbol"
          ],
          [
            "Quinn",
            "\"CancelNew is safest default\"\n    default_policy: STPPolicy"
          ],
          [
            "Casey",
            "\"Some accounts may need different policies\"\n    account_policies: Arc<RwLock<HashMap<String"
          ],
          [
            "Jordan",
            "\"Track performance impact\"\n    metrics: Arc<STPMetrics>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderRecord",
        "file": "domain/services/stp_policy.rs",
        "line": 70,
        "fields": [
          [
            "id",
            "OrderId"
          ],
          [
            "account",
            "String"
          ],
          [
            "side",
            "OrderSide"
          ],
          [
            "price",
            "f64"
          ],
          [
            "quantity",
            "f64"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "STPMetrics",
        "file": "domain/services/stp_policy.rs",
        "line": 81,
        "fields": [
          [
            "checks_performed",
            "atomic::AtomicU64"
          ],
          [
            "violations_prevented",
            "atomic::AtomicU64"
          ],
          [
            "new_cancelled",
            "atomic::AtomicU64"
          ],
          [
            "resting_cancelled",
            "atomic::AtomicU64"
          ],
          [
            "both_cancelled",
            "atomic::AtomicU64"
          ],
          [
            "check_latency_ns",
            "atomic::AtomicU64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "STPMetricsSnapshot",
        "file": "domain/services/stp_policy.rs",
        "line": 350,
        "fields": [
          [
            "checks_performed",
            "u64"
          ],
          [
            "violations_prevented",
            "u64"
          ],
          [
            "new_cancelled",
            "u64"
          ],
          [
            "resting_cancelled",
            "u64"
          ],
          [
            "both_cancelled",
            "u64"
          ],
          [
            "avg_latency_ns",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderId",
        "file": "domain/entities/order.rs",
        "line": 15,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "Order",
        "file": "domain/entities/order.rs",
        "line": 85,
        "fields": [
          [
            "id",
            "OrderId"
          ],
          [
            "symbol",
            "Symbol"
          ],
          [
            "order_type",
            "OrderType"
          ],
          [
            "side",
            "OrderSide"
          ],
          [
            "price",
            "Option<Price>"
          ],
          [
            "stop_price",
            "Option<Price>"
          ],
          [
            "quantity",
            "Quantity"
          ],
          [
            "time_in_force",
            "TimeInForce"
          ],
          [
            "status",
            "OrderStatus"
          ],
          [
            "filled_quantity",
            "Quantity"
          ],
          [
            "average_fill_price",
            "Option<Price>"
          ],
          [
            "created_at",
            "DateTime<Utc>"
          ],
          [
            "updated_at",
            "DateTime<Utc>"
          ],
          [
            "stop_loss",
            "Option<Price>"
          ],
          [
            "take_profit",
            "Option<Price>"
          ],
          [
            "max_slippage_bps",
            "Option<u32>"
          ],
          [
            "exchange_order_id",
            "Option<String>"
          ],
          [
            "client_order_id",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OcoSemantics",
        "file": "domain/entities/oco_order.rs",
        "line": 25,
        "fields": [
          [
            "trigger_cancels_sibling",
            "bool"
          ],
          [
            "partial_fill_cancels_sibling",
            "bool"
          ],
          [
            "priority",
            "OcoPriority"
          ],
          [
            "allow_independent_amend",
            "bool"
          ],
          [
            "validation_cancels_both",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OcoOrder",
        "file": "domain/entities/oco_order.rs",
        "line": 75,
        "fields": [
          [
            "id",
            "String"
          ],
          [
            "limit_order",
            "Order"
          ],
          [
            "stop_order",
            "Order"
          ],
          [
            "semantics",
            "OcoSemantics"
          ],
          [
            "state",
            "Arc<RwLock<OcoState>>"
          ],
          [
            "created_at",
            "DateTime<Utc>"
          ],
          [
            "updated_at",
            "Arc<RwLock<DateTime<Utc>>>"
          ],
          [
            "triggered_leg",
            "Arc<RwLock<Option<OcoLeg>>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FillDistribution",
        "file": "domain/value_objects/statistical_distributions.rs",
        "line": 13,
        "fields": [
          [
            "lambda",
            "f64"
          ],
          [
            "beta_alpha",
            "f64"
          ],
          [
            "beta_beta",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "LatencyDistribution",
        "file": "domain/value_objects/statistical_distributions.rs",
        "line": 99,
        "fields": [
          [
            "mu",
            "f64"
          ],
          [
            "sigma",
            "f64"
          ],
          [
            "min_latency",
            "f64"
          ],
          [
            "max_latency",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SlippageDistribution",
        "file": "domain/value_objects/statistical_distributions.rs",
        "line": 175,
        "fields": [
          [
            "mean_bps",
            "f64"
          ],
          [
            "std_bps",
            "f64"
          ],
          [
            "skew",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ArrivalRateDistribution",
        "file": "domain/value_objects/statistical_distributions.rs",
        "line": 222,
        "fields": [
          [
            "base_rate",
            "f64"
          ],
          [
            "peak_multiplier",
            "f64"
          ],
          [
            "off_peak_multiplier",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketStatistics",
        "file": "domain/value_objects/statistical_distributions.rs",
        "line": 258,
        "fields": [
          [
            "fill_dist",
            "FillDistribution"
          ],
          [
            "latency_dist",
            "LatencyDistribution"
          ],
          [
            "slippage_dist",
            "SlippageDistribution"
          ],
          [
            "arrival_dist",
            "ArrivalRateDistribution"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Price",
        "file": "domain/value_objects/price.rs",
        "line": 15,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "Symbol",
        "file": "domain/value_objects/symbol.rs",
        "line": 15,
        "fields": [
          [
            "base",
            "String"
          ],
          [
            "quote",
            "String"
          ],
          [
            "raw",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PriceFilter",
        "file": "domain/value_objects/validation_filters.rs",
        "line": 12,
        "fields": [
          [
            "min_price",
            "f64"
          ],
          [
            "max_price",
            "f64"
          ],
          [
            "tick_size",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "LotSizeFilter",
        "file": "domain/value_objects/validation_filters.rs",
        "line": 64,
        "fields": [
          [
            "min_qty",
            "f64"
          ],
          [
            "max_qty",
            "f64"
          ],
          [
            "step_size",
            "f64"
          ],
          [
            "market_min_qty",
            "Option<f64>"
          ],
          [
            "market_max_qty",
            "Option<f64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "NotionalFilter",
        "file": "domain/value_objects/validation_filters.rs",
        "line": 134,
        "fields": [
          [
            "min_notional",
            "f64"
          ],
          [
            "apply_to_market",
            "bool"
          ],
          [
            "avg_price_minutes",
            "u32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PercentPriceFilter",
        "file": "domain/value_objects/validation_filters.rs",
        "line": 175,
        "fields": [
          [
            "up_percent",
            "f64"
          ],
          [
            "down_percent",
            "f64"
          ],
          [
            "avg_price_minutes",
            "u32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "IcebergFilter",
        "file": "domain/value_objects/validation_filters.rs",
        "line": 226,
        "fields": [
          [
            "max_parts",
            "u32"
          ],
          [
            "min_qty_per_part",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MaxOrdersFilter",
        "file": "domain/value_objects/validation_filters.rs",
        "line": 235,
        "fields": [
          [
            "max_open_orders",
            "u32"
          ],
          [
            "max_algo_orders",
            "u32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ValidationFilters",
        "file": "domain/value_objects/validation_filters.rs",
        "line": 244,
        "fields": [
          [
            "symbol",
            "Symbol"
          ],
          [
            "price_filter",
            "PriceFilter"
          ],
          [
            "lot_size_filter",
            "LotSizeFilter"
          ],
          [
            "notional_filter",
            "NotionalFilter"
          ],
          [
            "percent_price_filter",
            "Option<PercentPriceFilter>"
          ],
          [
            "iceberg_filter",
            "Option<IcebergFilter>"
          ],
          [
            "max_orders_filter",
            "MaxOrdersFilter"
          ],
          [
            "is_trading_enabled",
            "bool"
          ],
          [
            "is_spot_trading_allowed",
            "bool"
          ],
          [
            "is_margin_trading_allowed",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Quantity",
        "file": "domain/value_objects/quantity.rs",
        "line": 15,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "Money",
        "file": "domain/value_objects/decimal_money.rs",
        "line": 16,
        "fields": [
          [
            "amount",
            "Decimal"
          ],
          [
            "currency",
            "Currency"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Price",
        "file": "domain/value_objects/decimal_money.rs",
        "line": 184,
        "fields": [
          [
            "value",
            "Decimal"
          ],
          [
            "pair",
            "TradingPair"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TradingPair",
        "file": "domain/value_objects/decimal_money.rs",
        "line": 190,
        "fields": [
          [
            "base",
            "Currency"
          ],
          [
            "quote",
            "Currency"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Quantity",
        "file": "domain/value_objects/decimal_money.rs",
        "line": 237,
        "fields": [
          [
            "value",
            "Decimal"
          ],
          [
            "currency",
            "Currency"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Portfolio",
        "file": "domain/value_objects/decimal_money.rs",
        "line": 284,
        "fields": [
          [
            "balances",
            "HashMap<Currency"
          ],
          [
            "base_currency",
            "Currency"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketImpact",
        "file": "domain/value_objects/market_impact.rs",
        "line": 79,
        "fields": [
          [
            "model",
            "MarketImpactModel"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketDepth",
        "file": "domain/value_objects/market_impact.rs",
        "line": 249,
        "fields": [
          [
            "bids",
            "Vec<(f64"
          ],
          [
            "asks",
            "Vec<(f64"
          ],
          [
            "timestamp",
            "i64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Fee",
        "file": "domain/value_objects/fee.rs",
        "line": 11,
        "fields": [
          [
            "amount",
            "f64"
          ],
          [
            "currency",
            "String"
          ],
          [
            "is_rebate",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FeeTier",
        "file": "domain/value_objects/fee.rs",
        "line": 91,
        "fields": [
          [
            "min_volume",
            "f64"
          ],
          [
            "maker_fee_bps",
            "i32"
          ],
          [
            "taker_fee_bps",
            "i32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FeeModel",
        "file": "domain/value_objects/fee.rs",
        "line": 102,
        "fields": [
          [
            "maker_fee_bps",
            "i32"
          ],
          [
            "taker_fee_bps",
            "i32"
          ],
          [
            "min_fee",
            "Option<f64>"
          ],
          [
            "max_fee",
            "Option<f64>"
          ],
          [
            "tiers",
            "Vec<FeeTier>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FillWithFee",
        "file": "domain/value_objects/fee.rs",
        "line": 260,
        "fields": [
          [
            "quantity",
            "f64"
          ],
          [
            "price",
            "f64"
          ],
          [
            "is_maker",
            "bool"
          ],
          [
            "fee",
            "Fee"
          ],
          [
            "timestamp",
            "i64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TimestampConfig",
        "file": "domain/value_objects/timestamp_validator.rs",
        "line": 13,
        "fields": [
          [
            "max_clock_drift",
            "Duration"
          ],
          [
            "max_recv_window",
            "Duration"
          ],
          [
            "enforce_ordering",
            "bool"
          ],
          [
            "network_grace_period",
            "Duration"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TimestampValidator",
        "file": "domain/value_objects/timestamp_validator.rs",
        "line": 58,
        "fields": [
          [
            "server_time",
            "Arc<AtomicI64>"
          ],
          [
            "last_timestamp",
            "Arc<AtomicI64>"
          ],
          [
            "config",
            "TimestampConfig"
          ],
          [
            "stats",
            "Arc<ValidationStats>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ValidationStats",
        "file": "domain/value_objects/timestamp_validator.rs",
        "line": 228,
        "fields": [
          [
            "valid_timestamps",
            "u64"
          ],
          [
            "expired_timestamps",
            "u64"
          ],
          [
            "future_timestamps",
            "u64"
          ],
          [
            "clock_drift_errors",
            "u64"
          ],
          [
            "ordering_violations",
            "u64"
          ],
          [
            "signature_failures",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ServerTimeSync",
        "file": "domain/value_objects/timestamp_validator.rs",
        "line": 268,
        "fields": [
          [
            "validator",
            "Arc<TimestampValidator>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PlaceOrderCommand",
        "file": "application/commands/place_order_command.rs",
        "line": 35,
        "fields": [
          [
            "order",
            "Order"
          ],
          [
            "exchange",
            "Arc<dyn ExchangePort>"
          ],
          [
            "repository",
            "Arc<dyn OrderRepository>"
          ],
          [
            "risk_checker",
            "Arc<dyn RiskChecker>"
          ],
          [
            "event_publisher",
            "Arc<dyn EventPublisher>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CancelOrderCommand",
        "file": "application/commands/place_order_command.rs",
        "line": 173,
        "fields": [
          [
            "order_id",
            "OrderId"
          ],
          [
            "reason",
            "String"
          ],
          [
            "exchange",
            "Arc<dyn ExchangePort>"
          ],
          [
            "repository",
            "Arc<dyn OrderRepository>"
          ],
          [
            "event_publisher",
            "Arc<dyn EventPublisher>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "BatchOrderCommand",
        "file": "application/commands/place_order_command.rs",
        "line": 251,
        "fields": [
          [
            "orders",
            "Vec<Order>"
          ],
          [
            "stop_on_error",
            "bool"
          ],
          [
            "exchange",
            "Arc<dyn ExchangePort>"
          ],
          [
            "repository",
            "Arc<dyn OrderRepository>"
          ],
          [
            "risk_checker",
            "Arc<dyn RiskChecker>"
          ],
          [
            "event_publisher",
            "Arc<dyn EventPublisher>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MetricsState",
        "file": "src/metrics_server.rs",
        "line": 13,
        "fields": [
          [
            "start_time",
            "std::time::Instant"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "CpuAffinity",
        "file": "src/runtime_config.rs",
        "line": 11,
        "fields": [
          [
            "cores",
            "Vec<CoreId>"
          ],
          [
            "main_thread_core",
            "Option<CoreId>"
          ],
          [
            "worker_cores",
            "Vec<CoreId>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OptimizedRuntime",
        "file": "src/runtime_config.rs",
        "line": 75,
        "fields": [
          [
            "runtime",
            "Runtime"
          ],
          [
            "cpu_affinity",
            "Arc<CpuAffinity>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SystemOptimizations",
        "file": "src/runtime_config.rs",
        "line": 154,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "Timer",
        "file": "src/observability/metrics.rs",
        "line": 193,
        "fields": [
          [
            "start",
            "Instant"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderStatistics",
        "file": "ports/outbound/repository_port.rs",
        "line": 79,
        "fields": [
          [
            "total_orders",
            "usize"
          ],
          [
            "filled_orders",
            "usize"
          ],
          [
            "cancelled_orders",
            "usize"
          ],
          [
            "rejected_orders",
            "usize"
          ],
          [
            "total_volume",
            "f64"
          ],
          [
            "average_fill_time",
            "Option<Duration>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderBookLevel",
        "file": "ports/outbound/exchange_port.rs",
        "line": 14,
        "fields": [
          [
            "price",
            "Price"
          ],
          [
            "quantity",
            "Quantity"
          ],
          [
            "order_count",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderBook",
        "file": "ports/outbound/exchange_port.rs",
        "line": 22,
        "fields": [
          [
            "symbol",
            "Symbol"
          ],
          [
            "bids",
            "Vec<OrderBookLevel>"
          ],
          [
            "asks",
            "Vec<OrderBookLevel>"
          ],
          [
            "timestamp",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Trade",
        "file": "ports/outbound/exchange_port.rs",
        "line": 31,
        "fields": [
          [
            "symbol",
            "Symbol"
          ],
          [
            "price",
            "Price"
          ],
          [
            "quantity",
            "Quantity"
          ],
          [
            "is_buyer_maker",
            "bool"
          ],
          [
            "timestamp",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Balance",
        "file": "ports/outbound/exchange_port.rs",
        "line": 41,
        "fields": [
          [
            "asset",
            "String"
          ],
          [
            "free",
            "Quantity"
          ],
          [
            "locked",
            "Quantity"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ExchangeCapabilities",
        "file": "ports/outbound/exchange_port.rs",
        "line": 49,
        "fields": [
          [
            "supports_oco",
            "bool"
          ],
          [
            "supports_reduce_only",
            "bool"
          ],
          [
            "supports_post_only",
            "bool"
          ],
          [
            "supports_iceberg",
            "bool"
          ],
          [
            "supports_trailing_stop",
            "bool"
          ],
          [
            "max_orders_per_second",
            "u32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TrackingAllocator",
        "file": "tests/performance_validation.rs",
        "line": 54,
        "fields": [
          [
            "allocations",
            "AtomicUsize"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "TestConfig",
        "file": "tests/integration_test.rs",
        "line": 19,
        "fields": [
          [
            "db_url",
            "String"
          ],
          [
            "db_pool_size",
            "u32"
          ],
          [
            "api_port",
            "u16"
          ],
          [
            "api_timeout",
            "Duration"
          ],
          [
            "mock_exchange_latency",
            "Duration"
          ],
          [
            "mock_exchange_fee",
            "Decimal"
          ],
          [
            "max_position_size",
            "Decimal"
          ],
          [
            "max_leverage",
            "u32"
          ],
          [
            "max_order_latency_ms",
            "u64"
          ],
          [
            "max_tick_processing_ns",
            "u64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "MockTradingService",
        "file": "tests/integration_test.rs",
        "line": 489,
        "fields": [
          [
            "orders",
            "Arc<RwLock<Vec<domain::entities::Order>>>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "MockRiskService",
        "file": "tests/integration_test.rs",
        "line": 510,
        "fields": [
          [
            "max_position_size",
            "Decimal"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "MockMarketDataService",
        "file": "tests/integration_test.rs",
        "line": 522,
        "fields": [],
        "visibility": "private"
      },
      {
        "name": "ApiMetrics",
        "file": "tests/integration_test.rs",
        "line": 532,
        "fields": [],
        "visibility": "private"
      },
      {
        "name": "TestConfig",
        "file": "tests/integration_tests.rs",
        "line": 23,
        "fields": [
          [
            "test_mode",
            "bool"
          ],
          [
            "use_mock_exchange",
            "bool"
          ],
          [
            "max_test_duration",
            "Duration"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "PlaceOrderRequest",
        "file": "dto/request/order_dto.rs",
        "line": 15,
        "fields": [
          [
            "symbol",
            "String"
          ],
          [
            "order_type",
            "String"
          ],
          [
            "side",
            "String"
          ],
          [
            "quantity",
            "f64"
          ],
          [
            "price",
            "Option<f64>"
          ],
          [
            "time_in_force",
            "Option<String>"
          ],
          [
            "stop_loss",
            "Option<f64>"
          ],
          [
            "take_profit",
            "Option<f64>"
          ],
          [
            "max_slippage_bps",
            "Option<u32>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CancelOrderRequest",
        "file": "dto/request/order_dto.rs",
        "line": 118,
        "fields": [
          [
            "order_id",
            "String"
          ],
          [
            "reason",
            "Option<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ModifyOrderRequest",
        "file": "dto/request/order_dto.rs",
        "line": 129,
        "fields": [
          [
            "order_id",
            "String"
          ],
          [
            "new_price",
            "Option<f64>"
          ],
          [
            "new_quantity",
            "Option<f64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "BatchOrderRequest",
        "file": "dto/request/order_dto.rs",
        "line": 143,
        "fields": [
          [
            "orders",
            "Vec<PlaceOrderRequest>"
          ],
          [
            "stop_on_error",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OcoOrderRequest",
        "file": "dto/request/order_dto.rs",
        "line": 153,
        "fields": [
          [
            "symbol",
            "String"
          ],
          [
            "side",
            "String"
          ],
          [
            "quantity",
            "f64"
          ],
          [
            "limit_price",
            "f64"
          ],
          [
            "stop_price",
            "f64"
          ],
          [
            "stop_limit_price",
            "Option<f64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderResponse",
        "file": "dto/response/order_response.rs",
        "line": 13,
        "fields": [
          [
            "order_id",
            "String"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "order_type",
            "String"
          ],
          [
            "side",
            "String"
          ],
          [
            "status",
            "String"
          ],
          [
            "quantity",
            "f64"
          ],
          [
            "filled_quantity",
            "f64"
          ],
          [
            "remaining_quantity",
            "f64"
          ],
          [
            "price",
            "Option<f64>"
          ],
          [
            "average_fill_price",
            "Option<f64>"
          ],
          [
            "stop_loss",
            "Option<f64>"
          ],
          [
            "take_profit",
            "Option<f64>"
          ],
          [
            "created_at",
            "DateTime<Utc>"
          ],
          [
            "updated_at",
            "DateTime<Utc>"
          ],
          [
            "exchange_order_id",
            "Option<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderSummary",
        "file": "dto/response/order_response.rs",
        "line": 62,
        "fields": [
          [
            "order_id",
            "String"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "side",
            "String"
          ],
          [
            "quantity",
            "f64"
          ],
          [
            "price",
            "Option<f64>"
          ],
          [
            "status",
            "String"
          ],
          [
            "created_at",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ExecutionReport",
        "file": "dto/response/order_response.rs",
        "line": 89,
        "fields": [
          [
            "order_id",
            "String"
          ],
          [
            "execution_id",
            "String"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "side",
            "String"
          ],
          [
            "execution_type",
            "String"
          ],
          [
            "order_status",
            "String"
          ],
          [
            "quantity",
            "f64"
          ],
          [
            "price",
            "f64"
          ],
          [
            "commission",
            "f64"
          ],
          [
            "commission_asset",
            "String"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PlaceOrderResponse",
        "file": "dto/response/order_response.rs",
        "line": 106,
        "fields": [
          [
            "success",
            "bool"
          ],
          [
            "order_id",
            "String"
          ],
          [
            "exchange_order_id",
            "Option<String>"
          ],
          [
            "message",
            "Option<String>"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CancelOrderResponse",
        "file": "dto/response/order_response.rs",
        "line": 139,
        "fields": [
          [
            "success",
            "bool"
          ],
          [
            "order_id",
            "String"
          ],
          [
            "message",
            "Option<String>"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "BatchOrderResponse",
        "file": "dto/response/order_response.rs",
        "line": 149,
        "fields": [
          [
            "total_orders",
            "usize"
          ],
          [
            "successful_orders",
            "usize"
          ],
          [
            "failed_orders",
            "usize"
          ],
          [
            "results",
            "Vec<PlaceOrderResponse>"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderStatisticsResponse",
        "file": "dto/response/order_response.rs",
        "line": 160,
        "fields": [
          [
            "total_orders",
            "usize"
          ],
          [
            "filled_orders",
            "usize"
          ],
          [
            "cancelled_orders",
            "usize"
          ],
          [
            "rejected_orders",
            "usize"
          ],
          [
            "active_orders",
            "usize"
          ],
          [
            "total_volume",
            "f64"
          ],
          [
            "win_rate",
            "f64"
          ],
          [
            "average_profit",
            "f64"
          ],
          [
            "period_start",
            "DateTime<Utc>"
          ],
          [
            "period_end",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ErrorResponse",
        "file": "dto/response/order_response.rs",
        "line": 176,
        "fields": [
          [
            "error_code",
            "String"
          ],
          [
            "message",
            "String"
          ],
          [
            "details",
            "Option<String>"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderDto",
        "file": "dto/database/order_dto.rs",
        "line": 15,
        "fields": [
          [
            "id",
            "String"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "side",
            "String"
          ],
          [
            "order_type",
            "String"
          ],
          [
            "quantity",
            "f64"
          ],
          [
            "price",
            "Option<f64>"
          ],
          [
            "status",
            "String"
          ],
          [
            "client_order_id",
            "Option<String>"
          ],
          [
            "exchange_order_id",
            "Option<String>"
          ],
          [
            "filled_quantity",
            "f64"
          ],
          [
            "average_fill_price",
            "Option<f64>"
          ],
          [
            "created_at",
            "DateTime<Utc>"
          ],
          [
            "updated_at",
            "DateTime<Utc>"
          ],
          [
            "metadata",
            "Option<serde_json::Value>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FillDto",
        "file": "dto/database/order_dto.rs",
        "line": 64,
        "fields": [
          [
            "id",
            "String"
          ],
          [
            "order_id",
            "String"
          ],
          [
            "exchange_fill_id",
            "String"
          ],
          [
            "price",
            "f64"
          ],
          [
            "quantity",
            "f64"
          ],
          [
            "fee",
            "f64"
          ],
          [
            "fee_asset",
            "String"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "is_maker",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PositionDto",
        "file": "dto/database/order_dto.rs",
        "line": 78,
        "fields": [
          [
            "id",
            "String"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "side",
            "String"
          ],
          [
            "quantity",
            "f64"
          ],
          [
            "entry_price",
            "f64"
          ],
          [
            "current_price",
            "f64"
          ],
          [
            "realized_pnl",
            "f64"
          ],
          [
            "unrealized_pnl",
            "f64"
          ],
          [
            "opened_at",
            "DateTime<Utc>"
          ],
          [
            "updated_at",
            "DateTime<Utc>"
          ],
          [
            "metadata",
            "Option<serde_json::Value>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TradeDto",
        "file": "dto/database/order_dto.rs",
        "line": 94,
        "fields": [
          [
            "id",
            "String"
          ],
          [
            "order_id",
            "String"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "side",
            "String"
          ],
          [
            "price",
            "f64"
          ],
          [
            "quantity",
            "f64"
          ],
          [
            "fee",
            "f64"
          ],
          [
            "fee_asset",
            "String"
          ],
          [
            "pnl",
            "Option<f64>"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "BalanceDto",
        "file": "dto/database/order_dto.rs",
        "line": 109,
        "fields": [
          [
            "asset",
            "String"
          ],
          [
            "free",
            "f64"
          ],
          [
            "locked",
            "f64"
          ],
          [
            "total",
            "f64"
          ],
          [
            "updated_at",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "AccountDto",
        "file": "dto/database/order_dto.rs",
        "line": 119,
        "fields": [
          [
            "id",
            "String"
          ],
          [
            "exchange",
            "String"
          ],
          [
            "account_type",
            "String"
          ],
          [
            "status",
            "String"
          ],
          [
            "created_at",
            "DateTime<Utc>"
          ],
          [
            "updated_at",
            "DateTime<Utc>"
          ],
          [
            "metadata",
            "Option<serde_json::Value>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RiskMetricsDto",
        "file": "dto/database/order_dto.rs",
        "line": 131,
        "fields": [
          [
            "id",
            "String"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "total_exposure",
            "f64"
          ],
          [
            "var_95",
            "f64"
          ],
          [
            "var_99",
            "f64"
          ],
          [
            "expected_shortfall",
            "f64"
          ],
          [
            "sharpe_ratio",
            "f64"
          ],
          [
            "sortino_ratio",
            "f64"
          ],
          [
            "max_drawdown",
            "f64"
          ],
          [
            "correlation_matrix",
            "serde_json::Value"
          ],
          [
            "portfolio_heat",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ModelDto",
        "file": "dto/database/order_dto.rs",
        "line": 147,
        "fields": [
          [
            "id",
            "String"
          ],
          [
            "name",
            "String"
          ],
          [
            "version",
            "String"
          ],
          [
            "model_type",
            "String"
          ],
          [
            "parameters",
            "serde_json::Value"
          ],
          [
            "metrics",
            "serde_json::Value"
          ],
          [
            "training_data_hash",
            "String"
          ],
          [
            "created_at",
            "DateTime<Utc>"
          ],
          [
            "is_active",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SignalDto",
        "file": "dto/database/order_dto.rs",
        "line": 161,
        "fields": [
          [
            "id",
            "String"
          ],
          [
            "source",
            "String"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "signal_type",
            "String"
          ],
          [
            "strength",
            "f64"
          ],
          [
            "confidence",
            "f64"
          ],
          [
            "metadata",
            "serde_json::Value"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "expires_at",
            "Option<DateTime<Utc>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "AuditLogDto",
        "file": "dto/database/order_dto.rs",
        "line": 175,
        "fields": [
          [
            "id",
            "String"
          ],
          [
            "entity_type",
            "String"
          ],
          [
            "entity_id",
            "String"
          ],
          [
            "action",
            "String"
          ],
          [
            "actor",
            "String"
          ],
          [
            "changes",
            "serde_json::Value"
          ],
          [
            "metadata",
            "serde_json::Value"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MacroEconomyCorrelationEngine",
        "file": "crates/data_intelligence/src/macro_economy_enhanced.rs",
        "line": 16,
        "fields": [
          [
            "macro_data_buffer",
            "Arc<RwLock<MacroDataBuffer>>"
          ],
          [
            "crypto_data_buffer",
            "Arc<RwLock<CryptoDataBuffer>>"
          ],
          [
            "correlation_matrix",
            "Arc<RwLock<DMatrix<f64>>>"
          ],
          [
            "rolling_correlations",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "regime_detector",
            "Arc<RwLock<MacroRegimeDetector>>"
          ],
          [
            "lead_lag_analyzer",
            "Arc<RwLock<LeadLagAnalyzer>>"
          ],
          [
            "cointegration_tester",
            "Arc<RwLock<CointegrationTester>>"
          ],
          [
            "config",
            "MacroCorrelationConfig"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MacroCorrelationConfig",
        "file": "crates/data_intelligence/src/macro_economy_enhanced.rs",
        "line": 39,
        "fields": [
          [
            "correlation_window",
            "usize"
          ],
          [
            "min_correlation_threshold",
            "f64"
          ],
          [
            "regime_change_threshold",
            "f64"
          ],
          [
            "lead_lag_max_days",
            "usize"
          ],
          [
            "update_frequency_minutes",
            "u32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MacroDataPoint",
        "file": "crates/data_intelligence/src/macro_economy_enhanced.rs",
        "line": 61,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "fed_funds_rate",
            "f64"
          ],
          [
            "ecb_rate",
            "f64"
          ],
          [
            "boj_rate",
            "f64"
          ],
          [
            "pboc_rate",
            "f64"
          ],
          [
            "real_rates_10y",
            "f64"
          ],
          [
            "us_2y_yield",
            "f64"
          ],
          [
            "us_10y_yield",
            "f64"
          ],
          [
            "us_30y_yield",
            "f64"
          ],
          [
            "yield_curve_slope",
            "f64"
          ],
          [
            "term_premium",
            "f64"
          ],
          [
            "dxy_index",
            "f64"
          ],
          [
            "eur_usd",
            "f64"
          ],
          [
            "gbp_usd",
            "f64"
          ],
          [
            "usd_jpy",
            "f64"
          ],
          [
            "usd_cny",
            "f64"
          ],
          [
            "cpi_yoy",
            "f64"
          ],
          [
            "core_cpi_yoy",
            "f64"
          ],
          [
            "pce_yoy",
            "f64"
          ],
          [
            "inflation_expectations_5y5y",
            "f64"
          ],
          [
            "gdp_growth_yoy",
            "f64"
          ],
          [
            "unemployment_rate",
            "f64"
          ],
          [
            "ism_manufacturing",
            "f64"
          ],
          [
            "ism_services",
            "f64"
          ],
          [
            "vix_index",
            "f64"
          ],
          [
            "move_index",
            "f64"
          ],
          [
            "credit_spreads_ig",
            "f64"
          ],
          [
            "credit_spreads_hy",
            "f64"
          ],
          [
            "ted_spread",
            "f64"
          ],
          [
            "gold_price",
            "Decimal"
          ],
          [
            "silver_price",
            "Decimal"
          ],
          [
            "oil_wti",
            "Decimal"
          ],
          [
            "oil_brent",
            "Decimal"
          ],
          [
            "copper_price",
            "Decimal"
          ],
          [
            "baltic_dry_index",
            "f64"
          ],
          [
            "sp500_index",
            "f64"
          ],
          [
            "nasdaq_index",
            "f64"
          ],
          [
            "russell_2000",
            "f64"
          ],
          [
            "vix_futures_curve",
            "f64"
          ],
          [
            "equity_risk_premium",
            "f64"
          ],
          [
            "m2_growth_yoy",
            "f64"
          ],
          [
            "reverse_repo_volume",
            "f64"
          ],
          [
            "fed_balance_sheet",
            "f64"
          ],
          [
            "global_liquidity_index",
            "f64"
          ],
          [
            "geopolitical_risk_index",
            "f64"
          ],
          [
            "economic_policy_uncertainty",
            "f64"
          ],
          [
            "consumer_confidence",
            "f64"
          ],
          [
            "ceo_confidence",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CryptoDataPoint",
        "file": "crates/data_intelligence/src/macro_economy_enhanced.rs",
        "line": 132,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "btc_price",
            "Decimal"
          ],
          [
            "eth_price",
            "Decimal"
          ],
          [
            "total_market_cap",
            "Decimal"
          ],
          [
            "btc_dominance",
            "f64"
          ],
          [
            "alt_season_index",
            "f64"
          ],
          [
            "defi_tvl",
            "Decimal"
          ],
          [
            "stablecoin_market_cap",
            "Decimal"
          ],
          [
            "stablecoin_flows",
            "Decimal"
          ],
          [
            "btc_hash_rate",
            "f64"
          ],
          [
            "eth_gas_price",
            "f64"
          ],
          [
            "active_addresses",
            "u64"
          ],
          [
            "exchange_reserves_btc",
            "Decimal"
          ],
          [
            "exchange_reserves_eth",
            "Decimal"
          ],
          [
            "btc_futures_volume",
            "Decimal"
          ],
          [
            "btc_options_volume",
            "Decimal"
          ],
          [
            "funding_rate_perp",
            "f64"
          ],
          [
            "futures_basis",
            "f64"
          ],
          [
            "mining_difficulty",
            "f64"
          ],
          [
            "miner_revenue",
            "Decimal"
          ],
          [
            "hash_price",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MacroDataBuffer",
        "file": "crates/data_intelligence/src/macro_economy_enhanced.rs",
        "line": 167,
        "fields": [
          [
            "data",
            "VecDeque<MacroDataPoint>"
          ],
          [
            "max_size",
            "usize"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "CryptoDataBuffer",
        "file": "crates/data_intelligence/src/macro_economy_enhanced.rs",
        "line": 173,
        "fields": [
          [
            "data",
            "VecDeque<CryptoDataPoint>"
          ],
          [
            "max_size",
            "usize"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "MacroRegimeDetector",
        "file": "crates/data_intelligence/src/macro_economy_enhanced.rs",
        "line": 179,
        "fields": [
          [
            "current_regime",
            "MacroRegime"
          ],
          [
            "regime_probabilities",
            "HashMap<MacroRegime"
          ],
          [
            "transition_matrix",
            "DMatrix<f64>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "LeadLagAnalyzer",
        "file": "crates/data_intelligence/src/macro_economy_enhanced.rs",
        "line": 197,
        "fields": [
          [
            "lead_lag_matrix",
            "HashMap<(String"
          ],
          [
            "granger_causality",
            "HashMap<(String"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "CointegrationTester",
        "file": "crates/data_intelligence/src/macro_economy_enhanced.rs",
        "line": 203,
        "fields": [
          [
            "cointegrated_pairs",
            "Vec<(String"
          ],
          [
            "error_correction_models",
            "HashMap<(String"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ECMModel",
        "file": "crates/data_intelligence/src/macro_economy_enhanced.rs",
        "line": 209,
        "fields": [
          [
            "alpha",
            "f64"
          ],
          [
            "beta",
            "f64"
          ],
          [
            "residuals",
            "VecDeque<f64>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "CorrelationAnalysis",
        "file": "crates/data_intelligence/src/macro_economy_enhanced.rs",
        "line": 884,
        "fields": [
          [
            "btc_sp500",
            "f64"
          ],
          [
            "btc_dxy",
            "f64"
          ],
          [
            "btc_gold",
            "f64"
          ],
          [
            "btc_vix",
            "f64"
          ],
          [
            "btc_yields",
            "f64"
          ],
          [
            "correlation_stability",
            "f64"
          ],
          [
            "regime",
            "String"
          ],
          [
            "predictive_signals",
            "Vec<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MacroRegimeAnalysis",
        "file": "crates/data_intelligence/src/macro_economy_enhanced.rs",
        "line": 896,
        "fields": [
          [
            "current_regime",
            "MacroRegime"
          ],
          [
            "regime_confidence",
            "f64"
          ],
          [
            "growth_score",
            "f64"
          ],
          [
            "inflation_score",
            "f64"
          ],
          [
            "policy_score",
            "f64"
          ],
          [
            "risk_score",
            "f64"
          ],
          [
            "persistence_probability",
            "f64"
          ],
          [
            "change_catalysts",
            "Vec<String>"
          ],
          [
            "crypto_implications",
            "Vec<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "LeadLagAnalysis",
        "file": "crates/data_intelligence/src/macro_economy_enhanced.rs",
        "line": 915,
        "fields": [
          [
            "relationships",
            "Vec<LeadLagRelationship>"
          ],
          [
            "optimal_prediction_horizon",
            "usize"
          ],
          [
            "actionable_signals",
            "Vec<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "LeadLagRelationship",
        "file": "crates/data_intelligence/src/macro_economy_enhanced.rs",
        "line": 922,
        "fields": [
          [
            "leader",
            "String"
          ],
          [
            "follower",
            "String"
          ],
          [
            "lag_days",
            "i32"
          ],
          [
            "correlation",
            "f64"
          ],
          [
            "granger_causality_pvalue",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CointegrationAnalysis",
        "file": "crates/data_intelligence/src/macro_economy_enhanced.rs",
        "line": 931,
        "fields": [
          [
            "cointegrated_pairs",
            "Vec<CointegrationResult>"
          ],
          [
            "trading_signals",
            "Vec<String>"
          ],
          [
            "mean_reversion_opportunities",
            "Vec<MeanReversionTrade>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CointegrationResult",
        "file": "crates/data_intelligence/src/macro_economy_enhanced.rs",
        "line": 938,
        "fields": [
          [
            "asset1",
            "String"
          ],
          [
            "asset2",
            "String"
          ],
          [
            "test_statistic",
            "f64"
          ],
          [
            "p_value",
            "f64"
          ],
          [
            "cointegrating_vector",
            "Vec<f64>"
          ],
          [
            "half_life_days",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MeanReversionTrade",
        "file": "crates/data_intelligence/src/macro_economy_enhanced.rs",
        "line": 948,
        "fields": [
          [
            "pair",
            "(String"
          ],
          [
            "current_zscore",
            "f64"
          ],
          [
            "entry_threshold",
            "f64"
          ],
          [
            "exit_threshold",
            "f64"
          ],
          [
            "expected_profit",
            "f64"
          ],
          [
            "time_to_reversion",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MacroTradingSignals",
        "file": "crates/data_intelligence/src/macro_economy_enhanced.rs",
        "line": 958,
        "fields": [
          [
            "primary_signal",
            "TradingDirection"
          ],
          [
            "signal_strength",
            "f64"
          ],
          [
            "confidence",
            "f64"
          ],
          [
            "regime_based_position_size",
            "f64"
          ],
          [
            "correlation_hedges",
            "Vec<String>"
          ],
          [
            "macro_catalysts",
            "Vec<String>"
          ],
          [
            "risk_warnings",
            "Vec<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OptionsFlowConfig",
        "file": "crates/data_intelligence/src/options_flow.rs",
        "line": 39,
        "fields": [
          [
            "deribit_api_key",
            "Option<String>"
          ],
          [
            "deribit_api_secret",
            "Option<String>"
          ],
          [
            "cme_enabled",
            "bool"
          ],
          [
            "min_volume",
            "u32"
          ],
          [
            "min_open_interest",
            "u32"
          ],
          [
            "track_block_trades",
            "bool"
          ],
          [
            "calculate_greeks",
            "bool"
          ],
          [
            "gamma_exposure_tracking",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OptionContract",
        "file": "crates/data_intelligence/src/options_flow.rs",
        "line": 67,
        "fields": [
          [
            "symbol",
            "String"
          ],
          [
            "underlying",
            "String"
          ],
          [
            "strike",
            "Decimal"
          ],
          [
            "expiry",
            "DateTime<Utc>"
          ],
          [
            "option_type",
            "OptionType"
          ],
          [
            "exchange",
            "OptionsExchange"
          ],
          [
            "bid",
            "Decimal"
          ],
          [
            "ask",
            "Decimal"
          ],
          [
            "last",
            "Decimal"
          ],
          [
            "volume_24h",
            "u32"
          ],
          [
            "open_interest",
            "u32"
          ],
          [
            "underlying_price",
            "Decimal"
          ],
          [
            "delta",
            "Option<f64>"
          ],
          [
            "gamma",
            "Option<f64>"
          ],
          [
            "theta",
            "Option<f64>"
          ],
          [
            "vega",
            "Option<f64>"
          ],
          [
            "implied_volatility",
            "Option<f64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OptionsFlow",
        "file": "crates/data_intelligence/src/options_flow.rs",
        "line": 108,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "contract",
            "OptionContract"
          ],
          [
            "trade_type",
            "TradeType"
          ],
          [
            "size",
            "u32"
          ],
          [
            "price",
            "Decimal"
          ],
          [
            "is_block_trade",
            "bool"
          ],
          [
            "aggressor_side",
            "Option<Side>"
          ],
          [
            "sentiment",
            "FlowSentiment"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "GreeksCalculator",
        "file": "crates/data_intelligence/src/options_flow.rs",
        "line": 142,
        "fields": [
          [
            "risk_free_rate",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Greeks",
        "file": "crates/data_intelligence/src/options_flow.rs",
        "line": 275,
        "fields": [
          [
            "delta",
            "f64"
          ],
          [
            "gamma",
            "f64"
          ],
          [
            "theta",
            "f64"
          ],
          [
            "vega",
            "f64"
          ],
          [
            "rho",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "GammaExposureCalculator",
        "file": "crates/data_intelligence/src/options_flow.rs",
        "line": 284,
        "fields": [
          [
            "spot_range_percent",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "GammaExposureProfile",
        "file": "crates/data_intelligence/src/options_flow.rs",
        "line": 390,
        "fields": [
          [
            "total_gex",
            "f64"
          ],
          [
            "gex_by_strike",
            "BTreeMap<Decimal"
          ],
          [
            "max_pain_strike",
            "Option<Decimal>"
          ],
          [
            "zero_gamma_level",
            "Option<Decimal>"
          ],
          [
            "spot_price",
            "Decimal"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "VolatilitySurfaceAnalyzer",
        "file": "crates/data_intelligence/src/options_flow.rs",
        "line": 399,
        "fields": [
          [
            "min_volume_for_surface",
            "u32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "VolatilitySurface",
        "file": "crates/data_intelligence/src/options_flow.rs",
        "line": 460,
        "fields": [
          [
            "surface",
            "HashMap<DateTime<Utc>"
          ],
          [
            "skew",
            "Option<f64>"
          ],
          [
            "term_structure",
            "Vec<(u32"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OptionsFlowMonitor",
        "file": "crates/data_intelligence/src/options_flow.rs",
        "line": 468,
        "fields": [
          [
            "config",
            "OptionsFlowConfig"
          ],
          [
            "http_client",
            "Client"
          ],
          [
            "greeks_calculator",
            "Arc<GreeksCalculator>"
          ],
          [
            "gex_calculator",
            "Arc<GammaExposureCalculator>"
          ],
          [
            "vol_surface_analyzer",
            "Arc<VolatilitySurfaceAnalyzer>"
          ],
          [
            "options_chain",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "recent_flows",
            "Arc<RwLock<VecDeque<OptionsFlow>>>"
          ],
          [
            "metrics",
            "Arc<RwLock<OptionsMetrics>>"
          ],
          [
            "event_sender",
            "mpsc::UnboundedSender<OptionsEvent>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OptionsMetrics",
        "file": "crates/data_intelligence/src/options_flow.rs",
        "line": 489,
        "fields": [
          [
            "total_contracts_tracked",
            "usize"
          ],
          [
            "total_volume_24h",
            "u64"
          ],
          [
            "total_open_interest",
            "u64"
          ],
          [
            "put_call_ratio",
            "f64"
          ],
          [
            "average_iv",
            "f64"
          ],
          [
            "gex_imbalance",
            "f64"
          ],
          [
            "unusual_activity_detected",
            "u32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "UnusualOptionsActivity",
        "file": "crates/data_intelligence/src/options_flow.rs",
        "line": 509,
        "fields": [
          [
            "contract",
            "OptionContract"
          ],
          [
            "volume_vs_oi_ratio",
            "f64"
          ],
          [
            "volume_vs_avg_ratio",
            "f64"
          ],
          [
            "sentiment",
            "FlowSentiment"
          ],
          [
            "potential_reason",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "WebSocketConfig",
        "file": "crates/data_intelligence/src/websocket_aggregator.rs",
        "line": 33,
        "fields": [
          [
            "max_reconnect_attempts",
            "u32"
          ],
          [
            "reconnect_delay_ms",
            "u64"
          ],
          [
            "ping_interval_seconds",
            "u64"
          ],
          [
            "message_buffer_size",
            "usize"
          ],
          [
            "enable_compression",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "WebSocketAggregator",
        "file": "crates/data_intelligence/src/websocket_aggregator.rs",
        "line": 54,
        "fields": [
          [
            "config",
            "WebSocketConfig"
          ],
          [
            "connections",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "event_sender",
            "mpsc::UnboundedSender<MarketEvent>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ConnectionState",
        "file": "crates/data_intelligence/src/websocket_aggregator.rs",
        "line": 61,
        "fields": [
          [
            "exchange",
            "String"
          ],
          [
            "url",
            "String"
          ],
          [
            "is_connected",
            "bool"
          ],
          [
            "reconnect_count",
            "u32"
          ],
          [
            "last_message",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "MarketEvent",
        "file": "crates/data_intelligence/src/websocket_aggregator.rs",
        "line": 70,
        "fields": [
          [
            "exchange",
            "String"
          ],
          [
            "event_type",
            "EventType"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "data",
            "serde_json::Value"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MacroConfig",
        "file": "crates/data_intelligence/src/macro_correlator.rs",
        "line": 25,
        "fields": [
          [
            "indicators",
            "Vec<String>"
          ],
          [
            "correlation_window_days",
            "u32"
          ],
          [
            "enable_regime_detection",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MacroEconomicCorrelator",
        "file": "crates/data_intelligence/src/macro_correlator.rs",
        "line": 47,
        "fields": [
          [
            "config",
            "MacroConfig"
          ],
          [
            "correlation_matrix",
            "Arc<RwLock<HashMap<String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "EnhancedPromptTemplates",
        "file": "crates/data_intelligence/src/xai_enhanced_prompts.rs",
        "line": 10,
        "fields": [
          [
            "templates",
            "HashMap<String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Grok3MiniConfig",
        "file": "crates/data_intelligence/src/xai_enhanced_prompts.rs",
        "line": 494,
        "fields": [
          [
            "model",
            "String"
          ],
          [
            "reasoning_effort",
            "ReasoningEffort"
          ],
          [
            "max_tokens",
            "u32"
          ],
          [
            "temperature",
            "f32"
          ],
          [
            "top_p",
            "f32"
          ],
          [
            "frequency_penalty",
            "f32"
          ],
          [
            "presence_penalty",
            "f32"
          ],
          [
            "response_format",
            "ResponseFormat"
          ],
          [
            "stream",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PromptOptimizer",
        "file": "crates/data_intelligence/src/xai_enhanced_prompts.rs",
        "line": 536,
        "fields": [
          [
            "use_few_shot",
            "bool"
          ],
          [
            "use_chain_of_thought",
            "bool"
          ],
          [
            "use_self_consistency",
            "bool"
          ],
          [
            "parallel_prompts",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OverfittingPreventionSystem",
        "file": "crates/data_intelligence/src/overfitting_prevention.rs",
        "line": 15,
        "fields": [
          [
            "walk_forward_validator",
            "Arc<RwLock<WalkForwardValidator>>"
          ],
          [
            "cross_validator",
            "Arc<RwLock<PurgedKFoldValidator>>"
          ],
          [
            "monte_carlo_validator",
            "Arc<RwLock<MonteCarloValidator>>"
          ],
          [
            "regularizer",
            "Arc<RwLock<Regularizer>>"
          ],
          [
            "feature_selector",
            "Arc<RwLock<FeatureSelector>>"
          ],
          [
            "ensemble_manager",
            "Arc<RwLock<EnsembleManager>>"
          ],
          [
            "stability_tester",
            "Arc<RwLock<StabilityTester>>"
          ],
          [
            "robustness_checker",
            "Arc<RwLock<RobustnessChecker>>"
          ],
          [
            "out_of_sample_tracker",
            "Arc<RwLock<OutOfSampleTracker>>"
          ],
          [
            "config",
            "OverfittingConfig"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OverfittingConfig",
        "file": "crates/data_intelligence/src/overfitting_prevention.rs",
        "line": 37,
        "fields": [
          [
            "min_train_samples",
            "usize"
          ],
          [
            "walk_forward_window",
            "usize"
          ],
          [
            "walk_forward_step",
            "usize"
          ],
          [
            "purge_gap",
            "usize"
          ],
          [
            "embargo_period",
            "usize"
          ],
          [
            "k_folds",
            "usize"
          ],
          [
            "l1_lambda",
            "f64"
          ],
          [
            "l2_lambda",
            "f64"
          ],
          [
            "elastic_net_ratio",
            "f64"
          ],
          [
            "dropout_rate",
            "f64"
          ],
          [
            "max_features_ratio",
            "f64"
          ],
          [
            "max_sharpe_in_sample",
            "f64"
          ],
          [
            "min_sharpe_out_sample",
            "f64"
          ],
          [
            "max_drawdown_ratio",
            "f64"
          ],
          [
            "correlation_threshold",
            "f64"
          ],
          [
            "monte_carlo_iterations",
            "usize"
          ],
          [
            "confidence_level",
            "f64"
          ],
          [
            "min_success_rate",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "WalkForwardValidator",
        "file": "crates/data_intelligence/src/overfitting_prevention.rs",
        "line": 91,
        "fields": [
          [
            "windows",
            "Vec<WalkForwardWindow>"
          ],
          [
            "current_window",
            "usize"
          ],
          [
            "performance_decay",
            "Vec<f64>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "WalkForwardWindow",
        "file": "crates/data_intelligence/src/overfitting_prevention.rs",
        "line": 98,
        "fields": [
          [
            "train_start",
            "usize"
          ],
          [
            "train_end",
            "usize"
          ],
          [
            "test_start",
            "usize"
          ],
          [
            "test_end",
            "usize"
          ],
          [
            "in_sample_performance",
            "Performance"
          ],
          [
            "out_sample_performance",
            "Performance"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "Performance",
        "file": "crates/data_intelligence/src/overfitting_prevention.rs",
        "line": 108,
        "fields": [
          [
            "sharpe_ratio",
            "f64"
          ],
          [
            "sortino_ratio",
            "f64"
          ],
          [
            "calmar_ratio",
            "f64"
          ],
          [
            "max_drawdown",
            "f64"
          ],
          [
            "win_rate",
            "f64"
          ],
          [
            "profit_factor",
            "f64"
          ],
          [
            "returns",
            "Vec<f64>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "PurgedKFoldValidator",
        "file": "crates/data_intelligence/src/overfitting_prevention.rs",
        "line": 119,
        "fields": [
          [
            "folds",
            "Vec<PurgedFold>"
          ],
          [
            "purge_gap",
            "usize"
          ],
          [
            "embargo_period",
            "usize"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "PurgedFold",
        "file": "crates/data_intelligence/src/overfitting_prevention.rs",
        "line": 126,
        "fields": [
          [
            "train_indices",
            "Vec<usize>"
          ],
          [
            "test_indices",
            "Vec<usize>"
          ],
          [
            "gap_indices",
            "Vec<usize>"
          ],
          [
            "embargo_indices",
            "Vec<usize>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "MonteCarloValidator",
        "file": "crates/data_intelligence/src/overfitting_prevention.rs",
        "line": 134,
        "fields": [
          [
            "simulations",
            "Vec<MonteCarloSimulation>"
          ],
          [
            "confidence_intervals",
            "ConfidenceIntervals"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "MonteCarloSimulation",
        "file": "crates/data_intelligence/src/overfitting_prevention.rs",
        "line": 140,
        "fields": [
          [
            "sample_indices",
            "Vec<usize>"
          ],
          [
            "performance",
            "Performance"
          ],
          [
            "random_seed",
            "u64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ConfidenceIntervals",
        "file": "crates/data_intelligence/src/overfitting_prevention.rs",
        "line": 147,
        "fields": [
          [
            "sharpe_5th",
            "f64"
          ],
          [
            "sharpe_50th",
            "f64"
          ],
          [
            "sharpe_95th",
            "f64"
          ],
          [
            "drawdown_5th",
            "f64"
          ],
          [
            "drawdown_50th",
            "f64"
          ],
          [
            "drawdown_95th",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "Regularizer",
        "file": "crates/data_intelligence/src/overfitting_prevention.rs",
        "line": 157,
        "fields": [
          [
            "l1_penalty",
            "f64"
          ],
          [
            "l2_penalty",
            "f64"
          ],
          [
            "elastic_net",
            "bool"
          ],
          [
            "weight_decay",
            "f64"
          ],
          [
            "early_stopping_patience",
            "usize"
          ],
          [
            "best_validation_score",
            "f64"
          ],
          [
            "patience_counter",
            "usize"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "FeatureSelector",
        "file": "crates/data_intelligence/src/overfitting_prevention.rs",
        "line": 168,
        "fields": [
          [
            "selected_features",
            "Vec<usize>"
          ],
          [
            "feature_importance",
            "Vec<f64>"
          ],
          [
            "correlation_matrix",
            "DMatrix<f64>"
          ],
          [
            "vif_scores",
            "Vec<f64>"
          ],
          [
            "mutual_information",
            "Vec<f64>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "EnsembleManager",
        "file": "crates/data_intelligence/src/overfitting_prevention.rs",
        "line": 177,
        "fields": [
          [
            "models",
            "Vec<ModelSnapshot>"
          ],
          [
            "voting_weights",
            "Vec<f64>"
          ],
          [
            "diversity_score",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ModelSnapshot",
        "file": "crates/data_intelligence/src/overfitting_prevention.rs",
        "line": 184,
        "fields": [
          [
            "model_id",
            "String"
          ],
          [
            "train_period",
            "(usize"
          ],
          [
            "features_used",
            "Vec<usize>"
          ],
          [
            "hyperparameters",
            "HashMap<String"
          ],
          [
            "validation_score",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "StabilityTester",
        "file": "crates/data_intelligence/src/overfitting_prevention.rs",
        "line": 193,
        "fields": [
          [
            "parameter_sensitivity",
            "HashMap<String"
          ],
          [
            "temporal_stability",
            "Vec<f64>"
          ],
          [
            "market_regime_performance",
            "HashMap<String"
          ],
          [
            "correlation_stability",
            "Vec<f64>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "RobustnessChecker",
        "file": "crates/data_intelligence/src/overfitting_prevention.rs",
        "line": 201,
        "fields": [
          [
            "noise_resistance",
            "f64"
          ],
          [
            "missing_data_tolerance",
            "f64"
          ],
          [
            "parameter_perturbation",
            "Vec<f64>"
          ],
          [
            "bootstrap_confidence",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "OutOfSampleTracker",
        "file": "crates/data_intelligence/src/overfitting_prevention.rs",
        "line": 209,
        "fields": [
          [
            "in_sample_metrics",
            "Performance"
          ],
          [
            "out_sample_metrics",
            "Performance"
          ],
          [
            "degradation_rate",
            "f64"
          ],
          [
            "live_performance",
            "Performance"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "CorrelationValidation",
        "file": "crates/data_intelligence/src/overfitting_prevention.rs",
        "line": 899,
        "fields": [
          [
            "stable_correlations",
            "Vec<CorrelationAssessment>"
          ],
          [
            "unstable_correlations",
            "Vec<CorrelationAssessment>"
          ],
          [
            "spurious_correlations",
            "Vec<CorrelationAssessment>"
          ],
          [
            "overall_stability",
            "f64"
          ],
          [
            "warnings",
            "Vec<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CorrelationAssessment",
        "file": "crates/data_intelligence/src/overfitting_prevention.rs",
        "line": 908,
        "fields": [
          [
            "pair",
            "(String"
          ],
          [
            "mean_correlation",
            "f64"
          ],
          [
            "std_correlation",
            "f64"
          ],
          [
            "min_correlation",
            "f64"
          ],
          [
            "max_correlation",
            "f64"
          ],
          [
            "stability_score",
            "f64"
          ],
          [
            "sign_changes",
            "usize"
          ],
          [
            "is_stable",
            "bool"
          ],
          [
            "is_spurious",
            "bool"
          ],
          [
            "recommendation",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "WalkForwardResults",
        "file": "crates/data_intelligence/src/overfitting_prevention.rs",
        "line": 922,
        "fields": [
          [
            "windows",
            "Vec<WalkForwardWindow>"
          ],
          [
            "average_in_sample_sharpe",
            "f64"
          ],
          [
            "average_out_sample_sharpe",
            "f64"
          ],
          [
            "performance_degradation",
            "f64"
          ],
          [
            "is_overfit",
            "bool"
          ],
          [
            "confidence",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PurgedKFoldResults",
        "file": "crates/data_intelligence/src/overfitting_prevention.rs",
        "line": 932,
        "fields": [
          [
            "folds",
            "Vec<PurgedFold>"
          ],
          [
            "performances",
            "Vec<Performance>"
          ],
          [
            "mean_sharpe",
            "f64"
          ],
          [
            "std_sharpe",
            "f64"
          ],
          [
            "cv_score",
            "f64"
          ],
          [
            "is_robust",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RobustnessResults",
        "file": "crates/data_intelligence/src/overfitting_prevention.rs",
        "line": 942,
        "fields": [
          [
            "noise_performances",
            "Vec<(f64"
          ],
          [
            "robustness_score",
            "f64"
          ],
          [
            "is_robust",
            "bool"
          ],
          [
            "max_acceptable_noise",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MonteCarloResults",
        "file": "crates/data_intelligence/src/overfitting_prevention.rs",
        "line": 950,
        "fields": [
          [
            "confidence_intervals",
            "ConfidenceIntervals"
          ],
          [
            "success_rate",
            "f64"
          ],
          [
            "is_significant",
            "bool"
          ],
          [
            "expected_sharpe",
            "f64"
          ],
          [
            "worst_case_sharpe",
            "f64"
          ],
          [
            "best_case_sharpe",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "NewsConfig",
        "file": "crates/data_intelligence/src/news_sentiment.rs",
        "line": 26,
        "fields": [
          [
            "sources",
            "Vec<String>"
          ],
          [
            "min_relevance_score",
            "f64"
          ],
          [
            "enable_nlp_analysis",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "NewsSentimentProcessor",
        "file": "crates/data_intelligence/src/news_sentiment.rs",
        "line": 47,
        "fields": [
          [
            "config",
            "NewsConfig"
          ],
          [
            "sentiment_cache",
            "Arc<RwLock<HashMap<String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SentimentScore",
        "file": "crates/data_intelligence/src/news_sentiment.rs",
        "line": 53,
        "fields": [
          [
            "positive",
            "f64"
          ],
          [
            "negative",
            "f64"
          ],
          [
            "neutral",
            "f64"
          ],
          [
            "confidence",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DexAnalyticsConfig",
        "file": "crates/data_intelligence/src/dex_analytics.rs",
        "line": 38,
        "fields": [
          [
            "graph_api_key",
            "Option<String>"
          ],
          [
            "graph_base_url",
            "String"
          ],
          [
            "enable_all_dexes",
            "bool"
          ],
          [
            "cache_duration_seconds",
            "u64"
          ],
          [
            "min_liquidity_usd",
            "Decimal"
          ],
          [
            "enable_impermanent_loss_calc",
            "bool"
          ],
          [
            "enable_mev_detection",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DexPool",
        "file": "crates/data_intelligence/src/dex_analytics.rs",
        "line": 107,
        "fields": [
          [
            "id",
            "String"
          ],
          [
            "protocol",
            "DexProtocol"
          ],
          [
            "token0",
            "TokenInfo"
          ],
          [
            "token1",
            "TokenInfo"
          ],
          [
            "reserve0",
            "Decimal"
          ],
          [
            "reserve1",
            "Decimal"
          ],
          [
            "total_liquidity_usd",
            "Decimal"
          ],
          [
            "volume_24h_usd",
            "Decimal"
          ],
          [
            "volume_7d_usd",
            "Decimal"
          ],
          [
            "fee_tier",
            "Decimal"
          ],
          [
            "apy",
            "Option<f64>"
          ],
          [
            "price_impact_1k",
            "f64"
          ],
          [
            "price_impact_10k",
            "f64"
          ],
          [
            "price_impact_100k",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TokenInfo",
        "file": "crates/data_intelligence/src/dex_analytics.rs",
        "line": 125,
        "fields": [
          [
            "address",
            "String"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "name",
            "String"
          ],
          [
            "decimals",
            "u8"
          ],
          [
            "price_usd",
            "Decimal"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DexSwap",
        "file": "crates/data_intelligence/src/dex_analytics.rs",
        "line": 135,
        "fields": [
          [
            "id",
            "String"
          ],
          [
            "protocol",
            "DexProtocol"
          ],
          [
            "pool_id",
            "String"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "from_token",
            "TokenInfo"
          ],
          [
            "to_token",
            "TokenInfo"
          ],
          [
            "amount_in",
            "Decimal"
          ],
          [
            "amount_out",
            "Decimal"
          ],
          [
            "amount_usd",
            "Decimal"
          ],
          [
            "price_impact",
            "f64"
          ],
          [
            "gas_used",
            "Option<u64>"
          ],
          [
            "mev_protected",
            "bool"
          ],
          [
            "sender",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "LiquidityEvent",
        "file": "crates/data_intelligence/src/dex_analytics.rs",
        "line": 153,
        "fields": [
          [
            "event_type",
            "LiquidityEventType"
          ],
          [
            "protocol",
            "DexProtocol"
          ],
          [
            "pool_id",
            "String"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "token0_amount",
            "Decimal"
          ],
          [
            "token1_amount",
            "Decimal"
          ],
          [
            "liquidity_usd",
            "Decimal"
          ],
          [
            "provider",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MevActivity",
        "file": "crates/data_intelligence/src/dex_analytics.rs",
        "line": 172,
        "fields": [
          [
            "mev_type",
            "MevType"
          ],
          [
            "protocol",
            "DexProtocol"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "profit_usd",
            "Decimal"
          ],
          [
            "victim_loss_usd",
            "Option<Decimal>"
          ],
          [
            "transactions",
            "Vec<String>"
          ],
          [
            "confidence",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ImpermanentLossCalculator",
        "file": "crates/data_intelligence/src/dex_analytics.rs",
        "line": 191,
        "fields": [
          [
            "historical_prices",
            "Arc<RwLock<HashMap<String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ArbitrageDetector",
        "file": "crates/data_intelligence/src/dex_analytics.rs",
        "line": 225,
        "fields": [
          [
            "price_cache",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "min_profit_threshold",
            "Decimal"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ArbitrageOpportunity",
        "file": "crates/data_intelligence/src/dex_analytics.rs",
        "line": 298,
        "fields": [
          [
            "token_pair",
            "String"
          ],
          [
            "buy_dex",
            "DexProtocol"
          ],
          [
            "sell_dex",
            "DexProtocol"
          ],
          [
            "buy_price",
            "Decimal"
          ],
          [
            "sell_price",
            "Decimal"
          ],
          [
            "profit_percent",
            "f64"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DexAnalytics",
        "file": "crates/data_intelligence/src/dex_analytics.rs",
        "line": 309,
        "fields": [
          [
            "config",
            "DexAnalyticsConfig"
          ],
          [
            "http_client",
            "Client"
          ],
          [
            "il_calculator",
            "Arc<ImpermanentLossCalculator>"
          ],
          [
            "arb_detector",
            "Arc<ArbitrageDetector>"
          ],
          [
            "pool_cache",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "swap_cache",
            "Arc<RwLock<VecDeque<DexSwap>>>"
          ],
          [
            "metrics",
            "Arc<RwLock<DexMetrics>>"
          ],
          [
            "event_sender",
            "mpsc::UnboundedSender<DexEvent>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DexMetrics",
        "file": "crates/data_intelligence/src/dex_analytics.rs",
        "line": 329,
        "fields": [
          [
            "total_pools_tracked",
            "usize"
          ],
          [
            "total_volume_24h_usd",
            "Decimal"
          ],
          [
            "total_liquidity_usd",
            "Decimal"
          ],
          [
            "swaps_processed",
            "u64"
          ],
          [
            "arbitrage_opportunities_found",
            "u32"
          ],
          [
            "mev_activities_detected",
            "u32"
          ],
          [
            "average_gas_price_gwei",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SwapRoute",
        "file": "crates/data_intelligence/src/dex_analytics.rs",
        "line": 765,
        "fields": [
          [
            "path",
            "Vec<SwapStep>"
          ],
          [
            "total_amount_out",
            "Decimal"
          ],
          [
            "price_impact",
            "f64"
          ],
          [
            "estimated_gas",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SwapStep",
        "file": "crates/data_intelligence/src/dex_analytics.rs",
        "line": 773,
        "fields": [
          [
            "protocol",
            "DexProtocol"
          ],
          [
            "pool_id",
            "String"
          ],
          [
            "token_in",
            "String"
          ],
          [
            "token_out",
            "String"
          ],
          [
            "amount_in",
            "Decimal"
          ],
          [
            "amount_out",
            "Decimal"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "StablecoinConfig",
        "file": "crates/data_intelligence/src/stablecoin_tracker.rs",
        "line": 38,
        "fields": [
          [
            "track_usdt",
            "bool"
          ],
          [
            "track_usdc",
            "bool"
          ],
          [
            "track_busd",
            "bool"
          ],
          [
            "track_dai",
            "bool"
          ],
          [
            "track_frax",
            "bool"
          ],
          [
            "track_tusd",
            "bool"
          ],
          [
            "min_mint_burn_usd",
            "Decimal"
          ],
          [
            "treasury_api_key",
            "Option<String>"
          ],
          [
            "enable_chain_monitoring",
            "bool"
          ],
          [
            "enable_liquidity_analysis",
            "bool"
          ],
          [
            "enable_demand_forecasting",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MintBurnEvent",
        "file": "crates/data_intelligence/src/stablecoin_tracker.rs",
        "line": 126,
        "fields": [
          [
            "event_type",
            "MintBurnType"
          ],
          [
            "stablecoin",
            "Stablecoin"
          ],
          [
            "amount",
            "Decimal"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "chain",
            "String"
          ],
          [
            "transaction_hash",
            "Option<String>"
          ],
          [
            "from_address",
            "Option<String>"
          ],
          [
            "to_address",
            "Option<String>"
          ],
          [
            "market_impact",
            "MarketImpact"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketImpact",
        "file": "crates/data_intelligence/src/stablecoin_tracker.rs",
        "line": 146,
        "fields": [
          [
            "liquidity_change",
            "f64"
          ],
          [
            "demand_signal",
            "DemandSignal"
          ],
          [
            "price_pressure",
            "PricePressure"
          ],
          [
            "confidence",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TreasuryData",
        "file": "crates/data_intelligence/src/stablecoin_tracker.rs",
        "line": 171,
        "fields": [
          [
            "stablecoin",
            "Stablecoin"
          ],
          [
            "total_supply",
            "Decimal"
          ],
          [
            "reserves",
            "ReserveBreakdown"
          ],
          [
            "last_audit",
            "Option<DateTime<Utc>>"
          ],
          [
            "attestation_url",
            "Option<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ReserveBreakdown",
        "file": "crates/data_intelligence/src/stablecoin_tracker.rs",
        "line": 180,
        "fields": [
          [
            "cash_and_equivalents",
            "Decimal"
          ],
          [
            "commercial_paper",
            "Decimal"
          ],
          [
            "corporate_bonds",
            "Decimal"
          ],
          [
            "secured_loans",
            "Decimal"
          ],
          [
            "other_investments",
            "Decimal"
          ],
          [
            "total",
            "Decimal"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "LiquidityAnalyzer",
        "file": "crates/data_intelligence/src/stablecoin_tracker.rs",
        "line": 190,
        "fields": [
          [
            "historical_data",
            "Arc<RwLock<HashMap<Stablecoin"
          ],
          [
            "crisis_threshold",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "LiquiditySnapshot",
        "file": "crates/data_intelligence/src/stablecoin_tracker.rs",
        "line": 343,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "supply",
            "Decimal"
          ],
          [
            "net_flow",
            "Decimal"
          ],
          [
            "velocity",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "LiquidityAnalysis",
        "file": "crates/data_intelligence/src/stablecoin_tracker.rs",
        "line": 351,
        "fields": [
          [
            "current_supply",
            "Decimal"
          ],
          [
            "net_flow_24h",
            "Decimal"
          ],
          [
            "mint_volume_24h",
            "Decimal"
          ],
          [
            "burn_volume_24h",
            "Decimal"
          ],
          [
            "flow_ratio",
            "f64"
          ],
          [
            "velocity",
            "f64"
          ],
          [
            "crisis_probability",
            "f64"
          ],
          [
            "market_condition",
            "MarketCondition"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DemandForecaster",
        "file": "crates/data_intelligence/src/stablecoin_tracker.rs",
        "line": 371,
        "fields": [
          [
            "historical_mints",
            "Arc<RwLock<HashMap<Stablecoin"
          ],
          [
            "forecast_horizon_days",
            "u32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DemandForecast",
        "file": "crates/data_intelligence/src/stablecoin_tracker.rs",
        "line": 539,
        "fields": [
          [
            "stablecoin",
            "Stablecoin"
          ],
          [
            "trend",
            "DemandTrend"
          ],
          [
            "seasonality",
            "SeasonalityPattern"
          ],
          [
            "volatility",
            "f64"
          ],
          [
            "forecast_values",
            "Vec<ForecastPoint>"
          ],
          [
            "confidence",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ForecastPoint",
        "file": "crates/data_intelligence/src/stablecoin_tracker.rs",
        "line": 567,
        "fields": [
          [
            "date",
            "DateTime<Utc>"
          ],
          [
            "expected_net_flow",
            "Decimal"
          ],
          [
            "upper_bound",
            "Decimal"
          ],
          [
            "lower_bound",
            "Decimal"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "StablecoinTracker",
        "file": "crates/data_intelligence/src/stablecoin_tracker.rs",
        "line": 575,
        "fields": [
          [
            "config",
            "StablecoinConfig"
          ],
          [
            "http_client",
            "Client"
          ],
          [
            "liquidity_analyzer",
            "Arc<LiquidityAnalyzer>"
          ],
          [
            "demand_forecaster",
            "Arc<DemandForecaster>"
          ],
          [
            "treasury_data",
            "Arc<RwLock<HashMap<Stablecoin"
          ],
          [
            "recent_events",
            "Arc<RwLock<VecDeque<MintBurnEvent>>>"
          ],
          [
            "metrics",
            "Arc<RwLock<StablecoinMetrics>>"
          ],
          [
            "event_sender",
            "mpsc::UnboundedSender<StablecoinEvent>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "StablecoinMetrics",
        "file": "crates/data_intelligence/src/stablecoin_tracker.rs",
        "line": 595,
        "fields": [
          [
            "total_supply_all",
            "Decimal"
          ],
          [
            "total_mints_24h",
            "Decimal"
          ],
          [
            "total_burns_24h",
            "Decimal"
          ],
          [
            "net_flow_24h",
            "Decimal"
          ],
          [
            "dominant_stablecoin",
            "Stablecoin"
          ],
          [
            "crisis_alerts",
            "u32"
          ],
          [
            "last_update",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OnChainConfig",
        "file": "crates/data_intelligence/src/onchain_analytics.rs",
        "line": 26,
        "fields": [
          [
            "node_urls",
            "Vec<String>"
          ],
          [
            "track_whale_wallets",
            "bool"
          ],
          [
            "min_transaction_usd",
            "Decimal"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OnChainAnalytics",
        "file": "crates/data_intelligence/src/onchain_analytics.rs",
        "line": 43,
        "fields": [
          [
            "config",
            "OnChainConfig"
          ],
          [
            "metrics_cache",
            "Arc<RwLock<OnChainMetrics>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OnChainMetrics",
        "file": "crates/data_intelligence/src/onchain_analytics.rs",
        "line": 49,
        "fields": [
          [
            "active_addresses_24h",
            "u64"
          ],
          [
            "transaction_count_24h",
            "u64"
          ],
          [
            "total_value_transferred",
            "Decimal"
          ],
          [
            "average_gas_price",
            "u64"
          ],
          [
            "network_hash_rate",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DataIntelligenceSystem",
        "file": "crates/data_intelligence/src/lib.rs",
        "line": 53,
        "fields": [
          [
            "zero_copy_pipeline",
            "Arc<zero_copy_pipeline::ZeroCopyPipeline>"
          ],
          [
            "simd_processor",
            "Arc<simd_processors::SimdProcessor>"
          ],
          [
            "historical_validator",
            "Arc<historical_validator::HistoricalValidator>"
          ],
          [
            "websocket_aggregator",
            "Arc<websocket_aggregator::WebSocketAggregator>"
          ],
          [
            "xai_integration",
            "Arc<xai_integration::XAIIntegration>"
          ],
          [
            "news_sentiment",
            "Arc<news_sentiment::NewsSentimentProcessor>"
          ],
          [
            "macro_correlator",
            "Arc<macro_correlator::MacroEconomicCorrelator>"
          ],
          [
            "onchain_analytics",
            "Arc<onchain_analytics::OnChainAnalytics>"
          ],
          [
            "data_quantizer",
            "Arc<data_quantizer::DataQuantizer>"
          ],
          [
            "cache_layer",
            "Arc<cache_layer::MultiTierCache>"
          ],
          [
            "metrics",
            "Arc<RwLock<DataMetrics>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DataMetrics",
        "file": "crates/data_intelligence/src/lib.rs",
        "line": 75,
        "fields": [
          [
            "total_events_processed",
            "u64"
          ],
          [
            "events_per_second",
            "f64"
          ],
          [
            "cache_hit_rate",
            "f64"
          ],
          [
            "data_gaps_detected",
            "u32"
          ],
          [
            "simd_speedup_factor",
            "f64"
          ],
          [
            "latency_p50_us",
            "f64"
          ],
          [
            "latency_p99_us",
            "f64"
          ],
          [
            "memory_usage_mb",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DataConfig",
        "file": "crates/data_intelligence/src/lib.rs",
        "line": 248,
        "fields": [
          [
            "pipeline_config",
            "zero_copy_pipeline::PipelineConfig"
          ],
          [
            "validation_config",
            "historical_validator::ValidationConfig"
          ],
          [
            "websocket_config",
            "websocket_aggregator::WebSocketConfig"
          ],
          [
            "xai_config",
            "xai_integration::XAIConfig"
          ],
          [
            "news_config",
            "news_sentiment::NewsConfig"
          ],
          [
            "macro_config",
            "macro_correlator::MacroConfig"
          ],
          [
            "onchain_config",
            "onchain_analytics::OnChainConfig"
          ],
          [
            "quantization_config",
            "data_quantizer::QuantizationConfig"
          ],
          [
            "cache_config",
            "cache_layer::CacheConfig"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "UnifiedDataStream",
        "file": "crates/data_intelligence/src/lib.rs",
        "line": 262,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "market_data",
            "MarketDataEnhanced"
          ],
          [
            "sentiment_data",
            "SentimentDataEnhanced"
          ],
          [
            "macro_data",
            "MacroEconomicData"
          ],
          [
            "onchain_data",
            "OnChainMetrics"
          ],
          [
            "news_data",
            "NewsAnalysis"
          ],
          [
            "correlation_matrix",
            "Vec<f64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketDataEnhanced",
        "file": "crates/data_intelligence/src/lib.rs",
        "line": 274,
        "fields": [
          [
            "symbol",
            "String"
          ],
          [
            "exchange",
            "String"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "bid",
            "Decimal"
          ],
          [
            "ask",
            "Decimal"
          ],
          [
            "last",
            "Decimal"
          ],
          [
            "volume_24h",
            "Decimal"
          ],
          [
            "volume_1h",
            "Decimal"
          ],
          [
            "order_book_depth",
            "OrderBookDepth"
          ],
          [
            "trades",
            "Vec<Trade>"
          ],
          [
            "funding_rate",
            "Option<Decimal>"
          ],
          [
            "open_interest",
            "Option<Decimal>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderBookDepth",
        "file": "crates/data_intelligence/src/lib.rs",
        "line": 290,
        "fields": [
          [
            "bids",
            "Vec<(Decimal"
          ],
          [
            "asks",
            "Vec<(Decimal"
          ],
          [
            "total_bid_liquidity",
            "Decimal"
          ],
          [
            "total_ask_liquidity",
            "Decimal"
          ],
          [
            "imbalance",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Trade",
        "file": "crates/data_intelligence/src/lib.rs",
        "line": 299,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "price",
            "Decimal"
          ],
          [
            "size",
            "Decimal"
          ],
          [
            "side",
            "TradeSide"
          ],
          [
            "is_liquidation",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SentimentDataEnhanced",
        "file": "crates/data_intelligence/src/lib.rs",
        "line": 315,
        "fields": [
          [
            "xai_sentiment",
            "XAISentiment"
          ],
          [
            "news_sentiment",
            "NewsSentiment"
          ],
          [
            "social_sentiment",
            "SocialSentiment"
          ],
          [
            "composite_score",
            "f64"
          ],
          [
            "confidence",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "XAISentiment",
        "file": "crates/data_intelligence/src/lib.rs",
        "line": 324,
        "fields": [
          [
            "grok_analysis",
            "String"
          ],
          [
            "bullish_score",
            "f64"
          ],
          [
            "bearish_score",
            "f64"
          ],
          [
            "neutral_score",
            "f64"
          ],
          [
            "key_topics",
            "Vec<String>"
          ],
          [
            "market_regime_prediction",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "NewsSentiment",
        "file": "crates/data_intelligence/src/lib.rs",
        "line": 334,
        "fields": [
          [
            "overall_score",
            "f64"
          ],
          [
            "article_count",
            "u32"
          ],
          [
            "positive_count",
            "u32"
          ],
          [
            "negative_count",
            "u32"
          ],
          [
            "top_headlines",
            "Vec<String>"
          ],
          [
            "key_entities",
            "Vec<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SocialSentiment",
        "file": "crates/data_intelligence/src/lib.rs",
        "line": 344,
        "fields": [
          [
            "twitter_score",
            "f64"
          ],
          [
            "reddit_score",
            "f64"
          ],
          [
            "telegram_score",
            "f64"
          ],
          [
            "discord_score",
            "f64"
          ],
          [
            "trending_topics",
            "Vec<String>"
          ],
          [
            "influencer_sentiment",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MacroEconomicData",
        "file": "crates/data_intelligence/src/lib.rs",
        "line": 355,
        "fields": [
          [
            "fed_funds_rate",
            "f64"
          ],
          [
            "ten_year_yield",
            "f64"
          ],
          [
            "dxy_index",
            "f64"
          ],
          [
            "vix_index",
            "f64"
          ],
          [
            "gold_price",
            "Decimal"
          ],
          [
            "oil_price",
            "Decimal"
          ],
          [
            "sp500_level",
            "f64"
          ],
          [
            "nasdaq_level",
            "f64"
          ],
          [
            "economic_surprise_index",
            "f64"
          ],
          [
            "inflation_expectations",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OnChainMetrics",
        "file": "crates/data_intelligence/src/lib.rs",
        "line": 370,
        "fields": [
          [
            "active_addresses",
            "u64"
          ],
          [
            "transaction_volume",
            "Decimal"
          ],
          [
            "hash_rate",
            "f64"
          ],
          [
            "difficulty",
            "f64"
          ],
          [
            "exchange_inflows",
            "Decimal"
          ],
          [
            "exchange_outflows",
            "Decimal"
          ],
          [
            "whale_movements",
            "Vec<WhaleTransaction>"
          ],
          [
            "defi_tvl",
            "Decimal"
          ],
          [
            "stablecoin_flows",
            "Decimal"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "WhaleTransaction",
        "file": "crates/data_intelligence/src/lib.rs",
        "line": 383,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "from_address",
            "String"
          ],
          [
            "to_address",
            "String"
          ],
          [
            "amount",
            "Decimal"
          ],
          [
            "is_exchange",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "NewsAnalysis",
        "file": "crates/data_intelligence/src/lib.rs",
        "line": 392,
        "fields": [
          [
            "articles",
            "Vec<NewsArticle>"
          ],
          [
            "topic_clusters",
            "Vec<TopicCluster>"
          ],
          [
            "event_detection",
            "Vec<MarketEvent>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "NewsArticle",
        "file": "crates/data_intelligence/src/lib.rs",
        "line": 399,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "source",
            "String"
          ],
          [
            "headline",
            "String"
          ],
          [
            "sentiment_score",
            "f64"
          ],
          [
            "relevance_score",
            "f64"
          ],
          [
            "entities",
            "Vec<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TopicCluster",
        "file": "crates/data_intelligence/src/lib.rs",
        "line": 409,
        "fields": [
          [
            "topic",
            "String"
          ],
          [
            "article_count",
            "u32"
          ],
          [
            "avg_sentiment",
            "f64"
          ],
          [
            "trending_score",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketEvent",
        "file": "crates/data_intelligence/src/lib.rs",
        "line": 417,
        "fields": [
          [
            "event_type",
            "EventType"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "impact_score",
            "f64"
          ],
          [
            "affected_assets",
            "Vec<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SimdProcessor",
        "file": "crates/data_intelligence/src/simd_processors.rs",
        "line": 17,
        "fields": [
          [
            "has_avx512",
            "bool"
          ],
          [
            "has_avx2",
            "bool"
          ],
          [
            "has_sse4",
            "bool"
          ],
          [
            "operations_performed",
            "AtomicU64"
          ],
          [
            "simd_speedup_factor",
            "AtomicU64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SimdMetrics",
        "file": "crates/data_intelligence/src/simd_processors.rs",
        "line": 511,
        "fields": [
          [
            "operations_performed",
            "u64"
          ],
          [
            "simd_speedup_factor",
            "u64"
          ],
          [
            "has_avx512",
            "bool"
          ],
          [
            "has_avx2",
            "bool"
          ],
          [
            "has_sse4",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "QuantizationConfig",
        "file": "crates/data_intelligence/src/data_quantizer.rs",
        "line": 22,
        "fields": [
          [
            "num_bins",
            "usize"
          ],
          [
            "quantization_method",
            "QuantizationMethod"
          ],
          [
            "preserve_outliers",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DataQuantizer",
        "file": "crates/data_intelligence/src/data_quantizer.rs",
        "line": 47,
        "fields": [
          [
            "config",
            "QuantizationConfig"
          ],
          [
            "bin_edges",
            "HashMap<String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PipelineConfig",
        "file": "crates/data_intelligence/src/zero_copy_pipeline.rs",
        "line": 23,
        "fields": [
          [
            "ring_buffer_size",
            "usize"
          ],
          [
            "batch_size",
            "usize"
          ],
          [
            "mmap_threshold",
            "usize"
          ],
          [
            "zero_copy_threshold",
            "usize"
          ],
          [
            "max_in_flight",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ZeroCopyPipeline",
        "file": "crates/data_intelligence/src/zero_copy_pipeline.rs",
        "line": 44,
        "fields": [
          [
            "buffer",
            "Pin<Box<[MaybeUninit<CacheLineAligned<RawEvent>>]>>"
          ],
          [
            "mask",
            "usize"
          ],
          [
            "write_index",
            "Arc<AtomicUsize>"
          ],
          [
            "read_index",
            "Arc<AtomicUsize>"
          ],
          [
            "cached_write",
            "AtomicUsize"
          ],
          [
            "cached_read",
            "AtomicUsize"
          ],
          [
            "mmap_regions",
            "Arc<RwLock<Vec<MmapRegion>>>"
          ],
          [
            "events_processed",
            "AtomicU64"
          ],
          [
            "bytes_processed",
            "AtomicU64"
          ],
          [
            "zero_copy_hits",
            "AtomicU64"
          ],
          [
            "config",
            "PipelineConfig"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CacheLineAligned",
        "file": "crates/data_intelligence/src/zero_copy_pipeline.rs",
        "line": 69,
        "fields": [
          [
            "data",
            "T"
          ],
          [
            "_padding",
            "[u8; 64 - std::mem::size_of::<T>()]"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "RawEvent",
        "file": "crates/data_intelligence/src/zero_copy_pipeline.rs",
        "line": 77,
        "fields": [
          [
            "timestamp_ns",
            "u64"
          ],
          [
            "event_type",
            "u32"
          ],
          [
            "data_offset",
            "u32"
          ],
          [
            "data_length",
            "u32"
          ],
          [
            "source_id",
            "u16"
          ],
          [
            "flags",
            "u16"
          ],
          [
            "checksum",
            "u32"
          ],
          [
            "_padding",
            "[u8; 32]"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MmapRegion",
        "file": "crates/data_intelligence/src/zero_copy_pipeline.rs",
        "line": 89,
        "fields": [
          [
            "mmap",
            "Mmap"
          ],
          [
            "offset",
            "AtomicUsize"
          ],
          [
            "capacity",
            "usize"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "PipelineMetrics",
        "file": "crates/data_intelligence/src/zero_copy_pipeline.rs",
        "line": 314,
        "fields": [
          [
            "events_processed",
            "u64"
          ],
          [
            "bytes_processed",
            "u64"
          ],
          [
            "zero_copy_hits",
            "u64"
          ],
          [
            "buffer_utilization",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CacheConfig",
        "file": "crates/data_intelligence/src/cache_layer.rs",
        "line": 23,
        "fields": [
          [
            "redis_url",
            "String"
          ],
          [
            "redis_pool_size",
            "u32"
          ],
          [
            "postgres_url",
            "String"
          ],
          [
            "postgres_pool_size",
            "u32"
          ],
          [
            "hot_cache_size_mb",
            "usize"
          ],
          [
            "warm_cache_size_mb",
            "usize"
          ],
          [
            "hot_cache_ttl_seconds",
            "i64"
          ],
          [
            "warm_cache_ttl_seconds",
            "i64"
          ],
          [
            "cold_cache_ttl_seconds",
            "i64"
          ],
          [
            "compression_threshold_bytes",
            "usize"
          ],
          [
            "use_lz4_for_warm",
            "bool"
          ],
          [
            "use_zstd_for_cold",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MultiTierCache",
        "file": "crates/data_intelligence/src/cache_layer.rs",
        "line": 65,
        "fields": [
          [
            "1",
            "Hot cache (in-memory)\n    hot_cache: Arc<DashMap<String"
          ],
          [
            "hot_cache_size",
            "AtomicU64"
          ],
          [
            "2",
            "Warm cache (Redis)\n    redis_pool: Arc<RwLock<ConnectionManager>>"
          ],
          [
            "3",
            "Cold cache (PostgreSQL)\n    postgres_pool: Arc<PgPool>"
          ],
          [
            "config",
            "CacheConfig"
          ],
          [
            "metrics",
            "Arc<RwLock<CacheMetrics>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CachedItem",
        "file": "crates/data_intelligence/src/cache_layer.rs",
        "line": 84,
        "fields": [
          [
            "key",
            "String"
          ],
          [
            "data",
            "Vec<u8>"
          ],
          [
            "metadata",
            "CacheMetadata"
          ],
          [
            "compressed",
            "bool"
          ],
          [
            "compression_type",
            "CompressionType"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "CacheMetadata",
        "file": "crates/data_intelligence/src/cache_layer.rs",
        "line": 93,
        "fields": [
          [
            "created_at",
            "DateTime<Utc>"
          ],
          [
            "expires_at",
            "DateTime<Utc>"
          ],
          [
            "access_count",
            "u64"
          ],
          [
            "last_accessed",
            "DateTime<Utc>"
          ],
          [
            "data_type",
            "DataType"
          ],
          [
            "source",
            "String"
          ],
          [
            "size_bytes",
            "usize"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "CacheMetrics",
        "file": "crates/data_intelligence/src/cache_layer.rs",
        "line": 122,
        "fields": [
          [
            "hot_cache_hits",
            "u64"
          ],
          [
            "warm_cache_hits",
            "u64"
          ],
          [
            "cold_cache_hits",
            "u64"
          ],
          [
            "cache_misses",
            "u64"
          ],
          [
            "avg_hot_latency_us",
            "f64"
          ],
          [
            "avg_warm_latency_us",
            "f64"
          ],
          [
            "avg_cold_latency_us",
            "f64"
          ],
          [
            "hot_cache_entries",
            "usize"
          ],
          [
            "hot_cache_size_bytes",
            "u64"
          ],
          [
            "warm_cache_entries",
            "usize"
          ],
          [
            "cold_cache_entries",
            "usize"
          ],
          [
            "compression_ratio",
            "f64"
          ],
          [
            "evictions",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "WhaleAlertConfig",
        "file": "crates/data_intelligence/src/whale_alert.rs",
        "line": 38,
        "fields": [
          [
            "api_key",
            "Option<String>"
          ],
          [
            "websocket_url",
            "String"
          ],
          [
            "rest_api_url",
            "String"
          ],
          [
            "min_transaction_usd",
            "Decimal"
          ],
          [
            "cache_duration_seconds",
            "u64"
          ],
          [
            "max_cached_transactions",
            "usize"
          ],
          [
            "enable_ml_prediction",
            "bool"
          ],
          [
            "enable_cascade_detection",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "WhaleTransaction",
        "file": "crates/data_intelligence/src/whale_alert.rs",
        "line": 66,
        "fields": [
          [
            "id",
            "String"
          ],
          [
            "blockchain",
            "String"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "transaction_type",
            "TransactionType"
          ],
          [
            "hash",
            "String"
          ],
          [
            "from",
            "WalletInfo"
          ],
          [
            "to",
            "WalletInfo"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "amount",
            "Decimal"
          ],
          [
            "amount_usd",
            "Decimal"
          ],
          [
            "transaction_count",
            "Option<u32>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "WalletInfo",
        "file": "crates/data_intelligence/src/whale_alert.rs",
        "line": 81,
        "fields": [
          [
            "address",
            "String"
          ],
          [
            "owner",
            "Option<String>"
          ],
          [
            "owner_type",
            "OwnerType"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "WhaleBehaviorPattern",
        "file": "crates/data_intelligence/src/whale_alert.rs",
        "line": 110,
        "fields": [
          [
            "pattern_type",
            "WhalePatternType"
          ],
          [
            "confidence",
            "f64"
          ],
          [
            "predicted_impact",
            "MarketImpact"
          ],
          [
            "time_horizon_minutes",
            "u32"
          ],
          [
            "affected_assets",
            "Vec<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketImpact",
        "file": "crates/data_intelligence/src/whale_alert.rs",
        "line": 130,
        "fields": [
          [
            "price_impact_percent",
            "f64"
          ],
          [
            "volatility_increase",
            "f64"
          ],
          [
            "liquidity_change",
            "f64"
          ],
          [
            "cascade_probability",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "WhaleBehaviorPredictor",
        "file": "crates/data_intelligence/src/whale_alert.rs",
        "line": 138,
        "fields": [
          [
            "whale_history",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "pattern_detector",
            "Arc<PatternDetector>"
          ],
          [
            "cascade_detector",
            "Arc<CascadeDetector>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "WhaleHistory",
        "file": "crates/data_intelligence/src/whale_alert.rs",
        "line": 150,
        "fields": [
          [
            "address",
            "String"
          ],
          [
            "transactions",
            "VecDeque<WhaleTransaction>"
          ],
          [
            "last_pattern",
            "Option<WhalePatternType>"
          ],
          [
            "pattern_confidence",
            "f64"
          ],
          [
            "total_volume_30d",
            "Decimal"
          ],
          [
            "transaction_frequency",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "PatternDetector",
        "file": "crates/data_intelligence/src/whale_alert.rs",
        "line": 159,
        "fields": [
          [
            "accumulation_threshold",
            "f64"
          ],
          [
            "distribution_threshold",
            "f64"
          ],
          [
            "rotation_indicators",
            "Vec<String>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "CascadeDetector",
        "file": "crates/data_intelligence/src/whale_alert.rs",
        "line": 166,
        "fields": [
          [
            "liquidation_levels",
            "HashMap<String"
          ],
          [
            "correlation_matrix",
            "Vec<Vec<f64>>"
          ],
          [
            "contagion_threshold",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "WhaleAlertIntegration",
        "file": "crates/data_intelligence/src/whale_alert.rs",
        "line": 385,
        "fields": [
          [
            "config",
            "WhaleAlertConfig"
          ],
          [
            "http_client",
            "Client"
          ],
          [
            "predictor",
            "Arc<WhaleBehaviorPredictor>"
          ],
          [
            "transaction_cache",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "metrics",
            "Arc<RwLock<WhaleAlertMetrics>>"
          ],
          [
            "event_sender",
            "mpsc::UnboundedSender<WhaleEvent>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "WhaleAlertMetrics",
        "file": "crates/data_intelligence/src/whale_alert.rs",
        "line": 401,
        "fields": [
          [
            "total_transactions_processed",
            "u64"
          ],
          [
            "transactions_per_minute",
            "f64"
          ],
          [
            "largest_transaction_usd",
            "Decimal"
          ],
          [
            "total_volume_24h",
            "Decimal"
          ],
          [
            "cascade_alerts_triggered",
            "u32"
          ],
          [
            "api_calls_remaining",
            "Option<u32>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "WhaleAlertResponse",
        "file": "crates/data_intelligence/src/whale_alert.rs",
        "line": 596,
        "fields": [
          [
            "transactions",
            "Vec<WhaleTransaction>"
          ],
          [
            "count",
            "u32"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "XAIConfig",
        "file": "crates/data_intelligence/src/xai_integration.rs",
        "line": 17,
        "fields": [
          [
            "api_key",
            "String"
          ],
          [
            "api_endpoint",
            "String"
          ],
          [
            "model",
            "String"
          ],
          [
            "max_tokens",
            "u32"
          ],
          [
            "temperature",
            "f32"
          ],
          [
            "cache_duration_seconds",
            "i64"
          ],
          [
            "batch_size",
            "usize"
          ],
          [
            "rate_limit_per_minute",
            "u32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "XAIIntegration",
        "file": "crates/data_intelligence/src/xai_integration.rs",
        "line": 44,
        "fields": [
          [
            "config",
            "XAIConfig"
          ],
          [
            "client",
            "Client"
          ],
          [
            "cache",
            "Arc<RwLock<SentimentCache>>"
          ],
          [
            "rate_limiter",
            "Arc<RwLock<RateLimiter>>"
          ],
          [
            "prompt_templates",
            "HashMap<String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SentimentCache",
        "file": "crates/data_intelligence/src/xai_integration.rs",
        "line": 53,
        "fields": [
          [
            "entries",
            "HashMap<String"
          ],
          [
            "hit_rate",
            "f64"
          ],
          [
            "total_requests",
            "u64"
          ],
          [
            "cache_hits",
            "u64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "CachedSentiment",
        "file": "crates/data_intelligence/src/xai_integration.rs",
        "line": 61,
        "fields": [
          [
            "sentiment",
            "XAISentiment"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "expires_at",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "RateLimiter",
        "file": "crates/data_intelligence/src/xai_integration.rs",
        "line": 68,
        "fields": [
          [
            "requests",
            "Vec<DateTime<Utc>>"
          ],
          [
            "limit_per_minute",
            "u32"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "GrokRequest",
        "file": "crates/data_intelligence/src/xai_integration.rs",
        "line": 496,
        "fields": [
          [
            "model",
            "String"
          ],
          [
            "messages",
            "Vec<Message>"
          ],
          [
            "max_tokens",
            "u32"
          ],
          [
            "temperature",
            "f32"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "Message",
        "file": "crates/data_intelligence/src/xai_integration.rs",
        "line": 504,
        "fields": [
          [
            "role",
            "String"
          ],
          [
            "content",
            "String"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "GrokResponse",
        "file": "crates/data_intelligence/src/xai_integration.rs",
        "line": 510,
        "fields": [
          [
            "choices",
            "Vec<Choice>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "Choice",
        "file": "crates/data_intelligence/src/xai_integration.rs",
        "line": 515,
        "fields": [
          [
            "message",
            "Message"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "SentimentJson",
        "file": "crates/data_intelligence/src/xai_integration.rs",
        "line": 520,
        "fields": [
          [
            "bullish_score",
            "f64"
          ],
          [
            "bearish_score",
            "f64"
          ],
          [
            "neutral_score",
            "f64"
          ],
          [
            "key_topics",
            "Vec<String>"
          ],
          [
            "regime_prediction",
            "String"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "EventImpactAnalysis",
        "file": "crates/data_intelligence/src/xai_integration.rs",
        "line": 530,
        "fields": [
          [
            "immediate_impact",
            "f64"
          ],
          [
            "short_term_impact",
            "f64"
          ],
          [
            "long_term_impact",
            "f64"
          ],
          [
            "affected_assets",
            "Vec<String>"
          ],
          [
            "recommendations",
            "Vec<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TechnicalIndicators",
        "file": "crates/data_intelligence/src/xai_integration.rs",
        "line": 539,
        "fields": [
          [
            "rsi",
            "f64"
          ],
          [
            "macd",
            "f64"
          ],
          [
            "bb_position",
            "String"
          ],
          [
            "volume_profile",
            "String"
          ],
          [
            "sr_levels",
            "Vec<f64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TechnicalAugmentation",
        "file": "crates/data_intelligence/src/xai_integration.rs",
        "line": 548,
        "fields": [
          [
            "pattern_confirmation",
            "f64"
          ],
          [
            "false_signal_probability",
            "f64"
          ],
          [
            "hidden_divergences",
            "Vec<String>"
          ],
          [
            "institutional_activity",
            "f64"
          ],
          [
            "entry_points",
            "Vec<Decimal>"
          ],
          [
            "exit_points",
            "Vec<Decimal>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MacroData",
        "file": "crates/data_intelligence/src/xai_integration.rs",
        "line": 558,
        "fields": [
          [
            "fed_rate",
            "f64"
          ],
          [
            "ten_year",
            "f64"
          ],
          [
            "dxy",
            "f64"
          ],
          [
            "sp500",
            "f64"
          ],
          [
            "gold",
            "Decimal"
          ],
          [
            "vix",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CryptoMetrics",
        "file": "crates/data_intelligence/src/xai_integration.rs",
        "line": 568,
        "fields": [
          [
            "btc_price",
            "Decimal"
          ],
          [
            "eth_price",
            "Decimal"
          ],
          [
            "market_cap",
            "Decimal"
          ],
          [
            "btc_dominance",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MacroCorrelationAnalysis",
        "file": "crates/data_intelligence/src/xai_integration.rs",
        "line": 576,
        "fields": [
          [
            "correlations",
            "HashMap<String"
          ],
          [
            "leading_indicators",
            "Vec<String>"
          ],
          [
            "regime",
            "String"
          ],
          [
            "divergences",
            "Vec<String>"
          ],
          [
            "hedging_recommendations",
            "Vec<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CacheMetrics",
        "file": "crates/data_intelligence/src/xai_integration.rs",
        "line": 585,
        "fields": [
          [
            "entries",
            "usize"
          ],
          [
            "hit_rate",
            "f64"
          ],
          [
            "total_requests",
            "u64"
          ],
          [
            "cache_hits",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ValidationConfig",
        "file": "crates/data_intelligence/src/historical_validator.rs",
        "line": 23,
        "fields": [
          [
            "z_score_threshold",
            "f64"
          ],
          [
            "min_historical_points",
            "usize"
          ],
          [
            "enable_outlier_detection",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "HistoricalValidator",
        "file": "crates/data_intelligence/src/historical_validator.rs",
        "line": 40,
        "fields": [
          [
            "config",
            "ValidationConfig"
          ],
          [
            "historical_data",
            "VecDeque<DataPoint>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DataPoint",
        "file": "crates/data_intelligence/src/historical_validator.rs",
        "line": 46,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "value",
            "Decimal"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "Frame",
        "file": "crates/websocket/src/zero_copy.rs",
        "line": 26,
        "fields": [
          [
            "opcode",
            "OpCode"
          ],
          [
            "payload",
            "&'a [u8]"
          ],
          [
            "is_final",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ZeroCopyParser",
        "file": "crates/websocket/src/zero_copy.rs",
        "line": 43,
        "fields": [
          [
            "buffer",
            "BytesMut"
          ],
          [
            "max_frame_size",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "JsonMessageParser",
        "file": "crates/websocket/src/zero_copy.rs",
        "line": 161,
        "fields": [
          [
            "parser",
            "ZeroCopyParser"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderBookParser",
        "file": "crates/websocket/src/zero_copy.rs",
        "line": 195,
        "fields": [
          [
            "parser",
            "ZeroCopyParser"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderBookUpdate",
        "file": "crates/websocket/src/zero_copy.rs",
        "line": 228,
        "fields": [
          [
            "symbol",
            "&'a str"
          ],
          [
            "bids",
            "Vec<[f64; 2]>"
          ],
          [
            "asks",
            "Vec<[f64; 2]>"
          ],
          [
            "timestamp",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Message",
        "file": "crates/websocket/src/zero_copy.rs",
        "line": 289,
        "fields": [
          [
            "symbol",
            "&'a str"
          ],
          [
            "price",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "WebSocketConfig",
        "file": "crates/websocket/src/client.rs",
        "line": 53,
        "fields": [
          [
            "url",
            "String"
          ],
          [
            "reconnect_interval",
            "Duration"
          ],
          [
            "max_reconnect_attempts",
            "u32"
          ],
          [
            "ping_interval",
            "Duration"
          ],
          [
            "pong_timeout",
            "Duration"
          ],
          [
            "message_buffer_size",
            "usize"
          ],
          [
            "max_frame_size",
            "usize"
          ],
          [
            "circuit_breaker_config",
            "CircuitConfig"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "WebSocketClient",
        "file": "crates/websocket/src/client.rs",
        "line": 79,
        "fields": [
          [
            "config",
            "Arc<WebSocketConfig>"
          ],
          [
            "circuit_breaker",
            "Arc<CircuitBreaker>"
          ],
          [
            "is_connected",
            "Arc<AtomicBool>"
          ],
          [
            "messages_sent",
            "Arc<AtomicU64>"
          ],
          [
            "messages_received",
            "Arc<AtomicU64>"
          ],
          [
            "last_ping",
            "Arc<RwLock<Instant>>"
          ],
          [
            "last_pong",
            "Arc<RwLock<Instant>>"
          ],
          [
            "tx_sender",
            "mpsc::Sender<Message>"
          ],
          [
            "rx_receiver",
            "Arc<RwLock<Option<mpsc::Receiver<Message>>>>"
          ],
          [
            "reconnect_strategy",
            "Arc<RwLock<Box<dyn ReconnectStrategy + Send + Sync>>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "WebSocketStats",
        "file": "crates/websocket/src/client.rs",
        "line": 253,
        "fields": [
          [
            "messages_sent",
            "u64"
          ],
          [
            "messages_received",
            "u64"
          ],
          [
            "is_connected",
            "bool"
          ],
          [
            "last_ping",
            "Instant"
          ],
          [
            "last_pong",
            "Instant"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "WebSocketManager",
        "file": "crates/websocket/src/manager.rs",
        "line": 18,
        "fields": [
          [
            "connections",
            "Arc<DashMap<String"
          ],
          [
            "message_router",
            "Arc<MessageRouter>"
          ],
          [
            "stats_collector",
            "Arc<StatsCollector>"
          ],
          [
            "is_running",
            "Arc<AtomicBool>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MessageRouter",
        "file": "crates/websocket/src/manager.rs",
        "line": 156,
        "fields": [
          [
            "handlers",
            "Arc<DashMap<MessageType"
          ],
          [
            "broadcast_channel",
            "broadcast::Sender<Message>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "StatsCollector",
        "file": "crates/websocket/src/manager.rs",
        "line": 205,
        "fields": [
          [
            "total_messages_sent",
            "Arc<AtomicU64>"
          ],
          [
            "total_messages_received",
            "Arc<AtomicU64>"
          ],
          [
            "connection_count",
            "Arc<AtomicUsize>"
          ],
          [
            "last_update",
            "Arc<RwLock<Instant>>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "StatsSummary",
        "file": "crates/websocket/src/manager.rs",
        "line": 252,
        "fields": [
          [
            "total_messages_sent",
            "u64"
          ],
          [
            "total_messages_received",
            "u64"
          ],
          [
            "active_connections",
            "usize"
          ],
          [
            "last_update",
            "Instant"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ConnectionPool",
        "file": "crates/websocket/src/manager.rs",
        "line": 260,
        "fields": [
          [
            "connections",
            "Vec<Arc<WebSocketClient>>"
          ],
          [
            "current_index",
            "Arc<AtomicUsize>"
          ],
          [
            "strategy",
            "LoadBalancingStrategy"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ExponentialBackoff",
        "file": "crates/websocket/src/reconnect.rs",
        "line": 21,
        "fields": [
          [
            "base_delay",
            "Duration"
          ],
          [
            "max_delay",
            "Duration"
          ],
          [
            "max_attempts",
            "u32"
          ],
          [
            "multiplier",
            "f64"
          ],
          [
            "jitter_factor",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FixedInterval",
        "file": "crates/websocket/src/reconnect.rs",
        "line": 93,
        "fields": [
          [
            "interval",
            "Duration"
          ],
          [
            "max_attempts",
            "u32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "LinearBackoff",
        "file": "crates/websocket/src/reconnect.rs",
        "line": 122,
        "fields": [
          [
            "base_delay",
            "Duration"
          ],
          [
            "increment",
            "Duration"
          ],
          [
            "max_delay",
            "Duration"
          ],
          [
            "max_attempts",
            "u32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ReliableWebSocketConfig",
        "file": "crates/websocket/src/reliable_client.rs",
        "line": 60,
        "fields": [
          [
            "url",
            "String"
          ],
          [
            "name",
            "String"
          ],
          [
            "auto_reconnect",
            "bool"
          ],
          [
            "initial_reconnect_delay",
            "Duration"
          ],
          [
            "max_reconnect_delay",
            "Duration"
          ],
          [
            "max_reconnect_attempts",
            "u32"
          ],
          [
            "reconnect_jitter",
            "f64"
          ],
          [
            "ping_interval",
            "Duration"
          ],
          [
            "pong_timeout",
            "Duration"
          ],
          [
            "idle_timeout",
            "Duration"
          ],
          [
            "message_buffer_size",
            "usize"
          ],
          [
            "max_pending_messages",
            "usize"
          ],
          [
            "max_frame_size",
            "usize"
          ],
          [
            "circuit_breaker_enabled",
            "bool"
          ],
          [
            "circuit_breaker_threshold",
            "u32"
          ],
          [
            "circuit_breaker_recovery",
            "Duration"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ReliableWebSocketClient",
        "file": "crates/websocket/src/reliable_client.rs",
        "line": 158,
        "fields": [
          [
            "config",
            "Arc<ReliableWebSocketConfig>"
          ],
          [
            "state",
            "Arc<RwLock<ConnectionState>>"
          ],
          [
            "is_running",
            "Arc<AtomicBool>"
          ],
          [
            "reconnect_attempts",
            "Arc<AtomicU32>"
          ],
          [
            "consecutive_failures",
            "Arc<AtomicU32>"
          ],
          [
            "total_connects",
            "Arc<AtomicU64>"
          ],
          [
            "total_disconnects",
            "Arc<AtomicU64>"
          ],
          [
            "messages_sent",
            "Arc<AtomicU64>"
          ],
          [
            "messages_received",
            "Arc<AtomicU64>"
          ],
          [
            "last_message_time",
            "Arc<RwLock<Instant>>"
          ],
          [
            "outbound_tx",
            "mpsc::Sender<WsMessage>"
          ],
          [
            "outbound_rx",
            "Arc<RwLock<Option<mpsc::Receiver<WsMessage>>>>"
          ],
          [
            "inbound_tx",
            "broadcast::Sender<Message>"
          ],
          [
            "pending_messages",
            "Arc<RwLock<VecDeque<WsMessage>>>"
          ],
          [
            "retry_executor",
            "Arc<RetryExecutor>"
          ],
          [
            "shutdown_tx",
            "Arc<RwLock<Option<oneshot::Sender<()>>>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "WebSocketStats",
        "file": "crates/websocket/src/reliable_client.rs",
        "line": 610,
        "fields": [
          [
            "total_connects",
            "u64"
          ],
          [
            "total_disconnects",
            "u64"
          ],
          [
            "messages_sent",
            "u64"
          ],
          [
            "messages_received",
            "u64"
          ],
          [
            "reconnect_attempts",
            "u32"
          ],
          [
            "consecutive_failures",
            "u32"
          ],
          [
            "pending_messages",
            "usize"
          ],
          [
            "last_message_time",
            "Instant"
          ],
          [
            "state",
            "ConnectionState"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SubscribeMessage",
        "file": "crates/websocket/src/message.rs",
        "line": 23,
        "fields": [
          [
            "channels",
            "Vec<String>"
          ],
          [
            "symbols",
            "Vec<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "UnsubscribeMessage",
        "file": "crates/websocket/src/message.rs",
        "line": 29,
        "fields": [
          [
            "channels",
            "Vec<String>"
          ],
          [
            "symbols",
            "Vec<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketData",
        "file": "crates/websocket/src/message.rs",
        "line": 35,
        "fields": [
          [
            "symbol",
            "String"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "data_type",
            "MarketDataType"
          ],
          [
            "exchange",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TradeData",
        "file": "crates/websocket/src/message.rs",
        "line": 52,
        "fields": [
          [
            "price",
            "f64"
          ],
          [
            "quantity",
            "f64"
          ],
          [
            "side",
            "TradeSide"
          ],
          [
            "trade_id",
            "String"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderBookData",
        "file": "crates/websocket/src/message.rs",
        "line": 68,
        "fields": [
          [
            "bids",
            "Vec<PriceLevel>"
          ],
          [
            "asks",
            "Vec<PriceLevel>"
          ],
          [
            "sequence",
            "u64"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PriceLevel",
        "file": "crates/websocket/src/message.rs",
        "line": 76,
        "fields": [
          [
            "price",
            "f64"
          ],
          [
            "quantity",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TickerData",
        "file": "crates/websocket/src/message.rs",
        "line": 82,
        "fields": [
          [
            "last_price",
            "f64"
          ],
          [
            "bid_price",
            "f64"
          ],
          [
            "ask_price",
            "f64"
          ],
          [
            "volume_24h",
            "f64"
          ],
          [
            "high_24h",
            "f64"
          ],
          [
            "low_24h",
            "f64"
          ],
          [
            "open_24h",
            "f64"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CandleData",
        "file": "crates/websocket/src/message.rs",
        "line": 94,
        "fields": [
          [
            "open",
            "f64"
          ],
          [
            "high",
            "f64"
          ],
          [
            "low",
            "f64"
          ],
          [
            "close",
            "f64"
          ],
          [
            "volume",
            "f64"
          ],
          [
            "timeframe",
            "String"
          ],
          [
            "open_time",
            "DateTime<Utc>"
          ],
          [
            "close_time",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderUpdate",
        "file": "crates/websocket/src/message.rs",
        "line": 106,
        "fields": [
          [
            "order_id",
            "String"
          ],
          [
            "client_order_id",
            "String"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "status",
            "OrderStatus"
          ],
          [
            "side",
            "OrderSide"
          ],
          [
            "order_type",
            "OrderType"
          ],
          [
            "price",
            "Option<f64>"
          ],
          [
            "quantity",
            "f64"
          ],
          [
            "filled_quantity",
            "f64"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "AccountUpdate",
        "file": "crates/websocket/src/message.rs",
        "line": 147,
        "fields": [
          [
            "event_type",
            "AccountEventType"
          ],
          [
            "balances",
            "Vec<Balance>"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Balance",
        "file": "crates/websocket/src/message.rs",
        "line": 162,
        "fields": [
          [
            "asset",
            "String"
          ],
          [
            "free",
            "f64"
          ],
          [
            "locked",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ErrorMessage",
        "file": "crates/websocket/src/message.rs",
        "line": 169,
        "fields": [
          [
            "code",
            "i32"
          ],
          [
            "message",
            "String"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ExchangeLimits",
        "file": "crates/exchanges/src/rate_limiter.rs",
        "line": 35,
        "fields": [
          [
            "spot_orders_per_sec",
            "u32"
          ],
          [
            "futures_orders_per_sec",
            "u32"
          ],
          [
            "websocket_messages_per_sec",
            "u32"
          ],
          [
            "rest_requests_per_min",
            "u32"
          ],
          [
            "weight_limit_per_min",
            "u32"
          ],
          [
            "burst_multiplier",
            "f32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RateLimiter",
        "file": "crates/exchanges/src/rate_limiter.rs",
        "line": 80,
        "fields": [
          [
            "tokens",
            "CachePadded<AtomicU32>"
          ],
          [
            "last_refill",
            "CachePadded<AtomicU64>"
          ],
          [
            "max_tokens",
            "u32"
          ],
          [
            "refill_rate",
            "u32"
          ],
          [
            "refill_interval",
            "Duration"
          ],
          [
            "burst_tokens",
            "CachePadded<AtomicU32>"
          ],
          [
            "burst_window_start",
            "CachePadded<AtomicU64>"
          ],
          [
            "burst_limit",
            "u32"
          ],
          [
            "total_requests",
            "CachePadded<AtomicU64>"
          ],
          [
            "rejected_requests",
            "CachePadded<AtomicU64>"
          ],
          [
            "semaphore",
            "Arc<Semaphore>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RateLimiterStats",
        "file": "crates/exchanges/src/rate_limiter.rs",
        "line": 257,
        "fields": [
          [
            "total_requests",
            "u64"
          ],
          [
            "rejected_requests",
            "u64"
          ],
          [
            "current_tokens",
            "u32"
          ],
          [
            "burst_tokens",
            "u32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ExchangeRateLimitManager",
        "file": "crates/exchanges/src/rate_limiter.rs",
        "line": 265,
        "fields": [
          [
            "binance_spot",
            "Arc<RateLimiter>"
          ],
          [
            "binance_futures",
            "Arc<RateLimiter>"
          ],
          [
            "kraken_spot",
            "Arc<RateLimiter>"
          ],
          [
            "kraken_futures",
            "Arc<RateLimiter>"
          ],
          [
            "coinbase_spot",
            "Arc<RateLimiter>"
          ],
          [
            "coinbase_futures",
            "Arc<RateLimiter>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MasterOrchestrationSystem",
        "file": "crates/risk/src/master_orchestration_system.rs",
        "line": 47,
        "fields": [
          [
            "decision_orchestrator",
            "Arc<DecisionOrchestrator>"
          ],
          [
            "hyperparameter_system",
            "Arc<RwLock<HyperparameterIntegrationSystem>>"
          ],
          [
            "parameter_manager",
            "Arc<ParameterManager>"
          ],
          [
            "performance_tracker",
            "Arc<RwLock<PerformanceTracker>>"
          ],
          [
            "regime_detector",
            "Arc<RwLock<RegimeDetector>>"
          ],
          [
            "feedback_aggregator",
            "Arc<RwLock<FeedbackAggregator>>"
          ],
          [
            "execution_monitor",
            "Arc<RwLock<ExecutionMonitor>>"
          ],
          [
            "health_monitor",
            "Arc<RwLock<SystemHealthMonitor>>"
          ],
          [
            "config",
            "MasterConfig"
          ],
          [
            "last_optimization",
            "Arc<RwLock<DateTime<Utc>>>"
          ],
          [
            "is_running",
            "Arc<RwLock<bool>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MasterConfig",
        "file": "crates/risk/src/master_orchestration_system.rs",
        "line": 84,
        "fields": [
          [
            "optimization_interval",
            "Duration"
          ],
          [
            "min_trades_for_optimization",
            "usize"
          ],
          [
            "performance_degradation_threshold",
            "f64"
          ],
          [
            "max_drawdown_allowed",
            "f64"
          ],
          [
            "min_sharpe_ratio",
            "f64"
          ],
          [
            "regime_change_sensitivity",
            "f64"
          ],
          [
            "enable_auto_optimization",
            "bool"
          ],
          [
            "enable_ml_retraining",
            "bool"
          ],
          [
            "enable_regime_adaptation",
            "bool"
          ],
          [
            "enable_profit_maximization",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PerformanceTracker",
        "file": "crates/risk/src/master_orchestration_system.rs",
        "line": 115,
        "fields": [
          [
            "trades",
            "Vec<TradeRecord>"
          ],
          [
            "current_sharpe",
            "f64"
          ],
          [
            "current_drawdown",
            "f64"
          ],
          [
            "current_win_rate",
            "f64"
          ],
          [
            "total_pnl",
            "f64"
          ],
          [
            "peak_equity",
            "f64"
          ],
          [
            "rolling_returns",
            "Vec<f64>"
          ],
          [
            "last_updated",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "TradeRecord",
        "file": "crates/risk/src/master_orchestration_system.rs",
        "line": 127,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "entry_price",
            "f64"
          ],
          [
            "exit_price",
            "Option<f64>"
          ],
          [
            "size",
            "f64"
          ],
          [
            "pnl",
            "Option<f64>"
          ],
          [
            "signal_confidence",
            "f64"
          ],
          [
            "ml_confidence",
            "f64"
          ],
          [
            "ta_confidence",
            "f64"
          ],
          [
            "regime",
            "MarketRegime"
          ],
          [
            "parameters_used",
            "HashMap<String"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "RegimeDetector",
        "file": "crates/risk/src/master_orchestration_system.rs",
        "line": 141,
        "fields": [
          [
            "hmm_regime",
            "MarketRegime"
          ],
          [
            "volatility_regime",
            "MarketRegime"
          ],
          [
            "correlation_regime",
            "MarketRegime"
          ],
          [
            "consensus_regime",
            "MarketRegime"
          ],
          [
            "last_change",
            "DateTime<Utc>"
          ],
          [
            "confidence",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "FeedbackAggregator",
        "file": "crates/risk/src/master_orchestration_system.rs",
        "line": 151,
        "fields": [
          [
            "ml_feedback",
            "Vec<MLFeedback>"
          ],
          [
            "ta_feedback",
            "Vec<TAFeedback>"
          ],
          [
            "execution_feedback",
            "Vec<ExecutionFeedback>"
          ],
          [
            "parameter_effectiveness",
            "HashMap<String"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "MLFeedback",
        "file": "crates/risk/src/master_orchestration_system.rs",
        "line": 159,
        "fields": [
          [
            "prediction",
            "f64"
          ],
          [
            "actual",
            "f64"
          ],
          [
            "confidence",
            "f64"
          ],
          [
            "features_used",
            "Vec<f64>"
          ],
          [
            "shap_values",
            "Vec<f64>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "TAFeedback",
        "file": "crates/risk/src/master_orchestration_system.rs",
        "line": 168,
        "fields": [
          [
            "indicator",
            "String"
          ],
          [
            "signal",
            "f64"
          ],
          [
            "effectiveness",
            "f64"
          ],
          [
            "timeframe",
            "String"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ExecutionFeedback",
        "file": "crates/risk/src/master_orchestration_system.rs",
        "line": 176,
        "fields": [
          [
            "algorithm",
            "ExecutionAlgorithm"
          ],
          [
            "slippage",
            "f64"
          ],
          [
            "market_impact",
            "f64"
          ],
          [
            "fill_rate",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ExecutionMonitor",
        "file": "crates/risk/src/master_orchestration_system.rs",
        "line": 184,
        "fields": [
          [
            "total_slippage",
            "f64"
          ],
          [
            "total_fees",
            "f64"
          ],
          [
            "average_fill_time",
            "f64"
          ],
          [
            "rejected_orders",
            "usize"
          ],
          [
            "successful_orders",
            "usize"
          ],
          [
            "algorithm_performance",
            "HashMap<String"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "AlgorithmMetrics",
        "file": "crates/risk/src/master_orchestration_system.rs",
        "line": 194,
        "fields": [
          [
            "uses",
            "usize"
          ],
          [
            "avg_slippage",
            "f64"
          ],
          [
            "avg_impact",
            "f64"
          ],
          [
            "success_rate",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "SystemHealthMonitor",
        "file": "crates/risk/src/master_orchestration_system.rs",
        "line": 202,
        "fields": [
          [
            "ml_health",
            "ComponentHealth"
          ],
          [
            "ta_health",
            "ComponentHealth"
          ],
          [
            "risk_health",
            "ComponentHealth"
          ],
          [
            "execution_health",
            "ComponentHealth"
          ],
          [
            "data_health",
            "ComponentHealth"
          ],
          [
            "overall_health",
            "f64"
          ],
          [
            "alerts",
            "Vec<SystemAlert>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ComponentHealth",
        "file": "crates/risk/src/master_orchestration_system.rs",
        "line": 213,
        "fields": [
          [
            "status",
            "HealthStatus"
          ],
          [
            "latency_ms",
            "f64"
          ],
          [
            "error_rate",
            "f64"
          ],
          [
            "last_check",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "SystemAlert",
        "file": "crates/risk/src/master_orchestration_system.rs",
        "line": 229,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "severity",
            "AlertSeverity"
          ],
          [
            "component",
            "String"
          ],
          [
            "message",
            "String"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "IntegratedSignal",
        "file": "crates/risk/src/master_orchestration_system.rs",
        "line": 826,
        "fields": [
          [
            "action",
            "SignalAction"
          ],
          [
            "size",
            "Quantity"
          ],
          [
            "confidence",
            "Percentage"
          ],
          [
            "execution_strategy",
            "ExecutionAlgorithm"
          ],
          [
            "expected_costs",
            "ExecutionCosts"
          ],
          [
            "regime",
            "MarketRegime"
          ],
          [
            "parameters_used",
            "HashMap<String"
          ],
          [
            "latency_ms",
            "f64"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ExecutionCosts",
        "file": "crates/risk/src/master_orchestration_system.rs",
        "line": 840,
        "fields": [
          [
            "expected_slippage",
            "f64"
          ],
          [
            "spread_cost",
            "f64"
          ],
          [
            "algo_cost",
            "f64"
          ],
          [
            "total_cost",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "GradientBoostingModel",
        "file": "crates/risk/src/xgboost_model.rs",
        "line": 21,
        "fields": [
          [
            "trees",
            "Vec<DecisionTree>"
          ],
          [
            "learning_rate",
            "f64"
          ],
          [
            "max_depth",
            "usize"
          ],
          [
            "n_estimators",
            "usize"
          ],
          [
            "subsample",
            "f64"
          ],
          [
            "colsample_bytree",
            "f64"
          ],
          [
            "reg_lambda",
            "f64"
          ],
          [
            "reg_alpha",
            "f64"
          ],
          [
            "min_child_weight",
            "f64"
          ],
          [
            "gamma",
            "f64"
          ],
          [
            "feature_names",
            "Vec<String>"
          ],
          [
            "feature_importance",
            "HashMap<String"
          ],
          [
            "objective",
            "ObjectiveFunction"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DecisionTree",
        "file": "crates/risk/src/xgboost_model.rs",
        "line": 48,
        "fields": [
          [
            "root",
            "TreeNode"
          ],
          [
            "max_depth",
            "usize"
          ],
          [
            "feature_importance_contrib",
            "HashMap<usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TrainingResult",
        "file": "crates/risk/src/xgboost_model.rs",
        "line": 718,
        "fields": [
          [
            "n_trees",
            "usize"
          ],
          [
            "train_losses",
            "Vec<f64>"
          ],
          [
            "validation_losses",
            "Vec<f64>"
          ],
          [
            "best_iteration",
            "usize"
          ],
          [
            "feature_importance",
            "HashMap<String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "BestSplit",
        "file": "crates/risk/src/xgboost_model.rs",
        "line": 728,
        "fields": [
          [
            "feature_idx",
            "usize"
          ],
          [
            "threshold",
            "f64"
          ],
          [
            "gain",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "MLFeedbackSystem",
        "file": "crates/risk/src/ml_feedback.rs",
        "line": 20,
        "fields": [
          [
            "experience_buffer",
            "Arc<RwLock<ExperienceBuffer>>"
          ],
          [
            "feature_importance",
            "Arc<RwLock<FeatureImportance>>"
          ],
          [
            "strategy_performance",
            "Arc<RwLock<StrategyPerformance>>"
          ],
          [
            "prediction_tracker",
            "Arc<RwLock<PredictionTracker>>"
          ],
          [
            "online_learner",
            "Arc<RwLock<OnlineLearner>>"
          ],
          [
            "contextual_bandit",
            "Arc<RwLock<ContextualBandit>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ExperienceBuffer",
        "file": "crates/risk/src/ml_feedback.rs",
        "line": 42,
        "fields": [
          [
            "buffer",
            "VecDeque<Experience>"
          ],
          [
            "max_size",
            "usize"
          ],
          [
            "priorities",
            "VecDeque<f64>"
          ],
          [
            "alpha",
            "f64"
          ],
          [
            "beta",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "Experience",
        "file": "crates/risk/src/ml_feedback.rs",
        "line": 53,
        "fields": [
          [
            "market_state",
            "MarketState"
          ],
          [
            "features",
            "Vec<f64>"
          ],
          [
            "action",
            "SignalAction"
          ],
          [
            "size",
            "Quantity"
          ],
          [
            "confidence",
            "Percentage"
          ],
          [
            "reward",
            "f64"
          ],
          [
            "next_state",
            "MarketState"
          ],
          [
            "terminal",
            "bool"
          ],
          [
            "timestamp",
            "u64"
          ],
          [
            "regime",
            "MarketRegime"
          ],
          [
            "strategy_used",
            "String"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "MarketState",
        "file": "crates/risk/src/ml_feedback.rs",
        "line": 75,
        "fields": [
          [
            "price",
            "Price"
          ],
          [
            "volume",
            "Quantity"
          ],
          [
            "volatility",
            "Percentage"
          ],
          [
            "trend",
            "f64"
          ],
          [
            "momentum",
            "f64"
          ],
          [
            "bid_ask_spread",
            "Percentage"
          ],
          [
            "order_book_imbalance",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FeatureImportance",
        "file": "crates/risk/src/ml_feedback.rs",
        "line": 148,
        "fields": [
          [
            "importance_scores",
            "HashMap<String"
          ],
          [
            "feature_correlations",
            "HashMap<String"
          ],
          [
            "shap_values",
            "HashMap<String"
          ],
          [
            "permutation_scores",
            "HashMap<String"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "StrategyPerformance",
        "file": "crates/risk/src/ml_feedback.rs",
        "line": 240,
        "fields": [
          [
            "performance",
            "HashMap<String"
          ],
          [
            "ab_tests",
            "HashMap<String"
          ],
          [
            "bandit_scores",
            "HashMap<String"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "PerformanceMetrics",
        "file": "crates/risk/src/ml_feedback.rs",
        "line": 252,
        "fields": [
          [
            "total_trades",
            "u64"
          ],
          [
            "winning_trades",
            "u64"
          ],
          [
            "total_pnl",
            "f64"
          ],
          [
            "sharpe_ratio",
            "f64"
          ],
          [
            "max_drawdown",
            "f64"
          ],
          [
            "avg_holding_time",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ABTestResult",
        "file": "crates/risk/src/ml_feedback.rs",
        "line": 262,
        "fields": [
          [
            "variant_a_wins",
            "u64"
          ],
          [
            "variant_b_wins",
            "u64"
          ],
          [
            "p_value",
            "f64"
          ],
          [
            "confidence",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "BanditScore",
        "file": "crates/risk/src/ml_feedback.rs",
        "line": 270,
        "fields": [
          [
            "successes",
            "f64"
          ],
          [
            "failures",
            "f64"
          ],
          [
            "thompson_sample",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "PredictionTracker",
        "file": "crates/risk/src/ml_feedback.rs",
        "line": 344,
        "fields": [
          [
            "predictions",
            "VecDeque<PredictionRecord>"
          ],
          [
            "calibration_bins",
            "Vec<CalibrationBin>"
          ],
          [
            "brier_scores",
            "VecDeque<f64>"
          ],
          [
            "mape_scores",
            "VecDeque<f64>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "PredictionRecord",
        "file": "crates/risk/src/ml_feedback.rs",
        "line": 359,
        "fields": [
          [
            "timestamp",
            "u64"
          ],
          [
            "predicted_return",
            "f64"
          ],
          [
            "actual_return",
            "f64"
          ],
          [
            "confidence",
            "f64"
          ],
          [
            "features_used",
            "Vec<String>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "CalibrationBin",
        "file": "crates/risk/src/ml_feedback.rs",
        "line": 368,
        "fields": [
          [
            "confidence_range",
            "(f64"
          ],
          [
            "predicted_prob",
            "f64"
          ],
          [
            "actual_freq",
            "f64"
          ],
          [
            "count",
            "u64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "OnlineLearner",
        "file": "crates/risk/src/ml_feedback.rs",
        "line": 472,
        "fields": [
          [
            "primary_model",
            "Arc<RwLock<GradientBoostingModel>>"
          ],
          [
            "feature_normalizer",
            "Arc<RwLock<FeatureNormalizer>>"
          ],
          [
            "training_buffer",
            "Arc<RwLock<TrainingBuffer>>"
          ],
          [
            "model_versions",
            "Arc<RwLock<ModelVersionManager>>"
          ],
          [
            "performance_tracker",
            "Arc<RwLock<ModelPerformanceTracker>>"
          ],
          [
            "retrain_threshold",
            "usize"
          ],
          [
            "min_training_samples",
            "usize"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "FeatureNormalizer",
        "file": "crates/risk/src/ml_feedback.rs",
        "line": 494,
        "fields": [
          [
            "means",
            "Vec<f64>"
          ],
          [
            "stds",
            "Vec<f64>"
          ],
          [
            "mins",
            "Vec<f64>"
          ],
          [
            "maxs",
            "Vec<f64>"
          ],
          [
            "n_samples",
            "usize"
          ],
          [
            "normalization_type",
            "NormalizationType"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "TrainingBuffer",
        "file": "crates/risk/src/ml_feedback.rs",
        "line": 577,
        "fields": [
          [
            "features",
            "Vec<Vec<f64>>"
          ],
          [
            "targets",
            "Vec<f64>"
          ],
          [
            "weights",
            "Vec<f64>"
          ],
          [
            "max_size",
            "usize"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ModelVersionManager",
        "file": "crates/risk/src/ml_feedback.rs",
        "line": 626,
        "fields": [
          [
            "versions",
            "HashMap<String"
          ],
          [
            "active_version",
            "String"
          ],
          [
            "champion_version",
            "String"
          ],
          [
            "challenger_versions",
            "Vec<String>"
          ],
          [
            "performance_history",
            "HashMap<String"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ModelPerformanceTracker",
        "file": "crates/risk/src/ml_feedback.rs",
        "line": 665,
        "fields": [
          [
            "predictions",
            "VecDeque<f64>"
          ],
          [
            "actuals",
            "VecDeque<f64>"
          ],
          [
            "timestamps",
            "VecDeque<u64>"
          ],
          [
            "max_history",
            "usize"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ContextualBandit",
        "file": "crates/risk/src/ml_feedback.rs",
        "line": 835,
        "fields": [
          [
            "arms",
            "HashMap<String"
          ],
          [
            "exploration_bonus",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "BetaDistribution",
        "file": "crates/risk/src/ml_feedback.rs",
        "line": 844,
        "fields": [
          [
            "alpha",
            "f64"
          ],
          [
            "beta",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "MLMetrics",
        "file": "crates/risk/src/ml_feedback.rs",
        "line": 1102,
        "fields": [
          [
            "calibration_score",
            "f64"
          ],
          [
            "brier_score",
            "f64"
          ],
          [
            "top_features",
            "Vec<(String"
          ],
          [
            "best_strategy",
            "Option<String>"
          ],
          [
            "accuracy",
            "f64"
          ],
          [
            "mae",
            "f64"
          ],
          [
            "rmse",
            "f64"
          ],
          [
            "n_samples",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketAnalytics",
        "file": "crates/risk/src/market_analytics.rs",
        "line": 20,
        "fields": [
          [
            "price_history",
            "Arc<RwLock<PriceHistory>>"
          ],
          [
            "volume_profile",
            "Arc<RwLock<VolumeProfile>>"
          ],
          [
            "volatility_estimator",
            "Arc<RwLock<VolatilityEngine>>"
          ],
          [
            "ta_calculator",
            "Arc<RwLock<TechnicalAnalysis>>"
          ],
          [
            "ml_feature_extractor",
            "Arc<RwLock<FeatureExtractor>>"
          ],
          [
            "performance_calculator",
            "Arc<RwLock<PerformanceCalculator>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PriceHistory",
        "file": "crates/risk/src/market_analytics.rs",
        "line": 41,
        "fields": [
          [
            "candles",
            "VecDeque<Candle>"
          ],
          [
            "tick_data",
            "VecDeque<Tick>"
          ],
          [
            "max_candles",
            "usize"
          ],
          [
            "max_ticks",
            "usize"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "Candle",
        "file": "crates/risk/src/market_analytics.rs",
        "line": 49,
        "fields": [
          [
            "timestamp",
            "u64"
          ],
          [
            "open",
            "Price"
          ],
          [
            "high",
            "Price"
          ],
          [
            "low",
            "Price"
          ],
          [
            "close",
            "Price"
          ],
          [
            "volume",
            "Quantity"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Tick",
        "file": "crates/risk/src/market_analytics.rs",
        "line": 59,
        "fields": [
          [
            "timestamp",
            "u64"
          ],
          [
            "price",
            "Price"
          ],
          [
            "volume",
            "Quantity"
          ],
          [
            "bid",
            "Price"
          ],
          [
            "ask",
            "Price"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MACDResult",
        "file": "crates/risk/src/market_analytics.rs",
        "line": 69,
        "fields": [
          [
            "macd",
            "f64"
          ],
          [
            "signal",
            "f64"
          ],
          [
            "histogram",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "StochasticResult",
        "file": "crates/risk/src/market_analytics.rs",
        "line": 77,
        "fields": [
          [
            "k",
            "f64"
          ],
          [
            "d",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "VolatilityEngine",
        "file": "crates/risk/src/market_analytics.rs",
        "line": 128,
        "fields": [
          [
            "close_to_close",
            "f64"
          ],
          [
            "parkinson",
            "f64"
          ],
          [
            "garman_klass",
            "f64"
          ],
          [
            "rogers_satchell",
            "f64"
          ],
          [
            "yang_zhang",
            "f64"
          ],
          [
            "garch_vol",
            "f64"
          ],
          [
            "realized_vol_5min",
            "f64"
          ],
          [
            "realized_vol_1h",
            "f64"
          ],
          [
            "realized_vol_1d",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TechnicalAnalysis",
        "file": "crates/risk/src/market_analytics.rs",
        "line": 317,
        "fields": [
          [
            "sma_short",
            "f64"
          ],
          [
            "sma_long",
            "f64"
          ],
          [
            "ema_short",
            "f64"
          ],
          [
            "ema_long",
            "f64"
          ],
          [
            "macd",
            "f64"
          ],
          [
            "macd_signal",
            "f64"
          ],
          [
            "rsi",
            "f64"
          ],
          [
            "stochastic_k",
            "f64"
          ],
          [
            "stochastic_d",
            "f64"
          ],
          [
            "williams_r",
            "f64"
          ],
          [
            "momentum",
            "f64"
          ],
          [
            "roc",
            "f64"
          ],
          [
            "adx",
            "f64"
          ],
          [
            "bollinger_upper",
            "f64"
          ],
          [
            "bollinger_lower",
            "f64"
          ],
          [
            "atr",
            "f64"
          ],
          [
            "keltner_upper",
            "f64"
          ],
          [
            "keltner_lower",
            "f64"
          ],
          [
            "obv",
            "f64"
          ],
          [
            "volume_sma",
            "f64"
          ],
          [
            "vwap",
            "f64"
          ],
          [
            "mfi",
            "f64"
          ],
          [
            "current_volume",
            "f64"
          ],
          [
            "avg_volume",
            "f64"
          ],
          [
            "support_levels",
            "Vec<f64>"
          ],
          [
            "resistance_levels",
            "Vec<f64>"
          ],
          [
            "support_1",
            "f64"
          ],
          [
            "resistance_1",
            "f64"
          ],
          [
            "pivot_point",
            "f64"
          ],
          [
            "current_price",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FeatureExtractor",
        "file": "crates/risk/src/market_analytics.rs",
        "line": 881,
        "fields": [
          [
            "bid_ask_spread",
            "f64"
          ],
          [
            "order_imbalance",
            "f64"
          ],
          [
            "trade_intensity",
            "f64"
          ],
          [
            "log_return_1m",
            "f64"
          ],
          [
            "log_return_5m",
            "f64"
          ],
          [
            "log_return_15m",
            "f64"
          ],
          [
            "price_acceleration",
            "f64"
          ],
          [
            "price_jerk",
            "f64"
          ],
          [
            "volume_ratio",
            "f64"
          ],
          [
            "buy_sell_ratio",
            "f64"
          ],
          [
            "large_trade_ratio",
            "f64"
          ],
          [
            "skewness",
            "f64"
          ],
          [
            "kurtosis",
            "f64"
          ],
          [
            "hurst_exponent",
            "f64"
          ],
          [
            "dominant_frequency",
            "f64"
          ],
          [
            "frequency_energy",
            "f64"
          ],
          [
            "shannon_entropy",
            "f64"
          ],
          [
            "renyi_entropy",
            "f64"
          ],
          [
            "DIVE",
            "Price Impact (Kyle's Lambda)\n    // Alex: \"CRITICAL for optimal execution - measures market depth!\"\n    // Theory: Kyle (1985) - Continuous Auctions and Insider Trading\n    // Lambda = \u0394P/\u0394V = price change per unit volume\n    price_impact: f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PerformanceCalculator",
        "file": "crates/risk/src/market_analytics.rs",
        "line": 1429,
        "fields": [
          [
            "returns",
            "VecDeque<f64>"
          ],
          [
            "equity_curve",
            "VecDeque<f64>"
          ],
          [
            "max_equity",
            "f64"
          ],
          [
            "current_drawdown",
            "f64"
          ],
          [
            "max_drawdown",
            "f64"
          ],
          [
            "total_trades",
            "u64"
          ],
          [
            "winning_trades",
            "u64"
          ],
          [
            "total_pnl",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "VolumeProfile",
        "file": "crates/risk/src/market_analytics.rs",
        "line": 1578,
        "fields": [
          [
            "price_levels",
            "Vec<(f64"
          ],
          [
            "poc",
            "f64"
          ],
          [
            "vah",
            "f64"
          ],
          [
            "val",
            "f64"
          ],
          [
            "delta",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketMetrics",
        "file": "crates/risk/src/market_analytics.rs",
        "line": 1949,
        "fields": [
          [
            "volatility",
            "f64"
          ],
          [
            "sharpe_ratio",
            "f64"
          ],
          [
            "sortino_ratio",
            "f64"
          ],
          [
            "calmar_ratio",
            "f64"
          ],
          [
            "max_drawdown",
            "f64"
          ],
          [
            "win_rate",
            "f64"
          ],
          [
            "profit_factor",
            "f64"
          ],
          [
            "poc_price",
            "f64"
          ],
          [
            "volume_delta",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OptimalExecutor",
        "file": "crates/risk/src/hyperparameter_integration.rs",
        "line": 22,
        "fields": [
          [
            "algorithm_bias",
            "f64"
          ],
          [
            "max_participation_rate",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "HyperparameterIntegrationSystem",
        "file": "crates/risk/src/hyperparameter_integration.rs",
        "line": 46,
        "fields": [
          [
            "auto_tuner",
            "Arc<RwLock<AutoTuner>>"
          ],
          [
            "kelly_sizer",
            "Arc<RwLock<KellySizer>>"
          ],
          [
            "risk_clamps",
            "Arc<RwLock<RiskClampSystem>>"
          ],
          [
            "ml_system",
            "Arc<RwLock<MLFeedbackSystem>>"
          ],
          [
            "executor",
            "Arc<RwLock<OptimalExecutor>>"
          ],
          [
            "profit_extractor",
            "Arc<RwLock<ProfitExtractor>>"
          ],
          [
            "performance_history",
            "Vec<PerformanceSnapshot>"
          ],
          [
            "optimization_history",
            "Vec<OptimizationEvent>"
          ],
          [
            "current_params",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "current_regime",
            "MarketRegime"
          ],
          [
            "last_optimization",
            "DateTime<Utc>"
          ],
          [
            "optimization_interval",
            "std::time::Duration"
          ],
          [
            "recent_sharpe",
            "f64"
          ],
          [
            "recent_drawdown",
            "f64"
          ],
          [
            "recent_win_rate",
            "f64"
          ],
          [
            "total_pnl",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PerformanceSnapshot",
        "file": "crates/risk/src/hyperparameter_integration.rs",
        "line": 79,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "sharpe_ratio",
            "f64"
          ],
          [
            "max_drawdown",
            "f64"
          ],
          [
            "win_rate",
            "f64"
          ],
          [
            "total_return",
            "f64"
          ],
          [
            "parameters_used",
            "HashMap<String"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "OptimizationEvent",
        "file": "crates/risk/src/hyperparameter_integration.rs",
        "line": 89,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "trigger",
            "OptimizationTrigger"
          ],
          [
            "old_params",
            "HashMap<String"
          ],
          [
            "new_params",
            "HashMap<String"
          ],
          [
            "improvement",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "OptimizationStats",
        "file": "crates/risk/src/hyperparameter_integration.rs",
        "line": 562,
        "fields": [
          [
            "total_optimizations",
            "usize"
          ],
          [
            "average_improvement",
            "f64"
          ],
          [
            "best_sharpe_achieved",
            "f64"
          ],
          [
            "best_parameters",
            "HashMap<String"
          ],
          [
            "current_regime",
            "MarketRegime"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderLifecycle",
        "file": "crates/risk/src/manipulation_detection.rs",
        "line": 34,
        "fields": [
          [
            "order_id",
            "String"
          ],
          [
            "side",
            "Side"
          ],
          [
            "price",
            "Decimal"
          ],
          [
            "quantity",
            "Decimal"
          ],
          [
            "placed_at",
            "DateTime<Utc>"
          ],
          [
            "cancelled_at",
            "Option<DateTime<Utc>>"
          ],
          [
            "filled_quantity",
            "Decimal"
          ],
          [
            "modifications",
            "Vec<OrderModification>"
          ],
          [
            "distance_from_mid",
            "f64"
          ],
          [
            "lifespan_ms",
            "Option<u64>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "OrderModification",
        "file": "crates/risk/src/manipulation_detection.rs",
        "line": 48,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "old_price",
            "Decimal"
          ],
          [
            "new_price",
            "Decimal"
          ],
          [
            "old_quantity",
            "Decimal"
          ],
          [
            "new_quantity",
            "Decimal"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "TraderProfile",
        "file": "crates/risk/src/manipulation_detection.rs",
        "line": 58,
        "fields": [
          [
            "trader_id",
            "String"
          ],
          [
            "order_count",
            "usize"
          ],
          [
            "cancel_count",
            "usize"
          ],
          [
            "fill_count",
            "usize"
          ],
          [
            "cancel_rate",
            "f64"
          ],
          [
            "avg_order_lifespan_ms",
            "f64"
          ],
          [
            "avg_distance_from_mid_bps",
            "f64"
          ],
          [
            "wash_trade_probability",
            "f64"
          ],
          [
            "momentum_ignition_score",
            "f64"
          ],
          [
            "manipulation_score",
            "f64"
          ],
          [
            "suspicious_patterns",
            "Vec<ManipulationType>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ManipulationDetector",
        "file": "crates/risk/src/manipulation_detection.rs",
        "line": 73,
        "fields": [
          [
            "order_lifecycles",
            "HashMap<String"
          ],
          [
            "trader_profiles",
            "HashMap<String"
          ],
          [
            "spoofing_window_ms",
            "u64"
          ],
          [
            "layering_window_ms",
            "u64"
          ],
          [
            "wash_window_ms",
            "u64"
          ],
          [
            "spoofing_cancel_rate",
            "f64"
          ],
          [
            "spoofing_lifespan_ms",
            "u64"
          ],
          [
            "layering_order_count",
            "usize"
          ],
          [
            "wash_self_match_rate",
            "f64"
          ],
          [
            "quote_stuff_rate",
            "f64"
          ],
          [
            "order_history",
            "VecDeque<OrderBookSnapshot>"
          ],
          [
            "trade_history",
            "VecDeque<Trade>"
          ],
          [
            "manipulation_events",
            "Vec<ManipulationEvent>"
          ],
          [
            "nash_equilibrium_spread",
            "f64"
          ],
          [
            "predatory_threshold",
            "f64"
          ],
          [
            "normal_cancel_rate",
            "f64"
          ],
          [
            "normal_order_lifespan",
            "f64"
          ],
          [
            "normal_quote_rate",
            "f64"
          ],
          [
            "volume_baseline",
            "f64"
          ],
          [
            "current_manipulation_score",
            "f64"
          ],
          [
            "detection_confidence",
            "f64"
          ],
          [
            "alert_level",
            "AlertLevel"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ManipulationEvent",
        "file": "crates/risk/src/manipulation_detection.rs",
        "line": 112,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "manipulation_type",
            "ManipulationType"
          ],
          [
            "trader_id",
            "Option<String>"
          ],
          [
            "evidence",
            "Vec<String>"
          ],
          [
            "confidence",
            "f64"
          ],
          [
            "market_impact",
            "f64"
          ],
          [
            "regulatory_reportable",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ManipulationReport",
        "file": "crates/risk/src/manipulation_detection.rs",
        "line": 666,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "manipulation_score",
            "f64"
          ],
          [
            "spoofing_score",
            "f64"
          ],
          [
            "layering_score",
            "f64"
          ],
          [
            "wash_trading_score",
            "f64"
          ],
          [
            "ramping_score",
            "f64"
          ],
          [
            "quote_stuffing_score",
            "f64"
          ],
          [
            "momentum_ignition_score",
            "f64"
          ],
          [
            "game_theory_score",
            "f64"
          ],
          [
            "alert_level",
            "AlertLevel"
          ],
          [
            "detected_patterns",
            "Vec<ManipulationType>"
          ],
          [
            "suspicious_traders",
            "Vec<String>"
          ],
          [
            "recommended_action",
            "String"
          ],
          [
            "regulatory_reportable",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "KellySizer",
        "file": "crates/risk/src/kelly_sizing.rs",
        "line": 19,
        "fields": [
          [
            "config",
            "KellyConfig"
          ],
          [
            "trade_history",
            "VecDeque<TradeOutcome>"
          ],
          [
            "stats",
            "KellyStatistics"
          ],
          [
            "adjustments",
            "RiskAdjustments"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "KellyConfig",
        "file": "crates/risk/src/kelly_sizing.rs",
        "line": 34,
        "fields": [
          [
            "Sophie",
            "\"NEVER use full Kelly! 25% is the practical maximum\"\n    pub max_kelly_fraction: Decimal"
          ],
          [
            "min_edge_threshold",
            "Decimal"
          ],
          [
            "min_win_rate",
            "Decimal"
          ],
          [
            "lookback_trades",
            "usize"
          ],
          [
            "use_continuous_kelly",
            "bool"
          ],
          [
            "include_costs",
            "bool"
          ],
          [
            "min_sample_size",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TradeOutcome",
        "file": "crates/risk/src/kelly_sizing.rs",
        "line": 73,
        "fields": [
          [
            "timestamp",
            "i64"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "profit_loss",
            "Decimal"
          ],
          [
            "return_pct",
            "Decimal"
          ],
          [
            "win",
            "bool"
          ],
          [
            "risk_taken",
            "Decimal"
          ],
          [
            "trade_costs",
            "Decimal"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "KellyStatistics",
        "file": "crates/risk/src/kelly_sizing.rs",
        "line": 84,
        "fields": [
          [
            "win_rate",
            "Decimal"
          ],
          [
            "avg_win",
            "Decimal"
          ],
          [
            "avg_loss",
            "Decimal"
          ],
          [
            "win_loss_ratio",
            "Decimal"
          ],
          [
            "sharpe_ratio",
            "Decimal"
          ],
          [
            "profit_factor",
            "Decimal"
          ],
          [
            "sample_size",
            "usize"
          ],
          [
            "confidence_interval",
            "(Decimal"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RiskAdjustments",
        "file": "crates/risk/src/kelly_sizing.rs",
        "line": 96,
        "fields": [
          [
            "correlation_factor",
            "Decimal"
          ],
          [
            "volatility_factor",
            "Decimal"
          ],
          [
            "drawdown_factor",
            "Decimal"
          ],
          [
            "liquidity_factor",
            "Decimal"
          ],
          [
            "uncertainty_factor",
            "Decimal"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "KellyRecommendation",
        "file": "crates/risk/src/kelly_sizing.rs",
        "line": 486,
        "fields": [
          [
            "position_size_pct",
            "Decimal"
          ],
          [
            "confidence",
            "Decimal"
          ],
          [
            "reasoning",
            "String"
          ],
          [
            "stats",
            "KellyStatistics"
          ],
          [
            "adjustments_applied",
            "RiskAdjustments"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Trade",
        "file": "crates/risk/src/order_book_extensions.rs",
        "line": 23,
        "fields": [
          [
            "price",
            "f64"
          ],
          [
            "volume",
            "f64"
          ],
          [
            "is_buy",
            "bool"
          ],
          [
            "timestamp",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MLPrediction",
        "file": "crates/risk/src/order_book_extensions.rs",
        "line": 171,
        "fields": [
          [
            "signal",
            "f64"
          ],
          [
            "confidence",
            "f64"
          ],
          [
            "features_used",
            "Vec<String>"
          ],
          [
            "model_version",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TCopulaConfig",
        "file": "crates/risk/src/t_copula.rs",
        "line": 23,
        "fields": [
          [
            "initial_df",
            "f64"
          ],
          [
            "min_df",
            "f64"
          ],
          [
            "max_df",
            "f64"
          ],
          [
            "calibration_window",
            "usize"
          ],
          [
            "crisis_threshold",
            "f64"
          ],
          [
            "update_frequency",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TCopula",
        "file": "crates/risk/src/t_copula.rs",
        "line": 49,
        "fields": [
          [
            "correlation_matrix",
            "Arc<RwLock<DMatrix<f64>>>"
          ],
          [
            "degrees_of_freedom",
            "Arc<RwLock<f64>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CopulaParameters",
        "file": "crates/risk/src/t_copula.rs",
        "line": 77,
        "fields": [
          [
            "degrees_of_freedom",
            "f64"
          ],
          [
            "correlation_scale",
            "f64"
          ],
          [
            "tail_threshold",
            "f64"
          ],
          [
            "stress_multiplier",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CrisisScenario",
        "file": "crates/risk/src/t_copula.rs",
        "line": 673,
        "fields": [
          [
            "stressed_correlation",
            "DMatrix<f64>"
          ],
          [
            "stressed_df",
            "f64"
          ],
          [
            "max_tail_dependence",
            "f64"
          ],
          [
            "contagion_probability",
            "f64"
          ],
          [
            "expected_joint_losses",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TailRiskMetrics",
        "file": "crates/risk/src/t_copula.rs",
        "line": 910,
        "fields": [
          [
            "tail_var",
            "f64"
          ],
          [
            "expected_shortfall",
            "f64"
          ],
          [
            "max_tail_dependence",
            "f64"
          ],
          [
            "degrees_of_freedom",
            "f64"
          ],
          [
            "contagion_risk",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TailDependenceMetrics",
        "file": "crates/risk/src/t_copula.rs",
        "line": 920,
        "fields": [
          [
            "average_tail_dependence",
            "f64"
          ],
          [
            "max_tail_dependence",
            "f64"
          ],
          [
            "degrees_of_freedom",
            "f64"
          ],
          [
            "correlation_matrix",
            "DMatrix<f64>"
          ],
          [
            "is_crisis",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "KyleLambdaValidator",
        "file": "crates/risk/src/kyle_lambda_validation.rs",
        "line": 21,
        "fields": [
          [
            "analytics",
            "OrderBookAnalytics"
          ],
          [
            "theoretical_lambda",
            "f64"
          ],
          [
            "empirical_lambda",
            "f64"
          ],
          [
            "last_metrics",
            "Option<crate::order_book_analytics::OrderBookMetrics>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ValidationResult",
        "file": "crates/risk/src/kyle_lambda_validation.rs",
        "line": 374,
        "fields": [
          [
            "theoretical_lambda",
            "f64"
          ],
          [
            "empirical_lambda",
            "f64"
          ],
          [
            "relative_error",
            "f64"
          ],
          [
            "tests_passed",
            "usize"
          ],
          [
            "total_tests",
            "usize"
          ],
          [
            "details",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SensitivityResult",
        "file": "crates/risk/src/kyle_lambda_validation.rs",
        "line": 384,
        "fields": [
          [
            "parameter",
            "String"
          ],
          [
            "values",
            "Vec<f64>"
          ],
          [
            "lambdas",
            "Vec<f64>"
          ],
          [
            "monotonic",
            "bool"
          ],
          [
            "correlation",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "LinearityResult",
        "file": "crates/risk/src/kyle_lambda_validation.rs",
        "line": 393,
        "fields": [
          [
            "theoretical_slope",
            "f64"
          ],
          [
            "empirical_slope",
            "f64"
          ],
          [
            "intercept",
            "f64"
          ],
          [
            "r_squared",
            "f64"
          ],
          [
            "is_linear",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RegimeResult",
        "file": "crates/risk/src/kyle_lambda_validation.rs",
        "line": 402,
        "fields": [
          [
            "regimes",
            "Vec<(String"
          ],
          [
            "all_positive",
            "bool"
          ],
          [
            "all_finite",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ParameterManager",
        "file": "crates/risk/src/parameter_manager.rs",
        "line": 16,
        "fields": [
          [
            "parameters",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "bounds",
            "HashMap<String"
          ],
          [
            "last_update",
            "std::time::Instant"
          ],
          [
            "regime_overrides",
            "HashMap<String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "GameTheoryCalculator",
        "file": "crates/risk/src/parameter_manager.rs",
        "line": 259,
        "fields": [
          [
            "manager",
            "Arc<ParameterManager>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "EnhancedMLSignal",
        "file": "crates/risk/src/decision_orchestrator_enhanced_impl.rs",
        "line": 26,
        "fields": [
          [
            "action",
            "SignalAction"
          ],
          [
            "raw_confidence",
            "f64"
          ],
          [
            "calibrated_confidence",
            "f64"
          ],
          [
            "shap_values",
            "Vec<f64>"
          ],
          [
            "top_features",
            "Vec<(String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MonteCarloValidation",
        "file": "crates/risk/src/decision_orchestrator_enhanced_impl.rs",
        "line": 36,
        "fields": [
          [
            "win_rate",
            "f64"
          ],
          [
            "expected_return",
            "f64"
          ],
          [
            "var_95",
            "f64"
          ],
          [
            "max_drawdown",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ValidationReport",
        "file": "crates/risk/src/deep_dive_validation_study.rs",
        "line": 461,
        "fields": [
          [
            "system_name",
            "String"
          ],
          [
            "checks",
            "Vec<ValidationCheck>"
          ],
          [
            "passed",
            "usize"
          ],
          [
            "failed",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ValidationCheck",
        "file": "crates/risk/src/deep_dive_validation_study.rs",
        "line": 469,
        "fields": [
          [
            "criterion",
            "String"
          ],
          [
            "implementation",
            "String"
          ],
          [
            "passed",
            "bool"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "WildersRSI",
        "file": "crates/risk/src/ta_improvements.rs",
        "line": 10,
        "fields": [
          [
            "period",
            "usize"
          ],
          [
            "avg_gain",
            "f64"
          ],
          [
            "avg_loss",
            "f64"
          ],
          [
            "initialized",
            "bool"
          ],
          [
            "price_history",
            "VecDeque<f64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ProperMACD",
        "file": "crates/risk/src/ta_improvements.rs",
        "line": 87,
        "fields": [
          [
            "ema_12",
            "ExponentialMovingAverage"
          ],
          [
            "ema_26",
            "ExponentialMovingAverage"
          ],
          [
            "signal_ema",
            "ExponentialMovingAverage"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ExponentialMovingAverage",
        "file": "crates/risk/src/ta_improvements.rs",
        "line": 117,
        "fields": [
          [
            "period",
            "usize"
          ],
          [
            "multiplier",
            "f64"
          ],
          [
            "ema",
            "Option<f64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ADXIndicator",
        "file": "crates/risk/src/ta_improvements.rs",
        "line": 150,
        "fields": [
          [
            "period",
            "usize"
          ],
          [
            "plus_dm_smooth",
            "f64"
          ],
          [
            "minus_dm_smooth",
            "f64"
          ],
          [
            "tr_smooth",
            "f64"
          ],
          [
            "adx",
            "f64"
          ],
          [
            "initialized",
            "bool"
          ],
          [
            "high_history",
            "VecDeque<f64>"
          ],
          [
            "low_history",
            "VecDeque<f64>"
          ],
          [
            "close_history",
            "VecDeque<f64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "IchimokuCloud",
        "file": "crates/risk/src/ta_improvements.rs",
        "line": 260,
        "fields": [
          [
            "conversion_period",
            "usize"
          ],
          [
            "base_period",
            "usize"
          ],
          [
            "leading_b_period",
            "usize"
          ],
          [
            "displacement",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "IchimokuValues",
        "file": "crates/risk/src/ta_improvements.rs",
        "line": 319,
        "fields": [
          [
            "conversion_line",
            "f64"
          ],
          [
            "base_line",
            "f64"
          ],
          [
            "leading_span_a",
            "f64"
          ],
          [
            "leading_span_b",
            "f64"
          ],
          [
            "cloud_top",
            "f64"
          ],
          [
            "cloud_bottom",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FibonacciLevels",
        "file": "crates/risk/src/ta_improvements.rs",
        "line": 427,
        "fields": [
          [
            "levels",
            "Vec<f64>"
          ],
          [
            "extensions",
            "Vec<f64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PivotPoints",
        "file": "crates/risk/src/ta_improvements.rs",
        "line": 538,
        "fields": [
          [
            "pivot",
            "f64"
          ],
          [
            "r1",
            "f64"
          ],
          [
            "r2",
            "f64"
          ],
          [
            "r3",
            "f64"
          ],
          [
            "s1",
            "f64"
          ],
          [
            "s2",
            "f64"
          ],
          [
            "s3",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MockTradingSystem",
        "file": "crates/risk/src/hyperparameter_optimization_tests.rs",
        "line": 11,
        "fields": [
          [
            "parameters",
            "Arc<Mutex<HashMap<String"
          ],
          [
            "performance_history",
            "Arc<Mutex<Vec<f64>>>"
          ],
          [
            "market_regime",
            "MarketRegime"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "MonteCarloEngine",
        "file": "crates/risk/src/monte_carlo.rs",
        "line": 30,
        "fields": [
          [
            "num_simulations",
            "usize"
          ],
          [
            "time_steps",
            "usize"
          ],
          [
            "dt",
            "f64"
          ],
          [
            "price_model",
            "PriceModel"
          ],
          [
            "volatility_model",
            "VolatilityModel"
          ],
          [
            "jump_model",
            "Option<JumpModel>"
          ],
          [
            "correlation_matrix",
            "CorrelationMatrix"
          ],
          [
            "kelly_sizer",
            "Arc<RwLock<KellySizer>>"
          ],
          [
            "risk_clamps",
            "Arc<RwLock<RiskClampSystem>>"
          ],
          [
            "portfolio_manager",
            "Arc<RwLock<PortfolioManager>>"
          ],
          [
            "simulation_results",
            "Arc<RwLock<Vec<SimulationResult>>>"
          ],
          [
            "path_statistics",
            "Arc<RwLock<PathStatistics>>"
          ],
          [
            "parallel_threads",
            "usize"
          ],
          [
            "use_gpu",
            "bool"
          ],
          [
            "Future",
            "GPU acceleration\n    use_quasi_random: bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "JumpModel",
        "file": "crates/risk/src/monte_carlo.rs",
        "line": 112,
        "fields": [
          [
            "intensity",
            "f64"
          ],
          [
            "size_distribution",
            "JumpSizeDistribution"
          ],
          [
            "clustering",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CorrelationMatrix",
        "file": "crates/risk/src/monte_carlo.rs",
        "line": 127,
        "fields": [
          [
            "assets",
            "Vec<String>"
          ],
          [
            "matrix",
            "Vec<Vec<f64>>"
          ],
          [
            "time_varying",
            "bool"
          ],
          [
            "regime_dependent",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SimulationResult",
        "file": "crates/risk/src/monte_carlo.rs",
        "line": 136,
        "fields": [
          [
            "final_pnl",
            "Decimal"
          ],
          [
            "max_drawdown",
            "f64"
          ],
          [
            "sharpe_ratio",
            "f64"
          ],
          [
            "sortino_ratio",
            "f64"
          ],
          [
            "var_95",
            "f64"
          ],
          [
            "cvar_95",
            "f64"
          ],
          [
            "kelly_fraction",
            "f64"
          ],
          [
            "num_trades",
            "usize"
          ],
          [
            "win_rate",
            "f64"
          ],
          [
            "profit_factor",
            "f64"
          ],
          [
            "path",
            "Vec<f64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PathStatistics",
        "file": "crates/risk/src/monte_carlo.rs",
        "line": 152,
        "fields": [
          [
            "mean_return",
            "f64"
          ],
          [
            "std_return",
            "f64"
          ],
          [
            "skewness",
            "f64"
          ],
          [
            "kurtosis",
            "f64"
          ],
          [
            "percentiles",
            "Vec<(f64"
          ],
          [
            "autocorrelation",
            "Vec<f64>"
          ],
          [
            "hurst_exponent",
            "f64"
          ],
          [
            "max_drawdown_distribution",
            "Vec<f64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MonteCarloReport",
        "file": "crates/risk/src/monte_carlo.rs",
        "line": 907,
        "fields": [
          [
            "strategy_validation",
            "StrategyValidation"
          ],
          [
            "risk_assessment",
            "RiskMetrics"
          ],
          [
            "optimal_parameters",
            "OptimalParameters"
          ],
          [
            "stress_test_results",
            "StressTestResults"
          ],
          [
            "game_theory_analysis",
            "GameTheoryAnalysis"
          ],
          [
            "confidence_intervals",
            "Vec<(String"
          ],
          [
            "recommendations",
            "Vec<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "StrategyValidation",
        "file": "crates/risk/src/monte_carlo.rs",
        "line": 919,
        "fields": [
          [
            "profitable_probability",
            "f64"
          ],
          [
            "expected_sharpe",
            "f64"
          ],
          [
            "expected_max_drawdown",
            "f64"
          ],
          [
            "value_at_risk_95",
            "f64"
          ],
          [
            "conditional_var_95",
            "f64"
          ],
          [
            "kelly_stability",
            "f64"
          ],
          [
            "regime_performance",
            "Vec<(String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RiskMetrics",
        "file": "crates/risk/src/monte_carlo.rs",
        "line": 931,
        "fields": [
          [
            "tail_var_99",
            "f64"
          ],
          [
            "tail_cvar_99",
            "f64"
          ],
          [
            "max_drawdown_99",
            "f64"
          ],
          [
            "stress_test_survival",
            "f64"
          ],
          [
            "black_swan_impact",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OptimalParameters",
        "file": "crates/risk/src/monte_carlo.rs",
        "line": 941,
        "fields": [
          [
            "kelly_fraction",
            "f64"
          ],
          [
            "stop_loss",
            "f64"
          ],
          [
            "take_profit",
            "f64"
          ],
          [
            "max_position_size",
            "f64"
          ],
          [
            "volatility_target",
            "f64"
          ],
          [
            "rebalance_frequency",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "StressTestResults",
        "file": "crates/risk/src/monte_carlo.rs",
        "line": 952,
        "fields": [
          [
            "scenario_results",
            "Vec<(StressScenario"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "GameTheoryAnalysis",
        "file": "crates/risk/src/monte_carlo.rs",
        "line": 968,
        "fields": [
          [
            "nash_equilibrium",
            "String"
          ],
          [
            "dominant_strategies",
            "Vec<String>"
          ],
          [
            "payoff_matrix",
            "Vec<Vec<f64>>"
          ],
          [
            "evolutionary_stable_strategy",
            "String"
          ],
          [
            "market_making_equilibrium",
            "f64"
          ],
          [
            "information_value",
            "f64"
          ],
          [
            "predator_prey_cycles",
            "Vec<f64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "GARCHModel",
        "file": "crates/risk/src/garch.rs",
        "line": 23,
        "fields": [
          [
            "omega",
            "f64"
          ],
          [
            "\u03c9",
            "Long-term variance weight\n    pub alpha: f64"
          ],
          [
            "\u03b1",
            "ARCH coefficient\n    pub beta: f64"
          ],
          [
            "\u03b2",
            "GARCH coefficient\n    \n    // Long-term unconditional variance: \u03c3\u00b2_\u221e = \u03c9 / (1 - \u03b1 - \u03b2)\n    pub long_term_variance: f64"
          ],
          [
            "last_variance",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DecisionOrchestrator",
        "file": "crates/risk/src/decision_orchestrator.rs",
        "line": 31,
        "fields": [
          [
            "ml_system",
            "Arc<RwLock<MLFeedbackSystem>>"
          ],
          [
            "ta_analytics",
            "Arc<RwLock<MarketAnalytics>>"
          ],
          [
            "kelly_sizer",
            "Arc<RwLock<KellySizer>>"
          ],
          [
            "risk_clamps",
            "Arc<RwLock<RiskClampSystem>>"
          ],
          [
            "auto_tuner",
            "Arc<RwLock<AutoTuningSystem>>"
          ],
          [
            "profit_extractor",
            "Arc<RwLock<ProfitExtractor>>"
          ],
          [
            "portfolio_manager",
            "Arc<PortfolioManager>"
          ],
          [
            "shap_calculator",
            "Arc<RwLock<SHAPCalculator>>"
          ],
          [
            "t_copula",
            "Arc<TCopula>"
          ],
          [
            "regime_calibration",
            "Arc<HistoricalRegimeCalibration>"
          ],
          [
            "cross_asset_corr",
            "Arc<CrossAssetCorrelations>"
          ],
          [
            "persistence",
            "Arc<AutoTuningPersistence>"
          ],
          [
            "ml_weight",
            "Arc<RwLock<f64>>"
          ],
          [
            "ta_weight",
            "Arc<RwLock<f64>>"
          ],
          [
            "sentiment_weight",
            "Arc<RwLock<f64>>"
          ],
          [
            "decision_history",
            "Arc<RwLock<Vec<DecisionRecord>>>"
          ],
          [
            "latest_shap_values",
            "Arc<RwLock<Option<Vec<f64>>>>"
          ],
          [
            "feature_names",
            "Vec<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DecisionRecord",
        "file": "crates/risk/src/decision_orchestrator.rs",
        "line": 67,
        "fields": [
          [
            "timestamp",
            "u64"
          ],
          [
            "ml_signal",
            "Signal"
          ],
          [
            "ta_signal",
            "Signal"
          ],
          [
            "combined_signal",
            "Signal"
          ],
          [
            "final_signal",
            "Signal"
          ],
          [
            "execution_result",
            "Option<ExecutionResult>"
          ],
          [
            "pnl",
            "Option<Decimal>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Signal",
        "file": "crates/risk/src/decision_orchestrator.rs",
        "line": 79,
        "fields": [
          [
            "action",
            "SignalAction"
          ],
          [
            "confidence",
            "f64"
          ],
          [
            "size",
            "f64"
          ],
          [
            "features",
            "Vec<f64>"
          ],
          [
            "reason",
            "String"
          ],
          [
            "DIVE",
            "SHAP explanations for ML transparency\n    pub shap_values: Option<Vec<f64>>"
          ],
          [
            "top_features",
            "Option<Vec<(String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ExecutionResult",
        "file": "crates/risk/src/decision_orchestrator.rs",
        "line": 92,
        "fields": [
          [
            "success",
            "bool"
          ],
          [
            "actual_size",
            "Decimal"
          ],
          [
            "actual_price",
            "Decimal"
          ],
          [
            "slippage",
            "Decimal"
          ],
          [
            "fees",
            "Decimal"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TAIndicators",
        "file": "crates/risk/src/decision_orchestrator.rs",
        "line": 790,
        "fields": [
          [
            "rsi",
            "f64"
          ],
          [
            "macd",
            "f64"
          ],
          [
            "bollinger_position",
            "f64"
          ],
          [
            "atr",
            "f64"
          ],
          [
            "volume_ratio",
            "f64"
          ],
          [
            "trend_strength",
            "f64"
          ],
          [
            "support",
            "f64"
          ],
          [
            "resistance",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderBook",
        "file": "crates/risk/src/decision_orchestrator.rs",
        "line": 803,
        "fields": [
          [
            "bids",
            "Vec<Order>"
          ],
          [
            "asks",
            "Vec<Order>"
          ],
          [
            "timestamp",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Order",
        "file": "crates/risk/src/decision_orchestrator.rs",
        "line": 811,
        "fields": [
          [
            "price",
            "Price"
          ],
          [
            "quantity",
            "Quantity"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SentimentData",
        "file": "crates/risk/src/decision_orchestrator.rs",
        "line": 818,
        "fields": [
          [
            "source",
            "String"
          ],
          [
            "score",
            "f64"
          ],
          [
            "confidence",
            "f64"
          ],
          [
            "timestamp",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MLFeedbackSystemFields",
        "file": "crates/risk/src/ml_methods_impl.rs",
        "line": 287,
        "fields": [
          [
            "calibration_params",
            "std::collections::HashMap<String"
          ],
          [
            "prediction_history",
            "VecDeque<(f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SHAPCalculatorFields",
        "file": "crates/risk/src/ml_methods_impl.rs",
        "line": 293,
        "fields": [
          [
            "baseline_prediction",
            "f64"
          ],
          [
            "feature_means",
            "Vec<f64>"
          ],
          [
            "feature_importance",
            "Vec<f64>"
          ],
          [
            "feature_names",
            "Vec<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketAnalyticsFields",
        "file": "crates/risk/src/ml_methods_impl.rs",
        "line": 301,
        "fields": [
          [
            "price_history",
            "Vec<f64>"
          ],
          [
            "volume_history",
            "Vec<f64>"
          ],
          [
            "obv_history",
            "VecDeque<f64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ObjectPool",
        "file": "crates/risk/src/performance_optimizations.rs",
        "line": 16,
        "fields": [
          [
            "T",
            "Default + Send> {\n    pool: Arc<Mutex<Vec<T>>>"
          ],
          [
            "capacity",
            "usize"
          ],
          [
            "allocated",
            "AtomicU64"
          ],
          [
            "hit_rate",
            "AtomicU64"
          ],
          [
            "miss_count",
            "AtomicU64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PooledObject",
        "file": "crates/risk/src/performance_optimizations.rs",
        "line": 79,
        "fields": [
          [
            "T",
            "Send> {\n    object: Option<T>"
          ],
          [
            "pool",
            "Arc<Mutex<Vec<T>>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PoolStats",
        "file": "crates/risk/src/performance_optimizations.rs",
        "line": 111,
        "fields": [
          [
            "allocated",
            "u64"
          ],
          [
            "hit_rate",
            "f64"
          ],
          [
            "miss_count",
            "u64"
          ],
          [
            "capacity",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "LockFreeRingBuffer",
        "file": "crates/risk/src/performance_optimizations.rs",
        "line": 120,
        "fields": [
          [
            "T",
            "Copy> {\n    buffer: Box<[UnsafeCell<T>]>"
          ],
          [
            "capacity",
            "usize"
          ],
          [
            "mask",
            "usize"
          ],
          [
            "head",
            "AtomicU64"
          ],
          [
            "tail",
            "AtomicU64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SignalData",
        "file": "crates/risk/src/performance_optimizations.rs",
        "line": 192,
        "fields": [
          [
            "action",
            "i8"
          ],
          [
            "confidence",
            "f32"
          ],
          [
            "size",
            "f32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CacheAligned",
        "file": "crates/risk/src/performance_optimizations.rs",
        "line": 201,
        "fields": [
          [
            "value",
            "T"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SimdFeatures",
        "file": "crates/risk/src/performance_optimizations.rs",
        "line": 215,
        "fields": [
          [
            "prices",
            "[f32; 8]"
          ],
          [
            "volumes",
            "[f32; 8]"
          ],
          [
            "indicators",
            "[f32; 8]"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "LookupTables",
        "file": "crates/risk/src/performance_optimizations.rs",
        "line": 233,
        "fields": [
          [
            "ema_factors",
            "Vec<f64>"
          ],
          [
            "sigmoid_table",
            "Vec<f64>"
          ],
          [
            "log_return_bins",
            "Vec<f64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MmapCircularBuffer",
        "file": "crates/risk/src/performance_optimizations.rs",
        "line": 331,
        "fields": [
          [
            "data",
            "Vec<u8>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PerformanceMetrics",
        "file": "crates/risk/src/performance_optimizations.rs",
        "line": 338,
        "fields": [
          [
            "decision_latency_ns",
            "AtomicU64"
          ],
          [
            "throughput_ops_sec",
            "AtomicU64"
          ],
          [
            "allocation_count",
            "AtomicU64"
          ],
          [
            "cache_misses",
            "AtomicU64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DCCGARCHModel",
        "file": "crates/risk/src/cross_asset_correlations.rs",
        "line": 107,
        "fields": [
          [
            "alpha",
            "f64"
          ],
          [
            "beta",
            "f64"
          ],
          [
            "unconditional_corr",
            "Arc<RwLock<DMatrix<f64>>>"
          ],
          [
            "conditional_corr",
            "Arc<RwLock<DMatrix<f64>>>"
          ],
          [
            "quasi_corr",
            "Arc<RwLock<DMatrix<f64>>>"
          ],
          [
            "standardized_residuals",
            "Arc<RwLock<VecDeque<DVector<f64>>>>"
          ],
          [
            "garch_models",
            "Arc<RwLock<HashMap<AssetClass"
          ],
          [
            "eigen_cache",
            "Arc<RwLock<Option<(DVector<f64>"
          ],
          [
            "last_update",
            "Arc<RwLock<DateTime<Utc>>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CrossAssetCorrelations",
        "file": "crates/risk/src/cross_asset_correlations.rs",
        "line": 371,
        "fields": [
          [
            "dcc_garch",
            "Arc<RwLock<DCCGARCHModel>>"
          ],
          [
            "assets",
            "Vec<AssetClass>"
          ],
          [
            "asset_indices",
            "HashMap<AssetClass"
          ],
          [
            "correlation_history",
            "Arc<RwLock<VecDeque<(DateTime<Utc>"
          ],
          [
            "rolling_correlations",
            "Arc<RwLock<HashMap<(AssetClass"
          ],
          [
            "contagion_detector",
            "Arc<RwLock<ContagionDetector>>"
          ],
          [
            "correlation_breakdown",
            "Arc<RwLock<CorrelationBreakdown>>"
          ],
          [
            "spillover_matrix",
            "Arc<RwLock<DMatrix<f64>>>"
          ],
          [
            "systemic_risk_indicator",
            "Arc<RwLock<f64>>"
          ],
          [
            "t_copula",
            "Option<Arc<TCopula>>"
          ],
          [
            "regime_calibration",
            "Option<Arc<HistoricalRegimeCalibration>>"
          ],
          [
            "params",
            "Arc<ParameterManager>"
          ],
          [
            "cache_size",
            "usize"
          ],
          [
            "update_count",
            "Arc<RwLock<u64>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ContagionDetector",
        "file": "crates/risk/src/cross_asset_correlations.rs",
        "line": 402,
        "fields": [
          [
            "correlation_spike_threshold",
            "f64"
          ],
          [
            "speed_threshold",
            "f64"
          ],
          [
            "baseline_correlations",
            "HashMap<(AssetClass"
          ],
          [
            "spike_events",
            "Vec<ContagionEvent>"
          ],
          [
            "current_contagion_level",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ContagionEvent",
        "file": "crates/risk/src/cross_asset_correlations.rs",
        "line": 414,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "source_asset",
            "AssetClass"
          ],
          [
            "affected_assets",
            "Vec<AssetClass>"
          ],
          [
            "correlation_increase",
            "f64"
          ],
          [
            "speed_days",
            "f64"
          ],
          [
            "severity",
            "ContagionSeverity"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CorrelationBreakdown",
        "file": "crates/risk/src/cross_asset_correlations.rs",
        "line": 432,
        "fields": [
          [
            "normal_ranges",
            "HashMap<(AssetClass"
          ],
          [
            "broken_correlations",
            "Vec<(AssetClass"
          ],
          [
            "breakdown_probability",
            "f64"
          ],
          [
            "regime_correlations",
            "HashMap<HistoricalRegime"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ContagionRisk",
        "file": "crates/risk/src/cross_asset_correlations.rs",
        "line": 786,
        "fields": [
          [
            "contagion_level",
            "f64"
          ],
          [
            "breakdown_probability",
            "f64"
          ],
          [
            "systemic_risk",
            "f64"
          ],
          [
            "affected_assets",
            "Vec<AssetClass>"
          ],
          [
            "recommended_action",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PortfolioRisk",
        "file": "crates/risk/src/cross_asset_correlations.rs",
        "line": 795,
        "fields": [
          [
            "volatility",
            "f64"
          ],
          [
            "correlation_risk",
            "f64"
          ],
          [
            "diversification_ratio",
            "f64"
          ],
          [
            "concentration_risk",
            "f64"
          ],
          [
            "contagion_exposure",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SimdDecisionEngine",
        "file": "crates/risk/src/simd_decision_engine.rs",
        "line": 12,
        "fields": [
          [
            "ml_features",
            "AlignedBuffer<f64>"
          ],
          [
            "ta_indicators",
            "AlignedBuffer<f64>"
          ],
          [
            "risk_factors",
            "AlignedBuffer<f64>"
          ],
          [
            "decision_weights",
            "AlignedBuffer<f64>"
          ],
          [
            "decision_threshold",
            "f64"
          ],
          [
            "risk_limit",
            "f64"
          ],
          [
            "decision_count",
            "u64"
          ],
          [
            "total_latency_ns",
            "u64"
          ],
          [
            "fastest_decision_ns",
            "u64"
          ],
          [
            "slowest_decision_ns",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "AlignedBuffer",
        "file": "crates/risk/src/simd_decision_engine.rs",
        "line": 32,
        "fields": [
          [
            "data",
            "Vec<T>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FastDecision",
        "file": "crates/risk/src/simd_decision_engine.rs",
        "line": 363,
        "fields": [
          [
            "action",
            "TradeAction"
          ],
          [
            "confidence",
            "f64"
          ],
          [
            "size",
            "f64"
          ],
          [
            "ml_contribution",
            "f64"
          ],
          [
            "ta_contribution",
            "f64"
          ],
          [
            "risk_adjustment",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PerformanceStats",
        "file": "crates/risk/src/simd_decision_engine.rs",
        "line": 381,
        "fields": [
          [
            "decision_count",
            "u64"
          ],
          [
            "avg_latency_ns",
            "u64"
          ],
          [
            "fastest_decision_ns",
            "u64"
          ],
          [
            "slowest_decision_ns",
            "u64"
          ],
          [
            "meets_target",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TestObject",
        "file": "crates/risk/src/deep_dive_integration_tests.rs",
        "line": 169,
        "fields": [
          [
            "data",
            "Vec<f64>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "SupportResistance",
        "file": "crates/risk/src/type_compatibility.rs",
        "line": 124,
        "fields": [
          [
            "resistance_1",
            "Price"
          ],
          [
            "resistance_2",
            "Price"
          ],
          [
            "support_1",
            "Price"
          ],
          [
            "support_2",
            "Price"
          ],
          [
            "pivot",
            "Price"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ExtendedMarketData",
        "file": "crates/risk/src/profit_extractor.rs",
        "line": 23,
        "fields": [
          [
            "symbol",
            "String"
          ],
          [
            "last",
            "Price"
          ],
          [
            "bid",
            "Price"
          ],
          [
            "ask",
            "Price"
          ],
          [
            "spread",
            "Price"
          ],
          [
            "mid",
            "Price"
          ],
          [
            "volume",
            "Quantity"
          ],
          [
            "volume_24h",
            "f64"
          ],
          [
            "volatility",
            "f64"
          ],
          [
            "trend",
            "f64"
          ],
          [
            "momentum",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ProfitExtractor",
        "file": "crates/risk/src/profit_extractor.rs",
        "line": 88,
        "fields": [
          [
            "order_book_analyzer",
            "OrderBookAnalyzer"
          ],
          [
            "execution_optimizer",
            "ExecutionOptimizer"
          ],
          [
            "position_sizer",
            "AdvancedPositionSizer"
          ],
          [
            "exit_manager",
            "ExitManager"
          ],
          [
            "cost_optimizer",
            "CostOptimizer"
          ],
          [
            "performance_tracker",
            "RwLock<PerformanceTracker>"
          ],
          [
            "auto_tuner",
            "Arc<RwLock<AutoTuningSystem>>"
          ],
          [
            "market_analytics",
            "Arc<RwLock<MarketAnalytics>>"
          ],
          [
            "Alex",
            "\"Without learning from outcomes"
          ],
          [
            "ml_feedback",
            "Arc<RwLock<MLFeedbackSystem>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderBookAnalyzer",
        "file": "crates/risk/src/profit_extractor.rs",
        "line": 120,
        "fields": [
          [
            "bid_ask_imbalance",
            "VecDeque<f64>"
          ],
          [
            "volume_profile",
            "Vec<(Price"
          ],
          [
            "whale_detector",
            "WhaleDetector"
          ],
          [
            "spoof_detector",
            "SpoofDetector"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "WhaleDetector",
        "file": "crates/risk/src/profit_extractor.rs",
        "line": 338,
        "fields": [
          [
            "historical_sizes",
            "VecDeque<Quantity>"
          ],
          [
            "market_avg_size",
            "Quantity"
          ],
          [
            "detection_threshold",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "SpoofDetector",
        "file": "crates/risk/src/profit_extractor.rs",
        "line": 438,
        "fields": [
          [
            "cancel_rates",
            "VecDeque<f64>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ExecutionOptimizer",
        "file": "crates/risk/src/profit_extractor.rs",
        "line": 468,
        "fields": [
          [
            "fill_history",
            "VecDeque<FillRecord>"
          ],
          [
            "optimal_chunk_size",
            "Quantity"
          ],
          [
            "twap_engine",
            "TwapEngine"
          ],
          [
            "vwap_engine",
            "VwapEngine"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ExchangeConfig",
        "file": "crates/risk/src/profit_extractor.rs",
        "line": 577,
        "fields": [
          [
            "name",
            "String"
          ],
          [
            "min_order_usd",
            "Price"
          ],
          [
            "maker_fee",
            "Percentage"
          ],
          [
            "taker_fee",
            "Percentage"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "AdvancedPositionSizer",
        "file": "crates/risk/src/profit_extractor.rs",
        "line": 624,
        "fields": [
          [
            "kelly_fraction",
            "Percentage"
          ],
          [
            "max_position",
            "Percentage"
          ],
          [
            "risk_budget",
            "Percentage"
          ],
          [
            "correlation_matrix",
            "Vec<Vec<f64>>"
          ],
          [
            "exchange_config",
            "ExchangeConfig"
          ],
          [
            "auto_tuner",
            "Arc<RwLock<AutoTuningSystem>>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ExitManager",
        "file": "crates/risk/src/profit_extractor.rs",
        "line": 913,
        "fields": [
          [
            "trailing_stop_percent",
            "Percentage"
          ],
          [
            "profit_target_ratio",
            "f64"
          ],
          [
            "max_holding_period",
            "u64"
          ],
          [
            "breakeven_threshold",
            "Percentage"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ProfitOpportunity",
        "file": "crates/risk/src/profit_extractor.rs",
        "line": 981,
        "fields": [
          [
            "action",
            "SignalAction"
          ],
          [
            "confidence",
            "Percentage"
          ],
          [
            "expected_profit",
            "Price"
          ],
          [
            "risk_level",
            "Percentage"
          ],
          [
            "optimal_size",
            "Quantity"
          ],
          [
            "entry_price",
            "Option<Price>"
          ],
          [
            "exit_price",
            "Option<Price>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "FillRecord",
        "file": "crates/risk/src/profit_extractor.rs",
        "line": 992,
        "fields": [
          [
            "timestamp",
            "u64"
          ],
          [
            "price",
            "Price"
          ],
          [
            "quantity",
            "Quantity"
          ],
          [
            "slippage",
            "Percentage"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ExecutionPlan",
        "file": "crates/risk/src/profit_extractor.rs",
        "line": 1000,
        "fields": [
          [
            "strategy",
            "ExecutionStrategy"
          ],
          [
            "chunks",
            "Vec<Quantity>"
          ],
          [
            "timing",
            "Vec<u64>"
          ],
          [
            "limit_price",
            "Option<Price>"
          ],
          [
            "urgency",
            "f64"
          ],
          [
            "expected_slippage",
            "Percentage"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "TwapEngine",
        "file": "crates/risk/src/profit_extractor.rs",
        "line": 1018,
        "fields": [
          [
            "start_time",
            "u64"
          ],
          [
            "end_time",
            "u64"
          ],
          [
            "total_quantity",
            "Quantity"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "VwapEngine",
        "file": "crates/risk/src/profit_extractor.rs",
        "line": 1034,
        "fields": [
          [
            "volume_curve",
            "Vec<(u64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "CostOptimizer",
        "file": "crates/risk/src/profit_extractor.rs",
        "line": 1047,
        "fields": [
          [
            "maker_fee",
            "Percentage"
          ],
          [
            "taker_fee",
            "Percentage"
          ],
          [
            "funding_rate",
            "Percentage"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "PerformanceTracker",
        "file": "crates/risk/src/profit_extractor.rs",
        "line": 1096,
        "fields": [
          [
            "total_trades",
            "u64"
          ],
          [
            "winning_trades",
            "u64"
          ],
          [
            "total_pnl",
            "Price"
          ],
          [
            "max_drawdown",
            "Percentage"
          ],
          [
            "sharpe_ratio",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ExitLevels",
        "file": "crates/risk/src/profit_extractor.rs",
        "line": 1117,
        "fields": [
          [
            "stop_loss",
            "Price"
          ],
          [
            "take_profit",
            "Price"
          ],
          [
            "trailing_stop",
            "Option<Percentage>"
          ],
          [
            "time_exit",
            "Option<u64>"
          ],
          [
            "breakeven_level",
            "Price"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "PerformanceStats",
        "file": "crates/risk/src/profit_extractor.rs",
        "line": 1539,
        "fields": [
          [
            "total_trades",
            "u64"
          ],
          [
            "win_rate",
            "f64"
          ],
          [
            "total_pnl",
            "Price"
          ],
          [
            "sharpe_ratio",
            "f64"
          ],
          [
            "max_drawdown",
            "Percentage"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "EnhancedTradingSignal",
        "file": "crates/risk/src/trading_types_complete.rs",
        "line": 19,
        "fields": [
          [
            "timestamp",
            "u64"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "action",
            "SignalAction"
          ],
          [
            "confidence",
            "Percentage"
          ],
          [
            "size",
            "Quantity"
          ],
          [
            "reason",
            "String"
          ],
          [
            "entry_price",
            "Price"
          ],
          [
            "stop_loss",
            "Price"
          ],
          [
            "take_profit",
            "Price"
          ],
          [
            "max_slippage",
            "Percentage"
          ],
          [
            "time_in_force",
            "TimeInForce"
          ],
          [
            "execution_algorithm",
            "ExecutionAlgorithm"
          ],
          [
            "portfolio_heat",
            "Percentage"
          ],
          [
            "correlation_risk",
            "f64"
          ],
          [
            "expected_sharpe",
            "f64"
          ],
          [
            "ml_features",
            "Vec<f64>"
          ],
          [
            "ta_indicators",
            "HashMap<String"
          ],
          [
            "market_regime",
            "MarketRegime"
          ],
          [
            "strategy_id",
            "String"
          ],
          [
            "model_version",
            "String"
          ],
          [
            "backtest_metrics",
            "BacktestMetrics"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SentimentData",
        "file": "crates/risk/src/trading_types_complete.rs",
        "line": 155,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "twitter_sentiment",
            "f64"
          ],
          [
            "reddit_sentiment",
            "f64"
          ],
          [
            "news_sentiment",
            "f64"
          ],
          [
            "fear_greed_index",
            "f64"
          ],
          [
            "put_call_ratio",
            "f64"
          ],
          [
            "vix",
            "f64"
          ],
          [
            "long_short_ratio",
            "f64"
          ],
          [
            "funding_rate",
            "f64"
          ],
          [
            "open_interest",
            "f64"
          ],
          [
            "overall_sentiment",
            "f64"
          ],
          [
            "sentiment_momentum",
            "f64"
          ],
          [
            "sentiment_divergence",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "EnhancedOrderBook",
        "file": "crates/risk/src/trading_types_complete.rs",
        "line": 199,
        "fields": [
          [
            "bids",
            "Vec<OrderLevel>"
          ],
          [
            "asks",
            "Vec<OrderLevel>"
          ],
          [
            "timestamp",
            "u64"
          ],
          [
            "exchange",
            "String"
          ],
          [
            "trade_flow",
            "Vec<Trade>"
          ],
          [
            "order_flow",
            "OrderFlow"
          ],
          [
            "book_imbalance",
            "f64"
          ],
          [
            "micro_price",
            "Price"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderLevel",
        "file": "crates/risk/src/trading_types_complete.rs",
        "line": 213,
        "fields": [
          [
            "price",
            "Price"
          ],
          [
            "quantity",
            "Quantity"
          ],
          [
            "order_count",
            "u32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Trade",
        "file": "crates/risk/src/trading_types_complete.rs",
        "line": 220,
        "fields": [
          [
            "price",
            "Price"
          ],
          [
            "quantity",
            "Quantity"
          ],
          [
            "side",
            "TradeSide"
          ],
          [
            "timestamp",
            "u64"
          ],
          [
            "aggressive",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderFlow",
        "file": "crates/risk/src/trading_types_complete.rs",
        "line": 235,
        "fields": [
          [
            "buy_volume",
            "f64"
          ],
          [
            "sell_volume",
            "f64"
          ],
          [
            "buy_trades",
            "u32"
          ],
          [
            "sell_trades",
            "u32"
          ],
          [
            "large_buy_volume",
            "f64"
          ],
          [
            "large_sell_volume",
            "f64"
          ],
          [
            "toxicity",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CompleteMarketData",
        "file": "crates/risk/src/trading_types_complete.rs",
        "line": 247,
        "fields": [
          [
            "symbol",
            "String"
          ],
          [
            "timestamp",
            "u64"
          ],
          [
            "open",
            "Price"
          ],
          [
            "high",
            "Price"
          ],
          [
            "low",
            "Price"
          ],
          [
            "close",
            "Price"
          ],
          [
            "volume",
            "Quantity"
          ],
          [
            "price",
            "Price"
          ],
          [
            "bid",
            "Price"
          ],
          [
            "ask",
            "Price"
          ],
          [
            "last_trade",
            "Price"
          ],
          [
            "returns_24h",
            "Percentage"
          ],
          [
            "volatility_24h",
            "Percentage"
          ],
          [
            "volume_24h",
            "f64"
          ],
          [
            "trades_24h",
            "u64"
          ],
          [
            "spread_bps",
            "f64"
          ],
          [
            "depth_10bps",
            "f64"
          ],
          [
            "resilience",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketConditions",
        "file": "crates/risk/src/trading_types_complete.rs",
        "line": 321,
        "fields": [
          [
            "spread_bps",
            "f64"
          ],
          [
            "taker_fee_bps",
            "f64"
          ],
          [
            "maker_rebate_bps",
            "f64"
          ],
          [
            "temporary_impact_bps",
            "f64"
          ],
          [
            "permanent_impact_bps",
            "f64"
          ],
          [
            "adverse_selection_bps",
            "f64"
          ],
          [
            "volatility",
            "f64"
          ],
          [
            "adv",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "BacktestMetrics",
        "file": "crates/risk/src/trading_types_complete.rs",
        "line": 334,
        "fields": [
          [
            "total_trades",
            "u32"
          ],
          [
            "win_rate",
            "f64"
          ],
          [
            "avg_return",
            "f64"
          ],
          [
            "sharpe_ratio",
            "f64"
          ],
          [
            "max_drawdown",
            "f64"
          ],
          [
            "calmar_ratio",
            "f64"
          ],
          [
            "sortino_ratio",
            "f64"
          ],
          [
            "profit_factor",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RiskParameters",
        "file": "crates/risk/src/trading_types_complete.rs",
        "line": 388,
        "fields": [
          [
            "max_position",
            "Percentage"
          ],
          [
            "max_leverage",
            "f64"
          ],
          [
            "vol_scalar",
            "f64"
          ],
          [
            "correlation_limit",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "AutoTunerConfig",
        "file": "crates/risk/src/hyperparameter_optimization.rs",
        "line": 25,
        "fields": [
          [
            "n_trials",
            "usize"
          ],
          [
            "n_startup_trials",
            "usize"
          ],
          [
            "optimization_interval",
            "std::time::Duration"
          ],
          [
            "performance_window",
            "usize"
          ],
          [
            "min_samples_before_optimization",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SimpleTrial",
        "file": "crates/risk/src/hyperparameter_optimization.rs",
        "line": 47,
        "fields": [
          [
            "id",
            "usize"
          ],
          [
            "params",
            "HashMap<String"
          ],
          [
            "value",
            "f64"
          ],
          [
            "state",
            "TrialState"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TradingParameterSpace",
        "file": "crates/risk/src/hyperparameter_optimization.rs",
        "line": 56,
        "fields": [
          [
            "parameters",
            "Vec<(String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "AutoTuner",
        "file": "crates/risk/src/hyperparameter_optimization.rs",
        "line": 104,
        "fields": [
          [
            "sampler",
            "TPESampler"
          ],
          [
            "pruner",
            "MedianPruner"
          ],
          [
            "study",
            "OptimizationStudy"
          ],
          [
            "config",
            "AutoTunerConfig"
          ],
          [
            "performance_history",
            "Vec<f64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "HyperOptStats",
        "file": "crates/risk/src/hyperparameter_optimization.rs",
        "line": 254,
        "fields": [
          [
            "total_trials",
            "usize"
          ],
          [
            "best_trial_id",
            "usize"
          ],
          [
            "best_value",
            "f64"
          ],
          [
            "convergence_rate",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ParameterDef",
        "file": "crates/risk/src/hyperparameter_optimization.rs",
        "line": 272,
        "fields": [
          [
            "name",
            "String"
          ],
          [
            "param_type",
            "ParameterType"
          ],
          [
            "description",
            "String"
          ],
          [
            "affects",
            "Vec<String>"
          ],
          [
            "importance",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OptimizationStudy",
        "file": "crates/risk/src/hyperparameter_optimization.rs",
        "line": 282,
        "fields": [
          [
            "study_name",
            "String"
          ],
          [
            "direction",
            "OptimizationDirection"
          ],
          [
            "parameters",
            "Vec<ParameterDef>"
          ],
          [
            "trials",
            "Vec<Trial>"
          ],
          [
            "best_trial",
            "Option<Trial>"
          ],
          [
            "sampler",
            "Box<dyn Sampler>"
          ],
          [
            "pruner",
            "Box<dyn Pruner>"
          ],
          [
            "user_attrs",
            "HashMap<String"
          ],
          [
            "system_attrs",
            "HashMap<String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Trial",
        "file": "crates/risk/src/hyperparameter_optimization.rs",
        "line": 302,
        "fields": [
          [
            "trial_id",
            "usize"
          ],
          [
            "params",
            "HashMap<String"
          ],
          [
            "value",
            "Option<f64>"
          ],
          [
            "intermediate_values",
            "Vec<(usize"
          ],
          [
            "state",
            "TrialState"
          ],
          [
            "datetime_start",
            "DateTime<Utc>"
          ],
          [
            "datetime_complete",
            "Option<DateTime<Utc>>"
          ],
          [
            "user_attrs",
            "HashMap<String"
          ],
          [
            "system_attrs",
            "HashMap<String"
          ],
          [
            "distributions",
            "HashMap<String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RandomSampler",
        "file": "crates/risk/src/hyperparameter_optimization.rs",
        "line": 411,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "NoPruner",
        "file": "crates/risk/src/hyperparameter_optimization.rs",
        "line": 473,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "TPESampler",
        "file": "crates/risk/src/hyperparameter_optimization.rs",
        "line": 506,
        "fields": [
          [
            "n_startup_trials",
            "usize"
          ],
          [
            "n_ei_candidates",
            "usize"
          ],
          [
            "gamma",
            "f64"
          ],
          [
            "seed",
            "u64"
          ],
          [
            "rng",
            "StdRng"
          ],
          [
            "good_trials",
            "Vec<SimpleTrial>"
          ],
          [
            "bad_trials",
            "Vec<SimpleTrial>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MedianPruner",
        "file": "crates/risk/src/hyperparameter_optimization.rs",
        "line": 1040,
        "fields": [
          [
            "n_startup_trials",
            "usize"
          ],
          [
            "n_warmup_steps",
            "usize"
          ],
          [
            "interval_steps",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "HyperparameterOptimizer",
        "file": "crates/risk/src/hyperparameter_optimization.rs",
        "line": 1107,
        "fields": [
          [
            "studies",
            "HashMap<String"
          ],
          [
            "default_sampler",
            "Arc<RwLock<Box<dyn Sampler>>>"
          ],
          [
            "default_pruner",
            "Arc<RwLock<Box<dyn Pruner>>>"
          ],
          [
            "trading_params",
            "TradingParameters"
          ],
          [
            "optimization_history",
            "Vec<OptimizationResult>"
          ],
          [
            "best_params_cache",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "auto_tune_interval",
            "std::time::Duration"
          ],
          [
            "last_auto_tune",
            "std::time::Instant"
          ],
          [
            "auto_tune_enabled",
            "bool"
          ],
          [
            "market_regime",
            "MarketRegime"
          ],
          [
            "regime_specific_params",
            "HashMap<MarketRegime"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TradingParameters",
        "file": "crates/risk/src/hyperparameter_optimization.rs",
        "line": 1131,
        "fields": [
          [
            "max_position_size",
            "ParameterDef"
          ],
          [
            "stop_loss_pct",
            "ParameterDef"
          ],
          [
            "take_profit_pct",
            "ParameterDef"
          ],
          [
            "max_drawdown",
            "ParameterDef"
          ],
          [
            "learning_rate",
            "ParameterDef"
          ],
          [
            "batch_size",
            "ParameterDef"
          ],
          [
            "hidden_layers",
            "ParameterDef"
          ],
          [
            "dropout_rate",
            "ParameterDef"
          ],
          [
            "rsi_period",
            "ParameterDef"
          ],
          [
            "macd_fast",
            "ParameterDef"
          ],
          [
            "macd_slow",
            "ParameterDef"
          ],
          [
            "bollinger_period",
            "ParameterDef"
          ],
          [
            "bollinger_std",
            "ParameterDef"
          ],
          [
            "slippage_tolerance",
            "ParameterDef"
          ],
          [
            "order_timeout",
            "ParameterDef"
          ],
          [
            "retry_attempts",
            "ParameterDef"
          ],
          [
            "rebalance_threshold",
            "ParameterDef"
          ],
          [
            "correlation_limit",
            "ParameterDef"
          ],
          [
            "concentration_limit",
            "ParameterDef"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OptimizationResult",
        "file": "crates/risk/src/hyperparameter_optimization.rs",
        "line": 1339,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "study_name",
            "String"
          ],
          [
            "best_params",
            "HashMap<String"
          ],
          [
            "best_value",
            "f64"
          ],
          [
            "n_trials",
            "usize"
          ],
          [
            "improvement_pct",
            "f64"
          ],
          [
            "market_regime",
            "MarketRegime"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OptimizationReport",
        "file": "crates/risk/src/hyperparameter_optimization.rs",
        "line": 1782,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "total_studies",
            "usize"
          ],
          [
            "total_trials",
            "usize"
          ],
          [
            "best_studies",
            "Vec<(String"
          ],
          [
            "regime_performance",
            "HashMap<MarketRegime"
          ],
          [
            "parameter_importance",
            "Vec<(String"
          ],
          [
            "convergence_analysis",
            "ConvergenceAnalysis"
          ],
          [
            "recommendations",
            "Vec<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ConvergenceAnalysis",
        "file": "crates/risk/src/hyperparameter_optimization.rs",
        "line": 1794,
        "fields": [
          [
            "convergence_rates",
            "Vec<(String"
          ],
          [
            "avg_trials_to_convergence",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MicrostructureMetrics",
        "file": "crates/risk/src/order_book_analytics_ext.rs",
        "line": 178,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "VPINCalculator",
        "file": "crates/risk/src/decision_orchestrator_enhanced.rs",
        "line": 26,
        "fields": [
          [
            "volume_buckets",
            "Vec<f64>"
          ],
          [
            "bucket_size",
            "f64"
          ],
          [
            "current_vpin",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "OptimalExecutor",
        "file": "crates/risk/src/decision_orchestrator_enhanced.rs",
        "line": 57,
        "fields": [
          [
            "default_algorithm",
            "ExecutionAlgorithm"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "EnhancedDecisionOrchestrator",
        "file": "crates/risk/src/decision_orchestrator_enhanced.rs",
        "line": 92,
        "fields": [
          [
            "ml_system",
            "Arc<RwLock<MLFeedbackSystem>>"
          ],
          [
            "shap_calculator",
            "Arc<RwLock<SHAPCalculator>>"
          ],
          [
            "ta_analytics",
            "Arc<RwLock<MarketAnalytics>>"
          ],
          [
            "kelly_sizer",
            "Arc<RwLock<KellySizer>>"
          ],
          [
            "risk_clamps",
            "Arc<RwLock<RiskClampSystem>>"
          ],
          [
            "vpin_calculator",
            "Arc<RwLock<VPINCalculator>>"
          ],
          [
            "monte_carlo",
            "Arc<RwLock<MonteCarloEngine>>"
          ],
          [
            "auto_tuner",
            "Arc<RwLock<AutoTuningSystem>>"
          ],
          [
            "hyperparameter_optimizer",
            "Arc<RwLock<HyperparameterOptimizer>>"
          ],
          [
            "parameter_manager",
            "Arc<ParameterManager>"
          ],
          [
            "profit_extractor",
            "Arc<RwLock<ProfitExtractor>>"
          ],
          [
            "optimal_executor",
            "Arc<RwLock<OptimalExecutor>>"
          ],
          [
            "portfolio_manager",
            "Arc<PortfolioManager>"
          ],
          [
            "t_copula",
            "Arc<TCopula>"
          ],
          [
            "regime_calibration",
            "Arc<HistoricalRegimeCalibration>"
          ],
          [
            "cross_asset_corr",
            "Arc<CrossAssetCorrelations>"
          ],
          [
            "persistence",
            "Arc<AutoTuningPersistence>"
          ],
          [
            "ml_weight",
            "Arc<RwLock<f64>>"
          ],
          [
            "ta_weight",
            "Arc<RwLock<f64>>"
          ],
          [
            "sentiment_weight",
            "Arc<RwLock<f64>>"
          ],
          [
            "regime_weight",
            "Arc<RwLock<f64>>"
          ],
          [
            "decision_history",
            "Arc<RwLock<Vec<EnhancedDecisionRecord>>>"
          ],
          [
            "performance_stats",
            "Arc<RwLock<PerformanceStats>>"
          ],
          [
            "feature_pipeline",
            "Arc<RwLock<FeaturePipeline>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "EnhancedDecisionRecord",
        "file": "crates/risk/src/decision_orchestrator_enhanced.rs",
        "line": 141,
        "fields": [
          [
            "timestamp",
            "i64"
          ],
          [
            "ml_confidence",
            "f64"
          ],
          [
            "ta_confidence",
            "f64"
          ],
          [
            "regime",
            "HistoricalRegime"
          ],
          [
            "tail_risk",
            "f64"
          ],
          [
            "contagion_level",
            "f64"
          ],
          [
            "vpin_toxicity",
            "f64"
          ],
          [
            "final_action",
            "SignalAction"
          ],
          [
            "position_size",
            "Decimal"
          ],
          [
            "expected_sharpe",
            "f64"
          ],
          [
            "actual_pnl",
            "Option<Decimal>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FeaturePipeline",
        "file": "crates/risk/src/decision_orchestrator_enhanced.rs",
        "line": 156,
        "fields": [
          [
            "price_features",
            "Vec<f64>"
          ],
          [
            "volume_features",
            "Vec<f64>"
          ],
          [
            "microstructure_features",
            "Vec<f64>"
          ],
          [
            "technical_features",
            "Vec<f64>"
          ],
          [
            "sentiment_features",
            "Vec<f64>"
          ],
          [
            "regime_features",
            "Vec<f64>"
          ],
          [
            "correlation_features",
            "Vec<f64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TypedCandle",
        "file": "crates/risk/src/type_conversion.rs",
        "line": 174,
        "fields": [
          [
            "open",
            "Price"
          ],
          [
            "high",
            "Price"
          ],
          [
            "low",
            "Price"
          ],
          [
            "close",
            "Price"
          ],
          [
            "volume",
            "Quantity"
          ],
          [
            "timestamp",
            "i64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TypedTick",
        "file": "crates/risk/src/type_conversion.rs",
        "line": 247,
        "fields": [
          [
            "timestamp",
            "i64"
          ],
          [
            "price",
            "Price"
          ],
          [
            "volume",
            "Quantity"
          ],
          [
            "bid",
            "Price"
          ],
          [
            "ask",
            "Price"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ExtendedTradingSignal",
        "file": "crates/risk/src/type_conversion.rs",
        "line": 295,
        "fields": [
          [
            "base",
            "TradingSignal"
          ],
          [
            "entry_price",
            "Price"
          ],
          [
            "stop_loss",
            "Price"
          ],
          [
            "take_profit",
            "Price"
          ],
          [
            "position_size",
            "Quantity"
          ],
          [
            "risk_amount",
            "Decimal"
          ],
          [
            "reward_amount",
            "Decimal"
          ],
          [
            "risk_reward_ratio",
            "f64"
          ],
          [
            "kelly_fraction",
            "f64"
          ],
          [
            "confidence",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FeatureConverter",
        "file": "crates/risk/src/type_conversion.rs",
        "line": 379,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "BatchConverter",
        "file": "crates/risk/src/type_conversion.rs",
        "line": 475,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "AutoTuningPersistence",
        "file": "crates/risk/src/auto_tuning_persistence.rs",
        "line": 16,
        "fields": [
          [
            "pool",
            "PgPool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "AdaptiveParameter",
        "file": "crates/risk/src/auto_tuning_persistence.rs",
        "line": 22,
        "fields": [
          [
            "id",
            "uuid::Uuid"
          ],
          [
            "parameter_name",
            "String"
          ],
          [
            "current_value",
            "Decimal"
          ],
          [
            "min_value",
            "Decimal"
          ],
          [
            "max_value",
            "Decimal"
          ],
          [
            "default_value",
            "Decimal"
          ],
          [
            "last_adjustment",
            "DateTime<Utc>"
          ],
          [
            "adjustment_count",
            "i32"
          ],
          [
            "adjustment_reason",
            "Option<String>"
          ],
          [
            "performance_impact",
            "Option<Decimal>"
          ],
          [
            "stability_score",
            "Option<Decimal>"
          ],
          [
            "optimal_for_regime",
            "Option<String>"
          ],
          [
            "description",
            "Option<String>"
          ],
          [
            "unit",
            "Option<String>"
          ],
          [
            "category",
            "Option<String>"
          ],
          [
            "created_at",
            "DateTime<Utc>"
          ],
          [
            "updated_at",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "QLearningEntry",
        "file": "crates/risk/src/auto_tuning_persistence.rs",
        "line": 44,
        "fields": [
          [
            "id",
            "uuid::Uuid"
          ],
          [
            "state_hash",
            "String"
          ],
          [
            "market_regime",
            "String"
          ],
          [
            "volatility_bucket",
            "i32"
          ],
          [
            "drawdown_bucket",
            "i32"
          ],
          [
            "momentum_bucket",
            "i32"
          ],
          [
            "action_id",
            "i32"
          ],
          [
            "action_description",
            "Option<String>"
          ],
          [
            "q_value",
            "Decimal"
          ],
          [
            "visit_count",
            "i32"
          ],
          [
            "total_reward",
            "Decimal"
          ],
          [
            "avg_reward",
            "Decimal"
          ],
          [
            "learning_rate",
            "Decimal"
          ],
          [
            "discount_factor",
            "Decimal"
          ],
          [
            "exploration_rate",
            "Decimal"
          ],
          [
            "first_seen",
            "DateTime<Utc>"
          ],
          [
            "last_updated",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketRegimeEntry",
        "file": "crates/risk/src/auto_tuning_persistence.rs",
        "line": 66,
        "fields": [
          [
            "id",
            "uuid::Uuid"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "regime",
            "String"
          ],
          [
            "confidence",
            "Decimal"
          ],
          [
            "trend_slope",
            "Option<Decimal>"
          ],
          [
            "average_return",
            "Option<Decimal>"
          ],
          [
            "volatility",
            "Option<Decimal>"
          ],
          [
            "volume_surge",
            "bool"
          ],
          [
            "correlation_stable",
            "bool"
          ],
          [
            "vix_level",
            "Option<Decimal>"
          ],
          [
            "volume_24h",
            "Option<Decimal>"
          ],
          [
            "bid_ask_spread",
            "Option<Decimal>"
          ],
          [
            "previous_regime",
            "Option<String>"
          ],
          [
            "regime_duration_hours",
            "Option<i32>"
          ],
          [
            "created_at",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PerformanceFeedback",
        "file": "crates/risk/src/auto_tuning_persistence.rs",
        "line": 86,
        "fields": [
          [
            "id",
            "uuid::Uuid"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "market_regime",
            "String"
          ],
          [
            "position_id",
            "Option<uuid::Uuid>"
          ],
          [
            "signal_id",
            "Option<String>"
          ],
          [
            "action_type",
            "Option<String>"
          ],
          [
            "old_value",
            "Option<Decimal>"
          ],
          [
            "new_value",
            "Option<Decimal>"
          ],
          [
            "pnl",
            "Option<Decimal>"
          ],
          [
            "return_pct",
            "Option<Decimal>"
          ],
          [
            "sharpe_contribution",
            "Option<Decimal>"
          ],
          [
            "max_drawdown",
            "Option<Decimal>"
          ],
          [
            "immediate_reward",
            "Option<Decimal>"
          ],
          [
            "delayed_reward",
            "Option<Decimal>"
          ],
          [
            "total_reward",
            "Option<Decimal>"
          ],
          [
            "success",
            "bool"
          ],
          [
            "success_criteria",
            "Option<String>"
          ],
          [
            "created_at",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketRegimeMetrics",
        "file": "crates/risk/src/auto_tuning_persistence.rs",
        "line": 393,
        "fields": [
          [
            "trend_slope",
            "Decimal"
          ],
          [
            "average_return",
            "Decimal"
          ],
          [
            "volatility",
            "Decimal"
          ],
          [
            "volume_surge",
            "bool"
          ],
          [
            "correlation_stable",
            "bool"
          ],
          [
            "vix_level",
            "Option<Decimal>"
          ],
          [
            "volume_24h",
            "Decimal"
          ],
          [
            "bid_ask_spread",
            "Decimal"
          ],
          [
            "previous_regime",
            "Option<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PerformanceMetrics",
        "file": "crates/risk/src/auto_tuning_persistence.rs",
        "line": 407,
        "fields": [
          [
            "avg_return",
            "Option<Decimal>"
          ],
          [
            "avg_sharpe",
            "Option<Decimal>"
          ],
          [
            "max_drawdown",
            "Option<Decimal>"
          ],
          [
            "win_rate",
            "Option<f64>"
          ],
          [
            "total_pnl",
            "Option<Decimal>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "AdvancedGameTheory",
        "file": "crates/risk/src/game_theory_advanced.rs",
        "line": 12,
        "fields": [
          [
            "params",
            "Arc<ParameterManager>"
          ],
          [
            "payoff_history",
            "Vec<PayoffMatrix>"
          ],
          [
            "market_players",
            "HashMap<String"
          ],
          [
            "strategy_evolution",
            "Vec<Strategy>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PayoffMatrix",
        "file": "crates/risk/src/game_theory_advanced.rs",
        "line": 26,
        "fields": [
          [
            "timestamp",
            "chrono::DateTime<chrono::Utc>"
          ],
          [
            "our_strategy",
            "Strategy"
          ],
          [
            "opponent_strategies",
            "Vec<Strategy>"
          ],
          [
            "our_payoff",
            "f64"
          ],
          [
            "market_payoff",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PlayerProfile",
        "file": "crates/risk/src/game_theory_advanced.rs",
        "line": 35,
        "fields": [
          [
            "capital",
            "f64"
          ],
          [
            "strategy_distribution",
            "HashMap<Strategy"
          ],
          [
            "skill_level",
            "f64"
          ],
          [
            "information_advantage",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketState",
        "file": "crates/risk/src/game_theory_advanced.rs",
        "line": 424,
        "fields": [
          [
            "volatility",
            "f64"
          ],
          [
            "volume",
            "f64"
          ],
          [
            "trend",
            "f64"
          ],
          [
            "depth",
            "f64"
          ],
          [
            "spread",
            "f64"
          ],
          [
            "price_impact",
            "f64"
          ],
          [
            "volume_imbalance",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketMakerDilemma",
        "file": "crates/risk/src/game_theory_advanced.rs",
        "line": 437,
        "fields": [
          [
            "params",
            "Arc<ParameterManager>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderBookAnalytics",
        "file": "crates/risk/src/order_book_analytics.rs",
        "line": 18,
        "fields": [
          [
            "order_book_history",
            "VecDeque<OrderBookSnapshot>"
          ],
          [
            "kyle_lambda",
            "f64"
          ],
          [
            "kyle_window",
            "usize"
          ],
          [
            "vpin_buckets",
            "VecDeque<VPINBucket>"
          ],
          [
            "vpin_bucket_size",
            "f64"
          ],
          [
            "vpin_window",
            "usize"
          ],
          [
            "flow_imbalance_history",
            "VecDeque<f64>"
          ],
          [
            "effective_spread_history",
            "VecDeque<f64>"
          ],
          [
            "realized_spread_history",
            "VecDeque<f64>"
          ],
          [
            "spoofing_detector",
            "SpoofingDetector"
          ],
          [
            "layering_detector",
            "LayeringDetector"
          ],
          [
            "momentum_ignition_detector",
            "MomentumIgnitionDetector"
          ],
          [
            "adverse_selection_component",
            "f64"
          ],
          [
            "probability_informed_trading",
            "f64"
          ],
          [
            "permanent_impact",
            "f64"
          ],
          [
            "temporary_impact",
            "f64"
          ],
          [
            "depth_imbalance",
            "DepthImbalance"
          ],
          [
            "resilience_measure",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderBookSnapshot",
        "file": "crates/risk/src/order_book_analytics.rs",
        "line": 58,
        "fields": [
          [
            "timestamp",
            "u64"
          ],
          [
            "bids",
            "Vec<PriceLevel>"
          ],
          [
            "asks",
            "Vec<PriceLevel>"
          ],
          [
            "mid_price",
            "Decimal"
          ],
          [
            "microprice",
            "Decimal"
          ],
          [
            "trades",
            "Vec<Trade>"
          ],
          [
            "bid_depth_1",
            "f64"
          ],
          [
            "ask_depth_1",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PriceLevel",
        "file": "crates/risk/src/order_book_analytics.rs",
        "line": 72,
        "fields": [
          [
            "price",
            "Decimal"
          ],
          [
            "quantity",
            "Decimal"
          ],
          [
            "order_count",
            "u32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Trade",
        "file": "crates/risk/src/order_book_analytics.rs",
        "line": 80,
        "fields": [
          [
            "timestamp",
            "u64"
          ],
          [
            "price",
            "Decimal"
          ],
          [
            "quantity",
            "Decimal"
          ],
          [
            "aggressor_side",
            "Side"
          ],
          [
            "trade_id",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "VPINBucket",
        "file": "crates/risk/src/order_book_analytics.rs",
        "line": 92,
        "fields": [
          [
            "volume",
            "f64"
          ],
          [
            "buy_volume",
            "f64"
          ],
          [
            "sell_volume",
            "f64"
          ],
          [
            "timestamp_start",
            "u64"
          ],
          [
            "timestamp_end",
            "u64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "DepthImbalance",
        "file": "crates/risk/src/order_book_analytics.rs",
        "line": 102,
        "fields": [
          [
            "level_1",
            "f64"
          ],
          [
            "level_5",
            "f64"
          ],
          [
            "level_10",
            "f64"
          ],
          [
            "weighted",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SpoofingDetector",
        "file": "crates/risk/src/order_book_analytics.rs",
        "line": 111,
        "fields": [
          [
            "order_lifecycle",
            "HashMap<String"
          ],
          [
            "cancellation_rate_threshold",
            "f64"
          ],
          [
            "time_to_cancel_threshold",
            "u64"
          ],
          [
            "fleeting_order_ratio",
            "f64"
          ],
          [
            "detection_score",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "OrderLifecycle",
        "file": "crates/risk/src/order_book_analytics.rs",
        "line": 121,
        "fields": [
          [
            "order_id",
            "String"
          ],
          [
            "side",
            "Side"
          ],
          [
            "price",
            "Decimal"
          ],
          [
            "quantity",
            "Decimal"
          ],
          [
            "placed_at",
            "u64"
          ],
          [
            "cancelled_at",
            "Option<u64>"
          ],
          [
            "filled_quantity",
            "Decimal"
          ],
          [
            "modifications",
            "Vec<OrderModification>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "OrderModification",
        "file": "crates/risk/src/order_book_analytics.rs",
        "line": 133,
        "fields": [
          [
            "timestamp",
            "u64"
          ],
          [
            "new_price",
            "Option<Decimal>"
          ],
          [
            "new_quantity",
            "Option<Decimal>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "LayeringDetector",
        "file": "crates/risk/src/order_book_analytics.rs",
        "line": 140,
        "fields": [
          [
            "layer_patterns",
            "Vec<LayerPattern>"
          ],
          [
            "min_layers",
            "usize"
          ],
          [
            "price_range_threshold",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "LayerPattern",
        "file": "crates/risk/src/order_book_analytics.rs",
        "line": 147,
        "fields": [
          [
            "side",
            "Side"
          ],
          [
            "price_levels",
            "Vec<Decimal>"
          ],
          [
            "total_quantity",
            "Decimal"
          ],
          [
            "timestamp",
            "u64"
          ],
          [
            "is_suspicious",
            "bool"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "MomentumIgnitionDetector",
        "file": "crates/risk/src/order_book_analytics.rs",
        "line": 156,
        "fields": [
          [
            "aggressive_trades",
            "VecDeque<AggressiveTrade>"
          ],
          [
            "momentum_threshold",
            "f64"
          ],
          [
            "time_window",
            "u64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "AggressiveTrade",
        "file": "crates/risk/src/order_book_analytics.rs",
        "line": 163,
        "fields": [
          [
            "timestamp",
            "u64"
          ],
          [
            "side",
            "Side"
          ],
          [
            "price",
            "Decimal"
          ],
          [
            "quantity",
            "Decimal"
          ],
          [
            "price_impact",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "LiquidityEvent",
        "file": "crates/risk/src/order_book_analytics.rs",
        "line": 897,
        "fields": [
          [
            "side",
            "Side"
          ],
          [
            "size",
            "f64"
          ],
          [
            "price_level",
            "u32"
          ],
          [
            "timestamp",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderBookMetrics",
        "file": "crates/risk/src/order_book_analytics.rs",
        "line": 905,
        "fields": [
          [
            "timestamp",
            "u64"
          ],
          [
            "imbalance",
            "f64"
          ],
          [
            "microprice",
            "Decimal"
          ],
          [
            "depth_imbalance",
            "DepthImbalance"
          ],
          [
            "kyle_lambda",
            "f64"
          ],
          [
            "vpin",
            "f64"
          ],
          [
            "effective_spread",
            "f64"
          ],
          [
            "realized_spread",
            "f64"
          ],
          [
            "spoofing_probability",
            "f64"
          ],
          [
            "layering_probability",
            "f64"
          ],
          [
            "momentum_ignition_probability",
            "f64"
          ],
          [
            "adverse_selection_cost",
            "f64"
          ],
          [
            "probability_informed",
            "f64"
          ],
          [
            "permanent_impact",
            "f64"
          ],
          [
            "temporary_impact",
            "f64"
          ],
          [
            "resilience",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TradingRecommendation",
        "file": "crates/risk/src/order_book_analytics.rs",
        "line": 926,
        "fields": [
          [
            "action",
            "SignalAction"
          ],
          [
            "confidence",
            "f64"
          ],
          [
            "expected_edge",
            "f64"
          ],
          [
            "execution_urgency",
            "f64"
          ],
          [
            "size_limit",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "EnhancedVPINBucket",
        "file": "crates/risk/src/vpin_validation.rs",
        "line": 20,
        "fields": [
          [
            "volume",
            "f64"
          ],
          [
            "buy_volume",
            "f64"
          ],
          [
            "sell_volume",
            "f64"
          ],
          [
            "timestamp_start",
            "u64"
          ],
          [
            "timestamp_end",
            "u64"
          ],
          [
            "price_start",
            "f64"
          ],
          [
            "price_end",
            "f64"
          ],
          [
            "trade_count",
            "usize"
          ],
          [
            "order_imbalance",
            "f64"
          ],
          [
            "toxicity_score",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "VPINCalculator",
        "file": "crates/risk/src/vpin_validation.rs",
        "line": 34,
        "fields": [
          [
            "bucket_size",
            "f64"
          ],
          [
            "window_size",
            "usize"
          ],
          [
            "buckets",
            "VecDeque<EnhancedVPINBucket>"
          ],
          [
            "use_bulk_classification",
            "bool"
          ],
          [
            "use_tick_rule",
            "bool"
          ],
          [
            "cdf_vpin",
            "Vec<f64>"
          ],
          [
            "vpin_percentile",
            "f64"
          ],
          [
            "toxicity_threshold",
            "f64"
          ],
          [
            "informed_trader_prob",
            "f64"
          ],
          [
            "arrival_rate_informed",
            "f64"
          ],
          [
            "arrival_rate_uninformed",
            "f64"
          ],
          [
            "kyle_lambda",
            "f64"
          ],
          [
            "effective_spread",
            "f64"
          ],
          [
            "realized_spread",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "VPINMetrics",
        "file": "crates/risk/src/vpin_validation.rs",
        "line": 445,
        "fields": [
          [
            "vpin",
            "f64"
          ],
          [
            "vpin_percentile",
            "f64"
          ],
          [
            "is_toxic",
            "bool"
          ],
          [
            "toxicity_score",
            "f64"
          ],
          [
            "informed_prob",
            "f64"
          ],
          [
            "kyle_lambda",
            "f64"
          ],
          [
            "effective_spread",
            "f64"
          ],
          [
            "realized_spread",
            "f64"
          ],
          [
            "bucket_count",
            "usize"
          ],
          [
            "order_imbalance",
            "f64"
          ],
          [
            "arrival_imbalance",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RegimeParameters",
        "file": "crates/risk/src/historical_regime_calibration.rs",
        "line": 62,
        "fields": [
          [
            "expected_return",
            "f64"
          ],
          [
            "volatility",
            "f64"
          ],
          [
            "correlation_level",
            "f64"
          ],
          [
            "tail_risk",
            "f64"
          ],
          [
            "duration_days",
            "f64"
          ],
          [
            "transition_probs",
            "Vec<f64>"
          ],
          [
            "skewness",
            "f64"
          ],
          [
            "kurtosis",
            "f64"
          ],
          [
            "max_drawdown",
            "f64"
          ],
          [
            "recovery_time",
            "f64"
          ],
          [
            "vix_range",
            "(f64"
          ],
          [
            "volume_multiplier",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "HiddenMarkovModel",
        "file": "crates/risk/src/historical_regime_calibration.rs",
        "line": 78,
        "fields": [
          [
            "n_states",
            "usize"
          ],
          [
            "transition_matrix",
            "Arc<RwLock<DMatrix<f64>>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "EmissionParameters",
        "file": "crates/risk/src/historical_regime_calibration.rs",
        "line": 92,
        "fields": [
          [
            "return_mean",
            "f64"
          ],
          [
            "return_std",
            "f64"
          ],
          [
            "volume_mean",
            "f64"
          ],
          [
            "volume_std",
            "f64"
          ],
          [
            "spread_mean",
            "f64"
          ],
          [
            "spread_std",
            "f64"
          ],
          [
            "correlation_mean",
            "f64"
          ],
          [
            "correlation_std",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "HistoricalRegimeCalibration",
        "file": "crates/risk/src/historical_regime_calibration.rs",
        "line": 104,
        "fields": [
          [
            "hmm",
            "Arc<HiddenMarkovModel>"
          ],
          [
            "regime_history",
            "Arc<RwLock<Vec<(DateTime<Utc>"
          ],
          [
            "regime_parameters",
            "Arc<RwLock<HashMap<HistoricalRegime"
          ],
          [
            "crisis_indicators",
            "Arc<RwLock<CrisisIndicators>>"
          ],
          [
            "historical_crises",
            "Vec<CrisisEvent>"
          ],
          [
            "regime_predictor",
            "Arc<RwLock<RegimePredictor>>"
          ],
          [
            "current_regime",
            "Arc<RwLock<HistoricalRegime>>"
          ],
          [
            "regime_confidence",
            "Arc<RwLock<f64>>"
          ],
          [
            "feature_extractor",
            "FeatureExtractor"
          ],
          [
            "feature_history",
            "Arc<RwLock<VecDeque<RegimeFeatures>>>"
          ],
          [
            "params",
            "Arc<ParameterManager>"
          ],
          [
            "cache_size",
            "usize"
          ],
          [
            "update_frequency",
            "Duration"
          ],
          [
            "last_update",
            "Arc<RwLock<DateTime<Utc>>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CrisisIndicators",
        "file": "crates/risk/src/historical_regime_calibration.rs",
        "line": 134,
        "fields": [
          [
            "vix_spike_threshold",
            "f64"
          ],
          [
            "correlation_spike",
            "f64"
          ],
          [
            "volume_surge",
            "f64"
          ],
          [
            "drawdown_speed",
            "f64"
          ],
          [
            "credit_spread_widening",
            "f64"
          ],
          [
            "term_structure_inversion",
            "bool"
          ],
          [
            "margin_calls_surge",
            "f64"
          ],
          [
            "sentiment_extreme",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CrisisEvent",
        "file": "crates/risk/src/historical_regime_calibration.rs",
        "line": 147,
        "fields": [
          [
            "name",
            "String"
          ],
          [
            "start_date",
            "DateTime<Utc>"
          ],
          [
            "end_date",
            "DateTime<Utc>"
          ],
          [
            "max_drawdown",
            "f64"
          ],
          [
            "recovery_days",
            "i64"
          ],
          [
            "trigger",
            "String"
          ],
          [
            "characteristics",
            "CrisisCharacteristics"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CrisisCharacteristics",
        "file": "crates/risk/src/historical_regime_calibration.rs",
        "line": 158,
        "fields": [
          [
            "correlation_peak",
            "f64"
          ],
          [
            "volatility_peak",
            "f64"
          ],
          [
            "volume_peak",
            "f64"
          ],
          [
            "contagion_speed",
            "f64"
          ],
          [
            "sectors_affected",
            "Vec<String>"
          ],
          [
            "safe_havens",
            "Vec<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RegimePredictor",
        "file": "crates/risk/src/historical_regime_calibration.rs",
        "line": 168,
        "fields": [
          [
            "hmm_predictor",
            "HMMPredictor"
          ],
          [
            "neural_predictor",
            "NeuralRegimePredictor"
          ],
          [
            "rule_based",
            "RuleBasedPredictor"
          ],
          [
            "weights",
            "Vec<f64>"
          ],
          [
            "prediction_days",
            "usize"
          ],
          [
            "confidence_threshold",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RegimeFeatures",
        "file": "crates/risk/src/historical_regime_calibration.rs",
        "line": 184,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "returns_1d",
            "f64"
          ],
          [
            "returns_5d",
            "f64"
          ],
          [
            "returns_20d",
            "f64"
          ],
          [
            "volatility_realized",
            "f64"
          ],
          [
            "volatility_garch",
            "f64"
          ],
          [
            "volume_ratio",
            "f64"
          ],
          [
            "correlation_avg",
            "f64"
          ],
          [
            "spread_avg",
            "f64"
          ],
          [
            "skewness_20d",
            "f64"
          ],
          [
            "kurtosis_20d",
            "f64"
          ],
          [
            "rsi",
            "f64"
          ],
          [
            "macd_signal",
            "f64"
          ],
          [
            "vix_level",
            "f64"
          ],
          [
            "put_call_ratio",
            "f64"
          ],
          [
            "term_spread",
            "f64"
          ],
          [
            "credit_spread",
            "f64"
          ],
          [
            "momentum_factor",
            "f64"
          ],
          [
            "value_factor",
            "f64"
          ],
          [
            "carry_factor",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FeatureExtractor",
        "file": "crates/risk/src/historical_regime_calibration.rs",
        "line": 903,
        "fields": [],
        "visibility": "private"
      },
      {
        "name": "HMMPredictor",
        "file": "crates/risk/src/historical_regime_calibration.rs",
        "line": 908,
        "fields": [],
        "visibility": "private"
      },
      {
        "name": "NeuralRegimePredictor",
        "file": "crates/risk/src/historical_regime_calibration.rs",
        "line": 909,
        "fields": [],
        "visibility": "private"
      },
      {
        "name": "RuleBasedPredictor",
        "file": "crates/risk/src/historical_regime_calibration.rs",
        "line": 910,
        "fields": [],
        "visibility": "private"
      },
      {
        "name": "CrisisWarning",
        "file": "crates/risk/src/historical_regime_calibration.rs",
        "line": 926,
        "fields": [
          [
            "probability",
            "f64"
          ],
          [
            "triggered_indicators",
            "Vec<String>"
          ],
          [
            "recommended_action",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FundingRateAnalyzer",
        "file": "crates/risk/src/funding_rates.rs",
        "line": 23,
        "fields": [
          [
            "funding_history",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "current_rates",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "arbitrage_opportunities",
            "Arc<RwLock<Vec<FundingArbitrage>>>"
          ],
          [
            "portfolio_manager",
            "Arc<PortfolioManager>"
          ],
          [
            "min_arbitrage_spread",
            "f64"
          ],
          [
            "max_position_size",
            "Decimal"
          ],
          [
            "funding_interval_hours",
            "i64"
          ],
          [
            "total_funding_collected",
            "Arc<RwLock<Decimal>>"
          ],
          [
            "total_funding_paid",
            "Arc<RwLock<Decimal>>"
          ],
          [
            "net_funding_pnl",
            "Arc<RwLock<Decimal>>"
          ],
          [
            "nash_equilibrium_rate",
            "f64"
          ],
          [
            "mean_reversion_speed",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FundingHistory",
        "file": "crates/risk/src/funding_rates.rs",
        "line": 53,
        "fields": [
          [
            "symbol",
            "String"
          ],
          [
            "exchange",
            "String"
          ],
          [
            "rates",
            "VecDeque<FundingRatePoint>"
          ],
          [
            "average_rate",
            "f64"
          ],
          [
            "volatility",
            "f64"
          ],
          [
            "trend",
            "f64"
          ],
          [
            "last_update",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FundingRatePoint",
        "file": "crates/risk/src/funding_rates.rs",
        "line": 65,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "rate",
            "f64"
          ],
          [
            "next_funding",
            "DateTime<Utc>"
          ],
          [
            "mark_price",
            "Price"
          ],
          [
            "index_price",
            "Price"
          ],
          [
            "open_interest",
            "Decimal"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ExchangeFundingRate",
        "file": "crates/risk/src/funding_rates.rs",
        "line": 76,
        "fields": [
          [
            "exchange",
            "String"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "current_rate",
            "f64"
          ],
          [
            "predicted_rate",
            "f64"
          ],
          [
            "next_funding_time",
            "DateTime<Utc>"
          ],
          [
            "open_interest",
            "Decimal"
          ],
          [
            "bid",
            "Price"
          ],
          [
            "ask",
            "Price"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FundingArbitrage",
        "file": "crates/risk/src/funding_rates.rs",
        "line": 89,
        "fields": [
          [
            "id",
            "uuid::Uuid"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "long_exchange",
            "String"
          ],
          [
            "short_exchange",
            "String"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "spread",
            "f64"
          ],
          [
            "expected_profit",
            "Decimal"
          ],
          [
            "required_capital",
            "Decimal"
          ],
          [
            "risk_score",
            "f64"
          ],
          [
            "confidence",
            "f64"
          ],
          [
            "execution_strategy",
            "ExecutionStrategy"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FundingConfig",
        "file": "crates/risk/src/funding_rates.rs",
        "line": 585,
        "fields": [
          [
            "min_arbitrage_spread",
            "f64"
          ],
          [
            "max_position_size",
            "Decimal"
          ],
          [
            "funding_interval_hours",
            "i64"
          ],
          [
            "nash_equilibrium_rate",
            "f64"
          ],
          [
            "mean_reversion_speed",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "AutoTuningSystem",
        "file": "crates/risk/src/auto_tuning.rs",
        "line": 22,
        "fields": [
          [
            "performance_history",
            "VecDeque<PerformanceRecord>"
          ],
          [
            "current_regime",
            "MarketRegime"
          ],
          [
            "regime_confidence",
            "f64"
          ],
          [
            "adaptive_var_limit",
            "Arc<RwLock<f64>>"
          ],
          [
            "adaptive_vol_target",
            "Arc<RwLock<f64>>"
          ],
          [
            "adaptive_kelly_fraction",
            "Arc<RwLock<f64>>"
          ],
          [
            "adaptive_leverage_cap",
            "Arc<RwLock<f64>>"
          ],
          [
            "q_table",
            "Arc<RwLock<QTable>>"
          ],
          [
            "learning_rate",
            "f64"
          ],
          [
            "discount_factor",
            "f64"
          ],
          [
            "exploration_rate",
            "f64"
          ],
          [
            "sharpe_ratio",
            "f64"
          ],
          [
            "max_drawdown",
            "f64"
          ],
          [
            "win_rate",
            "f64"
          ],
          [
            "profit_factor",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PerformanceRecord",
        "file": "crates/risk/src/auto_tuning.rs",
        "line": 50,
        "fields": [
          [
            "timestamp",
            "u64"
          ],
          [
            "regime",
            "MarketRegime"
          ],
          [
            "position_size",
            "f64"
          ],
          [
            "outcome",
            "f64"
          ],
          [
            "var_limit",
            "f64"
          ],
          [
            "vol_target",
            "f64"
          ],
          [
            "kelly_fraction",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "QTable",
        "file": "crates/risk/src/auto_tuning.rs",
        "line": 63,
        "fields": [
          [
            "values",
            "Vec<Vec<Vec<Vec<f64>>>>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "AdaptiveParameters",
        "file": "crates/risk/src/auto_tuning.rs",
        "line": 578,
        "fields": [
          [
            "var_limit",
            "f64"
          ],
          [
            "vol_target",
            "f64"
          ],
          [
            "kelly_fraction",
            "f64"
          ],
          [
            "leverage_cap",
            "f64"
          ],
          [
            "regime",
            "MarketRegime"
          ],
          [
            "regime_confidence",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MLFeedbackSystemExt",
        "file": "crates/risk/src/ml_extensions.rs",
        "line": 11,
        "fields": [
          [
            "predictions",
            "VecDeque<PredictionRecord>"
          ],
          [
            "platt_a",
            "Option<f64>"
          ],
          [
            "platt_b",
            "Option<f64>"
          ],
          [
            "isotonic_mapping",
            "Vec<(f64"
          ],
          [
            "last_recalibration",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SHAPCalculatorExt",
        "file": "crates/risk/src/ml_extensions.rs",
        "line": 20,
        "fields": [
          [
            "feature_names",
            "Vec<String>"
          ],
          [
            "feature_means",
            "Vec<f64>"
          ],
          [
            "feature_weights",
            "Vec<f64>"
          ],
          [
            "baseline_value",
            "Option<f64>"
          ],
          [
            "shap_history",
            "VecDeque<SHAPRecord>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketAnalyticsExt",
        "file": "crates/risk/src/ml_extensions.rs",
        "line": 29,
        "fields": [
          [
            "price_history",
            "Vec<f64>"
          ],
          [
            "volume_history",
            "Vec<f64>"
          ],
          [
            "obv_values",
            "VecDeque<f64>"
          ],
          [
            "macd_values",
            "VecDeque<f64>"
          ],
          [
            "rsi_values",
            "VecDeque<f64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PredictionRecord",
        "file": "crates/risk/src/ml_extensions.rs",
        "line": 39,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "action",
            "SignalAction"
          ],
          [
            "confidence",
            "f64"
          ],
          [
            "actual_outcome",
            "Option<f64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SHAPRecord",
        "file": "crates/risk/src/ml_extensions.rs",
        "line": 48,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "values",
            "Vec<f64>"
          ],
          [
            "feature_names",
            "Vec<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderLevel",
        "file": "crates/risk/src/ml_extensions.rs",
        "line": 56,
        "fields": [
          [
            "price",
            "Decimal"
          ],
          [
            "size",
            "Decimal"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "EnhancedOrderBook",
        "file": "crates/risk/src/ml_extensions.rs",
        "line": 63,
        "fields": [
          [
            "bids",
            "Vec<OrderLevel>"
          ],
          [
            "asks",
            "Vec<OrderLevel>"
          ],
          [
            "last_update",
            "DateTime<Utc>"
          ],
          [
            "exchange",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PortfolioManager",
        "file": "crates/risk/src/portfolio_manager.rs",
        "line": 19,
        "fields": [
          [
            "account_equity",
            "Arc<RwLock<Decimal>>"
          ],
          [
            "cash_balance",
            "Arc<RwLock<Decimal>>"
          ],
          [
            "margin_used",
            "Arc<RwLock<Decimal>>"
          ],
          [
            "available_margin",
            "Arc<RwLock<Decimal>>"
          ],
          [
            "positions",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "position_count",
            "Arc<RwLock<usize>>"
          ],
          [
            "portfolio_heat",
            "Arc<RwLock<f64>>"
          ],
          [
            "max_heat",
            "f64"
          ],
          [
            "correlation_matrix",
            "Arc<RwLock<CorrelationMatrix>>"
          ],
          [
            "total_pnl",
            "Arc<RwLock<Decimal>>"
          ],
          [
            "realized_pnl",
            "Arc<RwLock<Decimal>>"
          ],
          [
            "unrealized_pnl",
            "Arc<RwLock<Decimal>>"
          ],
          [
            "max_drawdown",
            "Arc<RwLock<f64>>"
          ],
          [
            "peak_equity",
            "Arc<RwLock<Decimal>>"
          ],
          [
            "max_positions",
            "usize"
          ],
          [
            "max_position_size_pct",
            "f64"
          ],
          [
            "max_leverage",
            "f64"
          ],
          [
            "min_trade_size",
            "Decimal"
          ],
          [
            "trade_history",
            "Arc<RwLock<Vec<Trade>>>"
          ],
          [
            "equity_curve",
            "Arc<RwLock<Vec<(u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CorrelationMatrix",
        "file": "crates/risk/src/portfolio_manager.rs",
        "line": 56,
        "fields": [
          [
            "symbols",
            "Vec<String>"
          ],
          [
            "matrix",
            "Vec<Vec<f64>>"
          ],
          [
            "last_update",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Trade",
        "file": "crates/risk/src/portfolio_manager.rs",
        "line": 64,
        "fields": [
          [
            "id",
            "uuid::Uuid"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "side",
            "Side"
          ],
          [
            "quantity",
            "Quantity"
          ],
          [
            "entry_price",
            "Price"
          ],
          [
            "exit_price",
            "Option<Price>"
          ],
          [
            "pnl",
            "Option<Decimal>"
          ],
          [
            "entry_time",
            "u64"
          ],
          [
            "exit_time",
            "Option<u64>"
          ],
          [
            "fees",
            "Decimal"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PortfolioConfig",
        "file": "crates/risk/src/portfolio_manager.rs",
        "line": 360,
        "fields": [
          [
            "max_positions",
            "usize"
          ],
          [
            "max_position_size_pct",
            "f64"
          ],
          [
            "max_leverage",
            "f64"
          ],
          [
            "leverage_factor",
            "Decimal"
          ],
          [
            "min_trade_size",
            "Decimal"
          ],
          [
            "max_heat",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "KellyValidator",
        "file": "crates/risk/src/kelly_validation.rs",
        "line": 14,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "ValidationReport",
        "file": "crates/risk/src/kelly_validation.rs",
        "line": 208,
        "fields": [
          [
            "coin_flip",
            "bool"
          ],
          [
            "blackjack",
            "bool"
          ],
          [
            "stock_market",
            "bool"
          ],
          [
            "options",
            "bool"
          ],
          [
            "cost_impact",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RiskClampSystem",
        "file": "crates/risk/src/clamps.rs",
        "line": 27,
        "fields": [
          [
            "config",
            "ClampConfig"
          ],
          [
            "garch",
            "Arc<RwLock<GARCHModel>>"
          ],
          [
            "calibrator",
            "Arc<RwLock<IsotonicCalibrator>>"
          ],
          [
            "kelly",
            "Arc<RwLock<KellySizer>>"
          ],
          [
            "auto_tuner",
            "Arc<RwLock<AutoTuningSystem>>"
          ],
          [
            "current_var",
            "f32"
          ],
          [
            "current_es",
            "f32"
          ],
          [
            "portfolio_positions",
            "Vec<Position>"
          ],
          [
            "crisis_indicators",
            "CrisisIndicators"
          ],
          [
            "clamp_triggers",
            "Arc<RwLock<ClampMetrics>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ClampConfig",
        "file": "crates/risk/src/clamps.rs",
        "line": 52,
        "fields": [
          [
            "vol_target",
            "f32"
          ],
          [
            "var_limit",
            "f32"
          ],
          [
            "es_limit",
            "f32"
          ],
          [
            "heat_cap",
            "f32"
          ],
          [
            "leverage_cap",
            "f32"
          ],
          [
            "correlation_threshold",
            "f32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Position",
        "file": "crates/risk/src/clamps.rs",
        "line": 81,
        "fields": [
          [
            "symbol",
            "String"
          ],
          [
            "size",
            "f32"
          ],
          [
            "entry_price",
            "f32"
          ],
          [
            "current_price",
            "f32"
          ],
          [
            "pnl",
            "f32"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "CrisisIndicators",
        "file": "crates/risk/src/clamps.rs",
        "line": 93,
        "fields": [
          [
            "vix_spike",
            "bool"
          ],
          [
            "volume_surge",
            "bool"
          ],
          [
            "correlation_breakdown",
            "bool"
          ],
          [
            "bid_ask_spread_widening",
            "f32"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ClampMetrics",
        "file": "crates/risk/src/clamps.rs",
        "line": 101,
        "fields": [
          [
            "vol_clamps",
            "u64"
          ],
          [
            "var_clamps",
            "u64"
          ],
          [
            "es_clamps",
            "u64"
          ],
          [
            "heat_clamps",
            "u64"
          ],
          [
            "correlation_clamps",
            "u64"
          ],
          [
            "leverage_clamps",
            "u64"
          ],
          [
            "crisis_clamps",
            "u64"
          ],
          [
            "min_size_filters",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CalibrationMetrics",
        "file": "crates/risk/src/ml_complete_impl.rs",
        "line": 56,
        "fields": [
          [
            "brier_score",
            "f64"
          ],
          [
            "log_loss",
            "f64"
          ],
          [
            "expected_calibration_error",
            "f64"
          ],
          [
            "max_calibration_error",
            "f64"
          ],
          [
            "reliability_diagram",
            "Vec<(f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PredictionRecord",
        "file": "crates/risk/src/ml_complete_impl.rs",
        "line": 781,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "action",
            "SignalAction"
          ],
          [
            "confidence",
            "f64"
          ],
          [
            "actual_outcome",
            "Option<f64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SHAPRecord",
        "file": "crates/risk/src/ml_complete_impl.rs",
        "line": 789,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "values",
            "Vec<f64>"
          ],
          [
            "feature_names",
            "Vec<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OptimalExecutionEngine",
        "file": "crates/risk/src/optimal_execution.rs",
        "line": 25,
        "fields": [
          [
            "kyle_lambda",
            "Arc<RwLock<f64>>"
          ],
          [
            "temporary_impact",
            "Arc<RwLock<f64>>"
          ],
          [
            "permanent_impact",
            "Arc<RwLock<f64>>"
          ],
          [
            "active_executions",
            "Arc<RwLock<Vec<ExecutionPlan>>>"
          ],
          [
            "completed_executions",
            "Arc<RwLock<Vec<ExecutionResult>>>"
          ],
          [
            "total_slippage",
            "Arc<RwLock<Decimal>>"
          ],
          [
            "avg_fill_quality",
            "Arc<RwLock<f64>>"
          ],
          [
            "market_impact_saved",
            "Arc<RwLock<Decimal>>"
          ],
          [
            "adversarial_adjustment",
            "f64"
          ],
          [
            "information_leakage",
            "f64"
          ],
          [
            "predatory_threshold",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ExecutionPlan",
        "file": "crates/risk/src/optimal_execution.rs",
        "line": 48,
        "fields": [
          [
            "order_id",
            "uuid::Uuid"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "side",
            "Side"
          ],
          [
            "total_quantity",
            "Quantity"
          ],
          [
            "algorithm",
            "ExecutionAlgorithm"
          ],
          [
            "time_horizon",
            "u64"
          ],
          [
            "urgency",
            "f64"
          ],
          [
            "slices",
            "Vec<ExecutionSlice>"
          ],
          [
            "start_time",
            "u64"
          ],
          [
            "expected_cost",
            "Decimal"
          ],
          [
            "risk_limit",
            "Decimal"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ExecutionSlice",
        "file": "crates/risk/src/optimal_execution.rs",
        "line": 64,
        "fields": [
          [
            "timestamp",
            "u64"
          ],
          [
            "quantity",
            "Quantity"
          ],
          [
            "limit_price",
            "Option<Price>"
          ],
          [
            "aggressive",
            "bool"
          ],
          [
            "executed",
            "bool"
          ],
          [
            "fill_price",
            "Option<Price>"
          ],
          [
            "market_impact",
            "Option<f64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ExecutionMetrics",
        "file": "crates/risk/src/optimal_execution.rs",
        "line": 740,
        "fields": [
          [
            "total_slippage",
            "Decimal"
          ],
          [
            "avg_fill_quality",
            "f64"
          ],
          [
            "market_impact_saved",
            "Decimal"
          ],
          [
            "active_executions",
            "usize"
          ],
          [
            "completed_executions",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Order",
        "file": "crates/risk/src/optimal_execution.rs",
        "line": 750,
        "fields": [
          [
            "id",
            "uuid::Uuid"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "side",
            "Side"
          ],
          [
            "quantity",
            "Quantity"
          ],
          [
            "order_type",
            "OrderType"
          ],
          [
            "limit_price",
            "Option<Price>"
          ],
          [
            "urgency",
            "Option<f64>"
          ],
          [
            "risk_limit",
            "Option<Decimal>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "VolumeProfile",
        "file": "crates/risk/src/optimal_execution.rs",
        "line": 771,
        "fields": [
          [
            "timestamp",
            "u64"
          ],
          [
            "total_volume",
            "f64"
          ],
          [
            "buy_volume",
            "f64"
          ],
          [
            "sell_volume",
            "f64"
          ],
          [
            "vwap",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Price",
        "file": "crates/risk/src/unified_types.rs",
        "line": 21,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "Quantity",
        "file": "crates/risk/src/unified_types.rs",
        "line": 60,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "Percentage",
        "file": "crates/risk/src/unified_types.rs",
        "line": 89,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "RiskMetrics",
        "file": "crates/risk/src/unified_types.rs",
        "line": 130,
        "fields": [
          [
            "position_size",
            "Quantity"
          ],
          [
            "confidence",
            "Percentage"
          ],
          [
            "expected_return",
            "Percentage"
          ],
          [
            "volatility",
            "Percentage"
          ],
          [
            "var_limit",
            "Percentage"
          ],
          [
            "sharpe_ratio",
            "f64"
          ],
          [
            "kelly_fraction",
            "Percentage"
          ],
          [
            "max_drawdown",
            "Percentage"
          ],
          [
            "current_heat",
            "Percentage"
          ],
          [
            "leverage",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketData",
        "file": "crates/risk/src/unified_types.rs",
        "line": 163,
        "fields": [
          [
            "symbol",
            "String"
          ],
          [
            "timestamp",
            "u64"
          ],
          [
            "bid",
            "Price"
          ],
          [
            "ask",
            "Price"
          ],
          [
            "last",
            "Price"
          ],
          [
            "volume",
            "Quantity"
          ],
          [
            "bid_size",
            "Quantity"
          ],
          [
            "ask_size",
            "Quantity"
          ],
          [
            "spread",
            "Price"
          ],
          [
            "mid",
            "Price"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Position",
        "file": "crates/risk/src/unified_types.rs",
        "line": 190,
        "fields": [
          [
            "symbol",
            "String"
          ],
          [
            "side",
            "Side"
          ],
          [
            "quantity",
            "Quantity"
          ],
          [
            "entry_price",
            "Price"
          ],
          [
            "current_price",
            "Price"
          ],
          [
            "unrealized_pnl",
            "Price"
          ],
          [
            "realized_pnl",
            "Price"
          ],
          [
            "holding_period",
            "u64"
          ],
          [
            "max_profit",
            "Price"
          ],
          [
            "max_loss",
            "Price"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TradingSignal",
        "file": "crates/risk/src/unified_types.rs",
        "line": 235,
        "fields": [
          [
            "timestamp",
            "u64"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "action",
            "SignalAction"
          ],
          [
            "confidence",
            "Percentage"
          ],
          [
            "size",
            "Quantity"
          ],
          [
            "reason",
            "String"
          ],
          [
            "risk_metrics",
            "RiskMetrics"
          ],
          [
            "ml_features",
            "Vec<f64>"
          ],
          [
            "ta_indicators",
            "Vec<f64>"
          ],
          [
            "DIVE",
            "Added critical trading fields\n    pub entry_price: Option<Price>"
          ],
          [
            "stop_loss",
            "Option<Price>"
          ],
          [
            "take_profit",
            "Option<Price>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "UnifiedOrder",
        "file": "crates/risk/src/unified_types.rs",
        "line": 263,
        "fields": [
          [
            "id",
            "uuid::Uuid"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "side",
            "Side"
          ],
          [
            "order_type",
            "OrderType"
          ],
          [
            "quantity",
            "Quantity"
          ],
          [
            "price",
            "Option<Price>"
          ],
          [
            "stop_price",
            "Option<Price>"
          ],
          [
            "take_profit",
            "Option<Price>"
          ],
          [
            "time_in_force",
            "TimeInForce"
          ],
          [
            "reduce_only",
            "bool"
          ],
          [
            "post_only",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FeatureMetadata",
        "file": "crates/risk/src/feature_importance.rs",
        "line": 32,
        "fields": [
          [
            "name",
            "String"
          ],
          [
            "category",
            "FeatureCategory"
          ],
          [
            "description",
            "String"
          ],
          [
            "importance_score",
            "f64"
          ],
          [
            "shap_value",
            "f64"
          ],
          [
            "interaction_strength",
            "f64"
          ],
          [
            "stability_score",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SHAPCalculator",
        "file": "crates/risk/src/feature_importance.rs",
        "line": 43,
        "fields": [
          [
            "model_predict",
            "Arc<dyn Fn(&Array2<f64>) -> Array1<f64> + Send + Sync>"
          ],
          [
            "feature_names",
            "Vec<String>"
          ],
          [
            "feature_metadata",
            "HashMap<String"
          ],
          [
            "n_samples",
            "usize"
          ],
          [
            "max_samples",
            "usize"
          ],
          [
            "use_sampling",
            "bool"
          ],
          [
            "background_data",
            "Array2<f64>"
          ],
          [
            "shap_values_cache",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "feature_importance_cache",
            "Arc<RwLock<BTreeMap<String"
          ],
          [
            "shapley_values",
            "HashMap<String"
          ],
          [
            "coalitions",
            "Vec<Vec<usize>>"
          ],
          [
            "computation_time_ms",
            "f64"
          ],
          [
            "accuracy_score",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FeatureImportanceReport",
        "file": "crates/risk/src/feature_importance.rs",
        "line": 707,
        "fields": [
          [
            "timestamp",
            "chrono::DateTime<chrono::Utc>"
          ],
          [
            "total_features",
            "usize"
          ],
          [
            "top_features",
            "Vec<(String"
          ],
          [
            "category_breakdown",
            "HashMap<FeatureCategory"
          ],
          [
            "stability_analysis",
            "StabilityAnalysis"
          ],
          [
            "interaction_analysis",
            "InteractionAnalysis"
          ],
          [
            "computation_time_ms",
            "f64"
          ],
          [
            "recommendations",
            "Vec<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CategoryStats",
        "file": "crates/risk/src/feature_importance.rs",
        "line": 719,
        "fields": [
          [
            "count",
            "usize"
          ],
          [
            "total_importance",
            "f64"
          ],
          [
            "avg_importance",
            "f64"
          ],
          [
            "top_feature",
            "Option<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "StabilityAnalysis",
        "file": "crates/risk/src/feature_importance.rs",
        "line": 727,
        "fields": [
          [
            "avg_stability",
            "f64"
          ],
          [
            "stable_features",
            "Vec<String>"
          ],
          [
            "unstable_features",
            "Vec<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "InteractionAnalysis",
        "file": "crates/risk/src/feature_importance.rs",
        "line": 734,
        "fields": [
          [
            "strongest_pairs",
            "Vec<(String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "IsotonicCalibrator",
        "file": "crates/risk/src/isotonic.rs",
        "line": 16,
        "fields": [
          [
            "thresholds",
            "Vec<f64>"
          ],
          [
            "calibrated",
            "Vec<f64>"
          ],
          [
            "samples_used",
            "usize"
          ],
          [
            "brier_score_before",
            "f64"
          ],
          [
            "brier_score_after",
            "f64"
          ],
          [
            "ece_before",
            "f64"
          ],
          [
            "ece_after",
            "f64"
          ],
          [
            "regime_calibrators",
            "Vec<(MarketRegime"
          ],
          [
            "current_regime",
            "MarketRegime"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Block",
        "file": "crates/risk/src/isotonic.rs",
        "line": 384,
        "fields": [
          [
            "x_min",
            "f64"
          ],
          [
            "x_max",
            "f64"
          ],
          [
            "y_sum",
            "f64"
          ],
          [
            "w_sum",
            "f64"
          ],
          [
            "y_mean",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ECEBin",
        "file": "crates/risk/src/isotonic.rs",
        "line": 394,
        "fields": [
          [
            "count",
            "usize"
          ],
          [
            "sum_confidence",
            "f64"
          ],
          [
            "sum_positive",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ReliabilityBin",
        "file": "crates/risk/src/isotonic.rs",
        "line": 402,
        "fields": [
          [
            "predictions",
            "Vec<f64>"
          ],
          [
            "actuals",
            "Vec<bool>"
          ],
          [
            "mean_predicted",
            "f64"
          ],
          [
            "fraction_positive",
            "f64"
          ],
          [
            "count",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CalibrationMetrics",
        "file": "crates/risk/src/isotonic.rs",
        "line": 412,
        "fields": [
          [
            "samples_used",
            "usize"
          ],
          [
            "brier_improvement",
            "f64"
          ],
          [
            "ece_improvement",
            "f64"
          ],
          [
            "n_segments",
            "usize"
          ],
          [
            "regime_calibrators",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "StateTransition",
        "file": "crates/order_management/src/state_machine.rs",
        "line": 106,
        "fields": [
          [
            "order_id",
            "OrderId"
          ],
          [
            "from_state",
            "OrderState"
          ],
          [
            "to_state",
            "OrderState"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "reason",
            "Option<String>"
          ],
          [
            "metadata",
            "Option<serde_json::Value>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderStateMachine",
        "file": "crates/order_management/src/state_machine.rs",
        "line": 116,
        "fields": [
          [
            "order_id",
            "OrderId"
          ],
          [
            "current_state",
            "Arc<AtomicU8>"
          ],
          [
            "state_history",
            "Arc<RwLock<Vec<StateTransition>>>"
          ],
          [
            "created_at",
            "DateTime<Utc>"
          ],
          [
            "updated_at",
            "Arc<RwLock<DateTime<Utc>>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PositionId",
        "file": "crates/order_management/src/position.rs",
        "line": 18,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "Position",
        "file": "crates/order_management/src/position.rs",
        "line": 40,
        "fields": [
          [
            "id",
            "PositionId"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "side",
            "OrderSide"
          ],
          [
            "quantity",
            "Decimal"
          ],
          [
            "entry_price",
            "Decimal"
          ],
          [
            "current_price",
            "Decimal"
          ],
          [
            "unrealized_pnl",
            "Decimal"
          ],
          [
            "unrealized_pnl_pct",
            "Decimal"
          ],
          [
            "realized_pnl",
            "Decimal"
          ],
          [
            "total_commission",
            "Decimal"
          ],
          [
            "stop_loss_price",
            "Option<Decimal>"
          ],
          [
            "take_profit_price",
            "Option<Decimal>"
          ],
          [
            "max_drawdown",
            "Decimal"
          ],
          [
            "position_value",
            "Decimal"
          ],
          [
            "opened_at",
            "DateTime<Utc>"
          ],
          [
            "updated_at",
            "DateTime<Utc>"
          ],
          [
            "closed_at",
            "Option<DateTime<Utc>>"
          ],
          [
            "strategy_id",
            "Option<String>"
          ],
          [
            "opening_orders",
            "Vec<OrderId>"
          ],
          [
            "closing_orders",
            "Vec<OrderId>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PositionManager",
        "file": "crates/order_management/src/position.rs",
        "line": 179,
        "fields": [
          [
            "positions",
            "Arc<DashMap<PositionId"
          ],
          [
            "symbol_positions",
            "Arc<DashMap<String"
          ],
          [
            "pnl_calculator",
            "Arc<PnLCalculator>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PnLCalculator",
        "file": "crates/order_management/src/position.rs",
        "line": 375,
        "fields": [
          [
            "commission_rate",
            "Decimal"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ExchangeRoute",
        "file": "crates/order_management/src/router.rs",
        "line": 17,
        "fields": [
          [
            "exchange_name",
            "String"
          ],
          [
            "is_active",
            "bool"
          ],
          [
            "priority",
            "u8"
          ],
          [
            "avg_latency_ms",
            "u64"
          ],
          [
            "success_rate",
            "f64"
          ],
          [
            "avg_slippage_bps",
            "i32"
          ],
          [
            "maker_fee_bps",
            "i32"
          ],
          [
            "taker_fee_bps",
            "i32"
          ],
          [
            "min_order_size",
            "Decimal"
          ],
          [
            "max_order_size",
            "Decimal"
          ],
          [
            "rate_limit_per_second",
            "u32"
          ],
          [
            "current_requests",
            "Arc<RwLock<u32>>"
          ],
          [
            "last_request",
            "Arc<RwLock<Instant>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderRouter",
        "file": "crates/order_management/src/router.rs",
        "line": 142,
        "fields": [
          [
            "routes",
            "Arc<DashMap<String"
          ],
          [
            "strategy",
            "Arc<RwLock<RoutingStrategy>>"
          ],
          [
            "primary_exchange",
            "Arc<RwLock<Option<String>>>"
          ],
          [
            "round_robin_index",
            "Arc<RwLock<usize>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RoutingStats",
        "file": "crates/order_management/src/router.rs",
        "line": 330,
        "fields": [
          [
            "total_routes",
            "usize"
          ],
          [
            "active_routes",
            "usize"
          ],
          [
            "avg_latency_ms",
            "u64"
          ],
          [
            "avg_success_rate",
            "f64"
          ],
          [
            "current_strategy",
            "RoutingStrategy"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderManagerConfig",
        "file": "crates/order_management/src/manager.rs",
        "line": 19,
        "fields": [
          [
            "max_open_orders",
            "usize"
          ],
          [
            "max_orders_per_symbol",
            "usize"
          ],
          [
            "enable_risk_checks",
            "bool"
          ],
          [
            "enable_duplicate_checks",
            "bool"
          ],
          [
            "order_timeout_seconds",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderManager",
        "file": "crates/order_management/src/manager.rs",
        "line": 39,
        "fields": [
          [
            "config",
            "Arc<OrderManagerConfig>"
          ],
          [
            "orders",
            "Arc<DashMap<OrderId"
          ],
          [
            "state_machines",
            "Arc<DashMap<OrderId"
          ],
          [
            "symbol_orders",
            "Arc<DashMap<String"
          ],
          [
            "db_pool",
            "Option<PgPool>"
          ],
          [
            "metrics",
            "Arc<OrderMetrics>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderMetrics",
        "file": "crates/order_management/src/manager.rs",
        "line": 409,
        "fields": [
          [
            "orders_created",
            "AtomicU64"
          ],
          [
            "orders_submitted",
            "AtomicU64"
          ],
          [
            "orders_filled",
            "AtomicU64"
          ],
          [
            "orders_partially_filled",
            "AtomicU64"
          ],
          [
            "orders_cancelled",
            "AtomicU64"
          ],
          [
            "orders_rejected",
            "AtomicU64"
          ],
          [
            "creation_latency_us",
            "AtomicU64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "OrderId",
        "file": "crates/order_management/src/order.rs",
        "line": 13,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "Order",
        "file": "crates/order_management/src/order.rs",
        "line": 95,
        "fields": [
          [
            "id",
            "OrderId"
          ],
          [
            "client_order_id",
            "String"
          ],
          [
            "exchange_order_id",
            "Option<String>"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "side",
            "OrderSide"
          ],
          [
            "order_type",
            "OrderType"
          ],
          [
            "quantity",
            "Decimal"
          ],
          [
            "price",
            "Option<Decimal>"
          ],
          [
            "stop_price",
            "Option<Decimal>"
          ],
          [
            "time_in_force",
            "TimeInForce"
          ],
          [
            "stop_loss_price",
            "Option<Decimal>"
          ],
          [
            "take_profit_price",
            "Option<Decimal>"
          ],
          [
            "position_size_pct",
            "Decimal"
          ],
          [
            "max_loss_amount",
            "Decimal"
          ],
          [
            "filled_quantity",
            "Decimal"
          ],
          [
            "average_fill_price",
            "Option<Decimal>"
          ],
          [
            "commission",
            "Decimal"
          ],
          [
            "commission_asset",
            "Option<String>"
          ],
          [
            "strategy_id",
            "Option<String>"
          ],
          [
            "signal_strength",
            "Option<Decimal>"
          ],
          [
            "ml_confidence",
            "Option<Decimal>"
          ],
          [
            "ta_score",
            "Option<Decimal>"
          ],
          [
            "created_at",
            "DateTime<Utc>"
          ],
          [
            "submitted_at",
            "Option<DateTime<Utc>>"
          ],
          [
            "filled_at",
            "Option<DateTime<Utc>>"
          ],
          [
            "cancelled_at",
            "Option<DateTime<Utc>>"
          ],
          [
            "updated_at",
            "DateTime<Utc>"
          ],
          [
            "submission_latency_us",
            "Option<u64>"
          ],
          [
            "fill_latency_us",
            "Option<u64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderUpdate",
        "file": "crates/order_management/src/order.rs",
        "line": 302,
        "fields": [
          [
            "order_id",
            "OrderId"
          ],
          [
            "exchange_order_id",
            "Option<String>"
          ],
          [
            "filled_quantity",
            "Decimal"
          ],
          [
            "fill_price",
            "Decimal"
          ],
          [
            "commission",
            "Decimal"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderFill",
        "file": "crates/order_management/src/order.rs",
        "line": 313,
        "fields": [
          [
            "order_id",
            "OrderId"
          ],
          [
            "fill_id",
            "String"
          ],
          [
            "quantity",
            "Decimal"
          ],
          [
            "price",
            "Decimal"
          ],
          [
            "commission",
            "Decimal"
          ],
          [
            "commission_asset",
            "String"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "is_maker",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderId",
        "file": "crates/types/src/trading.rs",
        "line": 18,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "Price",
        "file": "crates/types/src/market.rs",
        "line": 5,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "Quantity",
        "file": "crates/types/src/market.rs",
        "line": 8,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "Symbol",
        "file": "crates/types/src/market.rs",
        "line": 11,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "Exchange",
        "file": "crates/types/src/market.rs",
        "line": 14,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "KillSwitch",
        "file": "crates/risk_engine/src/emergency.rs",
        "line": 41,
        "fields": [
          [
            "is_active",
            "Arc<AtomicBool>"
          ],
          [
            "triggered_at_nanos",
            "Arc<AtomicU64>"
          ],
          [
            "trigger_reason",
            "Arc<RwLock<Option<TripCondition>>>"
          ],
          [
            "auto_reset_after",
            "Option<Duration>"
          ],
          [
            "trigger_count",
            "Arc<AtomicU64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "EmergencyStop",
        "file": "crates/risk_engine/src/emergency.rs",
        "line": 140,
        "fields": [
          [
            "kill_switch",
            "Arc<KillSwitch>"
          ],
          [
            "conditions",
            "Arc<RwLock<Vec<EmergencyCondition>>>"
          ],
          [
            "last_check_nanos",
            "Arc<AtomicU64>"
          ],
          [
            "check_interval",
            "Duration"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "EmergencyCondition",
        "file": "crates/risk_engine/src/emergency.rs",
        "line": 148,
        "fields": [
          [
            "name",
            "String"
          ],
          [
            "check_fn",
            "Arc<dyn Fn() -> Option<TripCondition> + Send + Sync>"
          ],
          [
            "enabled",
            "bool"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "EmergencyStatus",
        "file": "crates/risk_engine/src/emergency.rs",
        "line": 286,
        "fields": [
          [
            "kill_switch_active",
            "bool"
          ],
          [
            "trigger_reason",
            "Option<TripCondition>"
          ],
          [
            "trigger_count",
            "u64"
          ],
          [
            "conditions_count",
            "usize"
          ],
          [
            "last_check_nanos",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RecoveryPlan",
        "file": "crates/risk_engine/src/emergency.rs",
        "line": 296,
        "fields": [
          [
            "steps",
            "Vec<RecoveryStep>"
          ],
          [
            "estimated_time",
            "Duration"
          ],
          [
            "requires_manual_approval",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RecoveryStep",
        "file": "crates/risk_engine/src/emergency.rs",
        "line": 303,
        "fields": [
          [
            "order",
            "usize"
          ],
          [
            "description",
            "String"
          ],
          [
            "action",
            "RecoveryAction"
          ],
          [
            "requires_confirmation",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RiskSuggestion",
        "file": "crates/risk_engine/src/checks.rs",
        "line": 39,
        "fields": [
          [
            "field",
            "String"
          ],
          [
            "current_value",
            "String"
          ],
          [
            "suggested_value",
            "String"
          ],
          [
            "reason",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RiskChecker",
        "file": "crates/risk_engine/src/checks.rs",
        "line": 60,
        "fields": [
          [
            "limits",
            "Arc<RiskLimits>"
          ],
          [
            "current_positions",
            "Arc<DashMap<String"
          ],
          [
            "daily_pnl",
            "Arc<RwLock<Decimal>>"
          ],
          [
            "total_exposure",
            "Arc<RwLock<Decimal>>"
          ],
          [
            "check_latencies",
            "Arc<DashMap<PreTradeCheck"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "BatchRiskChecker",
        "file": "crates/risk_engine/src/checks.rs",
        "line": 281,
        "fields": [
          [
            "checker",
            "Arc<RiskChecker>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RiskLimits",
        "file": "crates/risk_engine/src/limits.rs",
        "line": 11,
        "fields": [
          [
            "position_limits",
            "PositionLimits"
          ],
          [
            "loss_limits",
            "LossLimits"
          ],
          [
            "exposure_limits",
            "ExposureLimits"
          ],
          [
            "correlation_limits",
            "CorrelationLimits"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PositionLimits",
        "file": "crates/risk_engine/src/limits.rs",
        "line": 21,
        "fields": [
          [
            "max_position_size_pct",
            "Decimal"
          ],
          [
            "max_open_positions",
            "usize"
          ],
          [
            "max_positions_per_symbol",
            "usize"
          ],
          [
            "require_stop_loss",
            "bool"
          ],
          [
            "default_stop_loss_pct",
            "Decimal"
          ],
          [
            "max_leverage",
            "Decimal"
          ],
          [
            "max_total_exposure",
            "Decimal"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "LossLimits",
        "file": "crates/risk_engine/src/limits.rs",
        "line": 60,
        "fields": [
          [
            "daily_loss_limit",
            "Option<Decimal>"
          ],
          [
            "weekly_loss_limit",
            "Option<Decimal>"
          ],
          [
            "monthly_loss_limit",
            "Option<Decimal>"
          ],
          [
            "max_drawdown_pct",
            "Decimal"
          ],
          [
            "max_consecutive_losses",
            "usize"
          ],
          [
            "emergency_stop_loss",
            "Decimal"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ExposureLimits",
        "file": "crates/risk_engine/src/limits.rs",
        "line": 95,
        "fields": [
          [
            "max_crypto_exposure",
            "Decimal"
          ],
          [
            "max_exchange_exposure",
            "Decimal"
          ],
          [
            "max_directional_exposure",
            "Decimal"
          ],
          [
            "max_notional_value",
            "Decimal"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CorrelationLimits",
        "file": "crates/risk_engine/src/limits.rs",
        "line": 122,
        "fields": [
          [
            "max_position_correlation",
            "f64"
          ],
          [
            "max_correlated_positions",
            "usize"
          ],
          [
            "correlation_window_days",
            "usize"
          ],
          [
            "min_correlation_samples",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "LimitAdjustment",
        "file": "crates/risk_engine/src/limits.rs",
        "line": 260,
        "fields": [
          [
            "limit_name",
            "String"
          ],
          [
            "old_value",
            "Decimal"
          ],
          [
            "new_value",
            "Decimal"
          ],
          [
            "reason",
            "String"
          ],
          [
            "approved_by",
            "String"
          ],
          [
            "timestamp",
            "chrono::DateTime<chrono::Utc>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "StopLossTrigger",
        "file": "crates/risk_engine/src/stop_loss_manager.rs",
        "line": 21,
        "fields": [
          [
            "position_id",
            "PositionId"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "side",
            "OrderSide"
          ],
          [
            "stop_price",
            "Decimal"
          ],
          [
            "quantity",
            "Decimal"
          ],
          [
            "created_at",
            "DateTime<Utc>"
          ],
          [
            "triggered_at",
            "Option<DateTime<Utc>>"
          ],
          [
            "is_active",
            "bool"
          ],
          [
            "is_trailing",
            "bool"
          ],
          [
            "trail_distance",
            "Option<Decimal>"
          ],
          [
            "high_water_mark",
            "Option<Decimal>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "StopLossManager",
        "file": "crates/risk_engine/src/stop_loss_manager.rs",
        "line": 36,
        "fields": [
          [
            "stop_losses",
            "Arc<DashMap<PositionId"
          ],
          [
            "price_feeds",
            "Arc<DashMap<String"
          ],
          [
            "order_sender",
            "mpsc::Sender<Order>"
          ],
          [
            "emergency_stop",
            "Arc<RwLock<bool>>"
          ],
          [
            "triggers_activated",
            "Arc<RwLock<u64>>"
          ],
          [
            "losses_prevented",
            "Arc<RwLock<Decimal>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "StopLossStatistics",
        "file": "crates/risk_engine/src/stop_loss_manager.rs",
        "line": 345,
        "fields": [
          [
            "active_stops",
            "usize"
          ],
          [
            "triggered_stops",
            "u64"
          ],
          [
            "losses_prevented",
            "Decimal"
          ],
          [
            "emergency_stop_active",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CorrelationMatrix",
        "file": "crates/risk_engine/src/correlation.rs",
        "line": 13,
        "fields": [
          [
            "symbols",
            "Vec<String>"
          ],
          [
            "matrix",
            "Arc<RwLock<Array2<f64>>>"
          ],
          [
            "last_update",
            "Arc<RwLock<chrono::DateTime<chrono::Utc>>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CorrelationAnalyzer",
        "file": "crates/risk_engine/src/correlation.rs",
        "line": 91,
        "fields": [
          [
            "price_history",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "correlation_matrix",
            "Arc<CorrelationMatrix>"
          ],
          [
            "window_size",
            "usize"
          ],
          [
            "min_samples",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CorrelationMetrics",
        "file": "crates/risk_engine/src/correlation.rs",
        "line": 238,
        "fields": [
          [
            "average_correlation",
            "f64"
          ],
          [
            "max_correlation",
            "f64"
          ],
          [
            "correlation_pairs",
            "Vec<(String"
          ],
          [
            "risk_score",
            "f64"
          ],
          [
            "timestamp",
            "chrono::DateTime<chrono::Utc>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CorrelationAnalyzerAVX512",
        "file": "crates/risk_engine/src/correlation_avx512.rs",
        "line": 13,
        "fields": [
          [
            "max_correlation",
            "f64"
          ],
          [
            "price_history",
            "Arc<RwLock<Vec<Vec<f64>>>>"
          ],
          [
            "correlation_cache",
            "Arc<RwLock<Vec<Vec<f64>>>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketMakerProfile",
        "file": "crates/risk_engine/src/market_maker_detection.rs",
        "line": 22,
        "fields": [
          [
            "identifier",
            "String"
          ],
          [
            "confidence_score",
            "f64"
          ],
          [
            "quote_frequency_per_sec",
            "f64"
          ],
          [
            "avg_spread_bps",
            "f64"
          ],
          [
            "spread_stability",
            "f64"
          ],
          [
            "order_symmetry",
            "f64"
          ],
          [
            "cancellation_rate",
            "f64"
          ],
          [
            "avg_order_lifetime_ms",
            "f64"
          ],
          [
            "inventory_cycling",
            "bool"
          ],
          [
            "provides_liquidity_pct",
            "f64"
          ],
          [
            "takes_liquidity_pct",
            "f64"
          ],
          [
            "detection_timestamp",
            "DateTime<Utc>"
          ],
          [
            "last_activity",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderBookEvent",
        "file": "crates/risk_engine/src/market_maker_detection.rs",
        "line": 40,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "event_type",
            "OrderEventType"
          ],
          [
            "participant_id",
            "String"
          ],
          [
            "side",
            "OrderSide"
          ],
          [
            "price",
            "Decimal"
          ],
          [
            "quantity",
            "Decimal"
          ],
          [
            "is_aggressive",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketMakerDetector",
        "file": "crates/risk_engine/src/market_maker_detection.rs",
        "line": 78,
        "fields": [
          [
            "participants",
            "Arc<DashMap<String"
          ],
          [
            "event_history",
            "Arc<RwLock<VecDeque<OrderBookEvent>>>"
          ],
          [
            "participant_activity",
            "Arc<DashMap<String"
          ],
          [
            "config",
            "DetectionConfig"
          ],
          [
            "total_participants_analyzed",
            "Arc<RwLock<u64>>"
          ],
          [
            "market_makers_detected",
            "Arc<RwLock<u64>>"
          ],
          [
            "detection_accuracy",
            "Arc<RwLock<f64>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ParticipantActivity",
        "file": "crates/risk_engine/src/market_maker_detection.rs",
        "line": 99,
        "fields": [
          [
            "quote_times",
            "VecDeque<DateTime<Utc>>"
          ],
          [
            "spreads",
            "VecDeque<f64>"
          ],
          [
            "order_lifetimes",
            "VecDeque<i64>"
          ],
          [
            "buy_volume",
            "Decimal"
          ],
          [
            "sell_volume",
            "Decimal"
          ],
          [
            "cancelled_volume",
            "Decimal"
          ],
          [
            "filled_volume",
            "Decimal"
          ],
          [
            "aggressive_orders",
            "u64"
          ],
          [
            "passive_orders",
            "u64"
          ],
          [
            "best_bid_time_ms",
            "i64"
          ],
          [
            "best_ask_time_ms",
            "i64"
          ],
          [
            "total_time_ms",
            "i64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "DetectionConfig",
        "file": "crates/risk_engine/src/market_maker_detection.rs",
        "line": 116,
        "fields": [
          [
            "min_quote_frequency",
            "f64"
          ],
          [
            "max_avg_spread_bps",
            "f64"
          ],
          [
            "min_symmetry",
            "f64"
          ],
          [
            "max_symmetry",
            "f64"
          ],
          [
            "min_cancellation_rate",
            "f64"
          ],
          [
            "max_order_lifetime_ms",
            "f64"
          ],
          [
            "min_liquidity_provision",
            "f64"
          ],
          [
            "detection_window",
            "Duration"
          ],
          [
            "confidence_threshold",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketMakerMetrics",
        "file": "crates/risk_engine/src/market_maker_detection.rs",
        "line": 515,
        "fields": [
          [
            "total_participants",
            "usize"
          ],
          [
            "market_makers_detected",
            "usize"
          ],
          [
            "market_maker_ratio",
            "f64"
          ],
          [
            "avg_mm_confidence",
            "f64"
          ],
          [
            "avg_mm_quote_frequency",
            "f64"
          ],
          [
            "detection_accuracy",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TradingRecommendation",
        "file": "crates/risk_engine/src/market_maker_detection.rs",
        "line": 525,
        "fields": [
          [
            "strategy",
            "String"
          ],
          [
            "reasoning",
            "String"
          ],
          [
            "suggested_actions",
            "Vec<String>"
          ],
          [
            "risk_level",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CpuFeatures",
        "file": "crates/risk_engine/src/correlation_portable.rs",
        "line": 11,
        "fields": [
          [
            "has_avx2",
            "bool"
          ],
          [
            "has_sse2",
            "bool"
          ],
          [
            "has_neon",
            "bool"
          ],
          [
            "has_simd",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PortableCorrelationAnalyzer",
        "file": "crates/risk_engine/src/correlation_portable.rs",
        "line": 62,
        "fields": [
          [
            "max_correlation",
            "f64"
          ],
          [
            "price_history",
            "Arc<RwLock<Vec<Vec<f64>>>>"
          ],
          [
            "correlation_cache",
            "Arc<RwLock<Vec<Vec<f64>>>>"
          ],
          [
            "cpu_features",
            "CpuFeatures"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "StressTestFramework",
        "file": "crates/risk_engine/src/stress_testing.rs",
        "line": 22,
        "fields": [
          [
            "risk_checker",
            "Arc<RiskChecker>"
          ],
          [
            "TODO",
            "Uncomment when kelly_sizing module is implemented\n    // kelly_sizer: Arc<KellySizer>"
          ],
          [
            "historical_scenarios",
            "Vec<HistoricalScenario>"
          ],
          [
            "hypothetical_scenarios",
            "Vec<HypotheticalScenario>"
          ],
          [
            "monte_carlo",
            "MonteCarloEngine"
          ],
          [
            "results",
            "StressTestResults"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "HistoricalScenario",
        "file": "crates/risk_engine/src/stress_testing.rs",
        "line": 44,
        "fields": [
          [
            "name",
            "String"
          ],
          [
            "date",
            "String"
          ],
          [
            "description",
            "String"
          ],
          [
            "market_moves",
            "HashMap<String"
          ],
          [
            "volatility_multiplier",
            "Decimal"
          ],
          [
            "correlation_breakdown",
            "bool"
          ],
          [
            "liquidity_impact",
            "Decimal"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketMove",
        "file": "crates/risk_engine/src/stress_testing.rs",
        "line": 55,
        "fields": [
          [
            "asset",
            "String"
          ],
          [
            "price_change_pct",
            "Decimal"
          ],
          [
            "volume_change_pct",
            "Decimal"
          ],
          [
            "spread_widening_bps",
            "Decimal"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "HypotheticalScenario",
        "file": "crates/risk_engine/src/stress_testing.rs",
        "line": 63,
        "fields": [
          [
            "name",
            "String"
          ],
          [
            "severity",
            "ScenarioSeverity"
          ],
          [
            "shocks",
            "Vec<MarketShock>"
          ],
          [
            "duration_hours",
            "u32"
          ],
          [
            "contagion_factor",
            "Decimal"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketShock",
        "file": "crates/risk_engine/src/stress_testing.rs",
        "line": 80,
        "fields": [
          [
            "shock_type",
            "ShockType"
          ],
          [
            "magnitude",
            "Decimal"
          ],
          [
            "affected_assets",
            "Vec<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MonteCarloEngine",
        "file": "crates/risk_engine/src/stress_testing.rs",
        "line": 96,
        "fields": [
          [
            "num_simulations",
            "usize"
          ],
          [
            "time_horizon",
            "u32"
          ],
          [
            "confidence_levels",
            "Vec<Decimal>"
          ],
          [
            "random_seed",
            "Option<u64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "StressTestResults",
        "file": "crates/risk_engine/src/stress_testing.rs",
        "line": 104,
        "fields": [
          [
            "scenarios_passed",
            "usize"
          ],
          [
            "scenarios_failed",
            "usize"
          ],
          [
            "worst_drawdown",
            "Decimal"
          ],
          [
            "var_breaches",
            "Vec<VaRBreach>"
          ],
          [
            "es_breaches",
            "Vec<ESBreach>"
          ],
          [
            "kelly_violations",
            "Vec<KellyViolation>"
          ],
          [
            "margin_calls",
            "Vec<MarginCall>"
          ],
          [
            "liquidations",
            "Vec<Liquidation>"
          ],
          [
            "survival_probability",
            "Decimal"
          ],
          [
            "time_to_ruin",
            "Option<u32>"
          ],
          [
            "recommendations",
            "Vec<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "VaRBreach",
        "file": "crates/risk_engine/src/stress_testing.rs",
        "line": 119,
        "fields": [
          [
            "scenario",
            "String"
          ],
          [
            "expected_var",
            "Decimal"
          ],
          [
            "actual_loss",
            "Decimal"
          ],
          [
            "breach_magnitude",
            "Decimal"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ESBreach",
        "file": "crates/risk_engine/src/stress_testing.rs",
        "line": 127,
        "fields": [
          [
            "scenario",
            "String"
          ],
          [
            "expected_shortfall",
            "Decimal"
          ],
          [
            "realized_shortfall",
            "Decimal"
          ],
          [
            "tail_risk_underestimation",
            "Decimal"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "KellyViolation",
        "file": "crates/risk_engine/src/stress_testing.rs",
        "line": 135,
        "fields": [
          [
            "scenario",
            "String"
          ],
          [
            "recommended_size",
            "Decimal"
          ],
          [
            "actual_size",
            "Decimal"
          ],
          [
            "over_leverage_factor",
            "Decimal"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MarginCall",
        "file": "crates/risk_engine/src/stress_testing.rs",
        "line": 143,
        "fields": [
          [
            "timestamp",
            "i64"
          ],
          [
            "required_margin",
            "Decimal"
          ],
          [
            "available_margin",
            "Decimal"
          ],
          [
            "deficit",
            "Decimal"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Liquidation",
        "file": "crates/risk_engine/src/stress_testing.rs",
        "line": 151,
        "fields": [
          [
            "timestamp",
            "i64"
          ],
          [
            "positions_liquidated",
            "Vec<String>"
          ],
          [
            "total_loss",
            "Decimal"
          ],
          [
            "remaining_equity",
            "Decimal"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RiskMetrics",
        "file": "crates/risk_engine/src/monitor.rs",
        "line": 16,
        "fields": [
          [
            "total_pnl",
            "Decimal"
          ],
          [
            "daily_pnl",
            "Decimal"
          ],
          [
            "weekly_pnl",
            "Decimal"
          ],
          [
            "monthly_pnl",
            "Decimal"
          ],
          [
            "total_exposure",
            "Decimal"
          ],
          [
            "long_exposure",
            "Decimal"
          ],
          [
            "short_exposure",
            "Decimal"
          ],
          [
            "net_exposure",
            "Decimal"
          ],
          [
            "current_drawdown",
            "Decimal"
          ],
          [
            "max_drawdown",
            "Decimal"
          ],
          [
            "sharpe_ratio",
            "f64"
          ],
          [
            "sortino_ratio",
            "f64"
          ],
          [
            "win_rate",
            "f64"
          ],
          [
            "open_positions",
            "usize"
          ],
          [
            "avg_position_size",
            "Decimal"
          ],
          [
            "largest_position",
            "Decimal"
          ],
          [
            "daily_loss_used_pct",
            "Decimal"
          ],
          [
            "exposure_used_pct",
            "Decimal"
          ],
          [
            "drawdown_used_pct",
            "Decimal"
          ],
          [
            "timestamp",
            "chrono::DateTime<chrono::Utc>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DrawdownTracker",
        "file": "crates/risk_engine/src/monitor.rs",
        "line": 77,
        "fields": [
          [
            "peak_value",
            "Arc<RwLock<Decimal>>"
          ],
          [
            "current_value",
            "Arc<RwLock<Decimal>>"
          ],
          [
            "max_drawdown",
            "Arc<RwLock<Decimal>>"
          ],
          [
            "current_drawdown",
            "Arc<RwLock<Decimal>>"
          ],
          [
            "drawdown_start",
            "Arc<RwLock<Option<chrono::DateTime<chrono::Utc>>>>"
          ],
          [
            "drawdown_history",
            "Arc<RwLock<VecDeque<DrawdownEvent>>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DrawdownEvent",
        "file": "crates/risk_engine/src/monitor.rs",
        "line": 87,
        "fields": [
          [
            "start_time",
            "chrono::DateTime<chrono::Utc>"
          ],
          [
            "end_time",
            "Option<chrono::DateTime<chrono::Utc>>"
          ],
          [
            "peak_value",
            "Decimal"
          ],
          [
            "trough_value",
            "Decimal"
          ],
          [
            "drawdown_pct",
            "Decimal"
          ],
          [
            "duration_hours",
            "Option<f64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RiskMonitor",
        "file": "crates/risk_engine/src/monitor.rs",
        "line": 183,
        "fields": [
          [
            "metrics",
            "Arc<RwLock<RiskMetrics>>"
          ],
          [
            "drawdown_tracker",
            "Arc<DrawdownTracker>"
          ],
          [
            "position_pnls",
            "Arc<DashMap<String"
          ],
          [
            "trades_won",
            "Arc<AtomicU64>"
          ],
          [
            "trades_lost",
            "Arc<AtomicU64>"
          ],
          [
            "alerts",
            "Arc<RwLock<Vec<RiskAlert>>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RiskAlert",
        "file": "crates/risk_engine/src/monitor.rs",
        "line": 193,
        "fields": [
          [
            "severity",
            "AlertSeverity"
          ],
          [
            "message",
            "String"
          ],
          [
            "metric",
            "String"
          ],
          [
            "value",
            "Decimal"
          ],
          [
            "threshold",
            "Decimal"
          ],
          [
            "timestamp",
            "chrono::DateTime<chrono::Utc>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RiskReport",
        "file": "crates/risk_engine/src/monitor.rs",
        "line": 351,
        "fields": [
          [
            "metrics",
            "RiskMetrics"
          ],
          [
            "alerts",
            "Vec<RiskAlert>"
          ],
          [
            "drawdown_active",
            "bool"
          ],
          [
            "drawdown_duration",
            "Option<chrono::Duration>"
          ],
          [
            "generated_at",
            "chrono::DateTime<chrono::Utc>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "LatencyArbitrageEvent",
        "file": "crates/risk_engine/src/latency_arbitrage_detection.rs",
        "line": 24,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "event_type",
            "ArbitrageType"
          ],
          [
            "our_order_id",
            "String"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "our_side",
            "OrderSide"
          ],
          [
            "our_price",
            "Decimal"
          ],
          [
            "our_quantity",
            "Decimal"
          ],
          [
            "market_price_before",
            "Decimal"
          ],
          [
            "market_price_at_execution",
            "Decimal"
          ],
          [
            "market_price_after",
            "Decimal"
          ],
          [
            "time_to_execution_ms",
            "i64"
          ],
          [
            "adverse_price_move_bps",
            "i32"
          ],
          [
            "likely_arbitrageur",
            "Option<String>"
          ],
          [
            "confidence_score",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "LatencyMetrics",
        "file": "crates/risk_engine/src/latency_arbitrage_detection.rs",
        "line": 59,
        "fields": [
          [
            "data_feed_latency_ms",
            "f64"
          ],
          [
            "decision_latency_ms",
            "f64"
          ],
          [
            "order_send_latency_ms",
            "f64"
          ],
          [
            "execution_latency_ms",
            "f64"
          ],
          [
            "total_latency_ms",
            "f64"
          ],
          [
            "p50_latency_ms",
            "f64"
          ],
          [
            "p95_latency_ms",
            "f64"
          ],
          [
            "p99_latency_ms",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ArbitrageurProfile",
        "file": "crates/risk_engine/src/latency_arbitrage_detection.rs",
        "line": 72,
        "fields": [
          [
            "identifier",
            "String"
          ],
          [
            "detectioncount",
            "u64"
          ],
          [
            "front_runningcount",
            "u64"
          ],
          [
            "back_runningcount",
            "u64"
          ],
          [
            "sandwichcount",
            "u64"
          ],
          [
            "avg_speed_advantage_ms",
            "f64"
          ],
          [
            "estimated_profit_taken",
            "Decimal"
          ],
          [
            "confidence_score",
            "f64"
          ],
          [
            "first_detected",
            "DateTime<Utc>"
          ],
          [
            "last_detected",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "LatencyArbitrageDetector",
        "file": "crates/risk_engine/src/latency_arbitrage_detection.rs",
        "line": 87,
        "fields": [
          [
            "recent_executions",
            "Arc<RwLock<VecDeque<ExecutionRecord>>>"
          ],
          [
            "market_snapshots",
            "Arc<DashMap<String"
          ],
          [
            "arbitrage_events",
            "Arc<RwLock<Vec<LatencyArbitrageEvent>>>"
          ],
          [
            "arbitrageurs",
            "Arc<DashMap<String"
          ],
          [
            "our_latency",
            "Arc<RwLock<LatencyMetrics>>"
          ],
          [
            "config",
            "DetectionConfig"
          ],
          [
            "total_orders_analyzed",
            "Arc<AtomicU64>"
          ],
          [
            "arbitrage_detected",
            "Arc<AtomicU64>"
          ],
          [
            "estimated_loss",
            "Arc<RwLock<Decimal>>"
          ],
          [
            "false_positive_rate",
            "Arc<RwLock<f64>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ExecutionRecord",
        "file": "crates/risk_engine/src/latency_arbitrage_detection.rs",
        "line": 115,
        "fields": [
          [
            "order_id",
            "String"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "side",
            "OrderSide"
          ],
          [
            "intended_price",
            "Decimal"
          ],
          [
            "executed_price",
            "Decimal"
          ],
          [
            "quantity",
            "Decimal"
          ],
          [
            "order_sent_time",
            "DateTime<Utc>"
          ],
          [
            "execution_time",
            "DateTime<Utc>"
          ],
          [
            "market_snapshot_before",
            "Option<MarketSnapshot>"
          ],
          [
            "market_snapshot_after",
            "Option<MarketSnapshot>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "MarketSnapshot",
        "file": "crates/risk_engine/src/latency_arbitrage_detection.rs",
        "line": 130,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "best_bid",
            "Decimal"
          ],
          [
            "best_ask",
            "Decimal"
          ],
          [
            "mid_price",
            "Decimal"
          ],
          [
            "bid_size",
            "Decimal"
          ],
          [
            "ask_size",
            "Decimal"
          ],
          [
            "recent_trades",
            "Vec<TradeEvent>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "TradeEvent",
        "file": "crates/risk_engine/src/latency_arbitrage_detection.rs",
        "line": 142,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "price",
            "Decimal"
          ],
          [
            "quantity",
            "Decimal"
          ],
          [
            "aggressor_side",
            "OrderSide"
          ],
          [
            "participant_id",
            "Option<String>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "DetectionConfig",
        "file": "crates/risk_engine/src/latency_arbitrage_detection.rs",
        "line": 152,
        "fields": [
          [
            "min_adverse_move_bps",
            "i32"
          ],
          [
            "max_execution_time_ms",
            "i64"
          ],
          [
            "front_run_window_ms",
            "i64"
          ],
          [
            "back_run_window_ms",
            "i64"
          ],
          [
            "confidence_threshold",
            "f64"
          ],
          [
            "sandwich_detection_enabled",
            "bool"
          ],
          [
            "phantom_liquidity_threshold",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ArbitrageProtection",
        "file": "crates/risk_engine/src/latency_arbitrage_detection.rs",
        "line": 594,
        "fields": [
          [
            "strategy",
            "String"
          ],
          [
            "recommendations",
            "Vec<String>"
          ],
          [
            "estimated_improvement",
            "String"
          ],
          [
            "urgency",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "LatencyArbitrageStats",
        "file": "crates/risk_engine/src/latency_arbitrage_detection.rs",
        "line": 602,
        "fields": [
          [
            "total_orders_analyzed",
            "u64"
          ],
          [
            "arbitrage_events_detected",
            "u64"
          ],
          [
            "arbitrage_rate",
            "f64"
          ],
          [
            "estimated_total_loss",
            "Decimal"
          ],
          [
            "avg_adverse_move_bps",
            "f64"
          ],
          [
            "our_avg_latency_ms",
            "f64"
          ],
          [
            "known_arbitrageurs",
            "usize"
          ],
          [
            "false_positive_rate",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CorrelationAnalyzerSIMD",
        "file": "crates/risk_engine/src/correlation_simd.rs",
        "line": 11,
        "fields": [
          [
            "max_correlation",
            "f64"
          ],
          [
            "price_history",
            "Arc<RwLock<Vec<Vec<f64>>>>"
          ],
          [
            "correlation_cache",
            "Arc<RwLock<Vec<Vec<f64>>>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "AdverseSelectionEvent",
        "file": "crates/risk_engine/src/adverse_selection.rs",
        "line": 28,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "order_id",
            "OrderId"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "side",
            "OrderSide"
          ],
          [
            "fill_price",
            "Decimal"
          ],
          [
            "mid_price_at_fill",
            "Decimal"
          ],
          [
            "mid_price_after_100ms",
            "Option<Decimal>"
          ],
          [
            "mid_price_after_1s",
            "Option<Decimal>"
          ],
          [
            "mid_price_after_10s",
            "Option<Decimal>"
          ],
          [
            "toxicity_score",
            "f64"
          ],
          [
            "counterparty",
            "Option<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CounterpartyProfile",
        "file": "crates/risk_engine/src/adverse_selection.rs",
        "line": 44,
        "fields": [
          [
            "identifier",
            "String"
          ],
          [
            "total_trades",
            "u64"
          ],
          [
            "toxic_trades",
            "u64"
          ],
          [
            "toxicity_ratio",
            "f64"
          ],
          [
            "avg_adverse_move_bps",
            "i32"
          ],
          [
            "last_trade",
            "Option<DateTime<Utc>>"
          ],
          [
            "is_flagged",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "AdverseSelectionDetector",
        "file": "crates/risk_engine/src/adverse_selection.rs",
        "line": 55,
        "fields": [
          [
            "recent_fills",
            "Arc<RwLock<VecDeque<AdverseSelectionEvent>>>"
          ],
          [
            "price_history",
            "Arc<DashMap<String"
          ],
          [
            "counterparty_profiles",
            "Arc<DashMap<String"
          ],
          [
            "toxicity_threshold",
            "f64"
          ],
          [
            "flagging_threshold",
            "f64"
          ],
          [
            "total_fills_analyzed",
            "Arc<RwLock<u64>>"
          ],
          [
            "toxic_fills_detected",
            "Arc<RwLock<u64>>"
          ],
          [
            "estimated_loss_prevented",
            "Arc<RwLock<Decimal>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "AdverseSelectionStats",
        "file": "crates/risk_engine/src/adverse_selection.rs",
        "line": 403,
        "fields": [
          [
            "total_fills_analyzed",
            "u64"
          ],
          [
            "toxic_fills_detected",
            "u64"
          ],
          [
            "toxicity_rate",
            "f64"
          ],
          [
            "estimated_loss_prevented",
            "Decimal"
          ],
          [
            "flagged_counterparties",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "HistoricalCandle",
        "file": "crates/analysis/src/historical_calibration.rs",
        "line": 19,
        "fields": [
          [
            "open_time",
            "DateTime<Utc>"
          ],
          [
            "open",
            "f64"
          ],
          [
            "high",
            "f64"
          ],
          [
            "low",
            "f64"
          ],
          [
            "close",
            "f64"
          ],
          [
            "volume",
            "f64"
          ],
          [
            "close_time",
            "DateTime<Utc>"
          ],
          [
            "quote_volume",
            "f64"
          ],
          [
            "trades",
            "u32"
          ],
          [
            "taker_buy_base",
            "f64"
          ],
          [
            "taker_buy_quote",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CalibrationParameters",
        "file": "crates/analysis/src/historical_calibration.rs",
        "line": 36,
        "fields": [
          [
            "garch_omega",
            "f64"
          ],
          [
            "garch_alpha",
            "f64"
          ],
          [
            "garch_beta",
            "f64"
          ],
          [
            "distribution_type",
            "DistributionType"
          ],
          [
            "distribution_params",
            "DistributionParams"
          ],
          [
            "tick_size",
            "f64"
          ],
          [
            "lot_size",
            "f64"
          ],
          [
            "maker_fee",
            "f64"
          ],
          [
            "taker_fee",
            "f64"
          ],
          [
            "volatility_regimes",
            "Vec<VolatilityRegime>"
          ],
          [
            "regime_transitions",
            "HashMap<(usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DistributionParams",
        "file": "crates/analysis/src/historical_calibration.rs",
        "line": 66,
        "fields": [
          [
            "mean",
            "f64"
          ],
          [
            "std_dev",
            "f64"
          ],
          [
            "skewness",
            "f64"
          ],
          [
            "kurtosis",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "VolatilityRegime",
        "file": "crates/analysis/src/historical_calibration.rs",
        "line": 74,
        "fields": [
          [
            "id",
            "usize"
          ],
          [
            "name",
            "String"
          ],
          [
            "avg_volatility",
            "f64"
          ],
          [
            "persistence",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "HistoricalCalibrator",
        "file": "crates/analysis/src/historical_calibration.rs",
        "line": 82,
        "fields": [
          [
            "data_store",
            "DataStore"
          ],
          [
            "cache",
            "HashMap<String"
          ],
          [
            "validation_metrics",
            "ValidationMetrics"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "GarchParams",
        "file": "crates/analysis/src/historical_calibration.rs",
        "line": 398,
        "fields": [
          [
            "omega",
            "f64"
          ],
          [
            "alpha",
            "f64"
          ],
          [
            "beta",
            "f64"
          ],
          [
            "persistence",
            "f64"
          ],
          [
            "unconditional_variance",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DataStore",
        "file": "crates/analysis/src/historical_calibration.rs",
        "line": 407,
        "fields": [
          [
            "candles",
            "HashMap<String"
          ],
          [
            "calibrations",
            "HashMap<String"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ValidationMetrics",
        "file": "crates/analysis/src/historical_calibration.rs",
        "line": 433,
        "fields": [
          [
            "garch_validated",
            "bool"
          ],
          [
            "distribution_type",
            "String"
          ],
          [
            "backtst_sharpe",
            "f64"
          ],
          [
            "backtest_max_drawdown",
            "f64"
          ],
          [
            "ks_statistic",
            "f64"
          ],
          [
            "ljung_box_pvalue",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ADFTest",
        "file": "crates/analysis/src/statistical_tests.rs",
        "line": 11,
        "fields": [
          [
            "statistic",
            "f64"
          ],
          [
            "p_value",
            "f64"
          ],
          [
            "critical_values",
            "CriticalValues"
          ],
          [
            "is_stationary",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CriticalValues",
        "file": "crates/analysis/src/statistical_tests.rs",
        "line": 19,
        "fields": [
          [
            "one_pct",
            "f64"
          ],
          [
            "five_pct",
            "f64"
          ],
          [
            "ten_pct",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "JarqueBeraTest",
        "file": "crates/analysis/src/statistical_tests.rs",
        "line": 77,
        "fields": [
          [
            "statistic",
            "f64"
          ],
          [
            "p_value",
            "f64"
          ],
          [
            "skewness",
            "f64"
          ],
          [
            "kurtosis",
            "f64"
          ],
          [
            "is_normal",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "LjungBoxTest",
        "file": "crates/analysis/src/statistical_tests.rs",
        "line": 135,
        "fields": [
          [
            "statistic",
            "f64"
          ],
          [
            "p_value",
            "f64"
          ],
          [
            "has_autocorrelation",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DCCGarch",
        "file": "crates/analysis/src/statistical_tests.rs",
        "line": 182,
        "fields": [
          [
            "conditional_correlations",
            "Array2<f64>"
          ],
          [
            "volatilities",
            "Array1<f64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "GaussianCopula",
        "file": "crates/analysis/src/statistical_tests.rs",
        "line": 243,
        "fields": [
          [
            "correlation",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DccGarch",
        "file": "crates/analysis/src/dcc_garch.rs",
        "line": 10,
        "fields": [
          [
            "n_assets",
            "usize"
          ],
          [
            "garch_params",
            "Vec<GarchParams>"
          ],
          [
            "dcc_a",
            "f64"
          ],
          [
            "dcc_b",
            "f64"
          ],
          [
            "h_t",
            "DMatrix<f64>"
          ],
          [
            "r_t",
            "DMatrix<f64>"
          ],
          [
            "r_bar",
            "DMatrix<f64>"
          ],
          [
            "epsilon_history",
            "Vec<DVector<f64>>"
          ],
          [
            "max_correlation",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "GarchParams",
        "file": "crates/analysis/src/dcc_garch.rs",
        "line": 39,
        "fields": [
          [
            "omega",
            "f64"
          ],
          [
            "alpha",
            "f64"
          ],
          [
            "beta",
            "f64"
          ],
          [
            "h_t",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "IntegratedMLPipeline",
        "file": "crates/ml/src/integrated_optimization.rs",
        "line": 34,
        "fields": [
          [
            "1",
            "AVX-512 SIMD\n    use_simd: bool"
          ],
          [
            "simd_threshold",
            "usize"
          ],
          [
            "2",
            "Zero-Copy Architecture\n    pool_manager: Arc<MemoryPoolManager>"
          ],
          [
            "matrix_pool",
            "Arc<ObjectPool<AlignedVec<f64>>>"
          ],
          [
            "vector_pool",
            "Arc<ObjectPool<AlignedVec<f64>>>"
          ],
          [
            "arena",
            "Arena"
          ],
          [
            "3",
            "Mathematical Optimizations\n    strassen: StrassenMultiplier"
          ],
          [
            "svd",
            "RandomizedSVD"
          ],
          [
            "fft",
            "FFTConvolution"
          ],
          [
            "metrics",
            "PipelineMetrics"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PipelineMetrics",
        "file": "crates/ml/src/integrated_optimization.rs",
        "line": 55,
        "fields": [
          [
            "simd_operations",
            "u64"
          ],
          [
            "zero_copy_hits",
            "u64"
          ],
          [
            "zero_copy_misses",
            "u64"
          ],
          [
            "strassen_uses",
            "u64"
          ],
          [
            "svd_uses",
            "u64"
          ],
          [
            "fft_uses",
            "u64"
          ],
          [
            "total_speedup",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TrainedModel",
        "file": "crates/ml/src/integrated_optimization.rs",
        "line": 517,
        "fields": [
          [
            "weights",
            "Vec<f64>"
          ],
          [
            "n_components",
            "usize"
          ],
          [
            "singular_values",
            "Array1<f64>"
          ],
          [
            "elapsed_ms",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MemoryPoolManager",
        "file": "crates/ml/src/optimization.rs",
        "line": 7,
        "fields": [
          [
            "pools",
            "Vec<Arc<RwLock<Vec<u8>>>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "AVXOptimizer",
        "file": "crates/ml/src/optimization.rs",
        "line": 23,
        "fields": [
          [
            "enabled",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "GARCH",
        "file": "crates/ml/src/garch.rs",
        "line": 24,
        "fields": [
          [
            "omega",
            "f64"
          ],
          [
            "alpha",
            "f64"
          ],
          [
            "beta",
            "f64"
          ],
          [
            "lambda",
            "f64"
          ],
          [
            "df",
            "f64"
          ],
          [
            "min_variance",
            "f64"
          ],
          [
            "max_variance",
            "f64"
          ],
          [
            "constraint",
            "\u03b1 + \u03b2 < 1\n    pub enforce_stationarity: bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RobustNormalizer",
        "file": "crates/ml/src/data_normalization.rs",
        "line": 48,
        "fields": [
          [
            "method",
            "NormalizationMethod"
          ],
          [
            "center",
            "Option<Array1<f64>>"
          ],
          [
            "scale",
            "Option<Array1<f64>>"
          ],
          [
            "quantiles",
            "Option<Vec<Array1<f64>>>"
          ],
          [
            "min_vals",
            "Option<Array1<f64>>"
          ],
          [
            "max_vals",
            "Option<Array1<f64>>"
          ],
          [
            "vwap_window",
            "VecDeque<VWAPData>"
          ],
          [
            "max_window_size",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "VWAPData",
        "file": "crates/ml/src/data_normalization.rs",
        "line": 64,
        "fields": [
          [
            "price",
            "f64"
          ],
          [
            "volume",
            "f64"
          ],
          [
            "timestamp",
            "u64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "SignalOrthogonalizer",
        "file": "crates/ml/src/signal_processing.rs",
        "line": 18,
        "fields": [
          [
            "method",
            "OrthogonalizationMethod"
          ],
          [
            "variance_threshold",
            "f64"
          ],
          [
            "max_components",
            "Option<usize>"
          ],
          [
            "transform_matrix",
            "Option<Array2<f64>>"
          ],
          [
            "mean_vector",
            "Option<Array1<f64>>"
          ],
          [
            "explained_variance",
            "Option<Vec<f64>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "VIFAnalyzer",
        "file": "crates/ml/src/signal_processing.rs",
        "line": 468,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "StrassenMultiplier",
        "file": "crates/ml/src/math_opt/mod.rs",
        "line": 35,
        "fields": [
          [
            "threshold",
            "usize"
          ],
          [
            "use_simd",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RandomizedSVD",
        "file": "crates/ml/src/math_opt/mod.rs",
        "line": 204,
        "fields": [
          [
            "rank",
            "usize"
          ],
          [
            "oversampling",
            "usize"
          ],
          [
            "n_iter",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CSRMatrix",
        "file": "crates/ml/src/math_opt/mod.rs",
        "line": 340,
        "fields": [
          [
            "values",
            "Vec<f64>"
          ],
          [
            "col_indices",
            "Vec<usize>"
          ],
          [
            "row_pointers",
            "Vec<usize>"
          ],
          [
            "shape",
            "(usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FFTConvolution",
        "file": "crates/ml/src/math_opt/mod.rs",
        "line": 469,
        "fields": [
          [
            "planner",
            "FftPlanner<f64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "KahanSum",
        "file": "crates/ml/src/math_opt/mod.rs",
        "line": 612,
        "fields": [
          [
            "sum",
            "f64"
          ],
          [
            "c",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PurgedWalkForwardCV",
        "file": "crates/ml/src/validation/purged_cv.rs",
        "line": 19,
        "fields": [
          [
            "n_splits",
            "usize"
          ],
          [
            "purge_gap",
            "usize"
          ],
          [
            "embargo_pct",
            "f32"
          ],
          [
            "min_train_size",
            "usize"
          ],
          [
            "min_test_size",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "LeakageSentinel",
        "file": "crates/ml/src/validation/purged_cv.rs",
        "line": 147,
        "fields": [
          [
            "significance_level",
            "f64"
          ],
          [
            "min_samples",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "LeakageTestResult",
        "file": "crates/ml/src/validation/purged_cv.rs",
        "line": 342,
        "fields": [
          [
            "has_leakage",
            "bool"
          ],
          [
            "sharpe_ratio",
            "f64"
          ],
          [
            "correlation",
            "f64"
          ],
          [
            "accuracy",
            "f64"
          ],
          [
            "p_value",
            "f64"
          ],
          [
            "samples_tested",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TimeDecayWeights",
        "file": "crates/ml/src/validation/purged_cv.rs",
        "line": 361,
        "fields": [
          [
            "decay_factor",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MockModel",
        "file": "crates/ml/src/validation/purged_cv.rs",
        "line": 395,
        "fields": [
          [
            "coefficients",
            "Option<Vec<f32>>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "Tick",
        "file": "crates/ml/src/features/microstructure.rs",
        "line": 14,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "price",
            "f64"
          ],
          [
            "volume",
            "f64"
          ],
          [
            "bid",
            "f64"
          ],
          [
            "ask",
            "f64"
          ],
          [
            "bid_size",
            "f64"
          ],
          [
            "ask_size",
            "f64"
          ],
          [
            "trade_side",
            "TradeSide"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MicrostructureFeatures",
        "file": "crates/ml/src/features/microstructure.rs",
        "line": 35,
        "fields": [
          [
            "lookback_window",
            "usize"
          ],
          [
            "tick_buffer",
            "VecDeque<Tick>"
          ],
          [
            "use_avx512",
            "bool"
          ],
          [
            "kyle_window",
            "usize"
          ],
          [
            "kyle_alpha",
            "f64"
          ],
          [
            "spread_components",
            "SpreadComponents"
          ],
          [
            "flow_buckets",
            "usize"
          ],
          [
            "flow_threshold",
            "f64"
          ],
          [
            "liquidity_depth_levels",
            "usize"
          ],
          [
            "calculation_times",
            "Vec<u64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SpreadComponents",
        "file": "crates/ml/src/features/microstructure.rs",
        "line": 61,
        "fields": [
          [
            "adverse_selection",
            "f64"
          ],
          [
            "inventory_holding",
            "f64"
          ],
          [
            "order_processing",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "MicrostructureFeatureSet",
        "file": "crates/ml/src/features/microstructure.rs",
        "line": 668,
        "fields": [
          [
            "kyle_lambda",
            "f64"
          ],
          [
            "amihud_illiquidity",
            "f64"
          ],
          [
            "roll_measure",
            "f64"
          ],
          [
            "effective_spread",
            "f64"
          ],
          [
            "realized_spread",
            "f64"
          ],
          [
            "price_impact",
            "f64"
          ],
          [
            "hasbrouck_lambda",
            "f64"
          ],
          [
            "vpin",
            "f64"
          ],
          [
            "order_flow_imbalance",
            "f64"
          ],
          [
            "bid_ask_imbalance",
            "f64"
          ],
          [
            "quoted_depth",
            "f64"
          ],
          [
            "relative_spread",
            "f64"
          ],
          [
            "liquidity_ratio",
            "f64"
          ],
          [
            "log_quote_slope",
            "f64"
          ],
          [
            "information_share",
            "f64"
          ],
          [
            "price_discovery",
            "f64"
          ],
          [
            "adverse_selection_component",
            "f64"
          ],
          [
            "twap_deviation",
            "f64"
          ],
          [
            "vwap_deviation",
            "f64"
          ],
          [
            "noise_variance",
            "f64"
          ],
          [
            "signal_to_noise",
            "f64"
          ],
          [
            "calculation_time_ns",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "IsotonicCalibrator",
        "file": "crates/ml/src/calibration/isotonic.rs",
        "line": 22,
        "fields": [
          [
            "calibrators",
            "HashMap<MarketRegime"
          ],
          [
            "min_samples",
            "usize"
          ],
          [
            "cv_folds",
            "usize"
          ],
          [
            "regularization",
            "f32"
          ],
          [
            "brier_scores",
            "HashMap<MarketRegime"
          ],
          [
            "calibration_errors",
            "HashMap<MarketRegime"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "IsotonicRegression",
        "file": "crates/ml/src/calibration/isotonic.rs",
        "line": 236,
        "fields": [
          [
            "x_points",
            "Vec<f32>"
          ],
          [
            "y_points",
            "Vec<f32>"
          ],
          [
            "fitted",
            "bool"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ReliabilityDiagram",
        "file": "crates/ml/src/calibration/isotonic.rs",
        "line": 359,
        "fields": [
          [
            "n_bins",
            "usize"
          ],
          [
            "bins",
            "Vec<CalibrationBin>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CalibrationBin",
        "file": "crates/ml/src/calibration/isotonic.rs",
        "line": 365,
        "fields": [
          [
            "min_prob",
            "f32"
          ],
          [
            "max_prob",
            "f32"
          ],
          [
            "avg_predicted",
            "f32"
          ],
          [
            "avg_actual",
            "f32"
          ],
          [
            "count",
            "usize"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "AlignedVec",
        "file": "crates/ml/src/simd/mod.rs",
        "line": 31,
        "fields": [
          [
            "ptr",
            "*mut T"
          ],
          [
            "len",
            "usize"
          ],
          [
            "capacity",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "InferenceRequest",
        "file": "crates/ml/src/inference/engine.rs",
        "line": 20,
        "fields": [
          [
            "model_id",
            "uuid::Uuid"
          ],
          [
            "features",
            "Vec<f32>"
          ],
          [
            "request_id",
            "u64"
          ],
          [
            "timestamp",
            "Instant"
          ],
          [
            "priority",
            "Priority"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "InferenceResult",
        "file": "crates/ml/src/inference/engine.rs",
        "line": 38,
        "fields": [
          [
            "request_id",
            "u64"
          ],
          [
            "prediction",
            "f64"
          ],
          [
            "confidence",
            "f64"
          ],
          [
            "latency_ns",
            "u64"
          ],
          [
            "model_version",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "InferenceEngine",
        "file": "crates/ml/src/inference/engine.rs",
        "line": 51,
        "fields": [
          [
            "model_cache",
            "Arc<DashMap<uuid::Uuid"
          ],
          [
            "priority_queues",
            "[Arc<RwLock<Vec<InferenceRequest>>>; 4]"
          ],
          [
            "workers",
            "Vec<InferenceWorker>"
          ],
          [
            "work_sender",
            "Sender<InferenceRequest>"
          ],
          [
            "result_receiver",
            "Receiver<InferenceResult>"
          ],
          [
            "total_requests",
            "Arc<AtomicU64>"
          ],
          [
            "total_latency_ns",
            "Arc<AtomicU64>"
          ],
          [
            "cache_hits",
            "Arc<AtomicU64>"
          ],
          [
            "cache_misses",
            "Arc<AtomicU64>"
          ],
          [
            "circuit_open",
            "Arc<AtomicBool>"
          ],
          [
            "max_queue_depth",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "InferenceWorker",
        "file": "crates/ml/src/inference/engine.rs",
        "line": 234,
        "fields": [
          [
            "id",
            "usize"
          ],
          [
            "model_cache",
            "Arc<DashMap<uuid::Uuid"
          ],
          [
            "work_receiver",
            "Receiver<InferenceRequest>"
          ],
          [
            "result_sender",
            "Sender<InferenceResult>"
          ],
          [
            "thread_handle",
            "Option<std::thread::JoinHandle<()>>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "CachedModel",
        "file": "crates/ml/src/inference/engine.rs",
        "line": 338,
        "fields": [
          [
            "version",
            "String"
          ],
          [
            "model_type",
            "ModelType"
          ],
          [
            "weights",
            "Arc<Vec<f32>>"
          ],
          [
            "biases",
            "Arc<Vec<f32>>"
          ],
          [
            "layers",
            "Vec<LayerConfig>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ModelData",
        "file": "crates/ml/src/inference/engine.rs",
        "line": 394,
        "fields": [
          [
            "version",
            "String"
          ],
          [
            "model_type",
            "ModelType"
          ],
          [
            "weights",
            "Vec<f32>"
          ],
          [
            "biases",
            "Vec<f32>"
          ],
          [
            "layers",
            "Vec<LayerConfig>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "LayerConfig",
        "file": "crates/ml/src/inference/engine.rs",
        "line": 403,
        "fields": [
          [
            "input_size",
            "usize"
          ],
          [
            "output_size",
            "usize"
          ],
          [
            "weight_offset",
            "usize"
          ],
          [
            "bias_offset",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "EngineMetrics",
        "file": "crates/ml/src/inference/engine.rs",
        "line": 418,
        "fields": [
          [
            "total_requests",
            "u64"
          ],
          [
            "avg_latency_ns",
            "u64"
          ],
          [
            "cache_hits",
            "u64"
          ],
          [
            "cache_misses",
            "u64"
          ],
          [
            "models_cached",
            "usize"
          ],
          [
            "queue_depths",
            "[usize; 4]"
          ],
          [
            "circuit_open",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ConvergenceMonitor",
        "file": "crates/ml/src/training/convergence_monitor.rs",
        "line": 15,
        "fields": [
          [
            "config",
            "ConvergenceConfig"
          ],
          [
            "train_losses",
            "VecDeque<f64>"
          ],
          [
            "val_losses",
            "VecDeque<f64>"
          ],
          [
            "gradient_norms",
            "VecDeque<f64>"
          ],
          [
            "gradient_variance",
            "VecDeque<f64>"
          ],
          [
            "learning_rates",
            "VecDeque<f64>"
          ],
          [
            "best_val_loss",
            "f64"
          ],
          [
            "best_epoch",
            "usize"
          ],
          [
            "patience_counter",
            "usize"
          ],
          [
            "metrics",
            "Arc<RwLock<ConvergenceMetrics>>"
          ],
          [
            "overfitting_detector",
            "OverfittingDetector"
          ],
          [
            "plateau_detector",
            "PlateauDetector"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ConvergenceConfig",
        "file": "crates/ml/src/training/convergence_monitor.rs",
        "line": 46,
        "fields": [
          [
            "patience",
            "usize"
          ],
          [
            "min_delta",
            "f64"
          ],
          [
            "window_size",
            "usize"
          ],
          [
            "gradient_clip",
            "f64"
          ],
          [
            "lr_reduction_factor",
            "f64"
          ],
          [
            "min_learning_rate",
            "f64"
          ],
          [
            "max_epochs_no_improvement",
            "usize"
          ],
          [
            "overfitting_threshold",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ConvergenceMetrics",
        "file": "crates/ml/src/training/convergence_monitor.rs",
        "line": 88,
        "fields": [
          [
            "current_epoch",
            "usize"
          ],
          [
            "train_loss",
            "f64"
          ],
          [
            "val_loss",
            "f64"
          ],
          [
            "train_val_gap",
            "f64"
          ],
          [
            "gradient_norm",
            "f64"
          ],
          [
            "learning_rate",
            "f64"
          ],
          [
            "improvement_rate",
            "f64"
          ],
          [
            "convergence_score",
            "f64"
          ],
          [
            "is_converged",
            "bool"
          ],
          [
            "is_overfitting",
            "bool"
          ],
          [
            "is_plateau",
            "bool"
          ],
          [
            "should_stop",
            "bool"
          ],
          [
            "recommendation",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OverfittingDetector",
        "file": "crates/ml/src/training/convergence_monitor.rs",
        "line": 105,
        "fields": [
          [
            "gap_threshold",
            "f64"
          ],
          [
            "trend_window",
            "usize"
          ],
          [
            "divergencecount",
            "usize"
          ],
          [
            "max_divergence",
            "usize"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "PlateauDetector",
        "file": "crates/ml/src/training/convergence_monitor.rs",
        "line": 195,
        "fields": [
          [
            "patience",
            "usize"
          ],
          [
            "min_delta",
            "f64"
          ],
          [
            "counter",
            "usize"
          ],
          [
            "best_loss",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "TrainingHistory",
        "file": "crates/ml/src/training/convergence_monitor.rs",
        "line": 450,
        "fields": [
          [
            "train_losses",
            "Vec<f64>"
          ],
          [
            "val_losses",
            "Vec<f64>"
          ],
          [
            "gradient_norms",
            "Vec<f64>"
          ],
          [
            "learning_rates",
            "Vec<f64>"
          ],
          [
            "best_epoch",
            "usize"
          ],
          [
            "best_val_loss",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SearchSpace",
        "file": "crates/ml/src/training/hyperparameter.rs",
        "line": 26,
        "fields": [
          [
            "parameters",
            "HashMap<String"
          ],
          [
            "constraints",
            "Vec<Constraint>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Trial",
        "file": "crates/ml/src/training/hyperparameter.rs",
        "line": 171,
        "fields": [
          [
            "id",
            "usize"
          ],
          [
            "params",
            "HashMap<String"
          ],
          [
            "value",
            "f64"
          ],
          [
            "duration_ms",
            "u64"
          ],
          [
            "metadata",
            "HashMap<String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "GaussianProcess",
        "file": "crates/ml/src/training/hyperparameter.rs",
        "line": 200,
        "fields": [
          [
            "kernel",
            "KernelType"
          ],
          [
            "noise",
            "f64"
          ],
          [
            "observations_x",
            "Vec<Vec<f64>>"
          ],
          [
            "observations_y",
            "Vec<f64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "BayesianOptimizer",
        "file": "crates/ml/src/training/hyperparameter.rs",
        "line": 372,
        "fields": [
          [
            "search_space",
            "SearchSpace"
          ],
          [
            "gp",
            "GaussianProcess"
          ],
          [
            "acquisition",
            "AcquisitionFunction"
          ],
          [
            "trials",
            "Vec<Trial>"
          ],
          [
            "maximize",
            "bool"
          ],
          [
            "n_initial",
            "usize"
          ],
          [
            "n_candidates",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "GridSearchOptimizer",
        "file": "crates/ml/src/training/hyperparameter.rs",
        "line": 488,
        "fields": [
          [
            "search_space",
            "SearchSpace"
          ],
          [
            "grid_points",
            "Vec<HashMap<String"
          ],
          [
            "current_idx",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RandomSearchOptimizer",
        "file": "crates/ml/src/training/hyperparameter.rs",
        "line": 532,
        "fields": [
          [
            "search_space",
            "SearchSpace"
          ],
          [
            "n_trials",
            "usize"
          ],
          [
            "current_trial",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TimeSeriesSplit",
        "file": "crates/ml/src/training/cross_validation.rs",
        "line": 31,
        "fields": [
          [
            "n_splits",
            "usize"
          ],
          [
            "test_size",
            "Option<usize>"
          ],
          [
            "gap",
            "usize"
          ],
          [
            "max_train_size",
            "Option<usize>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PurgedKFold",
        "file": "crates/ml/src/training/cross_validation.rs",
        "line": 117,
        "fields": [
          [
            "n_splits",
            "usize"
          ],
          [
            "purge_gap",
            "usize"
          ],
          [
            "embargo_pct",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CombinatorialPurgedCV",
        "file": "crates/ml/src/training/cross_validation.rs",
        "line": 191,
        "fields": [
          [
            "n_splits",
            "usize"
          ],
          [
            "n_test_splits",
            "usize"
          ],
          [
            "purge_gap",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "WalkForwardAnalysis",
        "file": "crates/ml/src/training/cross_validation.rs",
        "line": 298,
        "fields": [
          [
            "train_window",
            "usize"
          ],
          [
            "test_window",
            "usize"
          ],
          [
            "step_size",
            "usize"
          ],
          [
            "expanding_window",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CrossValidator",
        "file": "crates/ml/src/training/cross_validation.rs",
        "line": 361,
        "fields": [
          [
            "strategy",
            "Box<dyn ValidationStrategy>"
          ],
          [
            "scoring_metrics",
            "Vec<String>"
          ],
          [
            "parallel",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FoldResult",
        "file": "crates/ml/src/training/cross_validation.rs",
        "line": 505,
        "fields": [
          [
            "fold_idx",
            "usize"
          ],
          [
            "train_size",
            "usize"
          ],
          [
            "test_size",
            "usize"
          ],
          [
            "metrics",
            "HashMap<String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CVResults",
        "file": "crates/ml/src/training/cross_validation.rs",
        "line": 513,
        "fields": [
          [
            "fold_results",
            "Vec<FoldResult>"
          ],
          [
            "aggregated_metrics",
            "HashMap<String"
          ],
          [
            "strategy_name",
            "String"
          ],
          [
            "n_splits",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "AdamOptimizer",
        "file": "crates/ml/src/training/optimizer.rs",
        "line": 37,
        "fields": [
          [
            "learning_rate",
            "f64"
          ],
          [
            "beta1",
            "f64"
          ],
          [
            "beta2",
            "f64"
          ],
          [
            "epsilon",
            "f64"
          ],
          [
            "weight_decay",
            "f64"
          ],
          [
            "m",
            "Option<Array1<f64>>"
          ],
          [
            "v",
            "Option<Array1<f64>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SGDOptimizer",
        "file": "crates/ml/src/training/optimizer.rs",
        "line": 116,
        "fields": [
          [
            "learning_rate",
            "f64"
          ],
          [
            "momentum",
            "f64"
          ],
          [
            "nesterov",
            "bool"
          ],
          [
            "velocity",
            "Option<Array1<f64>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RMSpropOptimizer",
        "file": "crates/ml/src/training/optimizer.rs",
        "line": 180,
        "fields": [
          [
            "learning_rate",
            "f64"
          ],
          [
            "decay_rate",
            "f64"
          ],
          [
            "epsilon",
            "f64"
          ],
          [
            "momentum",
            "f64"
          ],
          [
            "cache",
            "Option<Array1<f64>>"
          ],
          [
            "velocity",
            "Option<Array1<f64>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OptimizerFactory",
        "file": "crates/ml/src/training/optimizer.rs",
        "line": 303,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "ModelMetadata",
        "file": "crates/ml/src/training/storage.rs",
        "line": 20,
        "fields": [
          [
            "model_id",
            "String"
          ],
          [
            "version",
            "String"
          ],
          [
            "model_type",
            "String"
          ],
          [
            "created_at",
            "DateTime<Utc>"
          ],
          [
            "updated_at",
            "DateTime<Utc>"
          ],
          [
            "training_config",
            "HashMap<String"
          ],
          [
            "performance_metrics",
            "HashMap<String"
          ],
          [
            "feature_importance",
            "Option<Vec<(String"
          ],
          [
            "tags",
            "Vec<String>"
          ],
          [
            "status",
            "ModelStatus"
          ],
          [
            "file_size_bytes",
            "u64"
          ],
          [
            "checksum",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ModelStorage",
        "file": "crates/ml/src/training/storage.rs",
        "line": 50,
        "fields": [
          [
            "base_path",
            "PathBuf"
          ],
          [
            "db_url",
            "Option<String>"
          ],
          [
            "compression",
            "bool"
          ],
          [
            "encryption",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CheckpointManager",
        "file": "crates/ml/src/training/storage.rs",
        "line": 324,
        "fields": [
          [
            "storage",
            "ModelStorage"
          ],
          [
            "max_checkpoints",
            "usize"
          ],
          [
            "auto_cleanup",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MetricsReport",
        "file": "crates/ml/src/training/metrics.rs",
        "line": 258,
        "fields": [
          [
            "regression_metrics",
            "HashMap<String"
          ],
          [
            "trading_metrics",
            "HashMap<String"
          ],
          [
            "risk_metrics",
            "HashMap<String"
          ],
          [
            "timestamp",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MetricsCalculator",
        "file": "crates/ml/src/training/metrics.rs",
        "line": 265,
        "fields": [
          [
            "include_trading",
            "bool"
          ],
          [
            "include_risk",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TrainingConfig",
        "file": "crates/ml/src/training/mod.rs",
        "line": 60,
        "fields": [
          [
            "model_type",
            "ModelType"
          ],
          [
            "batch_size",
            "usize"
          ],
          [
            "epochs",
            "usize"
          ],
          [
            "learning_rate",
            "f64"
          ],
          [
            "validation_split",
            "f64"
          ],
          [
            "early_stopping",
            "bool"
          ],
          [
            "patience",
            "usize"
          ],
          [
            "optimizer",
            "OptimizerType"
          ],
          [
            "loss_function",
            "LossFunction"
          ],
          [
            "metrics",
            "Vec<MetricType>"
          ],
          [
            "random_seed",
            "Option<u64>"
          ],
          [
            "parallel_training",
            "bool"
          ],
          [
            "checkpoint_interval",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TrainingStatus",
        "file": "crates/ml/src/training/mod.rs",
        "line": 134,
        "fields": [
          [
            "epoch",
            "usize"
          ],
          [
            "total_epochs",
            "usize"
          ],
          [
            "train_loss",
            "f64"
          ],
          [
            "val_loss",
            "f64"
          ],
          [
            "metrics",
            "HashMap<String"
          ],
          [
            "elapsed_time",
            "Duration"
          ],
          [
            "estimated_remaining",
            "Duration"
          ],
          [
            "is_running",
            "bool"
          ],
          [
            "converged",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TrainingResult",
        "file": "crates/ml/src/training/mod.rs",
        "line": 148,
        "fields": [
          [
            "model_id",
            "String"
          ],
          [
            "final_train_loss",
            "f64"
          ],
          [
            "final_val_loss",
            "f64"
          ],
          [
            "best_epoch",
            "usize"
          ],
          [
            "total_epochs",
            "usize"
          ],
          [
            "metrics",
            "HashMap<String"
          ],
          [
            "training_time",
            "Duration"
          ],
          [
            "config",
            "TrainingConfig"
          ],
          [
            "feature_importance",
            "Option<Vec<(String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TrainingPipeline",
        "file": "crates/ml/src/training/mod.rs",
        "line": 165,
        "fields": [
          [
            "config",
            "TrainingConfig"
          ],
          [
            "registry",
            "Arc<ModelRegistry>"
          ],
          [
            "feature_extractor",
            "Arc<FeatureExtractor>"
          ],
          [
            "status",
            "Arc<RwLock<TrainingStatus>>"
          ],
          [
            "checkpoints",
            "Arc<RwLock<Vec<ModelCheckpoint>>>"
          ],
          [
            "data_loader",
            "Arc<DataLoader>"
          ],
          [
            "validator",
            "Arc<CrossValidator>"
          ],
          [
            "metrics_calculator",
            "Arc<MetricsCalculator>"
          ],
          [
            "storage",
            "Arc<ModelStorage>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ModelCheckpoint",
        "file": "crates/ml/src/training/mod.rs",
        "line": 179,
        "fields": [
          [
            "epoch",
            "usize"
          ],
          [
            "model_state",
            "Vec<u8>"
          ],
          [
            "train_loss",
            "f64"
          ],
          [
            "val_loss",
            "f64"
          ],
          [
            "metrics",
            "HashMap<String"
          ],
          [
            "timestamp",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DataLoader",
        "file": "crates/ml/src/training/mod.rs",
        "line": 189,
        "fields": [
          [
            "batch_size",
            "usize"
          ],
          [
            "shuffle",
            "bool"
          ],
          [
            "random_state",
            "Option<u64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CrossValidator",
        "file": "crates/ml/src/training/mod.rs",
        "line": 280,
        "fields": [
          [
            "n_splits",
            "usize"
          ],
          [
            "gap",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MetricsCalculator",
        "file": "crates/ml/src/training/mod.rs",
        "line": 318,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "ModelStorage",
        "file": "crates/ml/src/training/mod.rs",
        "line": 369,
        "fields": [
          [
            "base_path",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "HyperparameterOptimizer",
        "file": "crates/ml/src/training/mod.rs",
        "line": 679,
        "fields": [
          [
            "search_space",
            "HashMap<String"
          ],
          [
            "n_trials",
            "usize"
          ],
          [
            "optimization_metric",
            "MetricType"
          ],
          [
            "maximize",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FeatureConfig",
        "file": "crates/ml/src/feature_engine/pipeline.rs",
        "line": 22,
        "fields": [
          [
            "price_features",
            "bool"
          ],
          [
            "volume_features",
            "bool"
          ],
          [
            "technical_features",
            "bool"
          ],
          [
            "statistical_features",
            "bool"
          ],
          [
            "microstructure_features",
            "bool"
          ],
          [
            "lookback_window",
            "usize"
          ],
          [
            "lag_periods",
            "Vec<usize>"
          ],
          [
            "scaling_method",
            "ScalingMethod"
          ],
          [
            "selection_method",
            "SelectionMethod"
          ],
          [
            "target_features",
            "usize"
          ],
          [
            "parallel",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FeaturePipeline",
        "file": "crates/ml/src/feature_engine/pipeline.rs",
        "line": 79,
        "fields": [
          [
            "config",
            "FeatureConfig"
          ],
          [
            "technical",
            "Arc<TechnicalIndicators>"
          ],
          [
            "extended",
            "Arc<ExtendedIndicators>"
          ],
          [
            "scaler",
            "Arc<RwLock<FeatureScaler>>"
          ],
          [
            "selector",
            "Arc<RwLock<FeatureSelector>>"
          ],
          [
            "metadata",
            "Arc<RwLock<Vec<FeatureMetadata>>>"
          ],
          [
            "stats",
            "Arc<RwLock<FeatureStats>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FeatureSelector",
        "file": "crates/ml/src/feature_engine/selector.rs",
        "line": 37,
        "fields": [
          [
            "method",
            "SelectionMethod"
          ],
          [
            "target_features",
            "usize"
          ],
          [
            "fitted",
            "bool"
          ],
          [
            "selected_indices",
            "Vec<usize>"
          ],
          [
            "feature_scores",
            "Vec<f64>"
          ],
          [
            "variances",
            "Vec<f64>"
          ],
          [
            "correlations",
            "Vec<Vec<f64>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Candle",
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 16,
        "fields": [
          [
            "timestamp",
            "i64"
          ],
          [
            "open",
            "f64"
          ],
          [
            "high",
            "f64"
          ],
          [
            "low",
            "f64"
          ],
          [
            "close",
            "f64"
          ],
          [
            "volume",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "IndicatorParams",
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 26,
        "fields": [
          [
            "period",
            "Option<usize>"
          ],
          [
            "smoothing",
            "Option<f64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FeatureVector",
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 32,
        "fields": [
          [
            "values",
            "Vec<f64>"
          ],
          [
            "timestamp",
            "i64"
          ],
          [
            "computation_time",
            "std::time::Duration"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FeatureKey",
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 39,
        "fields": [
          [
            "timestamp",
            "i64"
          ],
          [
            "price_hash",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "IndicatorEngine",
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 44,
        "fields": [
          [
            "indicators",
            "HashMap<String"
          ],
          [
            "simd_engine",
            "SimdAccelerator"
          ],
          [
            "bounds",
            "FeatureBounds"
          ],
          [
            "cache",
            "Arc<DashMap<FeatureKey"
          ],
          [
            "workspace",
            "AlignedBuffer<f64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "AlignedBuffer",
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 98,
        "fields": [
          [
            "data",
            "Vec<T>"
          ],
          [
            "capacity",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SimdAccelerator",
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 113,
        "fields": [
          [
            "workspace",
            "Vec<f32>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FeatureStats",
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 211,
        "fields": [
          [
            "mean",
            "f64"
          ],
          [
            "std_dev",
            "f64"
          ],
          [
            "min",
            "f64"
          ],
          [
            "max",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CircuitBreaker",
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 219,
        "fields": [
          [
            "tripped",
            "std::sync::atomic::AtomicBool"
          ],
          [
            "trip_count",
            "std::sync::atomic::AtomicU32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FeatureBounds",
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 245,
        "fields": [
          [
            "bounds",
            "HashMap<String"
          ],
          [
            "z_score_threshold",
            "f64"
          ],
          [
            "divergence_breaker",
            "CircuitBreaker"
          ],
          [
            "stats",
            "HashMap<String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SMA",
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 318,
        "fields": [
          [
            "period",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "EMA",
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 352,
        "fields": [
          [
            "period",
            "usize"
          ],
          [
            "smoothing",
            "f32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "WMA",
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 385,
        "fields": [
          [
            "period",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "VWMA",
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 420,
        "fields": [
          [
            "period",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RSI",
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 463,
        "fields": [
          [
            "period",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MACD",
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 538,
        "fields": [
          [
            "fast_period",
            "usize"
          ],
          [
            "slow_period",
            "usize"
          ],
          [
            "signal_period",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ATR",
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 581,
        "fields": [
          [
            "period",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "BollingerBands",
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 621,
        "fields": [
          [
            "period",
            "usize"
          ],
          [
            "std_dev",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OBV",
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 666,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "GoldenData",
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 809,
        "fields": [
          [
            "sma_cases",
            "Vec<TestCase>"
          ],
          [
            "ema_cases",
            "Vec<TestCase>"
          ],
          [
            "rsi_cases",
            "Vec<TestCase>"
          ],
          [
            "macd_cases",
            "Vec<MacdTestCase>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "TestCase",
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 817,
        "fields": [
          [
            "candles",
            "Vec<Candle>"
          ],
          [
            "expected",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "MacdTestCase",
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 823,
        "fields": [
          [
            "candles",
            "Vec<Candle>"
          ],
          [
            "expected",
            "MacdResult"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "MacdResult",
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 829,
        "fields": [
          [
            "macd",
            "f64"
          ],
          [
            "signal",
            "f64"
          ],
          [
            "histogram",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "AdvancedFeatureEngine",
        "file": "crates/ml/src/feature_engine/advanced_features.rs",
        "line": 43,
        "fields": [
          [
            "statistical_features",
            "StatisticalFeatures"
          ],
          [
            "frequency_features",
            "FrequencyDomainFeatures"
          ],
          [
            "wavelet_features",
            "WaveletFeatures"
          ],
          [
            "microstructure_features",
            "MicrostructureFeatures"
          ],
          [
            "fractal_features",
            "FractalFeatures"
          ],
          [
            "information_features",
            "InformationTheoryFeatures"
          ],
          [
            "use_avx512",
            "bool"
          ],
          [
            "memory_pool",
            "Arc<MemoryPoolManager>"
          ],
          [
            "fft_processor",
            "FFTConvolution"
          ],
          [
            "feature_selector",
            "FeatureSelector"
          ],
          [
            "online_adapter",
            "OnlineFeatureAdapter"
          ],
          [
            "metrics",
            "FeatureMetrics"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "StatisticalFeatures",
        "file": "crates/ml/src/feature_engine/advanced_features.rs",
        "line": 68,
        "fields": [
          [
            "compute_moments",
            "bool"
          ],
          [
            "compute_autocorrelation",
            "bool"
          ],
          [
            "compute_partial_autocorrelation",
            "bool"
          ],
          [
            "compute_c3_statistics",
            "bool"
          ],
          [
            "compute_cid_ce",
            "bool"
          ],
          [
            "compute_change_quantiles",
            "bool"
          ],
          [
            "compute_flux_features",
            "bool"
          ],
          [
            "compute_range_features",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FrequencyDomainFeatures",
        "file": "crates/ml/src/feature_engine/advanced_features.rs",
        "line": 85,
        "fields": [
          [
            "fft_aggregated",
            "Vec<FFTAggregation>"
          ],
          [
            "spectral_features",
            "SpectralFeatures"
          ],
          [
            "wavelet_decomposer",
            "WaveletDecomposer"
          ],
          [
            "compute_psd",
            "bool"
          ],
          [
            "compute_spectral_entropy",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "WaveletFeatures",
        "file": "crates/ml/src/feature_engine/advanced_features.rs",
        "line": 99,
        "fields": [
          [
            "wavelet_type",
            "WaveletType"
          ],
          [
            "decomposition_level",
            "usize"
          ],
          [
            "extract_energy",
            "bool"
          ],
          [
            "extract_entropy",
            "bool"
          ],
          [
            "extract_statistics",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MicrostructureFeatures",
        "file": "crates/ml/src/feature_engine/advanced_features.rs",
        "line": 111,
        "fields": [
          [
            "compute_book_imbalance",
            "bool"
          ],
          [
            "compute_spread_features",
            "bool"
          ],
          [
            "compute_depth_features",
            "bool"
          ],
          [
            "compute_kyle_lambda",
            "bool"
          ],
          [
            "compute_roll_spread",
            "bool"
          ],
          [
            "compute_amihud_illiquidity",
            "bool"
          ],
          [
            "compute_tick_features",
            "bool"
          ],
          [
            "compute_quote_features",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FractalFeatures",
        "file": "crates/ml/src/feature_engine/advanced_features.rs",
        "line": 128,
        "fields": [
          [
            "compute_hurst",
            "bool"
          ],
          [
            "compute_fractal_dim",
            "bool"
          ],
          [
            "compute_lyapunov",
            "bool"
          ],
          [
            "compute_dfa",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "InformationTheoryFeatures",
        "file": "crates/ml/src/feature_engine/advanced_features.rs",
        "line": 143,
        "fields": [
          [
            "compute_shannon_entropy",
            "bool"
          ],
          [
            "compute_sample_entropy",
            "bool"
          ],
          [
            "compute_permutation_entropy",
            "bool"
          ],
          [
            "compute_mi",
            "bool"
          ],
          [
            "compute_transfer_entropy",
            "bool"
          ],
          [
            "compute_lempel_ziv",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FeatureSelector",
        "file": "crates/ml/src/feature_engine/advanced_features.rs",
        "line": 158,
        "fields": [
          [
            "method",
            "SelectionMethod"
          ],
          [
            "importance_scores",
            "HashMap<String"
          ],
          [
            "selected_indices",
            "Vec<usize>"
          ],
          [
            "shap_values",
            "Option<Array2<f64>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OnlineFeatureAdapter",
        "file": "crates/ml/src/feature_engine/advanced_features.rs",
        "line": 182,
        "fields": [
          [
            "running_mean",
            "Array1<f64>"
          ],
          [
            "running_std",
            "Array1<f64>"
          ],
          [
            "drift_detector",
            "FeatureDriftDetector"
          ],
          [
            "feature_weights",
            "Array1<f64>"
          ],
          [
            "adaptation_rate",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FeatureDriftDetector",
        "file": "crates/ml/src/feature_engine/advanced_features.rs",
        "line": 196,
        "fields": [
          [
            "ks_threshold",
            "f64"
          ],
          [
            "mmd_threshold",
            "f64"
          ],
          [
            "reference_distributions",
            "Vec<Array1<f64>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FeatureMetrics",
        "file": "crates/ml/src/feature_engine/advanced_features.rs",
        "line": 209,
        "fields": [
          [
            "total_features",
            "usize"
          ],
          [
            "selected_features",
            "usize"
          ],
          [
            "extraction_time_ms",
            "f64"
          ],
          [
            "feature_importance",
            "HashMap<String"
          ],
          [
            "memory_usage_mb",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TimeSeriesData",
        "file": "crates/ml/src/feature_engine/advanced_features.rs",
        "line": 1215,
        "fields": [
          [
            "prices",
            "Vec<f64>"
          ],
          [
            "volumes",
            "Vec<f64>"
          ],
          [
            "timestamps",
            "Vec<i64>"
          ],
          [
            "orderbook",
            "Option<OrderBook>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderBook",
        "file": "crates/ml/src/feature_engine/advanced_features.rs",
        "line": 1223,
        "fields": [
          [
            "best_bid",
            "f64"
          ],
          [
            "best_ask",
            "f64"
          ],
          [
            "bid_volumes",
            "Vec<f64>"
          ],
          [
            "ask_volumes",
            "Vec<f64>"
          ],
          [
            "last_price",
            "f64"
          ],
          [
            "last_volume",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SpectralFeatures",
        "file": "crates/ml/src/feature_engine/advanced_features.rs",
        "line": 1248,
        "fields": [
          [
            "compute_all",
            "bool"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "WaveletDecomposer",
        "file": "crates/ml/src/feature_engine/advanced_features.rs",
        "line": 1258,
        "fields": [
          [
            "wavelet_type",
            "WaveletType"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "Stochastic",
        "file": "crates/ml/src/feature_engine/indicators_extended.rs",
        "line": 13,
        "fields": [
          [
            "k_period",
            "usize"
          ],
          [
            "d_period",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "WilliamsR",
        "file": "crates/ml/src/feature_engine/indicators_extended.rs",
        "line": 49,
        "fields": [
          [
            "period",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CCI",
        "file": "crates/ml/src/feature_engine/indicators_extended.rs",
        "line": 83,
        "fields": [
          [
            "period",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MFI",
        "file": "crates/ml/src/feature_engine/indicators_extended.rs",
        "line": 127,
        "fields": [
          [
            "period",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "HMA",
        "file": "crates/ml/src/feature_engine/indicators_extended.rs",
        "line": 177,
        "fields": [
          [
            "period",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "KAMA",
        "file": "crates/ml/src/feature_engine/indicators_extended.rs",
        "line": 228,
        "fields": [
          [
            "period",
            "usize"
          ],
          [
            "fast_period",
            "usize"
          ],
          [
            "slow_period",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ParabolicSAR",
        "file": "crates/ml/src/feature_engine/indicators_extended.rs",
        "line": 280,
        "fields": [
          [
            "acceleration",
            "f64"
          ],
          [
            "max_acceleration",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "KeltnerChannel",
        "file": "crates/ml/src/feature_engine/indicators_extended.rs",
        "line": 352,
        "fields": [
          [
            "ema_period",
            "usize"
          ],
          [
            "atr_period",
            "usize"
          ],
          [
            "multiplier",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DonchianChannel",
        "file": "crates/ml/src/feature_engine/indicators_extended.rs",
        "line": 384,
        "fields": [
          [
            "period",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "StdDev",
        "file": "crates/ml/src/feature_engine/indicators_extended.rs",
        "line": 414,
        "fields": [
          [
            "period",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CMF",
        "file": "crates/ml/src/feature_engine/indicators_extended.rs",
        "line": 453,
        "fields": [
          [
            "period",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "VWAP",
        "file": "crates/ml/src/feature_engine/indicators_extended.rs",
        "line": 498,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "ADL",
        "file": "crates/ml/src/feature_engine/indicators_extended.rs",
        "line": 530,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "SupportResistance",
        "file": "crates/ml/src/feature_engine/indicators_extended.rs",
        "line": 564,
        "fields": [
          [
            "lookback",
            "usize"
          ],
          [
            "threshold",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PivotPoints",
        "file": "crates/ml/src/feature_engine/indicators_extended.rs",
        "line": 614,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "TrendStrengthIndex",
        "file": "crates/ml/src/feature_engine/indicators_extended.rs",
        "line": 637,
        "fields": [
          [
            "period",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketRegime",
        "file": "crates/ml/src/feature_engine/indicators_extended.rs",
        "line": 672,
        "fields": [
          [
            "atr_period",
            "usize"
          ],
          [
            "trend_period",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "IchimokuCloud",
        "file": "crates/ml/src/feature_engine/ichimoku.rs",
        "line": 17,
        "fields": [
          [
            "tenkan_period",
            "usize"
          ],
          [
            "Default",
            "9\n    kijun_period: usize"
          ],
          [
            "Default",
            "26\n    senkou_b_period: usize"
          ],
          [
            "Default",
            "52\n    displacement: usize"
          ],
          [
            "Default",
            "26"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "IchimokuResult",
        "file": "crates/ml/src/feature_engine/ichimoku.rs",
        "line": 26,
        "fields": [
          [
            "tenkan_sen",
            "f64"
          ],
          [
            "kijun_sen",
            "f64"
          ],
          [
            "senkou_span_a",
            "f64"
          ],
          [
            "senkou_span_b",
            "f64"
          ],
          [
            "chikou_span",
            "f64"
          ],
          [
            "cloud_top",
            "f64"
          ],
          [
            "cloud_bottom",
            "f64"
          ],
          [
            "cloud_thickness",
            "f64"
          ],
          [
            "trend_strength",
            "f64"
          ],
          [
            "signal",
            "IchimokuSignal"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "HarmonicPatternDetector",
        "file": "crates/ml/src/feature_engine/harmonic_patterns.rs",
        "line": 12,
        "fields": [
          [
            "lookback_period",
            "usize"
          ],
          [
            "fib_tolerance",
            "f64"
          ],
          [
            "min_pattern_size",
            "f64"
          ],
          [
            "pattern_history",
            "Vec<HarmonicPattern>"
          ],
          [
            "active_patterns",
            "Vec<HarmonicPattern>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "HarmonicPattern",
        "file": "crates/ml/src/feature_engine/harmonic_patterns.rs",
        "line": 22,
        "fields": [
          [
            "pattern_type",
            "HarmonicType"
          ],
          [
            "points",
            "PatternPoints"
          ],
          [
            "fibonacci_ratios",
            "FibonacciRatios"
          ],
          [
            "confidence",
            "f64"
          ],
          [
            "prz",
            "PotentialReversalZone"
          ],
          [
            "risk_reward",
            "f64"
          ],
          [
            "completion_percentage",
            "f64"
          ],
          [
            "validity_score",
            "f64"
          ],
          [
            "trade_setup",
            "TradeSetup"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PatternPoints",
        "file": "crates/ml/src/feature_engine/harmonic_patterns.rs",
        "line": 36,
        "fields": [
          [
            "x",
            "PricePoint"
          ],
          [
            "a",
            "PricePoint"
          ],
          [
            "b",
            "PricePoint"
          ],
          [
            "c",
            "PricePoint"
          ],
          [
            "d",
            "Option<PricePoint>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PricePoint",
        "file": "crates/ml/src/feature_engine/harmonic_patterns.rs",
        "line": 45,
        "fields": [
          [
            "price",
            "f64"
          ],
          [
            "timestamp",
            "i64"
          ],
          [
            "volume",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FibonacciRatios",
        "file": "crates/ml/src/feature_engine/harmonic_patterns.rs",
        "line": 53,
        "fields": [
          [
            "xab",
            "f64"
          ],
          [
            "abc",
            "f64"
          ],
          [
            "bcd",
            "f64"
          ],
          [
            "xad",
            "f64"
          ],
          [
            "alternate_ratios",
            "HashMap<String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PotentialReversalZone",
        "file": "crates/ml/src/feature_engine/harmonic_patterns.rs",
        "line": 63,
        "fields": [
          [
            "upper_bound",
            "f64"
          ],
          [
            "lower_bound",
            "f64"
          ],
          [
            "optimal_entry",
            "f64"
          ],
          [
            "confluences",
            "Vec<String>"
          ],
          [
            "strength",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TradeSetup",
        "file": "crates/ml/src/feature_engine/harmonic_patterns.rs",
        "line": 73,
        "fields": [
          [
            "entry_price",
            "f64"
          ],
          [
            "stop_loss",
            "f64"
          ],
          [
            "target_1",
            "f64"
          ],
          [
            "target_2",
            "f64"
          ],
          [
            "target_3",
            "f64"
          ],
          [
            "risk_amount",
            "f64"
          ],
          [
            "reward_potential",
            "f64"
          ],
          [
            "position_size_recommendation",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RequiredRatios",
        "file": "crates/ml/src/feature_engine/harmonic_patterns.rs",
        "line": 620,
        "fields": [
          [
            "xab",
            "Option<(f64"
          ],
          [
            "abc",
            "Option<(f64"
          ],
          [
            "bcd",
            "Option<(f64"
          ],
          [
            "xad",
            "Option<(f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ElliottWaveDetector",
        "file": "crates/ml/src/feature_engine/elliott_wave.rs",
        "line": 12,
        "fields": [
          [
            "lookback_period",
            "usize"
          ],
          [
            "min_wave_size",
            "f64"
          ],
          [
            "fibonacci_tolerance",
            "f64"
          ],
          [
            "waves_history",
            "VecDeque<Wave>"
          ],
          [
            "current_pattern",
            "Option<ElliottPattern>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Wave",
        "file": "crates/ml/src/feature_engine/elliott_wave.rs",
        "line": 22,
        "fields": [
          [
            "wave_type",
            "WaveType"
          ],
          [
            "start_price",
            "f64"
          ],
          [
            "end_price",
            "f64"
          ],
          [
            "start_time",
            "i64"
          ],
          [
            "end_time",
            "i64"
          ],
          [
            "retracement_ratio",
            "Option<f64>"
          ],
          [
            "extension_ratio",
            "Option<f64>"
          ],
          [
            "volume",
            "f64"
          ],
          [
            "sub_waves",
            "Vec<Wave>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ElliottPattern",
        "file": "crates/ml/src/feature_engine/elliott_wave.rs",
        "line": 58,
        "fields": [
          [
            "pattern_type",
            "PatternType"
          ],
          [
            "waves",
            "Vec<Wave>"
          ],
          [
            "degree",
            "WaveDegree"
          ],
          [
            "confidence",
            "f64"
          ],
          [
            "price_target",
            "f64"
          ],
          [
            "stop_loss",
            "f64"
          ],
          [
            "rules_violated",
            "Vec<String>"
          ],
          [
            "guidelines_met",
            "Vec<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Pivot",
        "file": "crates/ml/src/feature_engine/elliott_wave.rs",
        "line": 583,
        "fields": [
          [
            "price",
            "f64"
          ],
          [
            "index",
            "usize"
          ],
          [
            "timestamp",
            "i64"
          ],
          [
            "pivot_type",
            "PivotType"
          ],
          [
            "volume",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "FeatureScaler",
        "file": "crates/ml/src/feature_engine/scaler.rs",
        "line": 34,
        "fields": [
          [
            "method",
            "ScalingMethod"
          ],
          [
            "fitted",
            "bool"
          ],
          [
            "means",
            "Vec<f64>"
          ],
          [
            "std_devs",
            "Vec<f64>"
          ],
          [
            "mins",
            "Vec<f64>"
          ],
          [
            "maxs",
            "Vec<f64>"
          ],
          [
            "medians",
            "Vec<f64>"
          ],
          [
            "iqrs",
            "Vec<f64>"
          ],
          [
            "max_abs",
            "Vec<f64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FeatureVector",
        "file": "crates/ml/src/feature_engine/mod.rs",
        "line": 39,
        "fields": [
          [
            "raw_features",
            "Vec<f64>"
          ],
          [
            "scaled_features",
            "Vec<f64>"
          ],
          [
            "feature_names",
            "Vec<String>"
          ],
          [
            "importance_scores",
            "Option<Vec<f64>>"
          ],
          [
            "timestamp",
            "chrono::DateTime<chrono::Utc>"
          ],
          [
            "symbol",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketSnapshot",
        "file": "crates/ml/src/feature_engine/mod.rs",
        "line": 121,
        "fields": [
          [
            "price",
            "Decimal"
          ],
          [
            "spread",
            "Decimal"
          ],
          [
            "volume",
            "Decimal"
          ],
          [
            "price_history",
            "Vec<Decimal>"
          ],
          [
            "volume_history",
            "Vec<Decimal>"
          ],
          [
            "order_book_imbalance",
            "f64"
          ],
          [
            "market_depth",
            "f64"
          ],
          [
            "funding_rate",
            "Option<Decimal>"
          ],
          [
            "open_interest",
            "Option<Decimal>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FeatureMetadata",
        "file": "crates/ml/src/feature_engine/mod.rs",
        "line": 152,
        "fields": [
          [
            "name",
            "String"
          ],
          [
            "category",
            "FeatureCategory"
          ],
          [
            "computation_time_us",
            "u64"
          ],
          [
            "is_lagged",
            "bool"
          ],
          [
            "lag_period",
            "Option<usize>"
          ],
          [
            "importance",
            "Option<f64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FeatureStats",
        "file": "crates/ml/src/feature_engine/mod.rs",
        "line": 186,
        "fields": [
          [
            "total_features",
            "usize"
          ],
          [
            "selected_features",
            "usize"
          ],
          [
            "avg_computation_time_us",
            "f64"
          ],
          [
            "missing_values",
            "usize"
          ],
          [
            "infinite_values",
            "usize"
          ],
          [
            "nan_values",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "AttentionLSTM",
        "file": "crates/ml/src/models/attention_lstm.rs",
        "line": 17,
        "fields": [
          [
            "input_size",
            "usize"
          ],
          [
            "hidden_size",
            "usize"
          ],
          [
            "num_layers",
            "usize"
          ],
          [
            "num_heads",
            "usize"
          ],
          [
            "dropout_rate",
            "f32"
          ],
          [
            "lstm_layers",
            "Vec<LSTMLayer>"
          ],
          [
            "attention",
            "MultiHeadAttention"
          ],
          [
            "output_projection",
            "Array2<f32>"
          ],
          [
            "output_bias",
            "Array1<f32>"
          ],
          [
            "layer_norms",
            "Vec<LayerNorm>"
          ],
          [
            "use_residual",
            "bool"
          ],
          [
            "use_avx512",
            "bool"
          ],
          [
            "hidden_states",
            "Vec<Array2<f32>>"
          ],
          [
            "cell_states",
            "Vec<Array2<f32>>"
          ],
          [
            "inference_times",
            "VecDeque<u64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "LSTMLayer",
        "file": "crates/ml/src/models/attention_lstm.rs",
        "line": 54,
        "fields": [
          [
            "w_ii",
            "Array2<f32>"
          ],
          [
            "w_hi",
            "Array2<f32>"
          ],
          [
            "b_i",
            "Array1<f32>"
          ],
          [
            "w_if",
            "Array2<f32>"
          ],
          [
            "w_hf",
            "Array2<f32>"
          ],
          [
            "b_f",
            "Array1<f32>"
          ],
          [
            "w_ig",
            "Array2<f32>"
          ],
          [
            "w_hg",
            "Array2<f32>"
          ],
          [
            "b_g",
            "Array1<f32>"
          ],
          [
            "w_io",
            "Array2<f32>"
          ],
          [
            "w_ho",
            "Array2<f32>"
          ],
          [
            "b_o",
            "Array1<f32>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "MultiHeadAttention",
        "file": "crates/ml/src/models/attention_lstm.rs",
        "line": 78,
        "fields": [
          [
            "num_heads",
            "usize"
          ],
          [
            "head_dim",
            "usize"
          ],
          [
            "w_q",
            "Array2<f32>"
          ],
          [
            "w_k",
            "Array2<f32>"
          ],
          [
            "w_v",
            "Array2<f32>"
          ],
          [
            "w_o",
            "Array2<f32>"
          ],
          [
            "positional_encoding",
            "Array2<f32>"
          ],
          [
            "temperature",
            "f32"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "LayerNorm",
        "file": "crates/ml/src/models/attention_lstm.rs",
        "line": 97,
        "fields": [
          [
            "gamma",
            "Array1<f32>"
          ],
          [
            "beta",
            "Array1<f32>"
          ],
          [
            "epsilon",
            "f32"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "GRUConfig",
        "file": "crates/ml/src/models/gru.rs",
        "line": 29,
        "fields": [
          [
            "input_size",
            "usize"
          ],
          [
            "hidden_size",
            "usize"
          ],
          [
            "num_layers",
            "usize"
          ],
          [
            "output_size",
            "usize"
          ],
          [
            "Quinn",
            "regularization)\n    pub dropout: f64"
          ],
          [
            "learning_rate",
            "f64"
          ],
          [
            "Jordan",
            "power of 2)\n    pub batch_size: usize"
          ],
          [
            "sequence_length",
            "usize"
          ],
          [
            "Quinn",
            "stability)\n    pub gradient_clip: f64"
          ],
          [
            "layer_norm",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "GRUCell",
        "file": "crates/ml/src/models/gru.rs",
        "line": 83,
        "fields": [
          [
            "w_ir",
            "Array2<f32>"
          ],
          [
            "w_hr",
            "Array2<f32>"
          ],
          [
            "b_r",
            "Array1<f32>"
          ],
          [
            "w_iz",
            "Array2<f32>"
          ],
          [
            "w_hz",
            "Array2<f32>"
          ],
          [
            "b_z",
            "Array1<f32>"
          ],
          [
            "w_in",
            "Array2<f32>"
          ],
          [
            "w_hn",
            "Array2<f32>"
          ],
          [
            "b_n",
            "Array1<f32>"
          ],
          [
            "Morgan",
            "optional but recommended)\n    layer_norm_r: Option<LayerNorm>"
          ],
          [
            "layer_norm_z",
            "Option<LayerNorm>"
          ],
          [
            "layer_norm_n",
            "Option<LayerNorm>"
          ],
          [
            "grad_cache",
            "Arc<RwLock<GradientCache>>"
          ],
          [
            "Jordan",
            "Performance cache\n    forward_cache: Arc<RwLock<ForwardCache>>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "LayerNorm",
        "file": "crates/ml/src/models/gru.rs",
        "line": 112,
        "fields": [
          [
            "gamma",
            "Array1<f32>"
          ],
          [
            "beta",
            "Array1<f32>"
          ],
          [
            "eps",
            "f32"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "GradientCache",
        "file": "crates/ml/src/models/gru.rs",
        "line": 118,
        "fields": [
          [
            "dw_ir",
            "Array2<f32>"
          ],
          [
            "dw_hr",
            "Array2<f32>"
          ],
          [
            "db_r",
            "Array1<f32>"
          ],
          [
            "dw_iz",
            "Array2<f32>"
          ],
          [
            "dw_hz",
            "Array2<f32>"
          ],
          [
            "db_z",
            "Array1<f32>"
          ],
          [
            "dw_in",
            "Array2<f32>"
          ],
          [
            "dw_hn",
            "Array2<f32>"
          ],
          [
            "db_n",
            "Array1<f32>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ForwardCache",
        "file": "crates/ml/src/models/gru.rs",
        "line": 130,
        "fields": [
          [
            "last_input",
            "Array1<f32>"
          ],
          [
            "last_hidden",
            "Array1<f32>"
          ],
          [
            "reset_gate",
            "Array1<f32>"
          ],
          [
            "update_gate",
            "Array1<f32>"
          ],
          [
            "candidate",
            "Array1<f32>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "GRUModel",
        "file": "crates/ml/src/models/gru.rs",
        "line": 277,
        "fields": [
          [
            "config",
            "GRUConfig"
          ],
          [
            "layers",
            "Vec<GRUCell>"
          ],
          [
            "output_layer",
            "Array2<f32>"
          ],
          [
            "output_bias",
            "Array1<f32>"
          ],
          [
            "Riley",
            "for testing)\n    dropout_masks: Arc<RwLock<Vec<Array1<f32>>>>"
          ],
          [
            "is_trained",
            "Arc<RwLock<bool>>"
          ],
          [
            "Avery",
            "Normalization\n    input_scaler: Arc<RwLock<DataScaler>>"
          ],
          [
            "training_history",
            "Arc<RwLock<TrainingHistory>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DataScaler",
        "file": "crates/ml/src/models/gru.rs",
        "line": 301,
        "fields": [
          [
            "mean",
            "Array1<f64>"
          ],
          [
            "std",
            "Array1<f64>"
          ],
          [
            "min",
            "Array1<f64>"
          ],
          [
            "max",
            "Array1<f64>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "TrainingHistory",
        "file": "crates/ml/src/models/gru.rs",
        "line": 320,
        "fields": [
          [
            "train_loss",
            "Vec<f64>"
          ],
          [
            "val_loss",
            "Vec<f64>"
          ],
          [
            "val_accuracy",
            "Vec<f64>"
          ],
          [
            "learning_rates",
            "Vec<f64>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "TrainingResult",
        "file": "crates/ml/src/models/gru.rs",
        "line": 591,
        "fields": [
          [
            "final_train_loss",
            "f64"
          ],
          [
            "final_val_loss",
            "f64"
          ],
          [
            "final_val_accuracy",
            "f64"
          ],
          [
            "epochs_trained",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ARIMAConfig",
        "file": "crates/ml/src/models/arima.rs",
        "line": 19,
        "fields": [
          [
            "p",
            "usize"
          ],
          [
            "d",
            "usize"
          ],
          [
            "q",
            "usize"
          ],
          [
            "seasonal",
            "Option<SeasonalConfig>"
          ],
          [
            "convergence_threshold",
            "f64"
          ],
          [
            "max_iterations",
            "usize"
          ],
          [
            "min_observations",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SeasonalConfig",
        "file": "crates/ml/src/models/arima.rs",
        "line": 57,
        "fields": [
          [
            "period",
            "usize"
          ],
          [
            "p",
            "usize"
          ],
          [
            "d",
            "usize"
          ],
          [
            "q",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ARIMAModel",
        "file": "crates/ml/src/models/arima.rs",
        "line": 69,
        "fields": [
          [
            "config",
            "ARIMAConfig"
          ],
          [
            "ar_coefficients",
            "Arc<RwLock<Array1<f64>>>"
          ],
          [
            "ma_coefficients",
            "Arc<RwLock<Array1<f64>>>"
          ],
          [
            "intercept",
            "Arc<RwLock<f64>>"
          ],
          [
            "last_observations",
            "Arc<RwLock<Vec<f64>>>"
          ],
          [
            "last_residuals",
            "Arc<RwLock<Vec<f64>>>"
          ],
          [
            "aic",
            "Arc<RwLock<f64>>"
          ],
          [
            "bic",
            "Arc<RwLock<f64>>"
          ],
          [
            "mse",
            "Arc<RwLock<f64>>"
          ],
          [
            "is_fitted",
            "Arc<RwLock<bool>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FitResult",
        "file": "crates/ml/src/models/arima.rs",
        "line": 383,
        "fields": [
          [
            "aic",
            "f64"
          ],
          [
            "bic",
            "f64"
          ],
          [
            "mse",
            "f64"
          ],
          [
            "iterations",
            "usize"
          ],
          [
            "converged",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "LjungBoxResult",
        "file": "crates/ml/src/models/arima.rs",
        "line": 453,
        "fields": [
          [
            "q_statistic",
            "f64"
          ],
          [
            "p_value",
            "f64"
          ],
          [
            "reject_null",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ADFResult",
        "file": "crates/ml/src/models/arima.rs",
        "line": 460,
        "fields": [
          [
            "test_statistic",
            "f64"
          ],
          [
            "critical_values",
            "[f64; 3]"
          ],
          [
            "is_stationary",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "LSTMConfig",
        "file": "crates/ml/src/models/lstm.rs",
        "line": 29,
        "fields": [
          [
            "input_size",
            "usize"
          ],
          [
            "hidden_size",
            "usize"
          ],
          [
            "num_layers",
            "usize"
          ],
          [
            "output_size",
            "usize"
          ],
          [
            "dropout",
            "f64"
          ],
          [
            "learning_rate",
            "f64"
          ],
          [
            "batch_size",
            "usize"
          ],
          [
            "sequence_length",
            "usize"
          ],
          [
            "Quinn",
            "prevent explosion)\n    pub gradient_clip: f64"
          ],
          [
            "bidirectional",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "LSTMCell",
        "file": "crates/ml/src/models/lstm.rs",
        "line": 84,
        "fields": [
          [
            "w_ii",
            "Array2<f32>"
          ],
          [
            "w_if",
            "Array2<f32>"
          ],
          [
            "w_ig",
            "Array2<f32>"
          ],
          [
            "w_io",
            "Array2<f32>"
          ],
          [
            "w_hi",
            "Array2<f32>"
          ],
          [
            "w_hf",
            "Array2<f32>"
          ],
          [
            "w_hg",
            "Array2<f32>"
          ],
          [
            "w_ho",
            "Array2<f32>"
          ],
          [
            "b_i",
            "Array1<f32>"
          ],
          [
            "b_f",
            "Array1<f32>"
          ],
          [
            "b_g",
            "Array1<f32>"
          ],
          [
            "b_o",
            "Array1<f32>"
          ],
          [
            "grad_w_ii",
            "Arc<RwLock<Array2<f32>>>"
          ],
          [
            "grad_w_if",
            "Arc<RwLock<Array2<f32>>>"
          ],
          [
            "grad_w_ig",
            "Arc<RwLock<Array2<f32>>>"
          ],
          [
            "grad_w_io",
            "Arc<RwLock<Array2<f32>>>"
          ],
          [
            "Jordan",
            "Cache for performance\n    cache: Arc<RwLock<CellCache>>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "CellCache",
        "file": "crates/ml/src/models/lstm.rs",
        "line": 113,
        "fields": [
          [
            "last_hidden",
            "Array1<f32>"
          ],
          [
            "last_cell",
            "Array1<f32>"
          ],
          [
            "gates",
            "GateStates"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "GateStates",
        "file": "crates/ml/src/models/lstm.rs",
        "line": 119,
        "fields": [
          [
            "input_gate",
            "Array1<f32>"
          ],
          [
            "forget_gate",
            "Array1<f32>"
          ],
          [
            "cell_gate",
            "Array1<f32>"
          ],
          [
            "output_gate",
            "Array1<f32>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "LSTMModel",
        "file": "crates/ml/src/models/lstm.rs",
        "line": 237,
        "fields": [
          [
            "config",
            "LSTMConfig"
          ],
          [
            "layers",
            "Vec<LSTMCell>"
          ],
          [
            "output_layer",
            "Array2<f32>"
          ],
          [
            "output_bias",
            "Array1<f32>"
          ],
          [
            "is_trained",
            "Arc<RwLock<bool>>"
          ],
          [
            "Avery",
            "Data normalization parameters\n    input_mean: Arc<RwLock<Array1<f64>>>"
          ],
          [
            "input_std",
            "Arc<RwLock<Array1<f64>>>"
          ],
          [
            "training_loss",
            "Arc<RwLock<Vec<f64>>>"
          ],
          [
            "validation_accuracy",
            "Arc<RwLock<f64>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TrainingResult",
        "file": "crates/ml/src/models/lstm.rs",
        "line": 502,
        "fields": [
          [
            "final_loss",
            "f64"
          ],
          [
            "validation_accuracy",
            "f64"
          ],
          [
            "epochs_trained",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "GARCHModel",
        "file": "crates/ml/src/models/garch.rs",
        "line": 21,
        "fields": [
          [
            "omega",
            "f32"
          ],
          [
            "alpha",
            "f32"
          ],
          [
            "beta",
            "f32"
          ],
          [
            "conditional_variance",
            "Vec<f32>"
          ],
          [
            "standardized_residuals",
            "Vec<f32>"
          ],
          [
            "log_likelihood",
            "f64"
          ],
          [
            "degrees_of_freedom",
            "f32"
          ],
          [
            "use_avx512",
            "bool"
          ],
          [
            "regularization_lambda",
            "f32"
          ],
          [
            "max_persistence",
            "f32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "EnsembleConfig",
        "file": "crates/ml/src/models/ensemble.rs",
        "line": 35,
        "fields": [
          [
            "strategy",
            "EnsembleStrategy"
          ],
          [
            "models",
            "Vec<EnsembleModelConfig>"
          ],
          [
            "voting_threshold",
            "f64"
          ],
          [
            "adaptive_weights",
            "bool"
          ],
          [
            "learning_rate",
            "f64"
          ],
          [
            "min_agreement",
            "f64"
          ],
          [
            "use_confidence",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "EnsembleModelConfig",
        "file": "crates/ml/src/models/ensemble.rs",
        "line": 83,
        "fields": [
          [
            "id",
            "ModelId"
          ],
          [
            "model_type",
            "String"
          ],
          [
            "weight",
            "f64"
          ],
          [
            "enabled",
            "bool"
          ],
          [
            "min_confidence",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "EnsembleModel",
        "file": "crates/ml/src/models/ensemble.rs",
        "line": 110,
        "fields": [
          [
            "config",
            "Arc<RwLock<EnsembleConfig>>"
          ],
          [
            "arima_models",
            "HashMap<ModelId"
          ],
          [
            "lstm_models",
            "HashMap<ModelId"
          ],
          [
            "gru_models",
            "HashMap<ModelId"
          ],
          [
            "model_weights",
            "Arc<RwLock<HashMap<ModelId"
          ],
          [
            "model_performance",
            "Arc<RwLock<HashMap<ModelId"
          ],
          [
            "meta_model",
            "Option<Arc<dyn MetaLearner>>"
          ],
          [
            "ensemble_metrics",
            "Arc<RwLock<EnsembleMetrics>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ModelPerformance",
        "file": "crates/ml/src/models/ensemble.rs",
        "line": 131,
        "fields": [
          [
            "recent_errors",
            "Vec<f64>"
          ],
          [
            "total_predictions",
            "u64"
          ],
          [
            "accuracy",
            "f64"
          ],
          [
            "confidence",
            "f64"
          ],
          [
            "last_update",
            "std::time::Instant"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "EnsembleMetrics",
        "file": "crates/ml/src/models/ensemble.rs",
        "line": 140,
        "fields": [
          [
            "total_predictions",
            "u64"
          ],
          [
            "agreement_scores",
            "Vec<f64>"
          ],
          [
            "ensemble_accuracy",
            "f64"
          ],
          [
            "model_contributions",
            "HashMap<ModelId"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "EnsembleInput",
        "file": "crates/ml/src/models/ensemble.rs",
        "line": 478,
        "fields": [
          [
            "steps",
            "usize"
          ],
          [
            "lstm_features",
            "ndarray::Array2<f32>"
          ],
          [
            "gru_features",
            "ndarray::Array2<f32>"
          ],
          [
            "market_regime",
            "Option<MarketRegime>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "EnsemblePrediction",
        "file": "crates/ml/src/models/ensemble.rs",
        "line": 501,
        "fields": [
          [
            "value",
            "f64"
          ],
          [
            "confidence",
            "f64"
          ],
          [
            "num_models",
            "usize"
          ],
          [
            "model_predictions",
            "Vec<ndarray::Array1<f64>>"
          ],
          [
            "model_ids",
            "Vec<ModelId>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DeepLSTM",
        "file": "crates/ml/src/models/deep_lstm.rs",
        "line": 45,
        "fields": [
          [
            "layers",
            "Vec<LSTMLayer>"
          ],
          [
            "residual_connections",
            "Vec<ResidualConnection>"
          ],
          [
            "layer_norms",
            "Vec<LayerNorm>"
          ],
          [
            "use_avx512",
            "bool"
          ],
          [
            "memory_pool",
            "Arc<MemoryPoolManager>"
          ],
          [
            "strassen",
            "StrassenMultiplier"
          ],
          [
            "dropout_rate",
            "f64"
          ],
          [
            "gradient_clipper",
            "GradientClipper"
          ],
          [
            "optimizer",
            "AdamW"
          ],
          [
            "metrics",
            "ModelMetrics"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "LSTMLayer",
        "file": "crates/ml/src/models/deep_lstm.rs",
        "line": 69,
        "fields": [
          [
            "w_ii",
            "Array2<f64>"
          ],
          [
            "w_if",
            "Array2<f64>"
          ],
          [
            "w_ig",
            "Array2<f64>"
          ],
          [
            "w_io",
            "Array2<f64>"
          ],
          [
            "w_hi",
            "Array2<f64>"
          ],
          [
            "w_hf",
            "Array2<f64>"
          ],
          [
            "w_hg",
            "Array2<f64>"
          ],
          [
            "w_ho",
            "Array2<f64>"
          ],
          [
            "b_ii",
            "Array1<f64>"
          ],
          [
            "b_if",
            "Array1<f64>"
          ],
          [
            "b_ig",
            "Array1<f64>"
          ],
          [
            "b_io",
            "Array1<f64>"
          ],
          [
            "b_hi",
            "Array1<f64>"
          ],
          [
            "b_hf",
            "Array1<f64>"
          ],
          [
            "b_hg",
            "Array1<f64>"
          ],
          [
            "b_ho",
            "Array1<f64>"
          ],
          [
            "hidden_size",
            "usize"
          ],
          [
            "hidden_state",
            "Option<Array2<f64>>"
          ],
          [
            "cell_state",
            "Option<Array2<f64>>"
          ],
          [
            "use_peephole",
            "bool"
          ],
          [
            "use_coupled",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ResidualConnection",
        "file": "crates/ml/src/models/deep_lstm.rs",
        "line": 90,
        "fields": [
          [
            "from_layer",
            "usize"
          ],
          [
            "to_layer",
            "usize"
          ],
          [
            "projection",
            "Option<Array2<f64>>"
          ],
          [
            "scale_factor",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "LayerNorm",
        "file": "crates/ml/src/models/deep_lstm.rs",
        "line": 99,
        "fields": [
          [
            "gamma",
            "Array1<f64>"
          ],
          [
            "beta",
            "Array1<f64>"
          ],
          [
            "epsilon",
            "f64"
          ],
          [
            "momentum",
            "f64"
          ],
          [
            "running_mean",
            "Array1<f64>"
          ],
          [
            "running_var",
            "Array1<f64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "GradientClipper",
        "file": "crates/ml/src/models/deep_lstm.rs",
        "line": 110,
        "fields": [
          [
            "max_norm",
            "f64"
          ],
          [
            "clip_value",
            "f64"
          ],
          [
            "use_adaptive",
            "bool"
          ],
          [
            "history",
            "Vec<f64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "AdamW",
        "file": "crates/ml/src/models/deep_lstm.rs",
        "line": 119,
        "fields": [
          [
            "learning_rate",
            "f64"
          ],
          [
            "beta1",
            "f64"
          ],
          [
            "beta2",
            "f64"
          ],
          [
            "epsilon",
            "f64"
          ],
          [
            "weight_decay",
            "f64"
          ],
          [
            "m",
            "Vec<Array2<f64>>"
          ],
          [
            "v",
            "Vec<Array2<f64>>"
          ],
          [
            "t",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ModelMetrics",
        "file": "crates/ml/src/models/deep_lstm.rs",
        "line": 136,
        "fields": [
          [
            "training_loss",
            "Vec<f64>"
          ],
          [
            "validation_loss",
            "Vec<f64>"
          ],
          [
            "gradient_norms",
            "Vec<f64>"
          ],
          [
            "learning_rates",
            "Vec<f64>"
          ],
          [
            "layer_activations",
            "Vec<Vec<f64>>"
          ],
          [
            "memory_usage",
            "Vec<usize>"
          ],
          [
            "inference_time_us",
            "Vec<u64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OptimizedXGBoost",
        "file": "crates/ml/src/models/xgboost_optimized.rs",
        "line": 31,
        "fields": [
          [
            "trees",
            "Vec<DecisionTree>"
          ],
          [
            "params",
            "XGBoostParams"
          ],
          [
            "memory_pool",
            "Arc<MemoryPoolManager>"
          ],
          [
            "feature_cache",
            "Arc<DashMap<u64"
          ],
          [
            "prediction_cache",
            "Arc<DashMap<u64"
          ],
          [
            "split_cache",
            "Arc<DashMap<SplitKey"
          ],
          [
            "feature_engine",
            "Arc<AdvancedFeatureEngine>"
          ],
          [
            "feature_importance",
            "Arc<RwLock<Vec<f32>>>"
          ],
          [
            "feature_interactions",
            "Arc<RwLock<HashMap<(usize"
          ],
          [
            "training_buffer",
            "Arc<RwLock<TrainingBuffer>>"
          ],
          [
            "online_metrics",
            "Arc<RwLock<OnlineMetrics>>"
          ],
          [
            "gradient_buffer",
            "Arc<RwLock<Vec<f32>>>"
          ],
          [
            "hessian_buffer",
            "Arc<RwLock<Vec<f32>>>"
          ],
          [
            "hyperopt",
            "Arc<HyperparameterOptimizer>"
          ],
          [
            "best_params",
            "Arc<RwLock<XGBoostParams>>"
          ],
          [
            "use_avx512",
            "bool"
          ],
          [
            "num_threads",
            "usize"
          ],
          [
            "simd_threshold",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "XGBoostParams",
        "file": "crates/ml/src/models/xgboost_optimized.rs",
        "line": 64,
        "fields": [
          [
            "max_depth",
            "u32"
          ],
          [
            "min_child_weight",
            "f32"
          ],
          [
            "gamma",
            "f32"
          ],
          [
            "subsample",
            "f32"
          ],
          [
            "colsample_bytree",
            "f32"
          ],
          [
            "colsample_bylevel",
            "f32"
          ],
          [
            "colsample_bynode",
            "f32"
          ],
          [
            "learning_rate",
            "f32"
          ],
          [
            "n_estimators",
            "u32"
          ],
          [
            "reg_alpha",
            "f32"
          ],
          [
            "reg_lambda",
            "f32"
          ],
          [
            "max_delta_step",
            "f32"
          ],
          [
            "scale_pos_weight",
            "f32"
          ],
          [
            "min_split_loss",
            "f32"
          ],
          [
            "max_leaves",
            "u32"
          ],
          [
            "grow_policy",
            "GrowPolicy"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DecisionTree",
        "file": "crates/ml/src/models/xgboost_optimized.rs",
        "line": 119,
        "fields": [
          [
            "root",
            "Option<Box<TreeNode>>"
          ],
          [
            "feature_importance",
            "Vec<f32>"
          ],
          [
            "tree_weight",
            "f32"
          ],
          [
            "max_depth",
            "u32"
          ],
          [
            "num_leaves",
            "u32"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "TreeNode",
        "file": "crates/ml/src/models/xgboost_optimized.rs",
        "line": 129,
        "fields": [
          [
            "feature_idx",
            "Option<usize>"
          ],
          [
            "split_value",
            "Option<f32>"
          ],
          [
            "split_gain",
            "f32"
          ],
          [
            "weight",
            "f32"
          ],
          [
            "cover",
            "f32"
          ],
          [
            "left",
            "Option<Box<TreeNode>>"
          ],
          [
            "right",
            "Option<Box<TreeNode>>"
          ],
          [
            "depth",
            "u32"
          ],
          [
            "node_id",
            "usize"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "SplitKey",
        "file": "crates/ml/src/models/xgboost_optimized.rs",
        "line": 150,
        "fields": [
          [
            "feature_idx",
            "usize"
          ],
          [
            "split_point",
            "OrderedFloat<f32>"
          ],
          [
            "node_id",
            "usize"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "SplitInfo",
        "file": "crates/ml/src/models/xgboost_optimized.rs",
        "line": 157,
        "fields": [
          [
            "gain",
            "f32"
          ],
          [
            "left_weight",
            "f32"
          ],
          [
            "right_weight",
            "f32"
          ],
          [
            "left_cover",
            "f32"
          ],
          [
            "right_cover",
            "f32"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "TrainingBuffer",
        "file": "crates/ml/src/models/xgboost_optimized.rs",
        "line": 166,
        "fields": [
          [
            "features",
            "Vec<Array2<f32>>"
          ],
          [
            "targets",
            "Vec<Array1<f32>>"
          ],
          [
            "weights",
            "Vec<Array1<f32>>"
          ],
          [
            "gradients",
            "Vec<Array1<f32>>"
          ],
          [
            "hessians",
            "Vec<Array1<f32>>"
          ],
          [
            "timestamps",
            "Vec<i64>"
          ],
          [
            "max_size",
            "usize"
          ],
          [
            "total_samples",
            "usize"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "OnlineMetrics",
        "file": "crates/ml/src/models/xgboost_optimized.rs",
        "line": 178,
        "fields": [
          [
            "rmse_window",
            "Vec<f32>"
          ],
          [
            "mae_window",
            "Vec<f32>"
          ],
          [
            "sharpe_window",
            "Vec<f32>"
          ],
          [
            "feature_importance_history",
            "Vec<Vec<f32>>"
          ],
          [
            "tree_depths",
            "Vec<u32>"
          ],
          [
            "training_times",
            "Vec<u128>"
          ],
          [
            "update_count",
            "usize"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "HyperparameterOptimizer",
        "file": "crates/ml/src/models/xgboost_optimized.rs",
        "line": 189,
        "fields": [
          [
            "search_space",
            "SearchSpace"
          ],
          [
            "best_score",
            "f32"
          ],
          [
            "best_params",
            "XGBoostParams"
          ],
          [
            "optimization_history",
            "Vec<OptimizationTrial>"
          ],
          [
            "surrogate_model",
            "SurrogateModel"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "SearchSpace",
        "file": "crates/ml/src/models/xgboost_optimized.rs",
        "line": 198,
        "fields": [
          [
            "max_depth",
            "(u32"
          ],
          [
            "learning_rate",
            "(f32"
          ],
          [
            "subsample",
            "(f32"
          ],
          [
            "reg_alpha",
            "(f32"
          ],
          [
            "reg_lambda",
            "(f32"
          ],
          [
            "min_child_weight",
            "(f32"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "OptimizationTrial",
        "file": "crates/ml/src/models/xgboost_optimized.rs",
        "line": 208,
        "fields": [
          [
            "params",
            "XGBoostParams"
          ],
          [
            "score",
            "f32"
          ],
          [
            "iteration",
            "usize"
          ],
          [
            "duration_ms",
            "u128"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "SurrogateModel",
        "file": "crates/ml/src/models/xgboost_optimized.rs",
        "line": 216,
        "fields": [
          [
            "features",
            "Vec<Vec<f32>>"
          ],
          [
            "targets",
            "Vec<f32>"
          ],
          [
            "kernel_params",
            "KernelParams"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "KernelParams",
        "file": "crates/ml/src/models/xgboost_optimized.rs",
        "line": 222,
        "fields": [
          [
            "length_scale",
            "f32"
          ],
          [
            "variance",
            "f32"
          ],
          [
            "noise",
            "f32"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "BestSplit",
        "file": "crates/ml/src/models/xgboost_optimized.rs",
        "line": 1050,
        "fields": [
          [
            "feature_idx",
            "usize"
          ],
          [
            "split_value",
            "f32"
          ],
          [
            "gain",
            "f32"
          ],
          [
            "left_sum_grad",
            "f32"
          ],
          [
            "left_sum_hess",
            "f32"
          ],
          [
            "right_sum_grad",
            "f32"
          ],
          [
            "right_sum_hess",
            "f32"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "TrainingMetrics",
        "file": "crates/ml/src/models/xgboost_optimized.rs",
        "line": 1062,
        "fields": [
          [
            "train_rmse",
            "f32"
          ],
          [
            "validation_metrics",
            "Option<ValidationMetrics>"
          ],
          [
            "feature_importance",
            "Vec<f32>"
          ],
          [
            "training_time_ms",
            "u128"
          ],
          [
            "num_trees",
            "u32"
          ],
          [
            "average_tree_depth",
            "f32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ValidationMetrics",
        "file": "crates/ml/src/models/xgboost_optimized.rs",
        "line": 1072,
        "fields": [
          [
            "rmse",
            "f32"
          ],
          [
            "mae",
            "f32"
          ],
          [
            "r2",
            "f32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OptimizedEnsemble",
        "file": "crates/ml/src/models/ensemble_optimized.rs",
        "line": 43,
        "fields": [
          [
            "models",
            "EnsembleModels"
          ],
          [
            "voting_strategy",
            "VotingStrategy"
          ],
          [
            "weight_optimizer",
            "WeightOptimizer"
          ],
          [
            "meta_learner",
            "Option<MetaLearner>"
          ],
          [
            "use_avx512",
            "bool"
          ],
          [
            "memory_pool",
            "Arc<MemoryPoolManager>"
          ],
          [
            "online_updater",
            "OnlineUpdater"
          ],
          [
            "metrics",
            "EnsembleMetrics"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "EnsembleModels",
        "file": "crates/ml/src/models/ensemble_optimized.rs",
        "line": 64,
        "fields": [
          [
            "deep_lstm",
            "DeepLSTM"
          ],
          [
            "transformer",
            "TransformerModel"
          ],
          [
            "temporal_cnn",
            "TemporalCNN"
          ],
          [
            "gru_stack",
            "StackedGRU"
          ],
          [
            "gradient_boost",
            "GradientBoostingModel"
          ],
          [
            "model_weights",
            "Array1<f64>"
          ],
          [
            "model_performance",
            "HashMap<String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "WeightOptimizer",
        "file": "crates/ml/src/models/ensemble_optimized.rs",
        "line": 116,
        "fields": [
          [
            "strategy",
            "OptimizationStrategy"
          ],
          [
            "constraints",
            "WeightConstraints"
          ],
          [
            "history",
            "Vec<Array1<f64>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MetaLearner",
        "file": "crates/ml/src/models/ensemble_optimized.rs",
        "line": 138,
        "fields": [
          [
            "weights",
            "Array2<f64>"
          ],
          [
            "bias",
            "Array1<f64>"
          ],
          [
            "use_model_confidence",
            "bool"
          ],
          [
            "use_model_diversity",
            "bool"
          ],
          [
            "use_temporal_features",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OnlineUpdater",
        "file": "crates/ml/src/models/ensemble_optimized.rs",
        "line": 150,
        "fields": [
          [
            "ema_alpha",
            "f64"
          ],
          [
            "performance_window",
            "Vec<Array1<f64>>"
          ],
          [
            "base_lr",
            "f64"
          ],
          [
            "lr_decay",
            "f64"
          ],
          [
            "drift_detector",
            "ConceptDriftDetector"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ConceptDriftDetector",
        "file": "crates/ml/src/models/ensemble_optimized.rs",
        "line": 164,
        "fields": [
          [
            "threshold",
            "f64"
          ],
          [
            "alpha",
            "f64"
          ],
          [
            "sum",
            "f64"
          ],
          [
            "min_sum",
            "f64"
          ],
          [
            "counter",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TransformerModel",
        "file": "crates/ml/src/models/ensemble_optimized.rs",
        "line": 176,
        "fields": [
          [
            "attention_layers",
            "Vec<MultiHeadAttention>"
          ],
          [
            "ffn_layers",
            "Vec<FeedForward>"
          ],
          [
            "positional_encoding",
            "PositionalEncoding"
          ],
          [
            "hidden_size",
            "usize"
          ],
          [
            "num_heads",
            "usize"
          ],
          [
            "num_layers",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TemporalCNN",
        "file": "crates/ml/src/models/ensemble_optimized.rs",
        "line": 193,
        "fields": [
          [
            "conv_layers",
            "Vec<Conv1D>"
          ],
          [
            "pool_layers",
            "Vec<MaxPool1D>"
          ],
          [
            "fc_layers",
            "Vec<Linear>"
          ],
          [
            "kernel_sizes",
            "Vec<usize>"
          ],
          [
            "channels",
            "Vec<usize>"
          ],
          [
            "dilations",
            "Vec<usize>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "StackedGRU",
        "file": "crates/ml/src/models/ensemble_optimized.rs",
        "line": 210,
        "fields": [
          [
            "layers",
            "Vec<GRULayer>"
          ],
          [
            "dropout",
            "f64"
          ],
          [
            "bidirectional",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "GradientBoostingModel",
        "file": "crates/ml/src/models/ensemble_optimized.rs",
        "line": 217,
        "fields": [
          [
            "trees",
            "Vec<RegressionTree>"
          ],
          [
            "learning_rate",
            "f64"
          ],
          [
            "max_depth",
            "usize"
          ],
          [
            "subsample",
            "f64"
          ],
          [
            "lambda",
            "f64"
          ],
          [
            "alpha",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ModelPerformance",
        "file": "crates/ml/src/models/ensemble_optimized.rs",
        "line": 230,
        "fields": [
          [
            "accuracy",
            "f64"
          ],
          [
            "sharpe_ratio",
            "f64"
          ],
          [
            "max_drawdown",
            "f64"
          ],
          [
            "win_rate",
            "f64"
          ],
          [
            "avg_prediction_time_us",
            "u64"
          ],
          [
            "confidence_calibration",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "EnsembleMetrics",
        "file": "crates/ml/src/models/ensemble_optimized.rs",
        "line": 241,
        "fields": [
          [
            "ensemble_accuracy",
            "f64"
          ],
          [
            "model_agreement",
            "f64"
          ],
          [
            "diversity_score",
            "f64"
          ],
          [
            "prediction_confidence",
            "f64"
          ],
          [
            "online_performance",
            "Vec<f64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "WeightConstraints",
        "file": "crates/ml/src/models/ensemble_optimized.rs",
        "line": 754,
        "fields": [
          [
            "sum_to_one",
            "bool"
          ],
          [
            "non_negative",
            "bool"
          ],
          [
            "max_weight",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MultiHeadAttention",
        "file": "crates/ml/src/models/ensemble_optimized.rs",
        "line": 767,
        "fields": [],
        "visibility": "private"
      },
      {
        "name": "FeedForward",
        "file": "crates/ml/src/models/ensemble_optimized.rs",
        "line": 768,
        "fields": [],
        "visibility": "private"
      },
      {
        "name": "PositionalEncoding",
        "file": "crates/ml/src/models/ensemble_optimized.rs",
        "line": 769,
        "fields": [
          [
            "encoding",
            "Array2<f64>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "Conv1D",
        "file": "crates/ml/src/models/ensemble_optimized.rs",
        "line": 781,
        "fields": [],
        "visibility": "private"
      },
      {
        "name": "MaxPool1D",
        "file": "crates/ml/src/models/ensemble_optimized.rs",
        "line": 782,
        "fields": [],
        "visibility": "private"
      },
      {
        "name": "Linear",
        "file": "crates/ml/src/models/ensemble_optimized.rs",
        "line": 783,
        "fields": [],
        "visibility": "private"
      },
      {
        "name": "GRULayer",
        "file": "crates/ml/src/models/ensemble_optimized.rs",
        "line": 784,
        "fields": [],
        "visibility": "private"
      },
      {
        "name": "RegressionTree",
        "file": "crates/ml/src/models/ensemble_optimized.rs",
        "line": 785,
        "fields": [],
        "visibility": "private"
      },
      {
        "name": "StackingEnsemble",
        "file": "crates/ml/src/models/stacking_ensemble.rs",
        "line": 27,
        "fields": [
          [
            "base_models",
            "Vec<Arc<RwLock<dyn BaseModel>>>"
          ],
          [
            "meta_learner",
            "Arc<RwLock<dyn BaseModel>>"
          ],
          [
            "config",
            "EnsembleConfig"
          ],
          [
            "cv_strategy",
            "CrossValidationStrategy"
          ],
          [
            "blending_weights",
            "Option<Array1<f32>>"
          ],
          [
            "aggregated_importance",
            "Option<Array1<f32>>"
          ],
          [
            "metrics",
            "EnsembleMetrics"
          ],
          [
            "oof_predictions",
            "Option<Array2<f32>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "EnsembleConfig",
        "file": "crates/ml/src/models/stacking_ensemble.rs",
        "line": 54,
        "fields": [
          [
            "use_proba",
            "bool"
          ],
          [
            "blend_mode",
            "BlendMode"
          ],
          [
            "n_folds",
            "usize"
          ],
          [
            "stratified",
            "bool"
          ],
          [
            "use_features_in_meta",
            "bool"
          ],
          [
            "optimize_weights",
            "bool"
          ],
          [
            "diversity_penalty",
            "f32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "EnsembleMetrics",
        "file": "crates/ml/src/models/stacking_ensemble.rs",
        "line": 83,
        "fields": [
          [
            "train_score",
            "f64"
          ],
          [
            "val_score",
            "f64"
          ],
          [
            "test_score",
            "f64"
          ],
          [
            "diversity_score",
            "f64"
          ],
          [
            "model_correlations",
            "HashMap<String"
          ],
          [
            "inference_time_ms",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "MockModel",
        "file": "crates/ml/src/models/stacking_ensemble.rs",
        "line": 699,
        "fields": [
          [
            "name",
            "String"
          ],
          [
            "fitted",
            "bool"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ModelStorage",
        "file": "crates/ml/src/models/registry.rs",
        "line": 25,
        "fields": [
          [
            "model_dir",
            "PathBuf"
          ],
          [
            "mmap_cache",
            "Arc<RwLock<HashMap<Uuid"
          ],
          [
            "model_sizes",
            "Arc<RwLock<HashMap<Uuid"
          ],
          [
            "cache_hits",
            "AtomicU64"
          ],
          [
            "cache_misses",
            "AtomicU64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ModelMetadata",
        "file": "crates/ml/src/models/registry.rs",
        "line": 93,
        "fields": [
          [
            "id",
            "Uuid"
          ],
          [
            "name",
            "String"
          ],
          [
            "version",
            "ModelVersion"
          ],
          [
            "model_type",
            "ModelType"
          ],
          [
            "created_at",
            "DateTime<Utc>"
          ],
          [
            "deployed_at",
            "Option<DateTime<Utc>>"
          ],
          [
            "status",
            "ModelStatus"
          ],
          [
            "metrics",
            "ModelMetrics"
          ],
          [
            "config",
            "serde_json::Value"
          ],
          [
            "tags",
            "Vec<String>"
          ],
          [
            "shadow_mode",
            "bool"
          ],
          [
            "traffic_percentage",
            "f32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ModelVersion",
        "file": "crates/ml/src/models/registry.rs",
        "line": 109,
        "fields": [
          [
            "major",
            "u32"
          ],
          [
            "minor",
            "u32"
          ],
          [
            "patch",
            "u32"
          ],
          [
            "build",
            "Option<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ModelMetrics",
        "file": "crates/ml/src/models/registry.rs",
        "line": 158,
        "fields": [
          [
            "accuracy",
            "f64"
          ],
          [
            "precision",
            "f64"
          ],
          [
            "recall",
            "f64"
          ],
          [
            "f1_score",
            "f64"
          ],
          [
            "mse",
            "f64"
          ],
          [
            "mae",
            "f64"
          ],
          [
            "sharpe_ratio",
            "f64"
          ],
          [
            "max_drawdown",
            "f64"
          ],
          [
            "win_rate",
            "f64"
          ],
          [
            "profit_factor",
            "f64"
          ],
          [
            "custom",
            "HashMap<String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ModelRegistry",
        "file": "crates/ml/src/models/registry.rs",
        "line": 195,
        "fields": [
          [
            "models",
            "Arc<RwLock<HashMap<Uuid"
          ],
          [
            "version_index",
            "Arc<RwLock<BTreeMap<(String"
          ],
          [
            "active_models",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "performance_history",
            "Arc<RwLock<HashMap<Uuid"
          ],
          [
            "ab_tests",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "deployment_strategy",
            "DeploymentStrategy"
          ],
          [
            "storage",
            "Arc<ModelStorage>"
          ],
          [
            "rollback_config",
            "RollbackConfig"
          ],
          [
            "degradation_detector",
            "Arc<DegradationDetector>"
          ],
          [
            "lineage",
            "Arc<RwLock<HashMap<Uuid"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RollbackConfig",
        "file": "crates/ml/src/models/registry.rs",
        "line": 229,
        "fields": [
          [
            "enabled",
            "bool"
          ],
          [
            "degradation_threshold",
            "f64"
          ],
          [
            "min_samples",
            "usize"
          ],
          [
            "cooldown_period",
            "Duration"
          ],
          [
            "metrics_to_monitor",
            "Vec<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DegradationDetector",
        "file": "crates/ml/src/models/registry.rs",
        "line": 256,
        "fields": [
          [
            "baseline_metrics",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "current_metrics",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "sample_counts",
            "Arc<RwLock<HashMap<Uuid"
          ],
          [
            "last_rollback",
            "Arc<RwLock<HashMap<String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ModelLineage",
        "file": "crates/ml/src/models/registry.rs",
        "line": 367,
        "fields": [
          [
            "parent_id",
            "Option<Uuid>"
          ],
          [
            "children_ids",
            "Vec<Uuid>"
          ],
          [
            "training_data_hash",
            "String"
          ],
          [
            "feature_set_version",
            "String"
          ],
          [
            "hyperparameters",
            "serde_json::Value"
          ],
          [
            "git_commit",
            "Option<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DeploymentResult",
        "file": "crates/ml/src/models/registry.rs",
        "line": 744,
        "fields": [
          [
            "model_id",
            "Uuid"
          ],
          [
            "deployment_type",
            "String"
          ],
          [
            "traffic_percentage",
            "f32"
          ],
          [
            "shadow_mode",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ABTestConfig",
        "file": "crates/ml/src/models/registry.rs",
        "line": 752,
        "fields": [
          [
            "name",
            "String"
          ],
          [
            "start_time",
            "DateTime<Utc>"
          ],
          [
            "end_time",
            "Option<DateTime<Utc>>"
          ],
          [
            "model_splits",
            "HashMap<Uuid"
          ],
          [
            "success_metric",
            "String"
          ],
          [
            "min_sample_size",
            "usize"
          ],
          [
            "confidence_level",
            "f64"
          ],
          [
            "effect_size_threshold",
            "f64"
          ],
          [
            "test_results",
            "ABTestResults"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ABTestResults",
        "file": "crates/ml/src/models/registry.rs",
        "line": 766,
        "fields": [
          [
            "samples_per_model",
            "HashMap<Uuid"
          ],
          [
            "conversions_per_model",
            "HashMap<Uuid"
          ],
          [
            "mean_metric_per_model",
            "HashMap<Uuid"
          ],
          [
            "variance_per_model",
            "HashMap<Uuid"
          ],
          [
            "p_value",
            "Option<f64>"
          ],
          [
            "statistical_power",
            "Option<f64>"
          ],
          [
            "winner",
            "Option<Uuid>"
          ],
          [
            "confidence_interval",
            "Option<(f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PerformanceSnapshot",
        "file": "crates/ml/src/models/registry.rs",
        "line": 840,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "accuracy",
            "f64"
          ],
          [
            "precision",
            "f64"
          ],
          [
            "latency_ms",
            "f64"
          ],
          [
            "sharpe_ratio",
            "f64"
          ],
          [
            "profit_factor",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ComparisonResult",
        "file": "crates/ml/src/models/registry.rs",
        "line": 850,
        "fields": [
          [
            "model1_id",
            "Uuid"
          ],
          [
            "model2_id",
            "Uuid"
          ],
          [
            "model1_metrics",
            "ModelMetrics"
          ],
          [
            "model2_metrics",
            "ModelMetrics"
          ],
          [
            "winner",
            "Uuid"
          ],
          [
            "confidence",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "WalkForwardAnalysis",
        "file": "crates/ml/src/backtesting/walk_forward.rs",
        "line": 19,
        "fields": [
          [
            "config",
            "WalkForwardConfig"
          ],
          [
            "cv_splitter",
            "PurgedWalkForwardCV"
          ],
          [
            "performance",
            "Vec<WindowPerformance>"
          ],
          [
            "optimized_params",
            "Vec<OptimizedParameters>"
          ],
          [
            "convergence_monitors",
            "Vec<ConvergenceMonitor>"
          ],
          [
            "statistical_validator",
            "StatisticalValidator"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "WalkForwardConfig",
        "file": "crates/ml/src/backtesting/walk_forward.rs",
        "line": 40,
        "fields": [
          [
            "n_windows",
            "usize"
          ],
          [
            "train_window",
            "usize"
          ],
          [
            "test_window",
            "usize"
          ],
          [
            "anchored",
            "bool"
          ],
          [
            "reoptimize_freq",
            "usize"
          ],
          [
            "purge_gap",
            "usize"
          ],
          [
            "embargo_pct",
            "f32"
          ],
          [
            "min_sharpe",
            "f64"
          ],
          [
            "max_drawdown",
            "f64"
          ],
          [
            "min_trades",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "WindowPerformance",
        "file": "crates/ml/src/backtesting/walk_forward.rs",
        "line": 90,
        "fields": [
          [
            "window_id",
            "usize"
          ],
          [
            "train_start",
            "usize"
          ],
          [
            "train_end",
            "usize"
          ],
          [
            "test_start",
            "usize"
          ],
          [
            "test_end",
            "usize"
          ],
          [
            "in_sample_sharpe",
            "f64"
          ],
          [
            "out_sample_sharpe",
            "f64"
          ],
          [
            "in_sample_return",
            "f64"
          ],
          [
            "out_sample_return",
            "f64"
          ],
          [
            "max_drawdown",
            "f64"
          ],
          [
            "num_trades",
            "usize"
          ],
          [
            "win_rate",
            "f64"
          ],
          [
            "profit_factor",
            "f64"
          ],
          [
            "overfitting_score",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OptimizedParameters",
        "file": "crates/ml/src/backtesting/walk_forward.rs",
        "line": 108,
        "fields": [
          [
            "window_id",
            "usize"
          ],
          [
            "parameters",
            "HashMap<String"
          ],
          [
            "optimization_score",
            "f64"
          ],
          [
            "convergence_epochs",
            "usize"
          ],
          [
            "final_loss",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "StatisticalValidator",
        "file": "crates/ml/src/backtesting/walk_forward.rs",
        "line": 117,
        "fields": [
          [
            "min_p_value",
            "f64"
          ],
          [
            "confidence_level",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "WalkForwardResults",
        "file": "crates/ml/src/backtesting/walk_forward.rs",
        "line": 529,
        "fields": [
          [
            "window_performance",
            "Vec<WindowPerformance>"
          ],
          [
            "avg_out_sample_sharpe",
            "f64"
          ],
          [
            "sharpe_consistency",
            "f64"
          ],
          [
            "avg_overfitting_score",
            "f64"
          ],
          [
            "total_return",
            "f64"
          ],
          [
            "max_drawdown",
            "f64"
          ],
          [
            "profitable_windows",
            "usize"
          ],
          [
            "total_windows",
            "usize"
          ],
          [
            "statistical_significance",
            "f64"
          ],
          [
            "recommendation",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Candle",
        "file": "crates/ml/tests/arima_integration.rs",
        "line": 359,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "open",
            "f64"
          ],
          [
            "high",
            "f64"
          ],
          [
            "low",
            "f64"
          ],
          [
            "close",
            "f64"
          ],
          [
            "volume",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "HotPathValidator",
        "file": "crates/infrastructure/src/hot_path_verification.rs",
        "line": 12,
        "fields": [
          [
            "initial_allocs",
            "usize"
          ],
          [
            "path_name",
            "&'static str"
          ],
          [
            "COPY",
            "Use static string"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ValidationReport",
        "file": "crates/infrastructure/src/hot_path_verification.rs",
        "line": 59,
        "fields": [
          [
            "path_name",
            "String"
          ],
          [
            "allocations",
            "usize"
          ],
          [
            "validated",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "BenchmarkResults",
        "file": "crates/infrastructure/src/hot_path_verification.rs",
        "line": 186,
        "fields": [
          [
            "order_processing_ns",
            "u64"
          ],
          [
            "signal_processing_ns",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CircuitConfig",
        "file": "crates/infrastructure/src/circuit_breaker_sophia.rs",
        "line": 47,
        "fields": [
          [
            "rolling_window",
            "Duration"
          ],
          [
            "min_calls",
            "u32"
          ],
          [
            "error_rate_open_threshold",
            "f32"
          ],
          [
            "error_rate_close_threshold",
            "f32"
          ],
          [
            "consecutive_failures_threshold",
            "u32"
          ],
          [
            "open_cooldown",
            "Duration"
          ],
          [
            "half_open_max_concurrent",
            "u32"
          ],
          [
            "half_open_required_successes",
            "u32"
          ],
          [
            "half_open_allowed_failures",
            "u32"
          ],
          [
            "global_trip_conditions",
            "GlobalTripConditions"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "GlobalTripConditions",
        "file": "crates/infrastructure/src/circuit_breaker_sophia.rs",
        "line": 70,
        "fields": [
          [
            "component_open_ratio",
            "f32"
          ],
          [
            "component_close_ratio",
            "f32"
          ],
          [
            "min_components",
            "u32"
          ],
          [
            "min_samples_per_component",
            "u32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SystemClock",
        "file": "crates/infrastructure/src/circuit_breaker_sophia.rs",
        "line": 116,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "ComponentBreaker",
        "file": "crates/infrastructure/src/circuit_breaker_sophia.rs",
        "line": 147,
        "fields": [
          [
            "state",
            "CachePadded<AtomicU8>"
          ],
          [
            "total_calls",
            "CachePadded<AtomicU64>"
          ],
          [
            "error_calls",
            "CachePadded<AtomicU64>"
          ],
          [
            "consecutive_failures",
            "CachePadded<AtomicU32>"
          ],
          [
            "half_open_tokens",
            "CachePadded<AtomicU32>"
          ],
          [
            "half_open_successes",
            "CachePadded<AtomicU32>"
          ],
          [
            "half_open_failures",
            "CachePadded<AtomicU32>"
          ],
          [
            "last_failure_time",
            "CachePadded<AtomicU64>"
          ],
          [
            "last_transition",
            "CachePadded<AtomicU64>"
          ],
          [
            "clock",
            "Arc<dyn Clock>"
          ],
          [
            "config",
            "Arc<CircuitConfig>"
          ],
          [
            "event_sender",
            "Option<mpsc::Sender<CircuitEvent>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CallGuard",
        "file": "crates/infrastructure/src/circuit_breaker_sophia.rs",
        "line": 488,
        "fields": [
          [
            "breaker",
            "*const ComponentBreaker"
          ],
          [
            "component",
            "String"
          ],
          [
            "start",
            "Instant"
          ],
          [
            "completed",
            "bool"
          ],
          [
            "is_half_open",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "GlobalCircuitBreaker",
        "file": "crates/infrastructure/src/circuit_breaker_sophia.rs",
        "line": 551,
        "fields": [
          [
            "components",
            "DashMap<String"
          ],
          [
            "config",
            "Arc<CircuitConfig>"
          ],
          [
            "clock",
            "Arc<dyn Clock>"
          ],
          [
            "event_sender",
            "Option<mpsc::Sender<CircuitEvent>>"
          ],
          [
            "global_state",
            "CachePadded<AtomicU8>"
          ],
          [
            "last_global_evaluation",
            "CachePadded<AtomicU64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CircuitBreaker",
        "file": "crates/infrastructure/src/position_reconciliation.rs",
        "line": 33,
        "fields": [
          [
            "name",
            "String"
          ],
          [
            "failure_count",
            "Arc<Mutex<u32>>"
          ],
          [
            "max_failures",
            "u32"
          ],
          [
            "tripped",
            "Arc<Mutex<bool>>"
          ],
          [
            "reset_timeout",
            "Duration"
          ],
          [
            "last_failure",
            "Arc<Mutex<Option<SystemTime>>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Position",
        "file": "crates/infrastructure/src/position_reconciliation.rs",
        "line": 77,
        "fields": [
          [
            "exchange",
            "String"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "side",
            "PositionSide"
          ],
          [
            "size",
            "Decimal"
          ],
          [
            "entry_price",
            "Decimal"
          ],
          [
            "mark_price",
            "Option<Decimal>"
          ],
          [
            "unrealized_pnl",
            "Option<Decimal>"
          ],
          [
            "realized_pnl",
            "Decimal"
          ],
          [
            "margin",
            "Decimal"
          ],
          [
            "leverage",
            "Decimal"
          ],
          [
            "liquidation_price",
            "Option<Decimal>"
          ],
          [
            "exchange_position_id",
            "String"
          ],
          [
            "last_updated",
            "DateTime<Utc>"
          ],
          [
            "status",
            "PositionStatus"
          ],
          [
            "open_orders",
            "Vec<String>"
          ],
          [
            "risk_metrics",
            "RiskMetrics"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RiskMetrics",
        "file": "crates/infrastructure/src/position_reconciliation.rs",
        "line": 144,
        "fields": [
          [
            "var_95",
            "Decimal"
          ],
          [
            "max_loss",
            "Decimal"
          ],
          [
            "liquidation_distance",
            "Decimal"
          ],
          [
            "portfolio_weight",
            "Decimal"
          ],
          [
            "correlation_score",
            "Decimal"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ReconciliationReport",
        "file": "crates/infrastructure/src/position_reconciliation.rs",
        "line": 168,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "exchange_positions",
            "HashMap<String"
          ],
          [
            "internal_positions",
            "HashMap<String"
          ],
          [
            "discrepancies",
            "Vec<Discrepancy>"
          ],
          [
            "status",
            "ReconciliationStatus"
          ],
          [
            "total_exchange_exposure",
            "Decimal"
          ],
          [
            "total_internal_exposure",
            "Decimal"
          ],
          [
            "risk_assessment",
            "RiskAssessment"
          ],
          [
            "recommended_actions",
            "Vec<RecommendedAction>"
          ],
          [
            "integrity_hash",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RiskAssessment",
        "file": "crates/infrastructure/src/position_reconciliation.rs",
        "line": 280,
        "fields": [
          [
            "risk_level",
            "RiskLevel"
          ],
          [
            "exposure_discrepancy_pct",
            "Decimal"
          ],
          [
            "critical_count",
            "usize"
          ],
          [
            "potential_loss",
            "Decimal"
          ],
          [
            "margin_at_risk",
            "Decimal"
          ],
          [
            "recommended_mode",
            "ControlMode"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Order",
        "file": "crates/infrastructure/src/position_reconciliation.rs",
        "line": 369,
        "fields": [
          [
            "id",
            "String"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "side",
            "OrderSide"
          ],
          [
            "order_type",
            "OrderType"
          ],
          [
            "size",
            "Decimal"
          ],
          [
            "price",
            "Option<Decimal>"
          ],
          [
            "status",
            "OrderStatus"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PositionReconciliationEngine",
        "file": "crates/infrastructure/src/position_reconciliation.rs",
        "line": 408,
        "fields": [
          [
            "exchanges",
            "HashMap<String"
          ],
          [
            "internal_state",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "persistence",
            "Arc<ModePersistenceManager>"
          ],
          [
            "config",
            "ReconciliationConfig"
          ],
          [
            "circuit_breaker",
            "CircuitBreaker"
          ],
          [
            "event_tx",
            "broadcast::Sender<ReconciliationEvent>"
          ],
          [
            "last_report",
            "Arc<RwLock<Option<ReconciliationReport>>>"
          ],
          [
            "history",
            "Arc<RwLock<Vec<ReconciliationReport>>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ReconciliationConfig",
        "file": "crates/infrastructure/src/position_reconciliation.rs",
        "line": 436,
        "fields": [
          [
            "size_tolerance_pct",
            "Decimal"
          ],
          [
            "price_tolerance_pct",
            "Decimal"
          ],
          [
            "emergency_threshold_pct",
            "Decimal"
          ],
          [
            "downgrade_threshold_pct",
            "Decimal"
          ],
          [
            "max_retries",
            "u32"
          ],
          [
            "query_timeout",
            "Duration"
          ],
          [
            "auto_correction_enabled",
            "bool"
          ],
          [
            "max_auto_correction_size",
            "Decimal"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ReconciliationScheduler",
        "file": "crates/infrastructure/src/position_reconciliation.rs",
        "line": 1020,
        "fields": [
          [
            "engine",
            "Arc<PositionReconciliationEngine>"
          ],
          [
            "interval",
            "Duration"
          ],
          [
            "running",
            "Arc<Mutex<bool>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ServiceHealth",
        "file": "crates/infrastructure/src/network_partition_handler.rs",
        "line": 73,
        "fields": [
          [
            "name",
            "String"
          ],
          [
            "service_type",
            "ServiceType"
          ],
          [
            "criticality",
            "ServiceCriticality"
          ],
          [
            "is_healthy",
            "bool"
          ],
          [
            "last_success",
            "Option<SystemTime>"
          ],
          [
            "last_failure",
            "Option<SystemTime>"
          ],
          [
            "failure_count",
            "u32"
          ],
          [
            "avg_latency_ms",
            "f64"
          ],
          [
            "p99_latency_ms",
            "f64"
          ],
          [
            "circuit_state",
            "CircuitState"
          ],
          [
            "health_score",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FailoverStrategy",
        "file": "crates/infrastructure/src/network_partition_handler.rs",
        "line": 121,
        "fields": [
          [
            "primary",
            "String"
          ],
          [
            "fallbacks",
            "Vec<String>"
          ],
          [
            "active",
            "String"
          ],
          [
            "payoff_matrix",
            "HashMap<String"
          ],
          [
            "min_payoff_threshold",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PartitionStatus",
        "file": "crates/infrastructure/src/network_partition_handler.rs",
        "line": 140,
        "fields": [
          [
            "health",
            "NetworkHealth"
          ],
          [
            "database_accessible",
            "bool"
          ],
          [
            "exchanges_accessible",
            "usize"
          ],
          [
            "total_exchanges",
            "usize"
          ],
          [
            "cache_accessible",
            "bool"
          ],
          [
            "trading_possible",
            "bool"
          ],
          [
            "should_degrade",
            "bool"
          ],
          [
            "risk_score",
            "f64"
          ],
          [
            "recommended_mode",
            "ControlMode"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "NetworkHealthMonitor",
        "file": "crates/infrastructure/src/network_partition_handler.rs",
        "line": 173,
        "fields": [
          [
            "services",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "circuit_breakers",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "failover_strategies",
            "Arc<RwLock<HashMap<ServiceType"
          ],
          [
            "partition_status",
            "Arc<RwLock<PartitionStatus>>"
          ],
          [
            "control_mode_manager",
            "Arc<ControlModeManager>"
          ],
          [
            "position_reconciliation",
            "Arc<PositionReconciliationEngine>"
          ],
          [
            "mode_persistence",
            "Arc<ModePersistenceManager>"
          ],
          [
            "health_check_interval",
            "Duration"
          ],
          [
            "latency_tracker",
            "Arc<RwLock<LatencyTracker>>"
          ],
          [
            "event_tx",
            "broadcast::Sender<NetworkEvent>"
          ],
          [
            "shutdown_tx",
            "Option<oneshot::Sender<()>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "LatencyTracker",
        "file": "crates/infrastructure/src/network_partition_handler.rs",
        "line": 764,
        "fields": [
          [
            "check_latencies",
            "VecDeque<Duration>"
          ],
          [
            "max_samples",
            "usize"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ToxicitySignals",
        "file": "crates/infrastructure/src/circuit_breaker_integration.rs",
        "line": 30,
        "fields": [
          [
            "ofi",
            "f64"
          ],
          [
            "vpin",
            "f64"
          ],
          [
            "spread_bps",
            "f64"
          ],
          [
            "quote_age_ms",
            "u64"
          ],
          [
            "error_rate",
            "f64"
          ],
          [
            "price_divergence_pct",
            "f64"
          ],
          [
            "latency_p99_ms",
            "u64"
          ],
          [
            "memory_usage_pct",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CircuitBreakerHub",
        "file": "crates/infrastructure/src/circuit_breaker_integration.rs",
        "line": 133,
        "fields": [
          [
            "breakers",
            "Arc<DashMap<String"
          ],
          [
            "risk_breakers",
            "Arc<RiskCircuitBreakers>"
          ],
          [
            "toxicity_monitor",
            "Arc<ToxicityMonitor>"
          ],
          [
            "emergency",
            "Arc<EmergencyCoordinator>"
          ],
          [
            "global_trip",
            "Arc<AtomicBool>"
          ],
          [
            "stats",
            "Arc<CircuitBreakerStats>"
          ],
          [
            "event_tx",
            "broadcast::Sender<CircuitBreakerEvent>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RiskCircuitBreakers",
        "file": "crates/infrastructure/src/circuit_breaker_integration.rs",
        "line": 158,
        "fields": [
          [
            "var_breaker",
            "Arc<ComponentBreaker>"
          ],
          [
            "kelly_breaker",
            "Arc<ComponentBreaker>"
          ],
          [
            "correlation_breaker",
            "Arc<ComponentBreaker>"
          ],
          [
            "monte_carlo_breaker",
            "Arc<ComponentBreaker>"
          ],
          [
            "position_breaker",
            "Arc<ComponentBreaker>"
          ],
          [
            "stop_loss_breaker",
            "Arc<ComponentBreaker>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ToxicityMonitor",
        "file": "crates/infrastructure/src/circuit_breaker_integration.rs",
        "line": 252,
        "fields": [
          [
            "current_signals",
            "Arc<RwLock<ToxicitySignals>>"
          ],
          [
            "history",
            "Arc<RwLock<Vec<(Instant"
          ],
          [
            "thresholds",
            "ToxicityThresholds"
          ],
          [
            "trips",
            "Arc<AtomicU64>"
          ],
          [
            "last_trip",
            "Arc<RwLock<Option<Instant>>>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ToxicityThresholds",
        "file": "crates/infrastructure/src/circuit_breaker_integration.rs",
        "line": 272,
        "fields": [
          [
            "ofi_critical",
            "f64"
          ],
          [
            "ofi_warning",
            "f64"
          ],
          [
            "vpin_critical",
            "f64"
          ],
          [
            "vpin_warning",
            "f64"
          ],
          [
            "spread_critical_bps",
            "f64"
          ],
          [
            "spread_warning_bps",
            "f64"
          ],
          [
            "staleness_critical_ms",
            "u64"
          ],
          [
            "staleness_warning_ms",
            "u64"
          ],
          [
            "error_rate_critical",
            "f64"
          ],
          [
            "error_rate_warning",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "CircuitBreakerStats",
        "file": "crates/infrastructure/src/circuit_breaker_integration.rs",
        "line": 616,
        "fields": [
          [
            "risk_successes",
            "Arc<DashMap<RiskCalculationType"
          ],
          [
            "risk_failures",
            "Arc<DashMap<RiskCalculationType"
          ],
          [
            "risk_rejections",
            "Arc<DashMap<RiskCalculationType"
          ],
          [
            "toxicity_trips",
            "AtomicU64"
          ],
          [
            "spread_halts",
            "AtomicU64"
          ],
          [
            "api_cascades",
            "AtomicU64"
          ],
          [
            "emergency_triggers",
            "AtomicU64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "CircuitBreakerStatsSnapshot",
        "file": "crates/infrastructure/src/circuit_breaker_integration.rs",
        "line": 684,
        "fields": [
          [
            "toxicity_trips",
            "u64"
          ],
          [
            "spread_halts",
            "u64"
          ],
          [
            "api_cascades",
            "u64"
          ],
          [
            "emergency_triggers",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ToxicityGateTripped",
        "file": "crates/infrastructure/src/circuit_breaker_integration.rs",
        "line": 729,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "SpreadExplosionDetected",
        "file": "crates/infrastructure/src/circuit_breaker_integration.rs",
        "line": 733,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "CpuFeatures",
        "file": "crates/infrastructure/src/cpu_features.rs",
        "line": 44,
        "fields": [
          [
            "has_sse",
            "bool"
          ],
          [
            "has_sse2",
            "bool"
          ],
          [
            "has_sse3",
            "bool"
          ],
          [
            "has_ssse3",
            "bool"
          ],
          [
            "has_sse41",
            "bool"
          ],
          [
            "has_sse42",
            "bool"
          ],
          [
            "has_avx",
            "bool"
          ],
          [
            "has_avx2",
            "bool"
          ],
          [
            "has_fma",
            "bool"
          ],
          [
            "has_avx512f",
            "bool"
          ],
          [
            "has_avx512cd",
            "bool"
          ],
          [
            "has_avx512bw",
            "bool"
          ],
          [
            "has_avx512dq",
            "bool"
          ],
          [
            "has_avx512vl",
            "bool"
          ],
          [
            "has_avx512_vbmi",
            "bool"
          ],
          [
            "has_avx512_vnni",
            "bool"
          ],
          [
            "l1_cache_size",
            "usize"
          ],
          [
            "l2_cache_size",
            "usize"
          ],
          [
            "l3_cache_size",
            "usize"
          ],
          [
            "cache_line_size",
            "usize"
          ],
          [
            "cpu_brand",
            "String"
          ],
          [
            "physical_cores",
            "usize"
          ],
          [
            "logical_cores",
            "usize"
          ],
          [
            "optimal_strategy",
            "SimdStrategy"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SimdPerformanceMonitor",
        "file": "crates/infrastructure/src/cpu_features.rs",
        "line": 306,
        "fields": [
          [
            "scalar_calls",
            "u64"
          ],
          [
            "sse2_calls",
            "u64"
          ],
          [
            "sse42_calls",
            "u64"
          ],
          [
            "avx2_calls",
            "u64"
          ],
          [
            "avx512_calls",
            "u64"
          ],
          [
            "scalar_total_ns",
            "u64"
          ],
          [
            "sse2_total_ns",
            "u64"
          ],
          [
            "sse42_total_ns",
            "u64"
          ],
          [
            "avx2_total_ns",
            "u64"
          ],
          [
            "avx512_total_ns",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "EmaCalculator",
        "file": "crates/infrastructure/src/simd_ops.rs",
        "line": 19,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "SmaCalculator",
        "file": "crates/infrastructure/src/simd_ops.rs",
        "line": 197,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "PortfolioRiskCalculator",
        "file": "crates/infrastructure/src/simd_ops.rs",
        "line": 377,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "SimdBenchmark",
        "file": "crates/infrastructure/src/simd_avx512.rs",
        "line": 303,
        "fields": [
          [
            "name",
            "&'static str"
          ],
          [
            "scalar_ns",
            "u64"
          ],
          [
            "avx512_ns",
            "u64"
          ],
          [
            "speedup",
            "f32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CircuitConfig",
        "file": "crates/infrastructure/src/circuit_breaker.rs",
        "line": 35,
        "fields": [
          [
            "rolling_window",
            "Duration"
          ],
          [
            "min_calls",
            "u32"
          ],
          [
            "error_rate_threshold",
            "f32"
          ],
          [
            "consecutive_failures_threshold",
            "u32"
          ],
          [
            "open_cooldown",
            "Duration"
          ],
          [
            "half_open_max_concurrent",
            "u32"
          ],
          [
            "half_open_required_successes",
            "u32"
          ],
          [
            "half_open_allowed_failures",
            "u32"
          ],
          [
            "global_trip_conditions",
            "GlobalTripConditions"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "GlobalTripConditions",
        "file": "crates/infrastructure/src/circuit_breaker.rs",
        "line": 55,
        "fields": [
          [
            "component_open_ratio",
            "f32"
          ],
          [
            "min_components",
            "u32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SystemClock",
        "file": "crates/infrastructure/src/circuit_breaker.rs",
        "line": 98,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "FakeClock",
        "file": "crates/infrastructure/src/circuit_breaker.rs",
        "line": 108,
        "fields": [
          [
            "current",
            "std::sync::Mutex<Instant>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CallGuard",
        "file": "crates/infrastructure/src/circuit_breaker.rs",
        "line": 163,
        "fields": [
          [
            "breaker",
            "Arc<ComponentBreaker>"
          ],
          [
            "_component",
            "String"
          ],
          [
            "_start",
            "Instant"
          ],
          [
            "completed",
            "bool"
          ],
          [
            "is_half_open",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ComponentBreaker",
        "file": "crates/infrastructure/src/circuit_breaker.rs",
        "line": 212,
        "fields": [
          [
            "state",
            "CachePadded<AtomicU8>"
          ],
          [
            "total_calls",
            "CachePadded<AtomicU64>"
          ],
          [
            "error_calls",
            "CachePadded<AtomicU64>"
          ],
          [
            "consecutive_failures",
            "CachePadded<AtomicU32>"
          ],
          [
            "half_open_tokens",
            "CachePadded<AtomicU32>"
          ],
          [
            "half_open_successes",
            "CachePadded<AtomicU32>"
          ],
          [
            "half_open_failures",
            "CachePadded<AtomicU32>"
          ],
          [
            "last_failure_time",
            "CachePadded<AtomicU64>"
          ],
          [
            "last_transition",
            "CachePadded<AtomicU64>"
          ],
          [
            "clock",
            "Arc<dyn Clock>"
          ],
          [
            "config",
            "Arc<CircuitConfig>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "GlobalCircuitBreaker",
        "file": "crates/infrastructure/src/circuit_breaker.rs",
        "line": 429,
        "fields": [
          [
            "breakers",
            "Arc<DashMap<String"
          ],
          [
            "config",
            "ArcSwap<CircuitConfig>"
          ],
          [
            "clock",
            "Arc<dyn Clock>"
          ],
          [
            "global_state",
            "AtomicU8"
          ],
          [
            "global_trip_time",
            "AtomicU64"
          ],
          [
            "on_event",
            "Option<Arc<dyn Fn(CircuitEvent) + Send + Sync>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CircuitMetrics",
        "file": "crates/infrastructure/src/circuit_breaker.rs",
        "line": 653,
        "fields": [
          [
            "closed_count",
            "usize"
          ],
          [
            "open_count",
            "usize"
          ],
          [
            "half_open_count",
            "usize"
          ],
          [
            "total_calls",
            "u64"
          ],
          [
            "error_calls",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ParallelTradingEngine",
        "file": "crates/infrastructure/src/rayon_enhanced.rs",
        "line": 27,
        "fields": [
          [
            "trading_pool",
            "Arc<ThreadPool>"
          ],
          [
            "ml_pool",
            "Arc<ThreadPool>"
          ],
          [
            "risk_pool",
            "Arc<ThreadPool>"
          ],
          [
            "metrics",
            "Arc<EngineMetrics>"
          ],
          [
            "sharding",
            "Arc<InstrumentSharding>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "EngineMetrics",
        "file": "crates/infrastructure/src/rayon_enhanced.rs",
        "line": 273,
        "fields": [
          [
            "total_ops",
            "Arc<CachePadded<AtomicU64>>"
          ],
          [
            "total_time_us",
            "Arc<CachePadded<AtomicU64>>"
          ],
          [
            "peak_throughput",
            "Arc<CachePadded<AtomicU64>>"
          ],
          [
            "ml_inference_count",
            "Arc<CachePadded<AtomicU64>>"
          ],
          [
            "ml_total_time_us",
            "Arc<CachePadded<AtomicU64>>"
          ],
          [
            "orders_processed",
            "Arc<CachePadded<AtomicU64>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "InstrumentSharding",
        "file": "crates/infrastructure/src/rayon_enhanced.rs",
        "line": 355,
        "fields": [
          [
            "num_shards",
            "usize"
          ],
          [
            "instrument_map",
            "DashMap<String"
          ],
          [
            "next_shard",
            "CachePadded<AtomicUsize>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ParallelPipeline",
        "file": "crates/infrastructure/src/rayon_enhanced.rs",
        "line": 407,
        "fields": [
          [
            "T",
            "Send + Sync> {\n    stages: Vec<Box<dyn PipelineStage<T>>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PanicThresholds",
        "file": "crates/infrastructure/src/panic_conditions.rs",
        "line": 34,
        "fields": [
          [
            "Capital",
            "4x normal)\n    pub slippage_multiplier: f64"
          ],
          [
            "Default",
            "3.0x\n    \n    /// Quote staleness in milliseconds (Flash crash: 2000ms gaps)\n    pub quote_staleness_ms: u64"
          ],
          [
            "Default",
            "500ms\n    \n    /// Spread blow-out multiplier (May 6: 10x normal spreads)\n    pub spread_blowout_multiplier: f64"
          ],
          [
            "Default",
            "3.0x\n    \n    /// API error rate threshold (Knight: 90% errors)\n    pub api_error_rate: f64"
          ],
          [
            "Default",
            "0.3 (30%)\n    \n    /// Cross-exchange divergence % (Arbitrage limit)\n    pub price_divergence_pct: f64"
          ],
          [
            "Default",
            "2.0%\n    \n    /// Volume spike multiplier (Flash crash: 20x volume)\n    pub volume_spike_multiplier: f64"
          ],
          [
            "Default",
            "10.0x\n    \n    /// Order book imbalance threshold (VPIN indicator)\n    pub order_imbalance_ratio: f64"
          ],
          [
            "Default",
            "0.8\n    \n    /// Message rate per second (Quote stuffing detection)\n    pub max_message_rate: u64"
          ],
          [
            "Default",
            "10"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SlippageDetector",
        "file": "crates/infrastructure/src/panic_conditions.rs",
        "line": 82,
        "fields": [
          [
            "expected_model",
            "Arc<RwLock<SlippageModel>>"
          ],
          [
            "recent_executions",
            "Arc<RwLock<VecDeque<ExecutionRecord>>>"
          ],
          [
            "stats",
            "Arc<RwLock<SlippageStats>>"
          ],
          [
            "threshold",
            "f64"
          ],
          [
            "alerts_triggered",
            "Arc<AtomicU64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SlippageModel",
        "file": "crates/infrastructure/src/panic_conditions.rs",
        "line": 100,
        "fields": [
          [
            "base_slippage_bps",
            "f64"
          ],
          [
            "impact_coefficient",
            "f64"
          ],
          [
            "volatility_factor",
            "f64"
          ],
          [
            "time_factors",
            "HashMap<u8"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ExecutionRecord",
        "file": "crates/infrastructure/src/panic_conditions.rs",
        "line": 128,
        "fields": [
          [
            "timestamp",
            "Instant"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "side",
            "OrderSide"
          ],
          [
            "size",
            "f64"
          ],
          [
            "expected_price",
            "f64"
          ],
          [
            "executed_price",
            "f64"
          ],
          [
            "slippage_bps",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "SlippageStats",
        "file": "crates/infrastructure/src/panic_conditions.rs",
        "line": 145,
        "fields": [
          [
            "mean_slippage",
            "f64"
          ],
          [
            "std_deviation",
            "f64"
          ],
          [
            "max_slippage",
            "f64"
          ],
          [
            "samples",
            "usize"
          ],
          [
            "last_update",
            "Instant"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "QuoteStalenessMonitor",
        "file": "crates/infrastructure/src/panic_conditions.rs",
        "line": 290,
        "fields": [
          [
            "last_quotes",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "threshold_ms",
            "u64"
          ],
          [
            "stale_symbols",
            "Arc<RwLock<Vec<String>>>"
          ],
          [
            "staleness_alerts",
            "Arc<AtomicU64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SpreadMonitor",
        "file": "crates/infrastructure/src/panic_conditions.rs",
        "line": 363,
        "fields": [
          [
            "normal_spreads",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "recent_spreads",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "threshold_multiplier",
            "f64"
          ],
          [
            "spread_alerts",
            "Arc<AtomicU64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SpreadStats",
        "file": "crates/infrastructure/src/panic_conditions.rs",
        "line": 378,
        "fields": [
          [
            "mean_bps",
            "f64"
          ],
          [
            "std_bps",
            "f64"
          ],
          [
            "median_bps",
            "f64"
          ],
          [
            "percentile_95",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "SpreadObservation",
        "file": "crates/infrastructure/src/panic_conditions.rs",
        "line": 386,
        "fields": [
          [
            "timestamp",
            "Instant"
          ],
          [
            "bid",
            "f64"
          ],
          [
            "ask",
            "f64"
          ],
          [
            "spread_bps",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "APICascadeDetector",
        "file": "crates/infrastructure/src/panic_conditions.rs",
        "line": 494,
        "fields": [
          [
            "error_counts",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "threshold_rate",
            "f64"
          ],
          [
            "cascade_active",
            "Arc<AtomicBool>"
          ],
          [
            "cascade_alerts",
            "Arc<AtomicU64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ErrorStats",
        "file": "crates/infrastructure/src/panic_conditions.rs",
        "line": 509,
        "fields": [
          [
            "total_requests",
            "u64"
          ],
          [
            "failed_requests",
            "u64"
          ],
          [
            "window_start",
            "Instant"
          ],
          [
            "error_rate",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "PriceDivergenceMonitor",
        "file": "crates/infrastructure/src/panic_conditions.rs",
        "line": 614,
        "fields": [
          [
            "prices",
            "Arc<RwLock<HashMap<(String"
          ],
          [
            "threshold_pct",
            "f64"
          ],
          [
            "divergence_alerts",
            "Arc<AtomicU64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PricePoint",
        "file": "crates/infrastructure/src/panic_conditions.rs",
        "line": 626,
        "fields": [
          [
            "price",
            "f64"
          ],
          [
            "timestamp",
            "Instant"
          ],
          [
            "volume",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "PanicDetector",
        "file": "crates/infrastructure/src/panic_conditions.rs",
        "line": 721,
        "fields": [
          [
            "thresholds",
            "PanicThresholds"
          ],
          [
            "slippage_detector",
            "Arc<SlippageDetector>"
          ],
          [
            "staleness_monitor",
            "Arc<QuoteStalenessMonitor>"
          ],
          [
            "spread_monitor",
            "Arc<SpreadMonitor>"
          ],
          [
            "cascade_detector",
            "Arc<APICascadeDetector>"
          ],
          [
            "divergence_monitor",
            "Arc<PriceDivergenceMonitor>"
          ],
          [
            "circuit_breakers",
            "Arc<CircuitBreakerHub>"
          ],
          [
            "control_modes",
            "Arc<ControlModeManager>"
          ],
          [
            "kill_switch",
            "Arc<HardwareKillSwitch>"
          ],
          [
            "panic_active",
            "Arc<AtomicBool>"
          ],
          [
            "panic_count",
            "Arc<AtomicU64>"
          ],
          [
            "event_tx",
            "broadcast::Sender<PanicEvent>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PanicCondition",
        "file": "crates/infrastructure/src/panic_conditions.rs",
        "line": 757,
        "fields": [
          [
            "timestamp",
            "Instant"
          ],
          [
            "triggers",
            "Vec<String>"
          ],
          [
            "severity",
            "AlertSeverity"
          ],
          [
            "action_taken",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SlippageAlert",
        "file": "crates/infrastructure/src/panic_conditions.rs",
        "line": 969,
        "fields": [
          [
            "symbol",
            "String"
          ],
          [
            "actual_bps",
            "f64"
          ],
          [
            "expected_bps",
            "f64"
          ],
          [
            "multiplier",
            "f64"
          ],
          [
            "severity",
            "AlertSeverity"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "StalenessAlert",
        "file": "crates/infrastructure/src/panic_conditions.rs",
        "line": 978,
        "fields": [
          [
            "symbol",
            "String"
          ],
          [
            "age_ms",
            "u64"
          ],
          [
            "threshold_ms",
            "u64"
          ],
          [
            "severity",
            "AlertSeverity"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SpreadAlert",
        "file": "crates/infrastructure/src/panic_conditions.rs",
        "line": 986,
        "fields": [
          [
            "symbol",
            "String"
          ],
          [
            "current_bps",
            "f64"
          ],
          [
            "normal_bps",
            "f64"
          ],
          [
            "multiplier",
            "f64"
          ],
          [
            "severity",
            "AlertSeverity"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CascadeAlert",
        "file": "crates/infrastructure/src/panic_conditions.rs",
        "line": 995,
        "fields": [
          [
            "failing_exchanges",
            "Vec<String>"
          ],
          [
            "average_error_rate",
            "f64"
          ],
          [
            "severity",
            "AlertSeverity"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DivergenceAlert",
        "file": "crates/infrastructure/src/panic_conditions.rs",
        "line": 1002,
        "fields": [
          [
            "symbol",
            "String"
          ],
          [
            "max_divergence_pct",
            "f64"
          ],
          [
            "divergent_exchanges",
            "Vec<(String"
          ],
          [
            "weighted_average",
            "f64"
          ],
          [
            "severity",
            "AlertSeverity"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Alert",
        "file": "crates/infrastructure/src/alert_management.rs",
        "line": 137,
        "fields": [
          [
            "id",
            "String"
          ],
          [
            "timestamp",
            "u64"
          ],
          [
            "severity",
            "AlertSeverity"
          ],
          [
            "category",
            "AlertCategory"
          ],
          [
            "source",
            "String"
          ],
          [
            "title",
            "String"
          ],
          [
            "message",
            "String"
          ],
          [
            "details",
            "HashMap<String"
          ],
          [
            "affected_entities",
            "Vec<String>"
          ],
          [
            "suggested_actions",
            "Vec<String>"
          ],
          [
            "auto_resolve",
            "bool"
          ],
          [
            "ttl_seconds",
            "Option<u64>"
          ],
          [
            "correlation_id",
            "Option<String>"
          ],
          [
            "parent_alert_id",
            "Option<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "AlertBuilder",
        "file": "crates/infrastructure/src/alert_management.rs",
        "line": 185,
        "fields": [
          [
            "id",
            "Option<String>"
          ],
          [
            "severity",
            "AlertSeverity"
          ],
          [
            "category",
            "AlertCategory"
          ],
          [
            "source",
            "String"
          ],
          [
            "title",
            "String"
          ],
          [
            "message",
            "String"
          ],
          [
            "details",
            "HashMap<String"
          ],
          [
            "affected_entities",
            "Vec<String>"
          ],
          [
            "suggested_actions",
            "Vec<String>"
          ],
          [
            "auto_resolve",
            "bool"
          ],
          [
            "ttl_seconds",
            "Option<u64>"
          ],
          [
            "correlation_id",
            "Option<String>"
          ],
          [
            "parent_alert_id",
            "Option<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "AlertRule",
        "file": "crates/infrastructure/src/alert_management.rs",
        "line": 309,
        "fields": [
          [
            "id",
            "String"
          ],
          [
            "name",
            "String"
          ],
          [
            "description",
            "String"
          ],
          [
            "enabled",
            "bool"
          ],
          [
            "condition",
            "AlertCondition"
          ],
          [
            "severity",
            "AlertSeverity"
          ],
          [
            "category",
            "AlertCategory"
          ],
          [
            "cooldown_seconds",
            "u64"
          ],
          [
            "auto_resolve_condition",
            "Option<AlertCondition>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PriorityAlert",
        "file": "crates/infrastructure/src/alert_management.rs",
        "line": 414,
        "fields": [
          [
            "alert",
            "Alert"
          ],
          [
            "priority",
            "i64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "AlertManager",
        "file": "crates/infrastructure/src/alert_management.rs",
        "line": 445,
        "fields": [
          [
            "active_alerts",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "priority_queue",
            "Arc<RwLock<BinaryHeap<PriorityAlert>>>"
          ],
          [
            "history",
            "Arc<RwLock<VecDeque<Alert>>>"
          ],
          [
            "rules",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "rule_cooldowns",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "dedup_cache",
            "Arc<RwLock<HashSet<String>>>"
          ],
          [
            "alert_tx",
            "broadcast::Sender<Alert>"
          ],
          [
            "total_alerts",
            "Arc<AtomicU64>"
          ],
          [
            "critical_alerts",
            "Arc<AtomicU64>"
          ],
          [
            "auto_resolved",
            "Arc<AtomicU64>"
          ],
          [
            "max_history_size",
            "usize"
          ],
          [
            "dedup_window_seconds",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "AlertStatistics",
        "file": "crates/infrastructure/src/alert_management.rs",
        "line": 689,
        "fields": [
          [
            "total_alerts",
            "u64"
          ],
          [
            "active_alerts",
            "u64"
          ],
          [
            "critical_alerts",
            "u64"
          ],
          [
            "auto_resolved",
            "u64"
          ],
          [
            "by_severity",
            "HashMap<AlertSeverity"
          ],
          [
            "by_category",
            "HashMap<AlertCategory"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "AlertAggregator",
        "file": "crates/infrastructure/src/alert_management.rs",
        "line": 704,
        "fields": [
          [
            "manager",
            "Arc<AlertManager>"
          ],
          [
            "correlation_window",
            "Duration"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Order",
        "file": "crates/infrastructure/src/object_pools.rs",
        "line": 18,
        "fields": [
          [
            "id",
            "u64"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "side",
            "OrderSide"
          ],
          [
            "quantity",
            "Decimal"
          ],
          [
            "price",
            "Decimal"
          ],
          [
            "order_type",
            "OrderType"
          ],
          [
            "timestamp",
            "i64"
          ],
          [
            "exchange",
            "String"
          ],
          [
            "status",
            "OrderStatus"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Signal",
        "file": "crates/infrastructure/src/object_pools.rs",
        "line": 59,
        "fields": [
          [
            "symbol",
            "String"
          ],
          [
            "strength",
            "f64"
          ],
          [
            "signal_type",
            "SignalType"
          ],
          [
            "confidence",
            "f64"
          ],
          [
            "timestamp",
            "i64"
          ],
          [
            "features",
            "Vec<f64>"
          ],
          [
            "metadata",
            "HashMap<String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketData",
        "file": "crates/infrastructure/src/object_pools.rs",
        "line": 79,
        "fields": [
          [
            "symbol",
            "String"
          ],
          [
            "bid",
            "Decimal"
          ],
          [
            "ask",
            "Decimal"
          ],
          [
            "last",
            "Decimal"
          ],
          [
            "volume",
            "Decimal"
          ],
          [
            "timestamp",
            "i64"
          ],
          [
            "exchange",
            "String"
          ],
          [
            "bid_size",
            "Decimal"
          ],
          [
            "ask_size",
            "Decimal"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Position",
        "file": "crates/infrastructure/src/object_pools.rs",
        "line": 92,
        "fields": [
          [
            "symbol",
            "String"
          ],
          [
            "quantity",
            "Decimal"
          ],
          [
            "entry_price",
            "Decimal"
          ],
          [
            "current_price",
            "Decimal"
          ],
          [
            "unrealized_pnl",
            "Decimal"
          ],
          [
            "realized_pnl",
            "Decimal"
          ],
          [
            "opened_at",
            "i64"
          ],
          [
            "last_updated",
            "i64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RiskCheck",
        "file": "crates/infrastructure/src/object_pools.rs",
        "line": 104,
        "fields": [
          [
            "order_id",
            "u64"
          ],
          [
            "passed",
            "bool"
          ],
          [
            "checks_performed",
            "Vec<String>"
          ],
          [
            "violations",
            "Vec<String>"
          ],
          [
            "risk_score",
            "f64"
          ],
          [
            "timestamp",
            "i64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ExecutionReport",
        "file": "crates/infrastructure/src/object_pools.rs",
        "line": 114,
        "fields": [
          [
            "order_id",
            "u64"
          ],
          [
            "exec_id",
            "String"
          ],
          [
            "filled_quantity",
            "Decimal"
          ],
          [
            "filled_price",
            "Decimal"
          ],
          [
            "fees",
            "Decimal"
          ],
          [
            "timestamp",
            "i64"
          ],
          [
            "exchange",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Feature",
        "file": "crates/infrastructure/src/object_pools.rs",
        "line": 125,
        "fields": [
          [
            "name",
            "String"
          ],
          [
            "values",
            "Vec<f64>"
          ],
          [
            "computed_at",
            "i64"
          ],
          [
            "window_size",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MLInference",
        "file": "crates/infrastructure/src/object_pools.rs",
        "line": 133,
        "fields": [
          [
            "model_id",
            "String"
          ],
          [
            "predictions",
            "Vec<f64>"
          ],
          [
            "probabilities",
            "Vec<f64>"
          ],
          [
            "features_used",
            "Vec<String>"
          ],
          [
            "latency_us",
            "u64"
          ],
          [
            "timestamp",
            "i64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PoolRegistry",
        "file": "crates/infrastructure/src/object_pools.rs",
        "line": 166,
        "fields": [
          [
            "orders",
            "Arc<ObjectPool<Order>>"
          ],
          [
            "signals",
            "Arc<ObjectPool<Signal>>"
          ],
          [
            "market_data",
            "Arc<ObjectPool<MarketData>>"
          ],
          [
            "positions",
            "Arc<ObjectPool<Position>>"
          ],
          [
            "risk_checks",
            "Arc<ObjectPool<RiskCheck>>"
          ],
          [
            "executions",
            "Arc<ObjectPool<ExecutionReport>>"
          ],
          [
            "features",
            "Arc<ObjectPool<Feature>>"
          ],
          [
            "ml_inferences",
            "Arc<ObjectPool<MLInference>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "GlobalPoolStats",
        "file": "crates/infrastructure/src/object_pools.rs",
        "line": 229,
        "fields": [
          [
            "orders",
            "crate::zero_copy::PoolStats"
          ],
          [
            "signals",
            "crate::zero_copy::PoolStats"
          ],
          [
            "market_data",
            "crate::zero_copy::PoolStats"
          ],
          [
            "positions",
            "crate::zero_copy::PoolStats"
          ],
          [
            "risk_checks",
            "crate::zero_copy::PoolStats"
          ],
          [
            "executions",
            "crate::zero_copy::PoolStats"
          ],
          [
            "features",
            "crate::zero_copy::PoolStats"
          ],
          [
            "ml_inferences",
            "crate::zero_copy::PoolStats"
          ],
          [
            "total_objects",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ModeTransition",
        "file": "crates/infrastructure/src/mode_persistence.rs",
        "line": 29,
        "fields": [
          [
            "from",
            "ControlMode"
          ],
          [
            "to",
            "ControlMode"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "reason",
            "String"
          ],
          [
            "authorized_by",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PersistedModeState",
        "file": "crates/infrastructure/src/mode_persistence.rs",
        "line": 44,
        "fields": [
          [
            "mode",
            "ControlMode"
          ],
          [
            "last_changed",
            "DateTime<Utc>"
          ],
          [
            "reason",
            "String"
          ],
          [
            "authorized_by",
            "String"
          ],
          [
            "previous_mode",
            "Option<ControlMode>"
          ],
          [
            "recovery_info",
            "RecoveryInfo"
          ],
          [
            "state_data",
            "serde_json::Value"
          ],
          [
            "checksum",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RecoveryInfo",
        "file": "crates/infrastructure/src/mode_persistence.rs",
        "line": 72,
        "fields": [
          [
            "system_version",
            "String"
          ],
          [
            "clean_shutdown",
            "bool"
          ],
          [
            "crash_count_24h",
            "u32"
          ],
          [
            "last_crash",
            "Option<DateTime<Utc>>"
          ],
          [
            "active_positions",
            "u32"
          ],
          [
            "total_exposure",
            "f64"
          ],
          [
            "breakers_tripped",
            "Vec<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RecoveryPolicy",
        "file": "crates/infrastructure/src/mode_persistence.rs",
        "line": 98,
        "fields": [
          [
            "max_crashes_before_emergency",
            "u32"
          ],
          [
            "crash_window",
            "Duration"
          ],
          [
            "emergency_on_unclean_with_positions",
            "bool"
          ],
          [
            "downgrade_on_recovery",
            "bool"
          ],
          [
            "require_manual_after_emergency",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ModePersistenceManager",
        "file": "crates/infrastructure/src/mode_persistence.rs",
        "line": 191,
        "fields": [
          [
            "db_pool",
            "PgPool"
          ],
          [
            "current_state",
            "Arc<RwLock<Option<PersistedModeState>>>"
          ],
          [
            "recovery_policy",
            "RecoveryPolicy"
          ],
          [
            "state_notifier",
            "broadcast::Sender<PersistedModeState>"
          ],
          [
            "system_version",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PartialStateRecovery",
        "file": "crates/infrastructure/src/mode_persistence.rs",
        "line": 655,
        "fields": [
          [
            "persistence_manager",
            "Arc<ModePersistenceManager>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RiskLimits",
        "file": "crates/infrastructure/src/deployment_config.rs",
        "line": 105,
        "fields": [
          [
            "max_position_size",
            "f64"
          ],
          [
            "max_leverage",
            "f64"
          ],
          [
            "max_drawdown",
            "f64"
          ],
          [
            "require_stop_loss",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "EnvSecretProvider",
        "file": "crates/infrastructure/src/deployment_config.rs",
        "line": 130,
        "fields": [
          [
            "prefix",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "K8sSecretProvider",
        "file": "crates/infrastructure/src/deployment_config.rs",
        "line": 175,
        "fields": [
          [
            "secret_path",
            "PathBuf"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "VaultSecretProvider",
        "file": "crates/infrastructure/src/deployment_config.rs",
        "line": 221,
        "fields": [
          [
            "client",
            "reqwest::Client"
          ],
          [
            "vault_addr",
            "String"
          ],
          [
            "vault_token",
            "String"
          ],
          [
            "mount_path",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DeploymentConfig",
        "file": "crates/infrastructure/src/deployment_config.rs",
        "line": 276,
        "fields": [
          [
            "environment",
            "Environment"
          ],
          [
            "app",
            "AppConfig"
          ],
          [
            "database",
            "DatabaseConfig"
          ],
          [
            "redis",
            "RedisConfig"
          ],
          [
            "exchanges",
            "HashMap<String"
          ],
          [
            "monitoring",
            "MonitoringConfig"
          ],
          [
            "features",
            "FeatureFlags"
          ],
          [
            "resources",
            "ResourceLimits"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "AppConfig",
        "file": "crates/infrastructure/src/deployment_config.rs",
        "line": 304,
        "fields": [
          [
            "name",
            "String"
          ],
          [
            "version",
            "String"
          ],
          [
            "port",
            "u16"
          ],
          [
            "host",
            "String"
          ],
          [
            "log_level",
            "String"
          ],
          [
            "metrics_port",
            "u16"
          ],
          [
            "health_check_port",
            "u16"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DatabaseConfig",
        "file": "crates/infrastructure/src/deployment_config.rs",
        "line": 317,
        "fields": [
          [
            "host",
            "String"
          ],
          [
            "port",
            "u16"
          ],
          [
            "database",
            "String"
          ],
          [
            "username",
            "String"
          ],
          [
            "password",
            "String"
          ],
          [
            "pool_size",
            "u32"
          ],
          [
            "connection_timeout",
            "u64"
          ],
          [
            "ssl_mode",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RedisConfig",
        "file": "crates/infrastructure/src/deployment_config.rs",
        "line": 345,
        "fields": [
          [
            "host",
            "String"
          ],
          [
            "port",
            "u16"
          ],
          [
            "password",
            "Option<String>"
          ],
          [
            "database",
            "u8"
          ],
          [
            "pool_size",
            "u32"
          ],
          [
            "cluster_mode",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ExchangeConfig",
        "file": "crates/infrastructure/src/deployment_config.rs",
        "line": 368,
        "fields": [
          [
            "name",
            "String"
          ],
          [
            "api_key",
            "String"
          ],
          [
            "api_secret",
            "String"
          ],
          [
            "testnet",
            "bool"
          ],
          [
            "ws_endpoint",
            "String"
          ],
          [
            "rest_endpoint",
            "String"
          ],
          [
            "rate_limit",
            "u32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MonitoringConfig",
        "file": "crates/infrastructure/src/deployment_config.rs",
        "line": 381,
        "fields": [
          [
            "prometheus_enabled",
            "bool"
          ],
          [
            "jaeger_enabled",
            "bool"
          ],
          [
            "jaeger_endpoint",
            "String"
          ],
          [
            "log_format",
            "String"
          ],
          [
            "metrics_prefix",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FeatureFlags",
        "file": "crates/infrastructure/src/deployment_config.rs",
        "line": 392,
        "fields": [
          [
            "ml_models_enabled",
            "bool"
          ],
          [
            "auto_trading_enabled",
            "bool"
          ],
          [
            "advanced_analytics_enabled",
            "bool"
          ],
          [
            "experimental_features_enabled",
            "bool"
          ],
          [
            "paper_trading_mode",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ResourceLimits",
        "file": "crates/infrastructure/src/deployment_config.rs",
        "line": 402,
        "fields": [
          [
            "max_memory_mb",
            "u64"
          ],
          [
            "max_cpu_cores",
            "f32"
          ],
          [
            "max_disk_gb",
            "u64"
          ],
          [
            "max_connections",
            "u32"
          ],
          [
            "max_threads",
            "u32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ConfigManager",
        "file": "crates/infrastructure/src/deployment_config.rs",
        "line": 415,
        "fields": [
          [
            "config",
            "Arc<RwLock<DeploymentConfig>>"
          ],
          [
            "secret_provider",
            "Arc<dyn SecretProvider>"
          ],
          [
            "change_notifier",
            "broadcast::Sender<DeploymentConfig>"
          ],
          [
            "config_path",
            "PathBuf"
          ],
          [
            "environment",
            "Environment"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "K8sManifestGenerator",
        "file": "crates/infrastructure/src/deployment_config.rs",
        "line": 580,
        "fields": [
          [
            "config",
            "DeploymentConfig"
          ],
          [
            "namespace",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DockerComposeGenerator",
        "file": "crates/infrastructure/src/deployment_config.rs",
        "line": 763,
        "fields": [
          [
            "config",
            "DeploymentConfig"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "EmergencyCoordinator",
        "file": "crates/infrastructure/src/emergency_coordinator.rs",
        "line": 63,
        "fields": [
          [
            "state",
            "Arc<RwLock<EmergencyState>>"
          ],
          [
            "kill_switch",
            "Arc<AtomicBool>"
          ],
          [
            "components",
            "Arc<RwLock<Vec<Arc<dyn Shutdownable>>>>"
          ],
          [
            "shutdown_tx",
            "broadcast::Sender<EmergencyReason>"
          ],
          [
            "emergency_log",
            "Arc<RwLock<Vec<EmergencyEvent>>>"
          ],
          [
            "triggers_activated",
            "Arc<AtomicU64>"
          ],
          [
            "false_positives",
            "Arc<AtomicU64>"
          ],
          [
            "avg_shutdown_time_ms",
            "Arc<AtomicU64>"
          ],
          [
            "max_drawdown_pct",
            "f64"
          ],
          [
            "max_latency_ms",
            "u64"
          ],
          [
            "min_healthy_components_pct",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "EmergencyEvent",
        "file": "crates/infrastructure/src/emergency_coordinator.rs",
        "line": 94,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "reason",
            "EmergencyReason"
          ],
          [
            "state_before",
            "EmergencyState"
          ],
          [
            "state_after",
            "EmergencyState"
          ],
          [
            "details",
            "String"
          ],
          [
            "components_affected",
            "usize"
          ],
          [
            "shutdown_time_ms",
            "Option<u64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "HealthStatus",
        "file": "crates/infrastructure/src/emergency_coordinator.rs",
        "line": 384,
        "fields": [
          [
            "state",
            "EmergencyState"
          ],
          [
            "healthy_components",
            "usize"
          ],
          [
            "total_components",
            "usize"
          ],
          [
            "health_percentage",
            "f64"
          ],
          [
            "warnings",
            "Vec<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "EmergencyStatistics",
        "file": "crates/infrastructure/src/emergency_coordinator.rs",
        "line": 393,
        "fields": [
          [
            "currentstate",
            "EmergencyState"
          ],
          [
            "kill_switch_active",
            "bool"
          ],
          [
            "triggers_activated",
            "u64"
          ],
          [
            "false_positives",
            "u64"
          ],
          [
            "avg_shutdown_time_ms",
            "u64"
          ],
          [
            "registered_components",
            "usize"
          ],
          [
            "recent_events",
            "Vec<EmergencyEvent>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MockComponent",
        "file": "crates/infrastructure/src/emergency_coordinator.rs",
        "line": 412,
        "fields": [
          [
            "name",
            "String"
          ],
          [
            "healthy",
            "Arc<AtomicBool>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "TransitionRules",
        "file": "crates/infrastructure/src/software_control_modes.rs",
        "line": 106,
        "fields": [
          [
            "transitions",
            "HashMap<ControlMode"
          ],
          [
            "cooldown_periods",
            "HashMap<ControlMode"
          ],
          [
            "guard_conditions",
            "Arc<dyn GuardConditions>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DefaultGuardConditions",
        "file": "crates/infrastructure/src/software_control_modes.rs",
        "line": 168,
        "fields": [
          [
            "min_health_score",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "SystemContext",
        "file": "crates/infrastructure/src/software_control_modes.rs",
        "line": 231,
        "fields": [
          [
            "health_score",
            "f64"
          ],
          [
            "risk_engine_ready",
            "bool"
          ],
          [
            "ml_models_ready",
            "bool"
          ],
          [
            "market_volatility",
            "f64"
          ],
          [
            "emergency_cleared",
            "bool"
          ],
          [
            "open_positions",
            "usize"
          ],
          [
            "current_pnl",
            "f64"
          ],
          [
            "api_error_rate",
            "f64"
          ],
          [
            "breakers_tripped",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ControlModeManager",
        "file": "crates/infrastructure/src/software_control_modes.rs",
        "line": 287,
        "fields": [
          [
            "current_mode",
            "Arc<RwLock<ControlMode>>"
          ],
          [
            "mode_history",
            "Arc<RwLock<Vec<ModeTransition>>>"
          ],
          [
            "last_transition",
            "Arc<RwLock<Instant>>"
          ],
          [
            "rules",
            "TransitionRules"
          ],
          [
            "kill_switch",
            "Arc<HardwareKillSwitch>"
          ],
          [
            "circuit_breakers",
            "Arc<CircuitBreakerHub>"
          ],
          [
            "emergency",
            "Arc<EmergencyCoordinator>"
          ],
          [
            "event_tx",
            "broadcast::Sender<ControlModeEvent>"
          ],
          [
            "transition_count",
            "Arc<AtomicU64>"
          ],
          [
            "override_active",
            "Arc<AtomicBool>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ModeTransition",
        "file": "crates/infrastructure/src/software_control_modes.rs",
        "line": 320,
        "fields": [
          [
            "from",
            "ControlMode"
          ],
          [
            "to",
            "ControlMode"
          ],
          [
            "timestamp",
            "Instant"
          ],
          [
            "reason",
            "String"
          ],
          [
            "authorized_by",
            "String"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ModeCapabilities",
        "file": "crates/infrastructure/src/software_control_modes.rs",
        "line": 704,
        "fields": [
          [
            "can_open_positions",
            "bool"
          ],
          [
            "can_close_positions",
            "bool"
          ],
          [
            "can_use_ml",
            "bool"
          ],
          [
            "max_position_size",
            "f64"
          ],
          [
            "max_daily_trades",
            "usize"
          ],
          [
            "allowed_strategies",
            "Vec<String>"
          ],
          [
            "risk_multiplier",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RiskLimits",
        "file": "crates/infrastructure/src/software_control_modes.rs",
        "line": 739,
        "fields": [
          [
            "max_var",
            "f64"
          ],
          [
            "max_leverage",
            "f64"
          ],
          [
            "max_drawdown",
            "f64"
          ],
          [
            "concentration_limit",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ExchangeOperations",
        "file": "crates/infrastructure/src/software_control_modes.rs",
        "line": 747,
        "fields": [
          [
            "can_place_orders",
            "bool"
          ],
          [
            "can_cancel_orders",
            "bool"
          ],
          [
            "can_modify_orders",
            "bool"
          ],
          [
            "can_request_data",
            "bool"
          ],
          [
            "rate_limit_multiplier",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DataConfig",
        "file": "crates/infrastructure/src/software_control_modes.rs",
        "line": 756,
        "fields": [
          [
            "collect_trades",
            "bool"
          ],
          [
            "collect_orderbook",
            "bool"
          ],
          [
            "collect_metrics",
            "bool"
          ],
          [
            "storage_priority",
            "StoragePriority"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "InfrastructureConfig",
        "file": "crates/infrastructure/src/software_control_modes.rs",
        "line": 770,
        "fields": [
          [
            "cpu_governor",
            "&'static str"
          ],
          [
            "memory_limit_mb",
            "usize"
          ],
          [
            "thread_pool_size",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Candle",
        "file": "crates/infrastructure/src/historical_charts.rs",
        "line": 84,
        "fields": [
          [
            "timestamp",
            "u64"
          ],
          [
            "open",
            "f64"
          ],
          [
            "high",
            "f64"
          ],
          [
            "low",
            "f64"
          ],
          [
            "close",
            "f64"
          ],
          [
            "volume",
            "f64"
          ],
          [
            "trades",
            "u32"
          ],
          [
            "vwap",
            "f64"
          ],
          [
            "bid_volume",
            "f64"
          ],
          [
            "ask_volume",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PerformanceMetrics",
        "file": "crates/infrastructure/src/historical_charts.rs",
        "line": 149,
        "fields": [
          [
            "timeframe",
            "Timeframe"
          ],
          [
            "timestamp",
            "u64"
          ],
          [
            "returns",
            "f64"
          ],
          [
            "volatility",
            "f64"
          ],
          [
            "sharpe_ratio",
            "f64"
          ],
          [
            "sortino_ratio",
            "f64"
          ],
          [
            "calmar_ratio",
            "f64"
          ],
          [
            "max_drawdown",
            "f64"
          ],
          [
            "win_rate",
            "f64"
          ],
          [
            "profit_factor",
            "f64"
          ],
          [
            "expected_value",
            "f64"
          ],
          [
            "kelly_criterion",
            "f64"
          ],
          [
            "var_95",
            "f64"
          ],
          [
            "cvar_95",
            "f64"
          ],
          [
            "skewness",
            "f64"
          ],
          [
            "kurtosis",
            "f64"
          ],
          [
            "beta",
            "f64"
          ],
          [
            "alpha",
            "f64"
          ],
          [
            "information_ratio",
            "f64"
          ],
          [
            "omega_ratio",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ChartDataAggregator",
        "file": "crates/infrastructure/src/historical_charts.rs",
        "line": 418,
        "fields": [
          [
            "candles",
            "Arc<RwLock<HashMap<Timeframe"
          ],
          [
            "building_candles",
            "Arc<RwLock<HashMap<Timeframe"
          ],
          [
            "metrics",
            "Arc<RwLock<HashMap<Timeframe"
          ],
          [
            "returns_buffer",
            "Arc<RwLock<HashMap<Timeframe"
          ],
          [
            "benchmark_returns",
            "Arc<RwLock<VecDeque<f64>>>"
          ],
          [
            "risk_free_rate",
            "f64"
          ],
          [
            "total_ticks_processed",
            "Arc<AtomicU64>"
          ],
          [
            "last_update",
            "Arc<RwLock<Instant>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ChartData",
        "file": "crates/infrastructure/src/historical_charts.rs",
        "line": 604,
        "fields": [
          [
            "timeframe",
            "Timeframe"
          ],
          [
            "candles",
            "Vec<Candle>"
          ],
          [
            "metrics",
            "Option<PerformanceMetrics>"
          ],
          [
            "indicators",
            "HashMap<String"
          ],
          [
            "timestamp",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TechnicalIndicators",
        "file": "crates/infrastructure/src/historical_charts.rs",
        "line": 614,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "ChartRenderer",
        "file": "crates/infrastructure/src/historical_charts.rs",
        "line": 754,
        "fields": [
          [
            "aggregator",
            "Arc<ChartDataAggregator>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OptimizedRuntime",
        "file": "crates/infrastructure/src/runtime_optimization.rs",
        "line": 15,
        "fields": [
          [
            "runtime",
            "Runtime"
          ],
          [
            "stats",
            "Arc<RuntimeStats>"
          ],
          [
            "shutdown",
            "Arc<AtomicBool>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RuntimeStats",
        "file": "crates/infrastructure/src/runtime_optimization.rs",
        "line": 25,
        "fields": [
          [
            "tasks_spawned",
            "CachePadded<AtomicU64>"
          ],
          [
            "tasks_completed",
            "CachePadded<AtomicU64>"
          ],
          [
            "blocking_tasks",
            "CachePadded<AtomicU64>"
          ],
          [
            "failed_tasks",
            "CachePadded<AtomicU64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ZeroAllocTask",
        "file": "crates/infrastructure/src/runtime_optimization.rs",
        "line": 163,
        "fields": [
          [
            "result",
            "Option<T>"
          ],
          [
            "completed",
            "AtomicBool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "HotPathVerifier",
        "file": "crates/infrastructure/src/runtime_optimization.rs",
        "line": 204,
        "fields": [
          [
            "start_allocs",
            "usize"
          ],
          [
            "path_name",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OneshotPool",
        "file": "crates/infrastructure/src/runtime_optimization.rs",
        "line": 255,
        "fields": [
          [
            "channels",
            "Vec<(oneshot::Sender<T>"
          ],
          [
            "capacity",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ZeroAllocFuture",
        "file": "crates/infrastructure/src/runtime_optimization.rs",
        "line": 282,
        "fields": [
          [
            "inner",
            "Pin<Box<F>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ParallelizationConfig",
        "file": "crates/infrastructure/src/parallelization.rs",
        "line": 15,
        "fields": [
          [
            "worker_threads",
            "usize"
          ],
          [
            "main_core",
            "usize"
          ],
          [
            "worker_cores",
            "Vec<usize>"
          ],
          [
            "enable_pinning",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "InstrumentSharding",
        "file": "crates/infrastructure/src/parallelization.rs",
        "line": 42,
        "fields": [
          [
            "num_shards",
            "usize"
          ],
          [
            "instrument_map",
            "DashMap<String"
          ],
          [
            "next_shard",
            "CachePadded<AtomicUsize>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "LockFreeStats",
        "file": "crates/infrastructure/src/parallelization.rs",
        "line": 94,
        "fields": [
          [
            "ops_count",
            "CachePadded<AtomicUsize>"
          ],
          [
            "total_latency_ns",
            "CachePadded<AtomicUsize>"
          ],
          [
            "error_count",
            "CachePadded<AtomicUsize>"
          ],
          [
            "peak_throughput",
            "CachePadded<AtomicUsize>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CpuAffinityManager",
        "file": "crates/infrastructure/src/parallelization.rs",
        "line": 160,
        "fields": [
          [
            "config",
            "ParallelizationConfig"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ParallelProcessor",
        "file": "crates/infrastructure/src/parallelization.rs",
        "line": 236,
        "fields": [
          [
            "T",
            "Send + Sync> {\n    /// Sharding strategy\n    sharding: Arc<InstrumentSharding>"
          ],
          [
            "stats",
            "Arc<LockFreeStats>"
          ],
          [
            "_phantom",
            "std::marker::PhantomData<T>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ControlModeManager",
        "file": "crates/infrastructure/src/external_control.rs",
        "line": 41,
        "fields": [
          [
            "current_mode",
            "Arc<RwLock<ControlMode>>"
          ],
          [
            "persistence",
            "Arc<ModePersistenceManager>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Claims",
        "file": "crates/infrastructure/src/external_control.rs",
        "line": 105,
        "fields": [
          [
            "sub",
            "String"
          ],
          [
            "role",
            "UserRole"
          ],
          [
            "exp",
            "usize"
          ],
          [
            "iat",
            "usize"
          ],
          [
            "sid",
            "String"
          ],
          [
            "permissions",
            "Vec<Permission>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RateLimiter",
        "file": "crates/infrastructure/src/external_control.rs",
        "line": 193,
        "fields": [
          [
            "buckets",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "max_tokens",
            "u32"
          ],
          [
            "refill_rate",
            "u32"
          ],
          [
            "refill_interval",
            "Duration"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TokenBucket",
        "file": "crates/infrastructure/src/external_control.rs",
        "line": 201,
        "fields": [
          [
            "tokens",
            "u32"
          ],
          [
            "last_refill",
            "SystemTime"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ChangeModeRequest",
        "file": "crates/infrastructure/src/external_control.rs",
        "line": 253,
        "fields": [
          [
            "mode",
            "ControlMode"
          ],
          [
            "reason",
            "String"
          ],
          [
            "override_cooldown",
            "Option<bool>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ModeStatusResponse",
        "file": "crates/infrastructure/src/external_control.rs",
        "line": 261,
        "fields": [
          [
            "current_mode",
            "ControlMode"
          ],
          [
            "last_changed",
            "String"
          ],
          [
            "capabilities",
            "ModeCapabilities"
          ],
          [
            "environment",
            "Environment"
          ],
          [
            "system_version",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ModeCapabilities",
        "file": "crates/infrastructure/src/external_control.rs",
        "line": 271,
        "fields": [
          [
            "can_open_positions",
            "bool"
          ],
          [
            "can_close_positions",
            "bool"
          ],
          [
            "can_use_ml",
            "bool"
          ],
          [
            "max_position_size",
            "f64"
          ],
          [
            "risk_multiplier",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "HealthResponse",
        "file": "crates/infrastructure/src/external_control.rs",
        "line": 281,
        "fields": [
          [
            "status",
            "String"
          ],
          [
            "mode",
            "ControlMode"
          ],
          [
            "uptime_seconds",
            "u64"
          ],
          [
            "version",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ErrorResponse",
        "file": "crates/infrastructure/src/external_control.rs",
        "line": 290,
        "fields": [
          [
            "error",
            "String"
          ],
          [
            "code",
            "String"
          ],
          [
            "request_id",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ExternalControlServer",
        "file": "crates/infrastructure/src/external_control.rs",
        "line": 302,
        "fields": [
          [
            "mode_manager",
            "Arc<ControlModeManager>"
          ],
          [
            "persistence_manager",
            "Arc<ModePersistenceManager>"
          ],
          [
            "jwt_secret",
            "String"
          ],
          [
            "rate_limiter",
            "Arc<RateLimiter>"
          ],
          [
            "ws_connections",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "start_time",
            "SystemTime"
          ],
          [
            "environment",
            "Environment"
          ],
          [
            "system_version",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "LoginRequest",
        "file": "crates/infrastructure/src/external_control.rs",
        "line": 765,
        "fields": [
          [
            "username",
            "String"
          ],
          [
            "password",
            "String"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "LoginResponse",
        "file": "crates/infrastructure/src/external_control.rs",
        "line": 771,
        "fields": [
          [
            "token",
            "String"
          ],
          [
            "expires_in",
            "u64"
          ],
          [
            "role",
            "UserRole"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "EmergencyRequest",
        "file": "crates/infrastructure/src/external_control.rs",
        "line": 778,
        "fields": [
          [
            "reason",
            "String"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "HistoryParams",
        "file": "crates/infrastructure/src/external_control.rs",
        "line": 783,
        "fields": [
          [
            "limit",
            "Option<u64>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "MetricsSummary",
        "file": "crates/infrastructure/src/external_control.rs",
        "line": 788,
        "fields": [
          [
            "uptime_seconds",
            "u64"
          ],
          [
            "current_mode",
            "ControlMode"
          ],
          [
            "environment",
            "Environment"
          ],
          [
            "ws_connections",
            "usize"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "MonitoringIntegration",
        "file": "crates/infrastructure/src/external_control.rs",
        "line": 801,
        "fields": [
          [
            "prometheus_gateway",
            "Option<String>"
          ],
          [
            "grafana_webhook",
            "Option<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "InfrastructureCircuitBreakers",
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 35,
        "fields": [
          [
            "memory_breaker",
            "Arc<AdaptiveCircuitBreaker>"
          ],
          [
            "cpu_breaker",
            "Arc<AdaptiveCircuitBreaker>"
          ],
          [
            "network_breaker",
            "Arc<AdaptiveCircuitBreaker>"
          ],
          [
            "disk_breaker",
            "Arc<AdaptiveCircuitBreaker>"
          ],
          [
            "thread_pool_breaker",
            "Arc<AdaptiveCircuitBreaker>"
          ],
          [
            "optimizer",
            "Arc<GameTheoryOptimizer>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "AdaptiveCircuitBreaker",
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 57,
        "fields": [
          [
            "name",
            "String"
          ],
          [
            "threshold",
            "Arc<RwLock<f64>>"
          ],
          [
            "history",
            "Arc<RwLock<VecDeque<PerformancePoint>>>"
          ],
          [
            "bayesian",
            "Arc<BayesianThresholdOptimizer>"
          ],
          [
            "trips",
            "AtomicU64"
          ],
          [
            "false_positive_rate",
            "Arc<RwLock<f64>>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "PerformancePoint",
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 77,
        "fields": [
          [
            "timestamp",
            "Instant"
          ],
          [
            "value",
            "f64"
          ],
          [
            "tripped",
            "bool"
          ],
          [
            "was_necessary",
            "bool"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "DataLayerCircuitBreakers",
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 145,
        "fields": [
          [
            "quality_breaker",
            "Arc<DataQualityBreaker>"
          ],
          [
            "volume_breaker",
            "Arc<VolumeAnomalyBreaker>"
          ],
          [
            "exchange_latency",
            "Arc<DashMap<String"
          ],
          [
            "completeness_checker",
            "Arc<CompletenessChecker>"
          ],
          [
            "anomaly_detector",
            "Arc<AnomalyDetector>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DataQualityBreaker",
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 162,
        "fields": [
          [
            "quality_window",
            "Arc<RwLock<VecDeque<f64>>>"
          ],
          [
            "min_quality",
            "f64"
          ],
          [
            "quality_trips",
            "AtomicU64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "VolumeAnomalyBreaker",
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 173,
        "fields": [
          [
            "volume_distribution",
            "Arc<RwLock<Normal>>"
          ],
          [
            "z_threshold",
            "f64"
          ],
          [
            "anomalies",
            "AtomicU64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ExchangeLayerCircuitBreakers",
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 280,
        "fields": [
          [
            "exchange_breakers",
            "Arc<DashMap<String"
          ],
          [
            "rejection_breaker",
            "Arc<RejectionRateBreaker>"
          ],
          [
            "fill_quality_breaker",
            "Arc<FillQualityBreaker>"
          ],
          [
            "rate_limiter",
            "Arc<RateLimitTracker>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ExchangeBreaker",
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 294,
        "fields": [
          [
            "connected",
            "AtomicBool"
          ],
          [
            "error_count",
            "AtomicU32"
          ],
          [
            "last_success",
            "Arc<RwLock<Instant>>"
          ],
          [
            "state",
            "Arc<RwLock<ExchangeCircuitState>>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "RejectionRateBreaker",
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 315,
        "fields": [
          [
            "order_window",
            "Arc<RwLock<VecDeque<OrderOutcome>>>"
          ],
          [
            "max_rejection_rate",
            "f64"
          ],
          [
            "current_rate",
            "Arc<RwLock<f64>>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "OrderOutcome",
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 327,
        "fields": [
          [
            "timestamp",
            "Instant"
          ],
          [
            "accepted",
            "bool"
          ],
          [
            "reason",
            "Option<String>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "RiskLayerCircuitBreakers",
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 380,
        "fields": [
          [
            "base",
            "Arc<CircuitBreakerHub>"
          ],
          [
            "heat_breaker",
            "Arc<PortfolioHeatBreaker>"
          ],
          [
            "correlation_detector",
            "Arc<CorrelationBreakdownDetector>"
          ],
          [
            "tail_risk_monitor",
            "Arc<TailRiskMonitor>"
          ],
          [
            "risk_optimizer",
            "Arc<GameTheoryRiskOptimizer>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PortfolioHeatBreaker",
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 397,
        "fields": [
          [
            "current_heat",
            "Arc<RwLock<f64>>"
          ],
          [
            "max_heat",
            "f64"
          ],
          [
            "heat_history",
            "Arc<RwLock<VecDeque<(Instant"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "CorrelationBreakdownDetector",
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 408,
        "fields": [
          [
            "expected_correlations",
            "Arc<RwLock<ndarray::Array2<f64>>>"
          ],
          [
            "current_correlations",
            "Arc<RwLock<ndarray::Array2<f64>>>"
          ],
          [
            "breakdown_threshold",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "AnalysisLayerCircuitBreakers",
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 488,
        "fields": [
          [
            "ml_breaker",
            "Arc<MLInferenceBreaker>"
          ],
          [
            "ta_breaker",
            "Arc<TACalculationBreaker>"
          ],
          [
            "feature_checker",
            "Arc<FeatureQualityChecker>"
          ],
          [
            "drift_detector",
            "Arc<ModelDriftDetector>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MLInferenceBreaker",
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 502,
        "fields": [
          [
            "latency_tracker",
            "Arc<RwLock<VecDeque<Duration>>>"
          ],
          [
            "max_latency",
            "Duration"
          ],
          [
            "min_confidence",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ModelDriftDetector",
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 513,
        "fields": [
          [
            "kl_threshold",
            "f64"
          ],
          [
            "current_dist",
            "Arc<RwLock<Vec<f64>>>"
          ],
          [
            "reference_dist",
            "Arc<RwLock<Vec<f64>>>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "StrategyLayerCircuitBreakers",
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 575,
        "fields": [
          [
            "performance_tracker",
            "Arc<StrategyPerformanceTracker>"
          ],
          [
            "regime_detector",
            "Arc<RegimeChangeDetector>"
          ],
          [
            "conflict_resolver",
            "Arc<StrategyConflictResolver>"
          ],
          [
            "strategy_selector",
            "Arc<AdaptiveStrategySelector>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "StrategyPerformanceTracker",
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 589,
        "fields": [
          [
            "performance",
            "Arc<DashMap<String"
          ],
          [
            "min_sharpe",
            "f64"
          ],
          [
            "underperformers",
            "Arc<RwLock<Vec<String>>>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "StrategyPerformance",
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 601,
        "fields": [
          [
            "trades",
            "u64"
          ],
          [
            "wins",
            "u64"
          ],
          [
            "total_pnl",
            "f64"
          ],
          [
            "sharpe_ratio",
            "f64"
          ],
          [
            "max_drawdown",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ExecutionLayerCircuitBreakers",
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 657,
        "fields": [
          [
            "slippage_monitor",
            "Arc<SlippageMonitor>"
          ],
          [
            "impact_calculator",
            "Arc<MarketImpactCalculator>"
          ],
          [
            "algo_selector",
            "Arc<ExecutionAlgorithmSelector>"
          ],
          [
            "fill_tracker",
            "Arc<FillQualityTracker>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SlippageMonitor",
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 671,
        "fields": [
          [
            "slippage_history",
            "Arc<RwLock<VecDeque<SlippagePoint>>>"
          ],
          [
            "max_slippage_bps",
            "f64"
          ],
          [
            "adaptive_threshold",
            "Arc<RwLock<f64>>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "SlippagePoint",
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 683,
        "fields": [
          [
            "timestamp",
            "Instant"
          ],
          [
            "expected_price",
            "f64"
          ],
          [
            "fill_price",
            "f64"
          ],
          [
            "slippage_bps",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "MonitoringLayerCircuitBreakers",
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 750,
        "fields": [
          [
            "alert_manager",
            "Arc<AlertFatiguePreventer>"
          ],
          [
            "anomaly_predictor",
            "Arc<AnomalyPredictor>"
          ],
          [
            "health_scorer",
            "Arc<SystemHealthScorer>"
          ],
          [
            "cascade_detector",
            "Arc<CascadeDetector>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "AlertFatiguePreventer",
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 764,
        "fields": [
          [
            "dedup_window",
            "Duration"
          ],
          [
            "recent_alerts",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "priority_calc",
            "Arc<AlertPriorityCalculator>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "CascadeDetector",
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 775,
        "fields": [
          [
            "dependency_graph",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "failed_components",
            "Arc<RwLock<HashSet<String>>>"
          ],
          [
            "cascade_calc",
            "Arc<CascadeProbabilityCalculator>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "GameTheoryOptimizer",
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 840,
        "fields": [
          [
            "payoff_matrix",
            "Arc<RwLock<PayoffMatrix>>"
          ],
          [
            "nash_solver",
            "Arc<NashEquilibriumSolver>"
          ],
          [
            "stopping_calc",
            "Arc<OptimalStoppingCalculator>"
          ],
          [
            "rl_optimizer",
            "Arc<RLThresholdOptimizer>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "PayoffMatrix",
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 855,
        "fields": [
          [
            "tp_payoff",
            "f64"
          ],
          [
            "fp_payoff",
            "f64"
          ],
          [
            "tn_payoff",
            "f64"
          ],
          [
            "fn_payoff",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "BayesianThresholdOptimizer",
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 930,
        "fields": [
          [
            "prior",
            "Arc<RwLock<Normal>>"
          ],
          [
            "posterior",
            "Arc<RwLock<Normal>>"
          ],
          [
            "observations",
            "AtomicU64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "CircuitBreakerAutoTuner",
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 983,
        "fields": [
          [
            "regime_detector",
            "Arc<MarketRegimeDetector>"
          ],
          [
            "regime_adjustments",
            "Arc<DashMap<MarketRegime"
          ],
          [
            "learning_rate",
            "f64"
          ],
          [
            "update_interval",
            "Duration"
          ],
          [
            "last_update",
            "Arc<RwLock<Instant>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ThresholdAdjustments",
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 1001,
        "fields": [
          [
            "toxicity_multiplier",
            "f64"
          ],
          [
            "latency_multiplier",
            "f64"
          ],
          [
            "error_rate_multiplier",
            "f64"
          ],
          [
            "spread_multiplier",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "InfrastructureMetrics",
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 1082,
        "fields": [
          [
            "memory_usage_pct",
            "f64"
          ],
          [
            "cpu_usage_pct",
            "f64"
          ],
          [
            "network_latency_ms",
            "u64"
          ],
          [
            "disk_iops",
            "f64"
          ],
          [
            "thread_pool_usage",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketTick",
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 1091,
        "fields": [
          [
            "exchange",
            "String"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "bid",
            "f64"
          ],
          [
            "ask",
            "f64"
          ],
          [
            "volume",
            "f64"
          ],
          [
            "timestamp",
            "Instant"
          ],
          [
            "latency_ms",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Portfolio",
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 1102,
        "fields": [
          [
            "positions",
            "Vec<Position>"
          ],
          [
            "capital",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Position",
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 1108,
        "fields": [
          [
            "symbol",
            "String"
          ],
          [
            "size",
            "f64"
          ],
          [
            "current_price",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Features",
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 1115,
        "fields": [
          [
            "price_features",
            "Vec<f64>"
          ],
          [
            "volume_features",
            "Vec<f64>"
          ],
          [
            "technical_features",
            "Vec<f64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Prediction",
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 1122,
        "fields": [
          [
            "action",
            "TradingAction"
          ],
          [
            "confidence",
            "f64"
          ],
          [
            "expected_return",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketState",
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 1136,
        "fields": [
          [
            "volatility",
            "f64"
          ],
          [
            "volume",
            "f64"
          ],
          [
            "trend",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Order",
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 1152,
        "fields": [
          [
            "id",
            "String"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "quantity",
            "f64"
          ],
          [
            "price",
            "f64"
          ],
          [
            "order_type",
            "OrderType"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Fill",
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 1168,
        "fields": [
          [
            "order_id",
            "String"
          ],
          [
            "price",
            "f64"
          ],
          [
            "quantity",
            "f64"
          ],
          [
            "timestamp",
            "Instant"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "AuditEvent",
        "file": "crates/infrastructure/src/audit_system.rs",
        "line": 136,
        "fields": [
          [
            "id",
            "String"
          ],
          [
            "timestamp",
            "u64"
          ],
          [
            "sequence",
            "u64"
          ],
          [
            "event_type",
            "AuditEventType"
          ],
          [
            "source",
            "String"
          ],
          [
            "actor",
            "String"
          ],
          [
            "entity_id",
            "Option<String>"
          ],
          [
            "description",
            "String"
          ],
          [
            "data",
            "HashMap<String"
          ],
          [
            "previous_hash",
            "String"
          ],
          [
            "event_hash",
            "String"
          ],
          [
            "signature",
            "Option<Vec<u8>>"
          ],
          [
            "merkle_root",
            "Option<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MerkleNode",
        "file": "crates/infrastructure/src/audit_system.rs",
        "line": 250,
        "fields": [
          [
            "hash",
            "String"
          ],
          [
            "left",
            "Option<Box<MerkleNode>>"
          ],
          [
            "right",
            "Option<Box<MerkleNode>>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "MerkleTree",
        "file": "crates/infrastructure/src/audit_system.rs",
        "line": 257,
        "fields": [
          [
            "root",
            "Option<MerkleNode>"
          ],
          [
            "leaves",
            "Vec<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "AuditLog",
        "file": "crates/infrastructure/src/audit_system.rs",
        "line": 354,
        "fields": [
          [
            "log_path",
            "PathBuf"
          ],
          [
            "writer",
            "Arc<RwLock<BufWriter<File>>>"
          ],
          [
            "cache",
            "Arc<RwLock<VecDeque<AuditEvent>>>"
          ],
          [
            "sequence",
            "Arc<AtomicU64>"
          ],
          [
            "last_hash",
            "Arc<RwLock<String>>"
          ],
          [
            "current_batch",
            "Arc<RwLock<Vec<String>>>"
          ],
          [
            "batch_size",
            "usize"
          ],
          [
            "total_events",
            "Arc<AtomicU64>"
          ],
          [
            "events_per_type",
            "Arc<RwLock<HashMap<AuditEventType"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ComplianceReporter",
        "file": "crates/infrastructure/src/audit_system.rs",
        "line": 561,
        "fields": [
          [
            "audit_log",
            "Arc<AuditLog>"
          ],
          [
            "report_dir",
            "PathBuf"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "InterventionDetector",
        "file": "crates/infrastructure/src/audit_system.rs",
        "line": 769,
        "fields": [
          [
            "audit_log",
            "Arc<AuditLog>"
          ],
          [
            "detection_window",
            "Duration"
          ],
          [
            "alert_threshold",
            "u32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "InterventionAlert",
        "file": "crates/infrastructure/src/audit_system.rs",
        "line": 825,
        "fields": [
          [
            "timestamp",
            "u64"
          ],
          [
            "actor",
            "String"
          ],
          [
            "action",
            "String"
          ],
          [
            "severity",
            "InterventionSeverity"
          ],
          [
            "event_id",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ForensicAnalyzer",
        "file": "crates/infrastructure/src/audit_system.rs",
        "line": 858,
        "fields": [
          [
            "audit_log",
            "Arc<AuditLog>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "IncidentAnalysis",
        "file": "crates/infrastructure/src/audit_system.rs",
        "line": 997,
        "fields": [
          [
            "incident_id",
            "String"
          ],
          [
            "incident_type",
            "AuditEventType"
          ],
          [
            "timestamp",
            "u64"
          ],
          [
            "description",
            "String"
          ],
          [
            "preceding_events",
            "usize"
          ],
          [
            "following_events",
            "usize"
          ],
          [
            "potential_causes",
            "Vec<String>"
          ],
          [
            "consequences",
            "Vec<String>"
          ],
          [
            "timeline",
            "Vec<TimelineEntry>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TimelineEntry",
        "file": "crates/infrastructure/src/audit_system.rs",
        "line": 1011,
        "fields": [
          [
            "timestamp",
            "u64"
          ],
          [
            "event_type",
            "AuditEventType"
          ],
          [
            "description",
            "String"
          ],
          [
            "is_incident",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SystemState",
        "file": "crates/infrastructure/src/audit_system.rs",
        "line": 1020,
        "fields": [
          [
            "timestamp",
            "u64"
          ],
          [
            "open_positions",
            "u32"
          ],
          [
            "pending_orders",
            "u32"
          ],
          [
            "risk_breaches",
            "u32"
          ],
          [
            "manual_interventions",
            "u32"
          ],
          [
            "total_events",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "AuditManager",
        "file": "crates/infrastructure/src/audit_system.rs",
        "line": 1035,
        "fields": [
          [
            "audit_log",
            "Arc<AuditLog>"
          ],
          [
            "compliance_reporter",
            "Arc<ComplianceReporter>"
          ],
          [
            "intervention_detector",
            "Arc<InterventionDetector>"
          ],
          [
            "forensic_analyzer",
            "Arc<ForensicAnalyzer>"
          ],
          [
            "config",
            "AuditConfig"
          ],
          [
            "is_running",
            "Arc<AtomicBool>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "AuditConfig",
        "file": "crates/infrastructure/src/audit_system.rs",
        "line": 1147,
        "fields": [
          [
            "log_dir",
            "PathBuf"
          ],
          [
            "report_dir",
            "PathBuf"
          ],
          [
            "batch_size",
            "usize"
          ],
          [
            "intervention_window",
            "Duration"
          ],
          [
            "intervention_threshold",
            "u32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "AuditStatistics",
        "file": "crates/infrastructure/src/audit_system.rs",
        "line": 1169,
        "fields": [
          [
            "total_events",
            "u64"
          ],
          [
            "events_by_type",
            "HashMap<AuditEventType"
          ],
          [
            "log_file",
            "PathBuf"
          ],
          [
            "is_running",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RetryPolicy",
        "file": "crates/infrastructure/src/retry_logic.rs",
        "line": 55,
        "fields": [
          [
            "max_retries",
            "u32"
          ],
          [
            "initial_backoff",
            "Duration"
          ],
          [
            "max_backoff",
            "Duration"
          ],
          [
            "exponential_base",
            "f64"
          ],
          [
            "jitter_factor",
            "f64"
          ],
          [
            "total_timeout",
            "Option<Duration>"
          ],
          [
            "circuit_breaker_enabled",
            "bool"
          ],
          [
            "circuit_breaker_threshold",
            "u32"
          ],
          [
            "circuit_breaker_recovery",
            "Duration"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CircuitBreaker",
        "file": "crates/infrastructure/src/retry_logic.rs",
        "line": 158,
        "fields": [
          [
            "state",
            "Arc<parking_lot::RwLock<CircuitState>>"
          ],
          [
            "failurecount",
            "Arc<AtomicU32>"
          ],
          [
            "successcount",
            "Arc<AtomicU32>"
          ],
          [
            "last_failure_time",
            "Arc<parking_lot::RwLock<Option<DateTime<Utc>>>>"
          ],
          [
            "threshold",
            "u32"
          ],
          [
            "recovery_timeout",
            "Duration"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RetryExecutor",
        "file": "crates/infrastructure/src/retry_logic.rs",
        "line": 253,
        "fields": [
          [
            "policy",
            "RetryPolicy"
          ],
          [
            "circuit_breaker",
            "Option<CircuitBreaker>"
          ],
          [
            "total_attempts",
            "Arc<AtomicU64>"
          ],
          [
            "total_failures",
            "Arc<AtomicU64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RetryStats",
        "file": "crates/infrastructure/src/retry_logic.rs",
        "line": 381,
        "fields": [
          [
            "total_attempts",
            "u64"
          ],
          [
            "total_failures",
            "u64"
          ],
          [
            "circuitstate",
            "Option<CircuitState>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "LatencyPercentiles",
        "file": "crates/infrastructure/src/perf_manifest.rs",
        "line": 13,
        "fields": [
          [
            "p50",
            "u64"
          ],
          [
            "p95",
            "u64"
          ],
          [
            "p99",
            "u64"
          ],
          [
            "p99_9",
            "u64"
          ],
          [
            "samples",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CacheInfo",
        "file": "crates/infrastructure/src/perf_manifest.rs",
        "line": 23,
        "fields": [
          [
            "l1_data",
            "usize"
          ],
          [
            "l1_instruction",
            "usize"
          ],
          [
            "l2",
            "usize"
          ],
          [
            "l3",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PerfManifest",
        "file": "crates/infrastructure/src/perf_manifest.rs",
        "line": 32,
        "fields": [
          [
            "cpu_model",
            "String"
          ],
          [
            "cpu_cores",
            "u32"
          ],
          [
            "cpu_frequency",
            "f64"
          ],
          [
            "avx512_available",
            "bool"
          ],
          [
            "cache_sizes",
            "CacheInfo"
          ],
          [
            "numa_nodes",
            "u32"
          ],
          [
            "rustc_version",
            "String"
          ],
          [
            "opt_level",
            "String"
          ],
          [
            "target_cpu",
            "String"
          ],
          [
            "lto_enabled",
            "bool"
          ],
          [
            "codegen_units",
            "u32"
          ],
          [
            "metrics",
            "HashMap<String"
          ],
          [
            "generated_at",
            "chrono::DateTime<chrono::Utc>"
          ],
          [
            "hostname",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Order",
        "file": "crates/infrastructure/src/perf_manifest.rs",
        "line": 585,
        "fields": [
          [
            "id",
            "uuid::Uuid"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "side",
            "OrderSide"
          ],
          [
            "order_type",
            "OrderType"
          ],
          [
            "price",
            "f64"
          ],
          [
            "quantity",
            "f64"
          ],
          [
            "timestamp",
            "chrono::DateTime<chrono::Utc>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "SharpeMonitor",
        "file": "crates/infrastructure/src/statistical_circuit_breakers.rs",
        "line": 99,
        "fields": [
          [
            "returns_window",
            "VecDeque<Decimal>"
          ],
          [
            "window_size",
            "usize"
          ],
          [
            "current_sharpe",
            "Decimal"
          ],
          [
            "baseline_sharpe",
            "Decimal"
          ],
          [
            "degradation_threshold",
            "Decimal"
          ],
          [
            "risk_free_rate",
            "Decimal"
          ],
          [
            "periods_per_year",
            "Decimal"
          ],
          [
            "sharpe_history",
            "VecDeque<Decimal>"
          ],
          [
            "max_history",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RegimeDetector",
        "file": "crates/infrastructure/src/statistical_circuit_breakers.rs",
        "line": 289,
        "fields": [
          [
            "num_states",
            "usize"
          ],
          [
            "transition_matrix",
            "Vec<Vec<f64>>"
          ],
          [
            "emission_params",
            "Vec<(f64"
          ],
          [
            "state_probabilities",
            "Vec<f64>"
          ],
          [
            "observations",
            "VecDeque<f64>"
          ],
          [
            "window_size",
            "usize"
          ],
          [
            "current_regime",
            "MarketRegime"
          ],
          [
            "regime_history",
            "VecDeque<MarketRegime>"
          ],
          [
            "confidence_threshold",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "GARCHDetector",
        "file": "crates/infrastructure/src/statistical_circuit_breakers.rs",
        "line": 486,
        "fields": [
          [
            "omega",
            "f64"
          ],
          [
            "alpha",
            "f64"
          ],
          [
            "beta",
            "f64"
          ],
          [
            "returns",
            "VecDeque<f64>"
          ],
          [
            "squared_returns",
            "VecDeque<f64>"
          ],
          [
            "conditional_variances",
            "VecDeque<f64>"
          ],
          [
            "window_size",
            "usize"
          ],
          [
            "current_volatility",
            "f64"
          ],
          [
            "long_run_volatility",
            "f64"
          ],
          [
            "clustering_threshold",
            "f64"
          ],
          [
            "persistence",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "StatisticalCircuitBreaker",
        "file": "crates/infrastructure/src/statistical_circuit_breakers.rs",
        "line": 645,
        "fields": [
          [
            "sharpe_monitor",
            "Arc<SyncRwLock<SharpeMonitor>>"
          ],
          [
            "regime_detector",
            "Arc<SyncRwLock<RegimeDetector>>"
          ],
          [
            "garch_detector",
            "Arc<SyncRwLock<GARCHDetector>>"
          ],
          [
            "state",
            "Arc<SyncRwLock<StatisticalState>>"
          ],
          [
            "anomaly_history",
            "Arc<SyncRwLock<VecDeque<AnomalyEvent>>>"
          ],
          [
            "config",
            "StatisticalConfig"
          ],
          [
            "last_update",
            "Arc<SyncRwLock<Instant>>"
          ],
          [
            "trip_conditions",
            "TripConditions"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "StatisticalConfig",
        "file": "crates/infrastructure/src/statistical_circuit_breakers.rs",
        "line": 672,
        "fields": [
          [
            "window_size",
            "usize"
          ],
          [
            "baseline_sharpe",
            "Decimal"
          ],
          [
            "sharpe_degradation_threshold",
            "Decimal"
          ],
          [
            "risk_free_rate",
            "Decimal"
          ],
          [
            "periods_per_year",
            "Decimal"
          ],
          [
            "update_interval",
            "Duration"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TripConditions",
        "file": "crates/infrastructure/src/statistical_circuit_breakers.rs",
        "line": 693,
        "fields": [
          [
            "sharpe_trip_threshold",
            "Decimal"
          ],
          [
            "trip_on_crisis",
            "bool"
          ],
          [
            "volatility_trip_ratio",
            "f64"
          ],
          [
            "anomaly_count_threshold",
            "usize"
          ],
          [
            "anomaly_time_window",
            "Duration"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "AnomalyEvent",
        "file": "crates/infrastructure/src/statistical_circuit_breakers.rs",
        "line": 711,
        "fields": [
          [
            "timestamp",
            "SystemTime"
          ],
          [
            "anomaly_type",
            "StatisticalAnomaly"
          ],
          [
            "severity",
            "f64"
          ],
          [
            "description",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "StatisticalStatus",
        "file": "crates/infrastructure/src/statistical_circuit_breakers.rs",
        "line": 939,
        "fields": [
          [
            "state",
            "StatisticalState"
          ],
          [
            "current_sharpe",
            "Decimal"
          ],
          [
            "sharpe_trend",
            "SharpeTrend"
          ],
          [
            "current_regime",
            "MarketRegime"
          ],
          [
            "regime_stability",
            "bool"
          ],
          [
            "volatility_ratio",
            "f64"
          ],
          [
            "volatility_regime",
            "VolatilityRegime"
          ],
          [
            "recent_anomalies",
            "Vec<AnomalyEvent>"
          ],
          [
            "last_update",
            "Instant"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "StatisticalBreakerIntegration",
        "file": "crates/infrastructure/src/statistical_circuit_breakers.rs",
        "line": 956,
        "fields": [
          [
            "statistical_breaker",
            "Arc<StatisticalCircuitBreaker>"
          ],
          [
            "integration_enabled",
            "Arc<SyncRwLock<bool>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PnLSnapshot",
        "file": "crates/infrastructure/src/monitoring_dashboards.rs",
        "line": 39,
        "fields": [
          [
            "timestamp",
            "u64"
          ],
          [
            "realized_pnl",
            "f64"
          ],
          [
            "unrealized_pnl",
            "f64"
          ],
          [
            "total_pnl",
            "f64"
          ],
          [
            "fees_paid",
            "f64"
          ],
          [
            "slippage_cost",
            "f64"
          ],
          [
            "daily_pnl",
            "f64"
          ],
          [
            "weekly_pnl",
            "f64"
          ],
          [
            "monthly_pnl",
            "f64"
          ],
          [
            "win_rate",
            "f64"
          ],
          [
            "sharpe_ratio",
            "f64"
          ],
          [
            "max_drawdown",
            "f64"
          ],
          [
            "current_drawdown",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PositionSnapshot",
        "file": "crates/infrastructure/src/monitoring_dashboards.rs",
        "line": 58,
        "fields": [
          [
            "symbol",
            "String"
          ],
          [
            "exchange",
            "String"
          ],
          [
            "side",
            "PositionSide"
          ],
          [
            "size",
            "f64"
          ],
          [
            "entry_price",
            "f64"
          ],
          [
            "current_price",
            "f64"
          ],
          [
            "unrealized_pnl",
            "f64"
          ],
          [
            "realized_pnl",
            "f64"
          ],
          [
            "margin_used",
            "f64"
          ],
          [
            "liquidation_price",
            "Option<f64>"
          ],
          [
            "stop_loss",
            "Option<f64>"
          ],
          [
            "take_profit",
            "Option<f64>"
          ],
          [
            "opened_at",
            "u64"
          ],
          [
            "last_updated",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RiskMetricsSnapshot",
        "file": "crates/infrastructure/src/monitoring_dashboards.rs",
        "line": 84,
        "fields": [
          [
            "timestamp",
            "u64"
          ],
          [
            "total_exposure",
            "f64"
          ],
          [
            "var_95",
            "f64"
          ],
          [
            "var_99",
            "f64"
          ],
          [
            "cvar_95",
            "f64"
          ],
          [
            "leverage",
            "f64"
          ],
          [
            "margin_usage_pct",
            "f64"
          ],
          [
            "correlation_risk",
            "f64"
          ],
          [
            "concentration_risk",
            "f64"
          ],
          [
            "liquidity_risk",
            "f64"
          ],
          [
            "max_position_size",
            "f64"
          ],
          [
            "kelly_fraction",
            "f64"
          ],
          [
            "risk_adjusted_return",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SystemHealthSnapshot",
        "file": "crates/infrastructure/src/monitoring_dashboards.rs",
        "line": 103,
        "fields": [
          [
            "timestamp",
            "u64"
          ],
          [
            "uptime_seconds",
            "u64"
          ],
          [
            "cpu_usage_pct",
            "f64"
          ],
          [
            "memory_usage_mb",
            "u64"
          ],
          [
            "memory_usage_pct",
            "f64"
          ],
          [
            "disk_usage_pct",
            "f64"
          ],
          [
            "network_latency_ms",
            "HashMap<String"
          ],
          [
            "api_success_rate",
            "HashMap<String"
          ],
          [
            "websocket_status",
            "HashMap<String"
          ],
          [
            "circuit_breakers",
            "HashMap<String"
          ],
          [
            "error_count_1h",
            "u64"
          ],
          [
            "warning_count_1h",
            "u64"
          ],
          [
            "last_heartbeat",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PerformancePoint",
        "file": "crates/infrastructure/src/monitoring_dashboards.rs",
        "line": 137,
        "fields": [
          [
            "timestamp",
            "u64"
          ],
          [
            "total_pnl",
            "f64"
          ],
          [
            "win_rate",
            "f64"
          ],
          [
            "sharpe_ratio",
            "f64"
          ],
          [
            "sortino_ratio",
            "f64"
          ],
          [
            "calmar_ratio",
            "f64"
          ],
          [
            "trade_count",
            "u64"
          ],
          [
            "volume_traded",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "AlertSnapshot",
        "file": "crates/infrastructure/src/monitoring_dashboards.rs",
        "line": 151,
        "fields": [
          [
            "id",
            "String"
          ],
          [
            "timestamp",
            "u64"
          ],
          [
            "severity",
            "AlertLevel"
          ],
          [
            "category",
            "AlertCategory"
          ],
          [
            "title",
            "String"
          ],
          [
            "message",
            "String"
          ],
          [
            "source",
            "String"
          ],
          [
            "acknowledged",
            "bool"
          ],
          [
            "resolved",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DashboardAggregator",
        "file": "crates/infrastructure/src/monitoring_dashboards.rs",
        "line": 230,
        "fields": [
          [
            "pnl_data",
            "Arc<RwLock<PnLSnapshot>>"
          ],
          [
            "positions",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "risk_metrics",
            "Arc<RwLock<RiskMetricsSnapshot>>"
          ],
          [
            "system_health",
            "Arc<RwLock<SystemHealthSnapshot>>"
          ],
          [
            "performance_history",
            "Arc<RwLock<VecDeque<PerformancePoint>>>"
          ],
          [
            "alerts",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "update_count",
            "Arc<AtomicU64>"
          ],
          [
            "start_time",
            "Instant"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DashboardWebSocketServer",
        "file": "crates/infrastructure/src/monitoring_dashboards.rs",
        "line": 418,
        "fields": [
          [
            "aggregator",
            "Arc<DashboardAggregator>"
          ],
          [
            "broadcast_tx",
            "broadcast::Sender<DashboardMessage>"
          ],
          [
            "client_count",
            "Arc<AtomicU64>"
          ],
          [
            "running",
            "Arc<AtomicBool>"
          ],
          [
            "update_interval",
            "Duration"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DashboardManager",
        "file": "crates/infrastructure/src/monitoring_dashboards.rs",
        "line": 600,
        "fields": [
          [
            "aggregator",
            "Arc<DashboardAggregator>"
          ],
          [
            "ws_server",
            "Arc<DashboardWebSocketServer>"
          ],
          [
            "control_modes",
            "Option<Arc<ControlModeManager>>"
          ],
          [
            "panic_detector",
            "Option<Arc<PanicDetector>>"
          ],
          [
            "kill_switch",
            "Option<Arc<HardwareKillSwitch>>"
          ],
          [
            "circuit_breakers",
            "Option<Arc<CircuitBreakerHub>>"
          ],
          [
            "running",
            "Arc<AtomicBool>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ExtendedDashboardManager",
        "file": "crates/infrastructure/src/monitoring_dashboards.rs",
        "line": 916,
        "fields": [
          [
            "base_manager",
            "Arc<DashboardManager>"
          ],
          [
            "chart_aggregator",
            "Arc<ChartDataAggregator>"
          ],
          [
            "chart_renderer",
            "Arc<ChartRenderer>"
          ],
          [
            "alert_manager",
            "Arc<AlertManager>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ExchangeRiskLimits",
        "file": "crates/infrastructure/src/exchange_specific_safety.rs",
        "line": 162,
        "fields": [
          [
            "max_position_size",
            "Decimal"
          ],
          [
            "max_order_size",
            "Decimal"
          ],
          [
            "max_open_orders",
            "usize"
          ],
          [
            "max_leverage",
            "Decimal"
          ],
          [
            "min_order_size",
            "Decimal"
          ],
          [
            "max_daily_volume",
            "Decimal"
          ],
          [
            "max_exposure_percentage",
            "Decimal"
          ],
          [
            "rate_limit_per_second",
            "u32"
          ],
          [
            "weight_limit_per_minute",
            "u32"
          ],
          [
            "order_cooldown_ms",
            "u64"
          ],
          [
            "max_slippage_percentage",
            "Decimal"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ExchangeMonitor",
        "file": "crates/infrastructure/src/exchange_specific_safety.rs",
        "line": 267,
        "fields": [
          [
            "exchange",
            "Exchange"
          ],
          [
            "health_status",
            "Arc<SyncRwLock<ExchangeHealthStatus>>"
          ],
          [
            "risk_limits",
            "ExchangeRiskLimits"
          ],
          [
            "circuit_breaker",
            "Arc<CircuitBreaker>"
          ],
          [
            "statistical_breaker",
            "Arc<StatisticalBreakerIntegration>"
          ],
          [
            "rate_limiter",
            "Arc<RateLimiter>"
          ],
          [
            "failure_history",
            "Arc<SyncRwLock<VecDeque<FailureEvent>>>"
          ],
          [
            "performance_metrics",
            "Arc<SyncRwLock<PerformanceMetrics>>"
          ],
          [
            "order_tracker",
            "Arc<SyncRwLock<OrderTracker>>"
          ],
          [
            "last_health_check",
            "Arc<SyncRwLock<Instant>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FailureEvent",
        "file": "crates/infrastructure/src/exchange_specific_safety.rs",
        "line": 300,
        "fields": [
          [
            "timestamp",
            "SystemTime"
          ],
          [
            "failure_mode",
            "ExchangeFailureMode"
          ],
          [
            "severity",
            "f64"
          ],
          [
            "description",
            "String"
          ],
          [
            "recovery_time",
            "Option<Duration>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PerformanceMetrics",
        "file": "crates/infrastructure/src/exchange_specific_safety.rs",
        "line": 309,
        "fields": [
          [
            "avg_latency_ms",
            "f64"
          ],
          [
            "p99_latency_ms",
            "f64"
          ],
          [
            "success_rate",
            "f64"
          ],
          [
            "fill_rate",
            "f64"
          ],
          [
            "avg_slippage",
            "Decimal"
          ],
          [
            "uptime_percentage",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderTracker",
        "file": "crates/infrastructure/src/exchange_specific_safety.rs",
        "line": 330,
        "fields": [
          [
            "open_orders",
            "usize"
          ],
          [
            "daily_volume",
            "Decimal"
          ],
          [
            "current_exposure",
            "Decimal"
          ],
          [
            "last_order_time",
            "Option<Instant>"
          ],
          [
            "orders_per_minute",
            "usize"
          ],
          [
            "weight_used",
            "u32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RateLimiter",
        "file": "crates/infrastructure/src/exchange_specific_safety.rs",
        "line": 659,
        "fields": [
          [
            "requests_per_second",
            "u32"
          ],
          [
            "weight_per_minute",
            "u32"
          ],
          [
            "request_times",
            "Arc<Mutex<VecDeque<Instant>>>"
          ],
          [
            "weight_tracker",
            "Arc<Mutex<WeightTracker>>"
          ],
          [
            "semaphore",
            "Arc<Semaphore>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "WeightTracker",
        "file": "crates/infrastructure/src/exchange_specific_safety.rs",
        "line": 677,
        "fields": [
          [
            "weights",
            "VecDeque<(Instant"
          ],
          [
            "total_weight",
            "u32"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ExchangeSafetyCoordinator",
        "file": "crates/infrastructure/src/exchange_specific_safety.rs",
        "line": 714,
        "fields": [
          [
            "monitors",
            "HashMap<Exchange"
          ],
          [
            "global_exposure",
            "Arc<SyncRwLock<GlobalExposure>>"
          ],
          [
            "failover_strategy",
            "Arc<SyncRwLock<FailoverStrategy>>"
          ],
          [
            "config",
            "ExchangeSafetyConfig"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "GlobalExposure",
        "file": "crates/infrastructure/src/exchange_specific_safety.rs",
        "line": 729,
        "fields": [
          [
            "total_exposure",
            "Decimal"
          ],
          [
            "exchange_exposures",
            "HashMap<Exchange"
          ],
          [
            "max_total_exposure",
            "Decimal"
          ],
          [
            "risk_budget",
            "Decimal"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FailoverStrategy",
        "file": "crates/infrastructure/src/exchange_specific_safety.rs",
        "line": 744,
        "fields": [
          [
            "primary",
            "Exchange"
          ],
          [
            "backups",
            "Vec<Exchange>"
          ],
          [
            "active",
            "Exchange"
          ],
          [
            "failover_history",
            "VecDeque<FailoverEvent>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FailoverEvent",
        "file": "crates/infrastructure/src/exchange_specific_safety.rs",
        "line": 759,
        "fields": [
          [
            "timestamp",
            "SystemTime"
          ],
          [
            "from_exchange",
            "Exchange"
          ],
          [
            "to_exchange",
            "Exchange"
          ],
          [
            "reason",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ExchangeSafetyConfig",
        "file": "crates/infrastructure/src/exchange_specific_safety.rs",
        "line": 767,
        "fields": [
          [
            "max_total_exposure",
            "Decimal"
          ],
          [
            "enable_failover",
            "bool"
          ],
          [
            "health_check_interval",
            "Duration"
          ],
          [
            "failover_cooldown",
            "Duration"
          ],
          [
            "min_healthy_exchanges",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ExchangeSafetyStatus",
        "file": "crates/infrastructure/src/exchange_specific_safety.rs",
        "line": 960,
        "fields": [
          [
            "total_exposure",
            "Decimal"
          ],
          [
            "risk_budget",
            "Decimal"
          ],
          [
            "active_exchange",
            "Exchange"
          ],
          [
            "exchange_health",
            "HashMap<Exchange"
          ],
          [
            "recent_failovers",
            "usize"
          ],
          [
            "can_trade",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "HardwareKillSwitch",
        "file": "crates/infrastructure/src/hardware_kill_switch.rs",
        "line": 89,
        "fields": [
          [
            "state",
            "Arc<RwLock<KillSwitchState>>"
          ],
          [
            "emergency_active",
            "Arc<AtomicBool>"
          ],
          [
            "activation_count",
            "Arc<AtomicU64>"
          ],
          [
            "last_activation",
            "Arc<RwLock<Option<Instant>>>"
          ],
          [
            "gpio",
            "Arc<dyn GPIOInterface>"
          ],
          [
            "event_tx",
            "Sender<EmergencyEvent>"
          ],
          [
            "event_rx",
            "Receiver<EmergencyEvent>"
          ],
          [
            "watchdog_active",
            "Arc<AtomicBool>"
          ],
          [
            "stop_category",
            "StopCategory"
          ],
          [
            "audit_log",
            "Arc<RwLock<Vec<AuditEntry>>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "AuditEntry",
        "file": "crates/infrastructure/src/hardware_kill_switch.rs",
        "line": 162,
        "fields": [
          [
            "timestamp",
            "Instant"
          ],
          [
            "event",
            "String"
          ],
          [
            "details",
            "String"
          ],
          [
            "response_time_us",
            "u64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "MockGPIO",
        "file": "crates/infrastructure/src/hardware_kill_switch.rs",
        "line": 570,
        "fields": [
          [
            "pins",
            "Arc<Mutex<HashMap<u8"
          ],
          [
            "modes",
            "Arc<Mutex<HashMap<u8"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "BatchProducer",
        "file": "crates/infrastructure/src/stream_processing/producer.rs",
        "line": 20,
        "fields": [
          [
            "redis_conn",
            "Arc<RwLock<ConnectionManager>>"
          ],
          [
            "buffer",
            "Arc<RwLock<Vec<(String"
          ],
          [
            "batch_size",
            "usize"
          ],
          [
            "flush_interval",
            "Duration"
          ],
          [
            "metrics",
            "Arc<ProducerMetrics>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ProducerMetrics",
        "file": "crates/infrastructure/src/stream_processing/producer.rs",
        "line": 30,
        "fields": [
          [
            "messages_sent",
            "std::sync::atomic::AtomicU64"
          ],
          [
            "batches_sent",
            "std::sync::atomic::AtomicU64"
          ],
          [
            "send_errors",
            "std::sync::atomic::AtomicU64"
          ],
          [
            "avg_batch_size",
            "std::sync::atomic::AtomicU64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PriorityProducer",
        "file": "crates/infrastructure/src/stream_processing/producer.rs",
        "line": 145,
        "fields": [
          [
            "redis_conn",
            "Arc<RwLock<ConnectionManager>>"
          ],
          [
            "circuit_breaker",
            "Arc<StreamCircuitBreaker>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "StreamCircuitBreaker",
        "file": "crates/infrastructure/src/stream_processing/circuit_wrapper.rs",
        "line": 10,
        "fields": [
          [
            "inner",
            "ComponentBreaker"
          ],
          [
            "name",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "StreamConsumer",
        "file": "crates/infrastructure/src/stream_processing/consumer.rs",
        "line": 38,
        "fields": [
          [
            "redis_conn",
            "Arc<RwLock<ConnectionManager>>"
          ],
          [
            "config",
            "ConsumerConfig"
          ],
          [
            "handlers",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "metrics",
            "Arc<ConsumerMetrics>"
          ],
          [
            "circuit_breaker",
            "Arc<StreamCircuitBreaker>"
          ],
          [
            "is_running",
            "Arc<RwLock<bool>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ConsumerConfig",
        "file": "crates/infrastructure/src/stream_processing/consumer.rs",
        "line": 49,
        "fields": [
          [
            "redis_url",
            "String"
          ],
          [
            "group_name",
            "String"
          ],
          [
            "consumer_name",
            "String"
          ],
          [
            "batch_size",
            "usize"
          ],
          [
            "block_timeout",
            "Duration"
          ],
          [
            "max_retries",
            "u32"
          ],
          [
            "ack_timeout",
            "Duration"
          ],
          [
            "claim_idle_time",
            "Duration"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ConsumerMetrics",
        "file": "crates/infrastructure/src/stream_processing/consumer.rs",
        "line": 77,
        "fields": [
          [
            "messages_consumed",
            "std::sync::atomic::AtomicU64"
          ],
          [
            "messages_acked",
            "std::sync::atomic::AtomicU64"
          ],
          [
            "messages_failed",
            "std::sync::atomic::AtomicU64"
          ],
          [
            "processing_time_us",
            "std::sync::atomic::AtomicU64"
          ],
          [
            "lag_messages",
            "std::sync::atomic::AtomicU64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketDataHandler",
        "file": "crates/infrastructure/src/stream_processing/consumer.rs",
        "line": 334,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "FeatureHandler",
        "file": "crates/infrastructure/src/stream_processing/consumer.rs",
        "line": 351,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "SymbolRoute",
        "file": "crates/infrastructure/src/stream_processing/router.rs",
        "line": 34,
        "fields": [
          [
            "symbols",
            "Vec<String>"
          ],
          [
            "destination",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RiskRoute",
        "file": "crates/infrastructure/src/stream_processing/router.rs",
        "line": 65,
        "fields": [
          [
            "severity_threshold",
            "RiskSeverity"
          ],
          [
            "destination",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ConfidenceRoute",
        "file": "crates/infrastructure/src/stream_processing/router.rs",
        "line": 108,
        "fields": [
          [
            "min_confidence",
            "f64"
          ],
          [
            "destination",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MessageRouter",
        "file": "crates/infrastructure/src/stream_processing/router.rs",
        "line": 141,
        "fields": [
          [
            "rules",
            "Arc<RwLock<Vec<Arc<dyn RoutingRule>>>>"
          ],
          [
            "default_destination",
            "String"
          ],
          [
            "metrics",
            "Arc<RouterMetrics>"
          ],
          [
            "producers",
            "Arc<RwLock<HashMap<String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RouterMetrics",
        "file": "crates/infrastructure/src/stream_processing/router.rs",
        "line": 150,
        "fields": [
          [
            "messages_routed",
            "std::sync::atomic::AtomicU64"
          ],
          [
            "routing_decisions_us",
            "std::sync::atomic::AtomicU64"
          ],
          [
            "rules_evaluated",
            "std::sync::atomic::AtomicU64"
          ],
          [
            "default_routes",
            "std::sync::atomic::AtomicU64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "LoadBalancedRouter",
        "file": "crates/infrastructure/src/stream_processing/router.rs",
        "line": 265,
        "fields": [
          [
            "routers",
            "Vec<Arc<MessageRouter>>"
          ],
          [
            "current_index",
            "Arc<std::sync::atomic::AtomicUsize>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FanoutRouter",
        "file": "crates/infrastructure/src/stream_processing/router.rs",
        "line": 293,
        "fields": [
          [
            "destinations",
            "Vec<String>"
          ],
          [
            "producers",
            "Arc<RwLock<HashMap<String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ProcessingPipeline",
        "file": "crates/infrastructure/src/stream_processing/processor.rs",
        "line": 19,
        "fields": [
          [
            "stages",
            "Arc<RwLock<Vec<Arc<dyn ProcessorStage>>>>"
          ],
          [
            "metrics",
            "Arc<PipelineMetrics>"
          ],
          [
            "circuit_breaker",
            "Arc<StreamCircuitBreaker>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PipelineMetrics",
        "file": "crates/infrastructure/src/stream_processing/processor.rs",
        "line": 27,
        "fields": [
          [
            "messages_processed",
            "std::sync::atomic::AtomicU64"
          ],
          [
            "stage_latencies",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "pipeline_latency_us",
            "std::sync::atomic::AtomicU64"
          ],
          [
            "errors",
            "std::sync::atomic::AtomicU64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FeatureExtractionStage",
        "file": "crates/infrastructure/src/stream_processing/processor.rs",
        "line": 132,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "MLInferenceStage",
        "file": "crates/infrastructure/src/stream_processing/processor.rs",
        "line": 195,
        "fields": [
          [
            "model_id",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SignalGenerationStage",
        "file": "crates/infrastructure/src/stream_processing/processor.rs",
        "line": 239,
        "fields": [
          [
            "threshold",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RiskValidationStage",
        "file": "crates/infrastructure/src/stream_processing/processor.rs",
        "line": 288,
        "fields": [
          [
            "max_position_size",
            "f64"
          ],
          [
            "max_daily_trades",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PersistenceStage",
        "file": "crates/infrastructure/src/stream_processing/processor.rs",
        "line": 342,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "PipelineBuilder",
        "file": "crates/infrastructure/src/stream_processing/processor.rs",
        "line": 387,
        "fields": [
          [
            "pipeline",
            "ProcessingPipeline"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "StreamConfig",
        "file": "crates/infrastructure/src/stream_processing/mod.rs",
        "line": 138,
        "fields": [
          [
            "redis_url",
            "String"
          ],
          [
            "batch_size",
            "usize"
          ],
          [
            "buffer_size",
            "usize"
          ],
          [
            "consumer_group",
            "String"
          ],
          [
            "consumer_name",
            "String"
          ],
          [
            "block_timeout",
            "Duration"
          ],
          [
            "max_retries",
            "u32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "StreamProcessor",
        "file": "crates/infrastructure/src/stream_processing/mod.rs",
        "line": 167,
        "fields": [
          [
            "redis_conn",
            "Arc<RwLock<ConnectionManager>>"
          ],
          [
            "config",
            "StreamConfig"
          ],
          [
            "market_tx",
            "mpsc::Sender<StreamMessage>"
          ],
          [
            "market_rx",
            "Arc<RwLock<mpsc::Receiver<StreamMessage>>>"
          ],
          [
            "feature_tx",
            "mpsc::Sender<StreamMessage>"
          ],
          [
            "feature_rx",
            "Arc<RwLock<mpsc::Receiver<StreamMessage>>>"
          ],
          [
            "signal_tx",
            "broadcast::Sender<StreamMessage>"
          ],
          [
            "handles",
            "Arc<RwLock<Vec<JoinHandle<()>>>>"
          ],
          [
            "metrics",
            "Arc<StreamMetrics>"
          ],
          [
            "circuit_breaker",
            "Arc<StreamCircuitBreaker>"
          ],
          [
            "is_running",
            "Arc<RwLock<bool>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "StreamMetrics",
        "file": "crates/infrastructure/src/stream_processing/mod.rs",
        "line": 198,
        "fields": [
          [
            "messages_processed",
            "std::sync::atomic::AtomicU64"
          ],
          [
            "messages_failed",
            "std::sync::atomic::AtomicU64"
          ],
          [
            "batches_processed",
            "std::sync::atomic::AtomicU64"
          ],
          [
            "avg_latency_us",
            "std::sync::atomic::AtomicU64"
          ],
          [
            "current_lag",
            "std::sync::atomic::AtomicU64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SpscRing",
        "file": "crates/infrastructure/src/memory/rings.rs",
        "line": 13,
        "fields": [
          [
            "buffer",
            "Arc<ArrayQueue<T>>"
          ],
          [
            "cached_size",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MpmcRing",
        "file": "crates/infrastructure/src/memory/rings.rs",
        "line": 72,
        "fields": [
          [
            "buffer",
            "Arc<ArrayQueue<T>>"
          ],
          [
            "cached_size",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "UnboundedQueue",
        "file": "crates/infrastructure/src/memory/rings.rs",
        "line": 124,
        "fields": [
          [
            "queue",
            "Arc<SegQueue<T>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TickRing",
        "file": "crates/infrastructure/src/memory/rings.rs",
        "line": 165,
        "fields": [
          [
            "ring",
            "SpscRing<super::pools::Tick>"
          ],
          [
            "dropped",
            "AtomicUsize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderQueue",
        "file": "crates/infrastructure/src/memory/rings.rs",
        "line": 216,
        "fields": [
          [
            "ring",
            "MpmcRing<super::pools::Order>"
          ],
          [
            "rejected",
            "AtomicUsize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MemoryMetrics",
        "file": "crates/infrastructure/src/memory/metrics.rs",
        "line": 13,
        "fields": [
          [
            "allocation_count",
            "CachePadded<AtomicU64>"
          ],
          [
            "allocation_bytes",
            "CachePadded<AtomicU64>"
          ],
          [
            "allocation_latency_ns",
            "CachePadded<AtomicU64>"
          ],
          [
            "order_pool_hits",
            "CachePadded<AtomicU64>"
          ],
          [
            "order_pool_misses",
            "CachePadded<AtomicU64>"
          ],
          [
            "signal_pool_hits",
            "CachePadded<AtomicU64>"
          ],
          [
            "signal_pool_misses",
            "CachePadded<AtomicU64>"
          ],
          [
            "tick_pool_hits",
            "CachePadded<AtomicU64>"
          ],
          [
            "tick_pool_misses",
            "CachePadded<AtomicU64>"
          ],
          [
            "tls_cache_hits",
            "CachePadded<AtomicU64>"
          ],
          [
            "tls_cache_misses",
            "CachePadded<AtomicU64>"
          ],
          [
            "ring_pushes",
            "CachePadded<AtomicU64>"
          ],
          [
            "ring_pops",
            "CachePadded<AtomicU64>"
          ],
          [
            "ring_drops",
            "CachePadded<AtomicU64>"
          ],
          [
            "order_pool_pressure",
            "CachePadded<AtomicU64>"
          ],
          [
            "signal_pool_pressure",
            "CachePadded<AtomicU64>"
          ],
          [
            "tick_pool_pressure",
            "CachePadded<AtomicU64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "GenericPool",
        "file": "crates/infrastructure/src/memory/pools_upgraded.rs",
        "line": 56,
        "fields": [
          [
            "T",
            "Send> {\n    // Global queue - Jordan's lock-free design\n    global: Arc<ArrayQueue<T>>"
          ],
          [
            "local",
            "ThreadLocal<RefCell<Vec<T>>>"
          ],
          [
            "allocated",
            "AtomicU64"
          ],
          [
            "returned",
            "AtomicU64"
          ],
          [
            "hits",
            "AtomicU64"
          ],
          [
            "misses",
            "AtomicU64"
          ],
          [
            "name",
            "String"
          ],
          [
            "capacity",
            "usize"
          ],
          [
            "object_size",
            "usize"
          ],
          [
            "last_acquire_ns",
            "AtomicU64"
          ],
          [
            "last_release_ns",
            "AtomicU64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PoolStats",
        "file": "crates/infrastructure/src/memory/pools_upgraded.rs",
        "line": 234,
        "fields": [
          [
            "name",
            "String"
          ],
          [
            "capacity",
            "usize"
          ],
          [
            "allocated",
            "u64"
          ],
          [
            "returned",
            "u64"
          ],
          [
            "hits",
            "u64"
          ],
          [
            "misses",
            "u64"
          ],
          [
            "hit_rate",
            "f64"
          ],
          [
            "memory_usage_mb",
            "usize"
          ],
          [
            "last_acquire_ns",
            "u64"
          ],
          [
            "last_release_ns",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Order",
        "file": "crates/infrastructure/src/memory/pools_upgraded.rs",
        "line": 252,
        "fields": [
          [
            "id",
            "u64"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "side",
            "OrderSide"
          ],
          [
            "quantity",
            "f64"
          ],
          [
            "price",
            "f64"
          ],
          [
            "timestamp",
            "u64"
          ],
          [
            "Casey",
            "\"Additional fields for exchange integration\"\n    pub client_order_id: Option<String>"
          ],
          [
            "exchange_order_id",
            "Option<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Signal",
        "file": "crates/infrastructure/src/memory/pools_upgraded.rs",
        "line": 265,
        "fields": [
          [
            "id",
            "u64"
          ],
          [
            "source",
            "String"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "strength",
            "f64"
          ],
          [
            "confidence",
            "f64"
          ],
          [
            "timestamp",
            "u64"
          ],
          [
            "Morgan",
            "\"ML model metadata\"\n    pub model_version: String"
          ],
          [
            "features",
            "Vec<f64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Tick",
        "file": "crates/infrastructure/src/memory/pools_upgraded.rs",
        "line": 278,
        "fields": [
          [
            "symbol",
            "String"
          ],
          [
            "bid",
            "f64"
          ],
          [
            "ask",
            "f64"
          ],
          [
            "bid_size",
            "f64"
          ],
          [
            "ask_size",
            "f64"
          ],
          [
            "timestamp",
            "u64"
          ],
          [
            "Avery",
            "\"Exchange source tracking\"\n    pub exchange: String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Fill",
        "file": "crates/infrastructure/src/memory/pools_upgraded.rs",
        "line": 290,
        "fields": [
          [
            "order_id",
            "u64"
          ],
          [
            "price",
            "f64"
          ],
          [
            "quantity",
            "f64"
          ],
          [
            "fee",
            "f64"
          ],
          [
            "timestamp",
            "u64"
          ],
          [
            "Quinn",
            "\"Risk tracking\"\n    pub pnl: Option<f64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Event",
        "file": "crates/infrastructure/src/memory/pools_upgraded.rs",
        "line": 301,
        "fields": [
          [
            "id",
            "u64"
          ],
          [
            "event_type",
            "EventType"
          ],
          [
            "payload",
            "Vec<u8>"
          ],
          [
            "timestamp",
            "u64"
          ],
          [
            "Sam",
            "\"Event sourcing support\"\n    pub sequence: u64"
          ],
          [
            "source",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PoolManager",
        "file": "crates/infrastructure/src/memory/pools_upgraded.rs",
        "line": 332,
        "fields": [
          [
            "order_pool",
            "Arc<GenericPool<Order>>"
          ],
          [
            "signal_pool",
            "Arc<GenericPool<Signal>>"
          ],
          [
            "tick_pool",
            "Arc<GenericPool<Tick>>"
          ],
          [
            "fill_pool",
            "Arc<GenericPool<Fill>>"
          ],
          [
            "event_pool",
            "Arc<GenericPool<Event>>"
          ],
          [
            "stats_collector",
            "Arc<RwLock<Vec<PoolStats>>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ThreadRegistry",
        "file": "crates/infrastructure/src/memory/safe_pools.rs",
        "line": 49,
        "fields": [
          [
            "threads",
            "RwLock<HashMap<ThreadId"
          ],
          [
            "cleanup_thread",
            "Mutex<Option<thread::JoinHandle<()>>>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ThreadInfo",
        "file": "crates/infrastructure/src/memory/safe_pools.rs",
        "line": 54,
        "fields": [
          [
            "id",
            "ThreadId"
          ],
          [
            "name",
            "String"
          ],
          [
            "created",
            "Instant"
          ],
          [
            "last_active",
            "Instant"
          ],
          [
            "memory_usage",
            "AtomicUsize"
          ],
          [
            "objects_held",
            "AtomicUsize"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "MemoryStats",
        "file": "crates/infrastructure/src/memory/safe_pools.rs",
        "line": 172,
        "fields": [
          [
            "total_allocated",
            "AtomicU64"
          ],
          [
            "total_freed",
            "AtomicU64"
          ],
          [
            "current_usage",
            "AtomicU64"
          ],
          [
            "peak_usage",
            "AtomicU64"
          ],
          [
            "allocation_failures",
            "AtomicU64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "MemoryStatsSnapshot",
        "file": "crates/infrastructure/src/memory/safe_pools.rs",
        "line": 224,
        "fields": [
          [
            "total_allocated",
            "u64"
          ],
          [
            "total_freed",
            "u64"
          ],
          [
            "current_usage",
            "u64"
          ],
          [
            "peak_usage",
            "u64"
          ],
          [
            "allocation_failures",
            "u64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "SafeObjectPool",
        "file": "crates/infrastructure/src/memory/safe_pools.rs",
        "line": 238,
        "fields": [
          [
            "T",
            "Default + Send + Sync + 'static> {\n    // Global pool using lock-free queue\n    global: Arc<ArrayQueue<Box<T>>>"
          ],
          [
            "local_caches",
            "Arc<ThreadLocal<RefCell<LocalCache<T>>>>"
          ],
          [
            "garbage",
            "Arc<Atomic<GarbageList<T>>>"
          ],
          [
            "config",
            "PoolConfig"
          ],
          [
            "stats",
            "Arc<PoolStatistics>"
          ],
          [
            "shutdown",
            "Arc<AtomicBool>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "LocalCache",
        "file": "crates/infrastructure/src/memory/safe_pools.rs",
        "line": 258,
        "fields": [
          [
            "cache",
            "Vec<Box<T>>"
          ],
          [
            "thread_id",
            "ThreadId"
          ],
          [
            "last_cleanup",
            "Instant"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "GarbageList",
        "file": "crates/infrastructure/src/memory/safe_pools.rs",
        "line": 264,
        "fields": [
          [
            "T",
            "Send + Sync + 'static> {\n    items: Vec<Box<T>>"
          ],
          [
            "next",
            "Option<Shared<'static"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "PoolConfig",
        "file": "crates/infrastructure/src/memory/safe_pools.rs",
        "line": 275,
        "fields": [
          [
            "name",
            "String"
          ],
          [
            "capacity",
            "usize"
          ],
          [
            "object_size",
            "usize"
          ],
          [
            "max_thread_local",
            "usize"
          ],
          [
            "enable_metrics",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PoolStatistics",
        "file": "crates/infrastructure/src/memory/safe_pools.rs",
        "line": 283,
        "fields": [
          [
            "allocations",
            "AtomicU64"
          ],
          [
            "deallocations",
            "AtomicU64"
          ],
          [
            "hits",
            "AtomicU64"
          ],
          [
            "misses",
            "AtomicU64"
          ],
          [
            "reclaimed",
            "AtomicU64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "PoolStats",
        "file": "crates/infrastructure/src/memory/safe_pools.rs",
        "line": 570,
        "fields": [
          [
            "name",
            "String"
          ],
          [
            "capacity",
            "usize"
          ],
          [
            "allocations",
            "u64"
          ],
          [
            "deallocations",
            "u64"
          ],
          [
            "hits",
            "u64"
          ],
          [
            "misses",
            "u64"
          ],
          [
            "hit_rate",
            "f64"
          ],
          [
            "reclaimed",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Order",
        "file": "crates/infrastructure/src/memory/safe_pools.rs",
        "line": 627,
        "fields": [
          [
            "id",
            "u64"
          ],
          [
            "symbol_id",
            "u32"
          ],
          [
            "side",
            "OrderSide"
          ],
          [
            "quantity",
            "f64"
          ],
          [
            "price",
            "f64"
          ],
          [
            "timestamp",
            "u64"
          ],
          [
            "symbol_buffer",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Signal",
        "file": "crates/infrastructure/src/memory/safe_pools.rs",
        "line": 673,
        "fields": [
          [
            "id",
            "u64"
          ],
          [
            "symbol_id",
            "u32"
          ],
          [
            "signal_type",
            "SignalType"
          ],
          [
            "strength",
            "f64"
          ],
          [
            "confidence",
            "f64"
          ],
          [
            "timestamp",
            "u64"
          ],
          [
            "features",
            "Vec<f64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Tick",
        "file": "crates/infrastructure/src/memory/safe_pools.rs",
        "line": 706,
        "fields": [
          [
            "symbol_id",
            "u32"
          ],
          [
            "bid",
            "f64"
          ],
          [
            "ask",
            "f64"
          ],
          [
            "bid_volume",
            "f64"
          ],
          [
            "ask_volume",
            "f64"
          ],
          [
            "last_price",
            "f64"
          ],
          [
            "last_volume",
            "f64"
          ],
          [
            "timestamp",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderPool",
        "file": "crates/infrastructure/src/memory/pools.rs",
        "line": 17,
        "fields": [
          [
            "global",
            "Arc<ArrayQueue<Box<Order>>>"
          ],
          [
            "local",
            "ThreadLocal<RefCell<Vec<Box<Order>>>>"
          ],
          [
            "allocated",
            "AtomicUsize"
          ],
          [
            "acquired",
            "AtomicUsize"
          ],
          [
            "returned",
            "AtomicUsize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SignalPool",
        "file": "crates/infrastructure/src/memory/pools.rs",
        "line": 26,
        "fields": [
          [
            "global",
            "Arc<ArrayQueue<Box<Signal>>>"
          ],
          [
            "local",
            "ThreadLocal<RefCell<Vec<Box<Signal>>>>"
          ],
          [
            "allocated",
            "AtomicUsize"
          ],
          [
            "acquired",
            "AtomicUsize"
          ],
          [
            "returned",
            "AtomicUsize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TickPool",
        "file": "crates/infrastructure/src/memory/pools.rs",
        "line": 35,
        "fields": [
          [
            "global",
            "Arc<ArrayQueue<Box<Tick>>>"
          ],
          [
            "local",
            "ThreadLocal<RefCell<Vec<Box<Tick>>>>"
          ],
          [
            "allocated",
            "AtomicUsize"
          ],
          [
            "acquired",
            "AtomicUsize"
          ],
          [
            "returned",
            "AtomicUsize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Order",
        "file": "crates/infrastructure/src/memory/pools.rs",
        "line": 45,
        "fields": [
          [
            "id",
            "u64"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "symbol_id",
            "u32"
          ],
          [
            "FAST",
            "Use this in hot paths instead of String\n    pub side: OrderSide"
          ],
          [
            "quantity",
            "f64"
          ],
          [
            "price",
            "f64"
          ],
          [
            "timestamp",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Signal",
        "file": "crates/infrastructure/src/memory/pools.rs",
        "line": 62,
        "fields": [
          [
            "id",
            "u64"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "symbol_id",
            "u32"
          ],
          [
            "FAST",
            "Use this in hot paths instead of String\n    pub signal_type: SignalType"
          ],
          [
            "strength",
            "f64"
          ],
          [
            "timestamp",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Tick",
        "file": "crates/infrastructure/src/memory/pools.rs",
        "line": 79,
        "fields": [
          [
            "symbol",
            "String"
          ],
          [
            "bid",
            "f64"
          ],
          [
            "ask",
            "f64"
          ],
          [
            "bid_volume",
            "f64"
          ],
          [
            "ask_volume",
            "f64"
          ],
          [
            "timestamp",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PoolStats",
        "file": "crates/infrastructure/src/memory/pools.rs",
        "line": 396,
        "fields": [
          [
            "order_allocated",
            "usize"
          ],
          [
            "order_returned",
            "usize"
          ],
          [
            "order_pressure",
            "f64"
          ],
          [
            "signal_allocated",
            "usize"
          ],
          [
            "signal_returned",
            "usize"
          ],
          [
            "signal_pressure",
            "f64"
          ],
          [
            "tick_allocated",
            "usize"
          ],
          [
            "tick_returned",
            "usize"
          ],
          [
            "tick_pressure",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MemoryStats",
        "file": "crates/infrastructure/src/memory/mod.rs",
        "line": 93,
        "fields": [
          [
            "allocated_bytes",
            "usize"
          ],
          [
            "reserved_bytes",
            "usize"
          ],
          [
            "pool_stats",
            "PoolStats"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TrackingAllocator",
        "file": "crates/infrastructure/src/memory/zero_alloc_tests.rs",
        "line": 16,
        "fields": [
          [
            "allocations",
            "AtomicUsize"
          ],
          [
            "deallocations",
            "AtomicUsize"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ObjectPool",
        "file": "crates/infrastructure/src/zero_copy/mod.rs",
        "line": 32,
        "fields": [
          [
            "T",
            "Default + Send> {\n    pool: Arc<ArrayQueue<Box<T>>>"
          ],
          [
            "capacity",
            "usize"
          ],
          [
            "allocated",
            "AtomicUsize"
          ],
          [
            "hits",
            "AtomicU64"
          ],
          [
            "misses",
            "AtomicU64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PoolGuard",
        "file": "crates/infrastructure/src/zero_copy/mod.rs",
        "line": 99,
        "fields": [
          [
            "T",
            "Send> {\n    object: Option<Box<T>>"
          ],
          [
            "pool",
            "Arc<ArrayQueue<Box<T>>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PoolStats",
        "file": "crates/infrastructure/src/zero_copy/mod.rs",
        "line": 128,
        "fields": [
          [
            "capacity",
            "usize"
          ],
          [
            "allocated",
            "usize"
          ],
          [
            "hits",
            "u64"
          ],
          [
            "misses",
            "u64"
          ],
          [
            "hit_rate",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Arena",
        "file": "crates/infrastructure/src/zero_copy/mod.rs",
        "line": 141,
        "fields": [
          [
            "memory",
            "*mut u8"
          ],
          [
            "size",
            "usize"
          ],
          [
            "offset",
            "AtomicUsize"
          ],
          [
            "generation",
            "AtomicU64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "LockFreeMetrics",
        "file": "crates/infrastructure/src/zero_copy/mod.rs",
        "line": 209,
        "fields": [
          [
            "metrics",
            "Arc<DashMap<String"
          ],
          [
            "counters",
            "Arc<DashMap<String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ZeroCopyPipeline",
        "file": "crates/infrastructure/src/zero_copy/mod.rs",
        "line": 261,
        "fields": [
          [
            "buffer_pool",
            "ObjectPool<Vec<f64>>"
          ],
          [
            "arena",
            "Arc<Arena>"
          ],
          [
            "metrics",
            "LockFreeMetrics"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RingBuffer",
        "file": "crates/infrastructure/src/zero_copy/mod.rs",
        "line": 346,
        "fields": [
          [
            "T",
            "Copy> {\n    buffer: *mut T"
          ],
          [
            "capacity",
            "usize"
          ],
          [
            "mask",
            "usize"
          ],
          [
            "head",
            "AtomicUsize"
          ],
          [
            "tail",
            "AtomicUsize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ZeroCopyMatrix",
        "file": "crates/infrastructure/src/zero_copy/mod.rs",
        "line": 427,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "MemoryPoolManager",
        "file": "crates/infrastructure/src/zero_copy/mod.rs",
        "line": 511,
        "fields": [
          [
            "matrix_pool",
            "ObjectPool<Vec<f64>>"
          ],
          [
            "vector_pool",
            "ObjectPool<Vec<f64>>"
          ],
          [
            "batch_pool",
            "ObjectPool<Vec<Vec<f64>>>"
          ],
          [
            "metrics",
            "LockFreeMetrics"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PoolManagerStats",
        "file": "crates/infrastructure/src/zero_copy/mod.rs",
        "line": 595,
        "fields": [
          [
            "matrix_stats",
            "PoolStats"
          ],
          [
            "vector_stats",
            "PoolStats"
          ],
          [
            "batch_stats",
            "PoolStats"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FastOrderProcessor",
        "file": "crates/trading_engine/src/fast_order_processor.rs",
        "line": 24,
        "fields": [
          [
            "orders_processed",
            "Arc<AtomicU64>"
          ],
          [
            "signals_processed",
            "Arc<AtomicU64>"
          ],
          [
            "allocations_avoided",
            "Arc<AtomicU64>"
          ],
          [
            "is_running",
            "Arc<AtomicBool>"
          ],
          [
            "max_position_size",
            "Decimal"
          ],
          [
            "max_order_value",
            "Decimal"
          ],
          [
            "min_order_size",
            "Decimal"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ProcessorStats",
        "file": "crates/trading_engine/src/fast_order_processor.rs",
        "line": 290,
        "fields": [
          [
            "orders_processed",
            "u64"
          ],
          [
            "signals_processed",
            "u64"
          ],
          [
            "allocations_avoided",
            "u64"
          ],
          [
            "pool_stats",
            "infrastructure::GlobalPoolStats"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FeeStructure",
        "file": "crates/trading_engine/src/fees_slippage.rs",
        "line": 10,
        "fields": [
          [
            "exchange",
            "String"
          ],
          [
            "maker_fee_bps",
            "Decimal"
          ],
          [
            "taker_fee_bps",
            "Decimal"
          ],
          [
            "tier",
            "TradingTier"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketImpactModel",
        "file": "crates/trading_engine/src/fees_slippage.rs",
        "line": 28,
        "fields": [
          [
            "gamma",
            "f64"
          ],
          [
            "participation_rate",
            "f64"
          ],
          [
            "temp_impact_ratio",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "QueueModel",
        "file": "crates/trading_engine/src/fees_slippage.rs",
        "line": 79,
        "fields": [
          [
            "avg_queue_size",
            "f64"
          ],
          [
            "arrival_rate",
            "f64"
          ],
          [
            "cancel_rate",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "LOBSimulator",
        "file": "crates/trading_engine/src/fees_slippage.rs",
        "line": 125,
        "fields": [
          [
            "snapshots",
            "Vec<OrderBookSnapshot>"
          ],
          [
            "fees",
            "HashMap<String"
          ],
          [
            "impact_model",
            "MarketImpactModel"
          ],
          [
            "queue_model",
            "QueueModel"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderBookSnapshot",
        "file": "crates/trading_engine/src/fees_slippage.rs",
        "line": 140,
        "fields": [
          [
            "timestamp",
            "i64"
          ],
          [
            "bids",
            "Vec<(f64"
          ],
          [
            "asks",
            "Vec<(f64"
          ],
          [
            "last_trade",
            "Option<(f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Order",
        "file": "crates/trading_engine/src/fees_slippage.rs",
        "line": 377,
        "fields": [
          [
            "side",
            "Side"
          ],
          [
            "quantity",
            "f64"
          ],
          [
            "price",
            "f64"
          ],
          [
            "order_type",
            "OrderType"
          ],
          [
            "exchange",
            "String"
          ],
          [
            "expected_mid",
            "Option<f64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ExecutionResult",
        "file": "crates/trading_engine/src/fees_slippage.rs",
        "line": 400,
        "fields": [
          [
            "filled_quantity",
            "f64"
          ],
          [
            "average_price",
            "f64"
          ],
          [
            "fees",
            "f64"
          ],
          [
            "slippage_bps",
            "f64"
          ],
          [
            "market_impact_bps",
            "f64"
          ],
          [
            "adverse_selection_bps",
            "f64"
          ],
          [
            "net_edge",
            "f64"
          ],
          [
            "fills",
            "Vec<(f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ExchangeFeeStructure",
        "file": "crates/trading_engine/src/fee_optimization.rs",
        "line": 20,
        "fields": [
          [
            "exchange_name",
            "String"
          ],
          [
            "base_maker_fee_bps",
            "i32"
          ],
          [
            "base_taker_fee_bps",
            "i32"
          ],
          [
            "volume_tiers",
            "Vec<VolumeTier>"
          ],
          [
            "vip_tiers",
            "Vec<VipTier>"
          ],
          [
            "rebate_available",
            "bool"
          ],
          [
            "rebate_bps",
            "i32"
          ],
          [
            "special_programs",
            "Vec<SpecialProgram>"
          ],
          [
            "native_token_discount",
            "Option<TokenDiscount>"
          ],
          [
            "referral_discount_pct",
            "f64"
          ],
          [
            "updated_at",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "VolumeTier",
        "file": "crates/trading_engine/src/fee_optimization.rs",
        "line": 36,
        "fields": [
          [
            "min_volume_usd",
            "Decimal"
          ],
          [
            "maker_fee_bps",
            "i32"
          ],
          [
            "taker_fee_bps",
            "i32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "VipTier",
        "file": "crates/trading_engine/src/fee_optimization.rs",
        "line": 44,
        "fields": [
          [
            "level",
            "u8"
          ],
          [
            "min_volume_30d",
            "Decimal"
          ],
          [
            "min_balance",
            "Decimal"
          ],
          [
            "maker_fee_bps",
            "i32"
          ],
          [
            "taker_fee_bps",
            "i32"
          ],
          [
            "benefits",
            "Vec<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketMakerRequirements",
        "file": "crates/trading_engine/src/fee_optimization.rs",
        "line": 73,
        "fields": [
          [
            "min_volume_30d",
            "Decimal"
          ],
          [
            "min_orders_per_day",
            "u64"
          ],
          [
            "max_spread_bps",
            "i32"
          ],
          [
            "min_uptime_pct",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TokenDiscount",
        "file": "crates/trading_engine/src/fee_optimization.rs",
        "line": 82,
        "fields": [
          [
            "token_symbol",
            "String"
          ],
          [
            "discount_pct",
            "f64"
          ],
          [
            "min_holding",
            "Decimal"
          ],
          [
            "payment_in_token",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TradingStatistics",
        "file": "crates/trading_engine/src/fee_optimization.rs",
        "line": 91,
        "fields": [
          [
            "volume_30d",
            "Decimal"
          ],
          [
            "volume_mtd",
            "Decimal"
          ],
          [
            "maker_volume_30d",
            "Decimal"
          ],
          [
            "taker_volume_30d",
            "Decimal"
          ],
          [
            "orders_per_day_avg",
            "f64"
          ],
          [
            "native_token_balance",
            "Decimal"
          ],
          [
            "vip_level",
            "Option<u8>"
          ],
          [
            "is_market_maker",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FeeCalculation",
        "file": "crates/trading_engine/src/fee_optimization.rs",
        "line": 104,
        "fields": [
          [
            "exchange",
            "String"
          ],
          [
            "order_type",
            "OrderType"
          ],
          [
            "base_fee_bps",
            "i32"
          ],
          [
            "effective_fee_bps",
            "i32"
          ],
          [
            "fee_amount",
            "Decimal"
          ],
          [
            "rebate_amount",
            "Decimal"
          ],
          [
            "net_fee",
            "Decimal"
          ],
          [
            "savings_from_optimization",
            "Decimal"
          ],
          [
            "applied_discounts",
            "Vec<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FeeOptimizationEngine",
        "file": "crates/trading_engine/src/fee_optimization.rs",
        "line": 134,
        "fields": [
          [
            "exchange_fees",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "our_stats",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "strategy",
            "Arc<RwLock<OptimizationStrategy>>"
          ],
          [
            "fee_history",
            "Arc<RwLock<Vec<FeeCalculation>>>"
          ],
          [
            "optimal_routes_cache",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "config",
            "FeeOptimizerConfig"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OptimalRoute",
        "file": "crates/trading_engine/src/fee_optimization.rs",
        "line": 156,
        "fields": [
          [
            "symbol",
            "String"
          ],
          [
            "exchanges_ranked",
            "Vec<ExchangeRanking>"
          ],
          [
            "recommended_type",
            "OrderType"
          ],
          [
            "estimated_savings_bps",
            "i32"
          ],
          [
            "calculated_at",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ExchangeRanking",
        "file": "crates/trading_engine/src/fee_optimization.rs",
        "line": 165,
        "fields": [
          [
            "exchange",
            "String"
          ],
          [
            "score",
            "f64"
          ],
          [
            "effective_fee_bps",
            "i32"
          ],
          [
            "pros",
            "Vec<String>"
          ],
          [
            "cons",
            "Vec<String>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "FeeOptimizerConfig",
        "file": "crates/trading_engine/src/fee_optimization.rs",
        "line": 175,
        "fields": [
          [
            "max_acceptable_fee_bps",
            "i32"
          ],
          [
            "min_rebate_to_provide_liquidity",
            "i32"
          ],
          [
            "tier_qualification_window",
            "i32"
          ],
          [
            "cache_duration_seconds",
            "i64"
          ],
          [
            "consider_slippage",
            "bool"
          ],
          [
            "slippage_estimate_bps",
            "i32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TierRecommendation",
        "file": "crates/trading_engine/src/fee_optimization.rs",
        "line": 713,
        "fields": [
          [
            "exchange",
            "String"
          ],
          [
            "current_volume",
            "Decimal"
          ],
          [
            "target_volume",
            "Decimal"
          ],
          [
            "volume_needed",
            "Decimal"
          ],
          [
            "days_remaining",
            "i32"
          ],
          [
            "daily_volume_required",
            "Decimal"
          ],
          [
            "savings_per_trade_bps",
            "i32"
          ],
          [
            "estimated_monthly_savings",
            "Decimal"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FeeStatistics",
        "file": "crates/trading_engine/src/fee_optimization.rs",
        "line": 725,
        "fields": [
          [
            "total_fees_paid",
            "Decimal"
          ],
          [
            "total_rebates_earned",
            "Decimal"
          ],
          [
            "total_savings",
            "Decimal"
          ],
          [
            "avg_effective_fee_bps",
            "i32"
          ],
          [
            "trades_analyzed",
            "usize"
          ],
          [
            "best_exchange",
            "Option<String>"
          ],
          [
            "worst_exchange",
            "Option<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Position",
        "file": "crates/trading_engine/src/liquidation_engine.rs",
        "line": 22,
        "fields": [
          [
            "id",
            "String"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "side",
            "PositionSide"
          ],
          [
            "quantity",
            "Decimal"
          ],
          [
            "entry_price",
            "Decimal"
          ],
          [
            "current_price",
            "Decimal"
          ],
          [
            "unrealized_pnl",
            "Decimal"
          ],
          [
            "exchange",
            "String"
          ],
          [
            "opened_at",
            "DateTime<Utc>"
          ],
          [
            "margin_used",
            "Decimal"
          ],
          [
            "leverage",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "LiquidationOrder",
        "file": "crates/trading_engine/src/liquidation_engine.rs",
        "line": 64,
        "fields": [
          [
            "id",
            "String"
          ],
          [
            "position_id",
            "String"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "side",
            "OrderSide"
          ],
          [
            "quantity",
            "Decimal"
          ],
          [
            "strategy",
            "LiquidationStrategy"
          ],
          [
            "urgency",
            "LiquidationUrgency"
          ],
          [
            "created_at",
            "DateTime<Utc>"
          ],
          [
            "target_completion",
            "DateTime<Utc>"
          ],
          [
            "slices",
            "Vec<OrderSlice>"
          ],
          [
            "status",
            "LiquidationStatus"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderSlice",
        "file": "crates/trading_engine/src/liquidation_engine.rs",
        "line": 86,
        "fields": [
          [
            "slice_id",
            "String"
          ],
          [
            "quantity",
            "Decimal"
          ],
          [
            "target_price",
            "Option<Decimal>"
          ],
          [
            "execute_at",
            "DateTime<Utc>"
          ],
          [
            "executed_quantity",
            "Decimal"
          ],
          [
            "executed_price",
            "Option<Decimal>"
          ],
          [
            "status",
            "SliceStatus"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketConditions",
        "file": "crates/trading_engine/src/liquidation_engine.rs",
        "line": 116,
        "fields": [
          [
            "liquidity_score",
            "f64"
          ],
          [
            "volatility",
            "f64"
          ],
          [
            "spread_bps",
            "i32"
          ],
          [
            "depth_imbalance",
            "f64"
          ],
          [
            "recent_slippage_bps",
            "i32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "LiquidationEngine",
        "file": "crates/trading_engine/src/liquidation_engine.rs",
        "line": 126,
        "fields": [
          [
            "active_liquidations",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "liquidation_queue",
            "Arc<RwLock<VecDeque<Position>>>"
          ],
          [
            "market_conditions",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "emergency_mode",
            "Arc<AtomicBool>"
          ],
          [
            "order_tx",
            "mpsc::Sender<ExecutionRequest>"
          ],
          [
            "event_tx",
            "broadcast::Sender<LiquidationEvent>"
          ],
          [
            "config",
            "LiquidationConfig"
          ],
          [
            "total_liquidated",
            "Arc<AtomicU64>"
          ],
          [
            "total_loss_minimized",
            "Arc<RwLock<Decimal>>"
          ],
          [
            "avg_slippage_bps",
            "Arc<RwLock<i32>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ExecutionRequest",
        "file": "crates/trading_engine/src/liquidation_engine.rs",
        "line": 156,
        "fields": [
          [
            "order_id",
            "String"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "side",
            "OrderSide"
          ],
          [
            "quantity",
            "Decimal"
          ],
          [
            "order_type",
            "OrderType"
          ],
          [
            "price",
            "Option<Decimal>"
          ],
          [
            "exchange",
            "String"
          ],
          [
            "time_in_force",
            "TimeInForce"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "LiquidationConfig",
        "file": "crates/trading_engine/src/liquidation_engine.rs",
        "line": 205,
        "fields": [
          [
            "max_single_order_pct",
            "f64"
          ],
          [
            "twap_duration_seconds",
            "i64"
          ],
          [
            "min_slice_size",
            "Decimal"
          ],
          [
            "max_slippage_bps",
            "i32"
          ],
          [
            "emergency_slippage_bps",
            "i32"
          ],
          [
            "adaptive_threshold",
            "f64"
          ],
          [
            "max_concurrent_liquidations",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "LiquidationStatistics",
        "file": "crates/trading_engine/src/liquidation_engine.rs",
        "line": 591,
        "fields": [
          [
            "total_liquidations",
            "u64"
          ],
          [
            "active_liquidations",
            "usize"
          ],
          [
            "queued_liquidations",
            "usize"
          ],
          [
            "total_loss_minimized",
            "Decimal"
          ],
          [
            "avg_slippage_bps",
            "i32"
          ],
          [
            "emergency_mode",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Uuid",
        "file": "crates/trading_engine/src/liquidation_engine.rs",
        "line": 606,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "OCOGroup",
        "file": "crates/trading_engine/src/orders/oco.rs",
        "line": 17,
        "fields": [
          [
            "group_id",
            "Uuid"
          ],
          [
            "primary_order",
            "Order"
          ],
          [
            "secondary_order",
            "Order"
          ],
          [
            "link_type",
            "OCOLinkType"
          ],
          [
            "created_at",
            "DateTime<Utc>"
          ],
          [
            "status",
            "OCOStatus"
          ],
          [
            "metadata",
            "OCOMetadata"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OCOMetadata",
        "file": "crates/trading_engine/src/orders/oco.rs",
        "line": 59,
        "fields": [
          [
            "strategy",
            "String"
          ],
          [
            "risk_limit",
            "f64"
          ],
          [
            "max_slippage",
            "f64"
          ],
          [
            "time_in_force",
            "TimeInForce"
          ],
          [
            "expire_time",
            "Option<DateTime<Utc>>"
          ],
          [
            "reduce_only",
            "bool"
          ],
          [
            "post_only",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Order",
        "file": "crates/trading_engine/src/orders/oco.rs",
        "line": 80,
        "fields": [
          [
            "order_id",
            "Uuid"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "side",
            "OrderSide"
          ],
          [
            "order_type",
            "OrderType"
          ],
          [
            "quantity",
            "f64"
          ],
          [
            "price",
            "Option<f64>"
          ],
          [
            "stop_price",
            "Option<f64>"
          ],
          [
            "status",
            "OrderStatus"
          ],
          [
            "filled_quantity",
            "f64"
          ],
          [
            "avg_fill_price",
            "f64"
          ],
          [
            "fees",
            "f64"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OCOManager",
        "file": "crates/trading_engine/src/orders/oco.rs",
        "line": 123,
        "fields": [
          [
            "active_groups",
            "Arc<RwLock<HashMap<Uuid"
          ],
          [
            "order_to_group",
            "Arc<RwLock<HashMap<Uuid"
          ],
          [
            "symbol_groups",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "risk_validator",
            "Arc<dyn RiskValidator>"
          ],
          [
            "exchange",
            "Arc<dyn ExchangeConnector>"
          ],
          [
            "metrics",
            "OCOMetrics"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderModification",
        "file": "crates/trading_engine/src/orders/oco.rs",
        "line": 161,
        "fields": [
          [
            "new_price",
            "Option<f64>"
          ],
          [
            "new_quantity",
            "Option<f64>"
          ],
          [
            "new_stop_price",
            "Option<f64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OCOMetrics",
        "file": "crates/trading_engine/src/orders/oco.rs",
        "line": 169,
        "fields": [
          [
            "total_groups_created",
            "u64"
          ],
          [
            "successful_fills",
            "u64"
          ],
          [
            "cancelled_groups",
            "u64"
          ],
          [
            "risk_rejections",
            "u64"
          ],
          [
            "avg_execution_time_ms",
            "f64"
          ],
          [
            "slippage_stats",
            "SlippageStats"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "SlippageStats",
        "file": "crates/trading_engine/src/orders/oco.rs",
        "line": 179,
        "fields": [
          [
            "positive_slippage",
            "f64"
          ],
          [
            "negative_slippage",
            "f64"
          ],
          [
            "total_slippage",
            "f64"
          ],
          [
            "count",
            "u64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "MockRiskValidator",
        "file": "crates/trading_engine/src/orders/oco.rs",
        "line": 574,
        "fields": [],
        "visibility": "private"
      },
      {
        "name": "MockExchange",
        "file": "crates/trading_engine/src/orders/oco.rs",
        "line": 591,
        "fields": [],
        "visibility": "private"
      },
      {
        "name": "SagaContext",
        "file": "crates/trading_engine/src/transactions/saga.rs",
        "line": 80,
        "fields": [
          [
            "saga_id",
            "Uuid"
          ],
          [
            "transaction_id",
            "Uuid"
          ],
          [
            "state",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "history",
            "Arc<RwLock<Vec<ExecutionRecord>>>"
          ],
          [
            "metadata",
            "HashMap<String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ExecutionRecord",
        "file": "crates/trading_engine/src/transactions/saga.rs",
        "line": 94,
        "fields": [
          [
            "step_name",
            "String"
          ],
          [
            "started_at",
            "u64"
          ],
          [
            "completed_at",
            "Option<u64>"
          ],
          [
            "result",
            "String"
          ],
          [
            "error",
            "Option<String>"
          ],
          [
            "retries",
            "u32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Saga",
        "file": "crates/trading_engine/src/transactions/saga.rs",
        "line": 149,
        "fields": [
          [
            "id",
            "Uuid"
          ],
          [
            "name",
            "String"
          ],
          [
            "steps",
            "Vec<Box<dyn SagaStep + Send + Sync>>"
          ],
          [
            "current_step",
            "usize"
          ],
          [
            "state",
            "SagaState"
          ],
          [
            "context",
            "SagaContext"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SagaOrchestrator",
        "file": "crates/trading_engine/src/transactions/saga.rs",
        "line": 326,
        "fields": [
          [
            "sagas",
            "Arc<RwLock<HashMap<Uuid"
          ],
          [
            "event_tx",
            "mpsc::UnboundedSender<SagaEvent>"
          ],
          [
            "metrics",
            "Arc<SagaMetrics>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SagaMetrics",
        "file": "crates/trading_engine/src/transactions/saga.rs",
        "line": 346,
        "fields": [
          [
            "total_sagas",
            "AtomicU64"
          ],
          [
            "successful_sagas",
            "AtomicU64"
          ],
          [
            "failed_sagas",
            "AtomicU64"
          ],
          [
            "compensated_sagas",
            "AtomicU64"
          ],
          [
            "average_duration_ms",
            "AtomicU64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "PlaceOrderStep",
        "file": "crates/trading_engine/src/transactions/saga.rs",
        "line": 464,
        "fields": [
          [
            "symbol",
            "String"
          ],
          [
            "quantity",
            "rust_decimal::Decimal"
          ],
          [
            "price",
            "Option<rust_decimal::Decimal>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RiskCheckStep",
        "file": "crates/trading_engine/src/transactions/saga.rs",
        "line": 507,
        "fields": [
          [
            "max_position_size",
            "f64"
          ],
          [
            "max_leverage",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "UpdateBalanceStep",
        "file": "crates/trading_engine/src/transactions/saga.rs",
        "line": 541,
        "fields": [
          [
            "account_id",
            "Uuid"
          ],
          [
            "amount",
            "rust_decimal::Decimal"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderCancellationCompensator",
        "file": "crates/trading_engine/src/transactions/compensator.rs",
        "line": 95,
        "fields": [
          [
            "order_id",
            "Uuid"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "side",
            "OrderSide"
          ],
          [
            "quantity",
            "Decimal"
          ],
          [
            "price",
            "Option<Decimal>"
          ],
          [
            "transaction_id",
            "Uuid"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PositionReversalCompensator",
        "file": "crates/trading_engine/src/transactions/compensator.rs",
        "line": 191,
        "fields": [
          [
            "position_id",
            "Uuid"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "delta_quantity",
            "Decimal"
          ],
          [
            "original_avg_price",
            "Decimal"
          ],
          [
            "transaction_id",
            "Uuid"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "BalanceReversalCompensator",
        "file": "crates/trading_engine/src/transactions/compensator.rs",
        "line": 234,
        "fields": [
          [
            "account_id",
            "Uuid"
          ],
          [
            "currency",
            "String"
          ],
          [
            "delta",
            "Decimal"
          ],
          [
            "original_reason",
            "String"
          ],
          [
            "transaction_id",
            "Uuid"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FeeRefundCompensator",
        "file": "crates/trading_engine/src/transactions/compensator.rs",
        "line": 283,
        "fields": [
          [
            "original_transaction_id",
            "Uuid"
          ],
          [
            "amount",
            "Decimal"
          ],
          [
            "fee_type",
            "FeeType"
          ],
          [
            "compensating_transaction_id",
            "Uuid"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MarginReleaseCompensator",
        "file": "crates/trading_engine/src/transactions/compensator.rs",
        "line": 324,
        "fields": [
          [
            "position_id",
            "Uuid"
          ],
          [
            "margin_to_release",
            "Decimal"
          ],
          [
            "transaction_id",
            "Uuid"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "NoOpCompensator",
        "file": "crates/trading_engine/src/transactions/compensator.rs",
        "line": 359,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "ExchangeConnection",
        "file": "crates/trading_engine/src/transactions/compensator.rs",
        "line": 420,
        "fields": [],
        "visibility": "private"
      },
      {
        "name": "PositionManager",
        "file": "crates/trading_engine/src/transactions/compensator.rs",
        "line": 441,
        "fields": [],
        "visibility": "private"
      },
      {
        "name": "Position",
        "file": "crates/trading_engine/src/transactions/compensator.rs",
        "line": 463,
        "fields": [
          [
            "id",
            "Uuid"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "quantity",
            "Decimal"
          ],
          [
            "average_price",
            "Decimal"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "AccountManager",
        "file": "crates/trading_engine/src/transactions/compensator.rs",
        "line": 470,
        "fields": [],
        "visibility": "private"
      },
      {
        "name": "FeeManager",
        "file": "crates/trading_engine/src/transactions/compensator.rs",
        "line": 483,
        "fields": [],
        "visibility": "private"
      },
      {
        "name": "MarginManager",
        "file": "crates/trading_engine/src/transactions/compensator.rs",
        "line": 496,
        "fields": [],
        "visibility": "private"
      },
      {
        "name": "Transaction",
        "file": "crates/trading_engine/src/transactions/mod.rs",
        "line": 108,
        "fields": [
          [
            "id",
            "Uuid"
          ],
          [
            "idempotency_key",
            "Option<String>"
          ],
          [
            "transaction_type",
            "TransactionType"
          ],
          [
            "status",
            "TransactionStatus"
          ],
          [
            "created_at",
            "u64"
          ],
          [
            "updated_at",
            "u64"
          ],
          [
            "retry_count",
            "u32"
          ],
          [
            "parent_id",
            "Option<Uuid>"
          ],
          [
            "children",
            "Vec<Uuid>"
          ],
          [
            "metadata",
            "HashMap<String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TransactionManager",
        "file": "crates/trading_engine/src/transactions/mod.rs",
        "line": 186,
        "fields": [
          [
            "wal",
            "Arc<WriteAheadLog>"
          ],
          [
            "transactions",
            "Arc<RwLock<HashMap<Uuid"
          ],
          [
            "idempotency_cache",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "saga_orchestrator",
            "Arc<saga::SagaOrchestrator>"
          ],
          [
            "retry_manager",
            "Arc<retry::RetryManager>"
          ],
          [
            "event_tx",
            "mpsc::UnboundedSender<TransactionEvent>"
          ],
          [
            "metrics",
            "Arc<RwLock<TransactionMetrics>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TransactionMetrics",
        "file": "crates/trading_engine/src/transactions/mod.rs",
        "line": 213,
        "fields": [
          [
            "total_transactions",
            "u64"
          ],
          [
            "successful_transactions",
            "u64"
          ],
          [
            "failed_transactions",
            "u64"
          ],
          [
            "compensated_transactions",
            "u64"
          ],
          [
            "retry_attempts",
            "u64"
          ],
          [
            "average_latency_us",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RetryPolicy",
        "file": "crates/trading_engine/src/transactions/retry.rs",
        "line": 22,
        "fields": [
          [
            "max_attempts",
            "u32"
          ],
          [
            "initial_delay_ms",
            "u64"
          ],
          [
            "max_delay_ms",
            "u64"
          ],
          [
            "backoff_multiplier",
            "f64"
          ],
          [
            "jitter_factor",
            "f64"
          ],
          [
            "retryable_errors",
            "Vec<String>"
          ],
          [
            "non_retryable_errors",
            "Vec<String>"
          ],
          [
            "use_circuit_breaker",
            "bool"
          ],
          [
            "circuit_breaker_threshold",
            "u32"
          ],
          [
            "circuit_breaker_timeout_ms",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CircuitBreaker",
        "file": "crates/trading_engine/src/transactions/retry.rs",
        "line": 119,
        "fields": [
          [
            "state",
            "Arc<RwLock<CircuitState>>"
          ],
          [
            "failure_count",
            "AtomicU32"
          ],
          [
            "success_count",
            "AtomicU32"
          ],
          [
            "last_state_change",
            "AtomicU64"
          ],
          [
            "config",
            "CircuitBreakerConfig"
          ],
          [
            "metrics",
            "Arc<CircuitBreakerMetrics>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CircuitBreakerConfig",
        "file": "crates/trading_engine/src/transactions/retry.rs",
        "line": 135,
        "fields": [
          [
            "failure_threshold",
            "u32"
          ],
          [
            "success_threshold",
            "u32"
          ],
          [
            "timeout_ms",
            "u64"
          ],
          [
            "half_open_percentage",
            "u32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CircuitBreakerMetrics",
        "file": "crates/trading_engine/src/transactions/retry.rs",
        "line": 158,
        "fields": [
          [
            "total_requests",
            "AtomicU64"
          ],
          [
            "successful_requests",
            "AtomicU64"
          ],
          [
            "failed_requests",
            "AtomicU64"
          ],
          [
            "rejected_requests",
            "AtomicU64"
          ],
          [
            "state_changes",
            "AtomicU64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RetryManager",
        "file": "crates/trading_engine/src/transactions/retry.rs",
        "line": 306,
        "fields": [
          [
            "policies",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "circuit_breakers",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "retry_queue",
            "Arc<RwLock<VecDeque<ScheduledRetry>>>"
          ],
          [
            "metrics",
            "Arc<RetryMetrics>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ScheduledRetry",
        "file": "crates/trading_engine/src/transactions/retry.rs",
        "line": 318,
        "fields": [
          [
            "id",
            "Uuid"
          ],
          [
            "operation",
            "String"
          ],
          [
            "attempt",
            "u32"
          ],
          [
            "scheduled_at",
            "SystemTime"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "RetryMetrics",
        "file": "crates/trading_engine/src/transactions/retry.rs",
        "line": 326,
        "fields": [
          [
            "total_retries",
            "AtomicU64"
          ],
          [
            "successful_retries",
            "AtomicU64"
          ],
          [
            "failed_retries",
            "AtomicU64"
          ],
          [
            "circuit_breaker_rejections",
            "AtomicU64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "EntryHeader",
        "file": "crates/trading_engine/src/transactions/wal.rs",
        "line": 27,
        "fields": [
          [
            "magic",
            "u32"
          ],
          [
            "checksum",
            "u32"
          ],
          [
            "payload_len",
            "u32"
          ],
          [
            "sequence",
            "u64"
          ],
          [
            "timestamp",
            "u64"
          ],
          [
            "entry_type",
            "u8"
          ],
          [
            "_padding",
            "[u8; 3]"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "Segment",
        "file": "crates/trading_engine/src/transactions/wal.rs",
        "line": 97,
        "fields": [
          [
            "file",
            "File"
          ],
          [
            "mmap",
            "MmapMut"
          ],
          [
            "position",
            "AtomicU64"
          ],
          [
            "id",
            "u64"
          ],
          [
            "max_size",
            "u64"
          ],
          [
            "sealed",
            "AtomicBool"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "WriteAheadLog",
        "file": "crates/trading_engine/src/transactions/wal.rs",
        "line": 259,
        "fields": [
          [
            "base_dir",
            "PathBuf"
          ],
          [
            "active_segment",
            "Arc<RwLock<Segment>>"
          ],
          [
            "sealed_segments",
            "Arc<RwLock<Vec<Arc<Segment>>>>"
          ],
          [
            "sequence",
            "AtomicU64"
          ],
          [
            "sync_handle",
            "Option<tokio::task::JoinHandle<()>>"
          ],
          [
            "write_buffer",
            "Arc<ArrayQueue<(Vec<u8>"
          ],
          [
            "metrics",
            "Arc<WalMetrics>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "WalMetrics",
        "file": "crates/trading_engine/src/transactions/wal.rs",
        "line": 277,
        "fields": [
          [
            "total_writes",
            "AtomicU64"
          ],
          [
            "total_bytes",
            "AtomicU64"
          ],
          [
            "sync_count",
            "AtomicU64"
          ],
          [
            "segment_switches",
            "AtomicU64"
          ],
          [
            "average_latency_ns",
            "AtomicU64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TestEntry",
        "file": "crates/trading_engine/src/transactions/wal.rs",
        "line": 521,
        "fields": [
          [
            "id",
            "u64"
          ],
          [
            "data",
            "String"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "TestEntry",
        "file": "crates/trading_engine/src/transactions/tests.rs",
        "line": 246,
        "fields": [
          [
            "id",
            "u64"
          ],
          [
            "data",
            "String"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "TestEntry",
        "file": "crates/trading_engine/src/transactions/tests.rs",
        "line": 263,
        "fields": [
          [
            "id",
            "u64"
          ],
          [
            "data",
            "String"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "TestStep",
        "file": "crates/trading_engine/src/transactions/tests.rs",
        "line": 290,
        "fields": [
          [
            "name",
            "String"
          ],
          [
            "should_fail",
            "bool"
          ],
          [
            "executed",
            "Arc<AtomicBool>"
          ],
          [
            "compensated",
            "Arc<AtomicBool>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ComprehensiveCostModel",
        "file": "crates/trading_engine/src/costs/comprehensive_costs.rs",
        "line": 21,
        "fields": [
          [
            "exchange_fees",
            "HashMap<String"
          ],
          [
            "funding_calculator",
            "FundingRateCalculator"
          ],
          [
            "slippage_model",
            "SlippageModel"
          ],
          [
            "spread_cost_estimator",
            "SpreadCostEstimator"
          ],
          [
            "cost_history",
            "CostHistory"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ExchangeFeeStructure",
        "file": "crates/trading_engine/src/costs/comprehensive_costs.rs",
        "line": 40,
        "fields": [
          [
            "exchange",
            "String"
          ],
          [
            "spot_fees",
            "TieredFeeSchedule"
          ],
          [
            "futures_fees",
            "TieredFeeSchedule"
          ],
          [
            "withdrawal_fees",
            "HashMap<String"
          ],
          [
            "min_order_sizes",
            "HashMap<String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TieredFeeSchedule",
        "file": "crates/trading_engine/src/costs/comprehensive_costs.rs",
        "line": 50,
        "fields": [
          [
            "tiers",
            "Vec<FeeTier>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FeeTier",
        "file": "crates/trading_engine/src/costs/comprehensive_costs.rs",
        "line": 55,
        "fields": [
          [
            "min_volume",
            "Decimal"
          ],
          [
            "max_volume",
            "Option<Decimal>"
          ],
          [
            "maker_fee",
            "Decimal"
          ],
          [
            "taker_fee",
            "Decimal"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FundingRateCalculator",
        "file": "crates/trading_engine/src/costs/comprehensive_costs.rs",
        "line": 81,
        "fields": [
          [
            "current_rates",
            "HashMap<String"
          ],
          [
            "historical_rates",
            "Vec<HistoricalFunding>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FundingRate",
        "file": "crates/trading_engine/src/costs/comprehensive_costs.rs",
        "line": 90,
        "fields": [
          [
            "symbol",
            "String"
          ],
          [
            "rate",
            "Decimal"
          ],
          [
            "next_funding_time",
            "i64"
          ],
          [
            "interval_hours",
            "u32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "HistoricalFunding",
        "file": "crates/trading_engine/src/costs/comprehensive_costs.rs",
        "line": 98,
        "fields": [
          [
            "symbol",
            "String"
          ],
          [
            "timestamp",
            "i64"
          ],
          [
            "rate",
            "Decimal"
          ],
          [
            "mark_price",
            "Decimal"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SlippageModel",
        "file": "crates/trading_engine/src/costs/comprehensive_costs.rs",
        "line": 147,
        "fields": [
          [
            "linear_impact",
            "Decimal"
          ],
          [
            "sqrt_impact",
            "Decimal"
          ],
          [
            "max_participation_rate",
            "Decimal"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SpreadCostEstimator",
        "file": "crates/trading_engine/src/costs/comprehensive_costs.rs",
        "line": 226,
        "fields": [
          [
            "current_spreads",
            "HashMap<String"
          ],
          [
            "spread_stats",
            "HashMap<String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SpreadMetrics",
        "file": "crates/trading_engine/src/costs/comprehensive_costs.rs",
        "line": 235,
        "fields": [
          [
            "bid",
            "Decimal"
          ],
          [
            "ask",
            "Decimal"
          ],
          [
            "mid",
            "Decimal"
          ],
          [
            "spread_bps",
            "Decimal"
          ],
          [
            "timestamp",
            "i64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SpreadStatistics",
        "file": "crates/trading_engine/src/costs/comprehensive_costs.rs",
        "line": 244,
        "fields": [
          [
            "symbol",
            "String"
          ],
          [
            "avg_spread_bps",
            "Decimal"
          ],
          [
            "median_spread_bps",
            "Decimal"
          ],
          [
            "p95_spread_bps",
            "Decimal"
          ],
          [
            "volatility",
            "Decimal"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CostHistory",
        "file": "crates/trading_engine/src/costs/comprehensive_costs.rs",
        "line": 289,
        "fields": [
          [
            "trades",
            "Vec<TradeCost>"
          ],
          [
            "daily_summaries",
            "Vec<DailyCostSummary>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TradeCost",
        "file": "crates/trading_engine/src/costs/comprehensive_costs.rs",
        "line": 295,
        "fields": [
          [
            "trade_id",
            "String"
          ],
          [
            "timestamp",
            "i64"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "side",
            "String"
          ],
          [
            "quantity",
            "Decimal"
          ],
          [
            "price",
            "Decimal"
          ],
          [
            "exchange_fee",
            "Decimal"
          ],
          [
            "slippage",
            "Decimal"
          ],
          [
            "spread_cost",
            "Decimal"
          ],
          [
            "funding_cost",
            "Decimal"
          ],
          [
            "total_cost",
            "Decimal"
          ],
          [
            "cost_bps",
            "Decimal"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DailyCostSummary",
        "file": "crates/trading_engine/src/costs/comprehensive_costs.rs",
        "line": 311,
        "fields": [
          [
            "date",
            "String"
          ],
          [
            "total_volume",
            "Decimal"
          ],
          [
            "total_fees",
            "Decimal"
          ],
          [
            "total_slippage",
            "Decimal"
          ],
          [
            "total_spread_cost",
            "Decimal"
          ],
          [
            "total_funding",
            "Decimal"
          ],
          [
            "avg_cost_bps",
            "Decimal"
          ],
          [
            "tradecount",
            "u32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MonthlyCostReport",
        "file": "crates/trading_engine/src/costs/comprehensive_costs.rs",
        "line": 569,
        "fields": [
          [
            "month",
            "String"
          ],
          [
            "tradecount",
            "u32"
          ],
          [
            "total_volume",
            "Decimal"
          ],
          [
            "total_fees",
            "Decimal"
          ],
          [
            "total_slippage",
            "Decimal"
          ],
          [
            "total_spread_cost",
            "Decimal"
          ],
          [
            "total_funding",
            "Decimal"
          ],
          [
            "total_cost",
            "Decimal"
          ],
          [
            "avg_cost_bps",
            "Decimal"
          ],
          [
            "cost_breakdown",
            "CostBreakdown"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CostBreakdown",
        "file": "crates/trading_engine/src/costs/comprehensive_costs.rs",
        "line": 583,
        "fields": [
          [
            "fees_pct",
            "Decimal"
          ],
          [
            "slippage_pct",
            "Decimal"
          ],
          [
            "spread_pct",
            "Decimal"
          ],
          [
            "funding_pct",
            "Decimal"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MicrostructureConfig",
        "file": "crates/feature_store/src/market_microstructure.rs",
        "line": 28,
        "fields": [
          [
            "enable_pin",
            "bool"
          ],
          [
            "enable_vpin",
            "bool"
          ],
          [
            "enable_amihud",
            "bool"
          ],
          [
            "enable_roll",
            "bool"
          ],
          [
            "enable_corwin_schultz",
            "bool"
          ],
          [
            "enable_hasbrouck",
            "bool"
          ],
          [
            "enable_order_flow",
            "bool"
          ],
          [
            "enable_tick_rule",
            "bool"
          ],
          [
            "bucket_size_ms",
            "i64"
          ],
          [
            "volume_buckets",
            "usize"
          ],
          [
            "min_trades",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MicrostructureCalculator",
        "file": "crates/feature_store/src/market_microstructure.rs",
        "line": 61,
        "fields": [
          [
            "config",
            "MicrostructureConfig"
          ],
          [
            "trades",
            "Arc<RwLock<VecDeque<Trade>>>"
          ],
          [
            "quotes",
            "Arc<RwLock<VecDeque<Quote>>>"
          ],
          [
            "order_flow",
            "Arc<RwLock<VecDeque<OrderFlow>>>"
          ],
          [
            "pin_estimate",
            "Arc<RwLock<f64>>"
          ],
          [
            "vpin_estimate",
            "Arc<RwLock<f64>>"
          ],
          [
            "effective_spread",
            "Arc<RwLock<f64>>"
          ],
          [
            "realized_spread",
            "Arc<RwLock<f64>>"
          ],
          [
            "price_impact",
            "Arc<RwLock<f64>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Trade",
        "file": "crates/feature_store/src/market_microstructure.rs",
        "line": 754,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "price",
            "f64"
          ],
          [
            "volume",
            "f64"
          ],
          [
            "is_buy",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Quote",
        "file": "crates/feature_store/src/market_microstructure.rs",
        "line": 763,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "bid",
            "f64"
          ],
          [
            "ask",
            "f64"
          ],
          [
            "bid_size",
            "f64"
          ],
          [
            "ask_size",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderFlow",
        "file": "crates/feature_store/src/market_microstructure.rs",
        "line": 773,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "buy_volume",
            "f64"
          ],
          [
            "sell_volume",
            "f64"
          ],
          [
            "buy_count",
            "u32"
          ],
          [
            "sell_count",
            "u32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "VolumeBucket",
        "file": "crates/feature_store/src/market_microstructure.rs",
        "line": 783,
        "fields": [
          [
            "volume",
            "f64"
          ],
          [
            "buy_volume",
            "f64"
          ],
          [
            "sell_volume",
            "f64"
          ],
          [
            "trade_count",
            "u32"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "PriceBar",
        "file": "crates/feature_store/src/market_microstructure.rs",
        "line": 813,
        "fields": [
          [
            "start",
            "DateTime<Utc>"
          ],
          [
            "high",
            "f64"
          ],
          [
            "low",
            "f64"
          ],
          [
            "trade_count",
            "u32"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "GameTheoryConfig",
        "file": "crates/feature_store/src/game_theory.rs",
        "line": 26,
        "fields": [
          [
            "enable_nash_equilibrium",
            "bool"
          ],
          [
            "enable_kyle_lambda",
            "bool"
          ],
          [
            "enable_glosten_milgrom",
            "bool"
          ],
          [
            "enable_prisoner_dilemma",
            "bool"
          ],
          [
            "enable_stackelberg",
            "bool"
          ],
          [
            "history_window_ms",
            "i64"
          ],
          [
            "min_players",
            "usize"
          ],
          [
            "max_iterations",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "GameTheoryCalculator",
        "file": "crates/feature_store/src/game_theory.rs",
        "line": 53,
        "fields": [
          [
            "config",
            "GameTheoryConfig"
          ],
          [
            "order_book_history",
            "Arc<RwLock<VecDeque<OrderBookState>>>"
          ],
          [
            "trade_history",
            "Arc<RwLock<VecDeque<TradeEvent>>>"
          ],
          [
            "player_actions",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "nash_equilibria",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "kyle_lambda",
            "Arc<RwLock<f64>>"
          ],
          [
            "glosten_milgrom_spread",
            "Arc<RwLock<f64>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderBookState",
        "file": "crates/feature_store/src/game_theory.rs",
        "line": 569,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "bid_price",
            "f64"
          ],
          [
            "bid_volume",
            "f64"
          ],
          [
            "ask_price",
            "f64"
          ],
          [
            "ask_volume",
            "f64"
          ],
          [
            "depth_imbalance",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TradeEvent",
        "file": "crates/feature_store/src/game_theory.rs",
        "line": 580,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "player_id",
            "String"
          ],
          [
            "price",
            "f64"
          ],
          [
            "volume",
            "f64"
          ],
          [
            "is_buy",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PlayerHistory",
        "file": "crates/feature_store/src/game_theory.rs",
        "line": 590,
        "fields": [
          [
            "total_volume",
            "f64"
          ],
          [
            "buy_volume",
            "f64"
          ],
          [
            "sell_volume",
            "f64"
          ],
          [
            "trade_count",
            "usize"
          ],
          [
            "last_action",
            "Option<DateTime<Utc>>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "NashEquilibrium",
        "file": "crates/feature_store/src/game_theory.rs",
        "line": 634,
        "fields": [
          [
            "bid_probability",
            "f64"
          ],
          [
            "ask_probability",
            "f64"
          ],
          [
            "expected_payoff",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "RedisConfig",
        "file": "crates/feature_store/src/online_store.rs",
        "line": 20,
        "fields": [
          [
            "urls",
            "Vec<String>"
          ],
          [
            "cluster_mode",
            "bool"
          ],
          [
            "connection_pool_size",
            "usize"
          ],
          [
            "max_connections",
            "usize"
          ],
          [
            "timeout_ms",
            "u64"
          ],
          [
            "retry_attempts",
            "u32"
          ],
          [
            "ttl_seconds",
            "u64"
          ],
          [
            "cache_size",
            "usize"
          ],
          [
            "compression",
            "bool"
          ],
          [
            "pipeline_size",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FeatureVector",
        "file": "crates/feature_store/src/online_store.rs",
        "line": 52,
        "fields": [
          [
            "entity_id",
            "String"
          ],
          [
            "features",
            "Vec<f64>"
          ],
          [
            "feature_names",
            "Vec<String>"
          ],
          [
            "timestamp",
            "chrono::DateTime<chrono::Utc>"
          ],
          [
            "metadata",
            "Option<serde_json::Value>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OnlineStore",
        "file": "crates/feature_store/src/online_store.rs",
        "line": 89,
        "fields": [
          [
            "config",
            "RedisConfig"
          ],
          [
            "client",
            "Option<Client>"
          ],
          [
            "cluster_client",
            "Option<ClusterClient>"
          ],
          [
            "connections",
            "Arc<RwLock<Vec<MultiplexedConnection>>>"
          ],
          [
            "connection_semaphore",
            "Arc<Semaphore>"
          ],
          [
            "local_cache",
            "Arc<Mutex<LruCache<String"
          ],
          [
            "hit_count",
            "Arc<RwLock<u64>>"
          ],
          [
            "miss_count",
            "Arc<RwLock<u64>>"
          ],
          [
            "latencies",
            "Arc<RwLock<Vec<Duration>>>"
          ],
          [
            "circuit_breaker",
            "Arc<infrastructure::CircuitBreaker>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OnlineStoreStats",
        "file": "crates/feature_store/src/online_store.rs",
        "line": 435,
        "fields": [
          [
            "hit_rate",
            "f64"
          ],
          [
            "total_requests",
            "u64"
          ],
          [
            "p50_latency_us",
            "u64"
          ],
          [
            "p99_latency_us",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PointInTimeConfig",
        "file": "crates/feature_store/src/point_in_time.rs",
        "line": 16,
        "fields": [
          [
            "feature_lag_ms",
            "i64"
          ],
          [
            "max_lookback_days",
            "i64"
          ],
          [
            "enable_caching",
            "bool"
          ],
          [
            "cache_size",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PointInTimeCorrectness",
        "file": "crates/feature_store/src/point_in_time.rs",
        "line": 35,
        "fields": [
          [
            "offline_store",
            "Arc<OfflineStore>"
          ],
          [
            "config",
            "PointInTimeConfig"
          ],
          [
            "cache",
            "Option<Arc<parking_lot::RwLock<lru::LruCache<String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CachedFeatures",
        "file": "crates/feature_store/src/point_in_time.rs",
        "line": 42,
        "fields": [
          [
            "features",
            "BTreeMap<DateTime<Utc>"
          ],
          [
            "last_accessed",
            "std::time::Instant"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "TemporalJoin",
        "file": "crates/feature_store/src/point_in_time.rs",
        "line": 358,
        "fields": [
          [
            "pit",
            "PointInTimeCorrectness"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Event",
        "file": "crates/feature_store/src/point_in_time.rs",
        "line": 381,
        "fields": [
          [
            "entity_id",
            "String"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "data",
            "serde_json::Value"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "EnrichedEvent",
        "file": "crates/feature_store/src/point_in_time.rs",
        "line": 389,
        "fields": [
          [
            "event",
            "Event"
          ],
          [
            "features",
            "Option<FeatureVector>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Label",
        "file": "crates/feature_store/src/point_in_time.rs",
        "line": 396,
        "fields": [
          [
            "entity_id",
            "String"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "value",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TrainingSample",
        "file": "crates/feature_store/src/point_in_time.rs",
        "line": 404,
        "fields": [
          [
            "features",
            "FeatureVector"
          ],
          [
            "label",
            "f64"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "entity_id",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TrainingDataset",
        "file": "crates/feature_store/src/point_in_time.rs",
        "line": 413,
        "fields": [
          [
            "samples",
            "Vec<TrainingSample>"
          ],
          [
            "feature_names",
            "Vec<String>"
          ],
          [
            "created_at",
            "DateTime<Utc>"
          ],
          [
            "config",
            "PointInTimeConfig"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "LeakageViolation",
        "file": "crates/feature_store/src/point_in_time.rs",
        "line": 429,
        "fields": [
          [
            "feature_name",
            "String"
          ],
          [
            "feature_time",
            "DateTime<Utc>"
          ],
          [
            "prediction_time",
            "DateTime<Utc>"
          ],
          [
            "violation_type",
            "ViolationType"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ValidationResult",
        "file": "crates/feature_store/src/point_in_time.rs",
        "line": 438,
        "fields": [
          [
            "is_valid",
            "bool"
          ],
          [
            "violations",
            "Vec<LeakageViolation>"
          ],
          [
            "checked_at",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MonitoringConfig",
        "file": "crates/feature_store/src/monitoring.rs",
        "line": 17,
        "fields": [
          [
            "metrics_port",
            "u16"
          ],
          [
            "collection_interval_seconds",
            "u64"
          ],
          [
            "latency_buckets",
            "Vec<f64>"
          ],
          [
            "enable_prometheus",
            "bool"
          ],
          [
            "enable_logging",
            "bool"
          ],
          [
            "alert_thresholds",
            "AlertThresholds"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "AlertThresholds",
        "file": "crates/feature_store/src/monitoring.rs",
        "line": 41,
        "fields": [
          [
            "online_latency_p99_ms",
            "f64"
          ],
          [
            "offline_latency_p99_ms",
            "f64"
          ],
          [
            "error_rate_percent",
            "f64"
          ],
          [
            "cache_miss_rate_percent",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FeatureMonitor",
        "file": "crates/feature_store/src/monitoring.rs",
        "line": 60,
        "fields": [
          [
            "config",
            "MonitoringConfig"
          ],
          [
            "online_store",
            "Arc<OnlineStore>"
          ],
          [
            "offline_store",
            "Arc<OfflineStore>"
          ],
          [
            "online_latency",
            "Option<Histogram>"
          ],
          [
            "offline_latency",
            "Option<Histogram>"
          ],
          [
            "feature_requests",
            "Option<Counter>"
          ],
          [
            "feature_errors",
            "Option<Counter>"
          ],
          [
            "cache_hits",
            "Option<Counter>"
          ],
          [
            "cache_misses",
            "Option<Counter>"
          ],
          [
            "active_features",
            "Option<Gauge>"
          ],
          [
            "storage_bytes",
            "Option<Gauge>"
          ],
          [
            "metrics",
            "Arc<RwLock<Metrics>>"
          ],
          [
            "collector_handle",
            "Arc<RwLock<Option<tokio::task::JoinHandle<()>>>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Metrics",
        "file": "crates/feature_store/src/monitoring.rs",
        "line": 352,
        "fields": [
          [
            "online_hit_rate",
            "f64"
          ],
          [
            "online_requests",
            "u64"
          ],
          [
            "online_p50_latency_us",
            "u64"
          ],
          [
            "online_p99_latency_us",
            "u64"
          ],
          [
            "online_latencies",
            "Vec<Duration>"
          ],
          [
            "offline_latencies",
            "Vec<Duration>"
          ],
          [
            "total_requests",
            "u64"
          ],
          [
            "error_count",
            "u64"
          ],
          [
            "cache_hits",
            "u64"
          ],
          [
            "cache_misses",
            "u64"
          ],
          [
            "active_features",
            "usize"
          ],
          [
            "storage_bytes",
            "u64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "RegistryConfig",
        "file": "crates/feature_store/src/feature_registry.rs",
        "line": 17,
        "fields": [
          [
            "postgres_url",
            "String"
          ],
          [
            "pool_size",
            "usize"
          ],
          [
            "enable_versioning",
            "bool"
          ],
          [
            "enforce_schema_validation",
            "bool"
          ],
          [
            "retention_days",
            "i64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FeatureRegistry",
        "file": "crates/feature_store/src/feature_registry.rs",
        "line": 38,
        "fields": [
          [
            "config",
            "RegistryConfig"
          ],
          [
            "pool",
            "Arc<Pool>"
          ],
          [
            "cache",
            "Arc<dashmap::DashMap<String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FeatureDefinition",
        "file": "crates/feature_store/src/feature_registry.rs",
        "line": 606,
        "fields": [
          [
            "feature_id",
            "Uuid"
          ],
          [
            "feature_name",
            "String"
          ],
          [
            "feature_type",
            "String"
          ],
          [
            "description",
            "Option<String>"
          ],
          [
            "schema",
            "Option<serde_json::Value>"
          ],
          [
            "transformations",
            "Option<serde_json::Value>"
          ],
          [
            "validation_rules",
            "Option<serde_json::Value>"
          ],
          [
            "source_features",
            "Option<Vec<String>>"
          ],
          [
            "source_tables",
            "Option<Vec<String>>"
          ],
          [
            "computation_graph",
            "Option<serde_json::Value>"
          ],
          [
            "version",
            "i32"
          ],
          [
            "owner",
            "String"
          ],
          [
            "team",
            "Option<String>"
          ],
          [
            "tags",
            "Option<Vec<String>>"
          ],
          [
            "serving_tier",
            "Option<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FeatureMetadata",
        "file": "crates/feature_store/src/feature_registry.rs",
        "line": 659,
        "fields": [
          [
            "feature_id",
            "String"
          ],
          [
            "feature_name",
            "String"
          ],
          [
            "description",
            "Option<String>"
          ],
          [
            "owner",
            "String"
          ],
          [
            "team",
            "Option<String>"
          ],
          [
            "tags",
            "Vec<String>"
          ],
          [
            "created_at",
            "DateTime<Utc>"
          ],
          [
            "updated_at",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FeatureUpdate",
        "file": "crates/feature_store/src/feature_registry.rs",
        "line": 672,
        "fields": [
          [
            "change_type",
            "String"
          ],
          [
            "schema",
            "Option<serde_json::Value>"
          ],
          [
            "transformations",
            "Option<serde_json::Value>"
          ],
          [
            "validation_rules",
            "Option<serde_json::Value>"
          ],
          [
            "description",
            "Option<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FeatureUsage",
        "file": "crates/feature_store/src/feature_registry.rs",
        "line": 682,
        "fields": [
          [
            "feature_name",
            "String"
          ],
          [
            "request_count",
            "u64"
          ],
          [
            "average_latency_ms",
            "Option<f64>"
          ],
          [
            "last_accessed",
            "Option<DateTime<Utc>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FeatureStoreConfig",
        "file": "crates/feature_store/src/lib.rs",
        "line": 50,
        "fields": [
          [
            "online_store",
            "online_store::RedisConfig"
          ],
          [
            "offline_store",
            "offline_store::TimescaleConfig"
          ],
          [
            "feature_registry",
            "feature_registry::RegistryConfig"
          ],
          [
            "pipeline",
            "feature_pipeline::PipelineConfig"
          ],
          [
            "drift_detection",
            "drift_detection::DriftConfig"
          ],
          [
            "ab_testing",
            "ab_testing::ABConfig"
          ],
          [
            "monitoring",
            "monitoring::MonitoringConfig"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FeatureStore",
        "file": "crates/feature_store/src/lib.rs",
        "line": 75,
        "fields": [
          [
            "config",
            "FeatureStoreConfig"
          ],
          [
            "online_store",
            "Arc<OnlineStore>"
          ],
          [
            "offline_store",
            "Arc<OfflineStore>"
          ],
          [
            "registry",
            "Arc<FeatureRegistry>"
          ],
          [
            "pipeline",
            "Arc<FeaturePipeline>"
          ],
          [
            "drift_detector",
            "Arc<DriftDetector>"
          ],
          [
            "ab_manager",
            "Arc<ABTestManager>"
          ],
          [
            "monitor",
            "Arc<monitoring::FeatureMonitor>"
          ],
          [
            "game_theory",
            "Arc<game_theory::GameTheoryCalculator>"
          ],
          [
            "microstructure",
            "Arc<market_microstructure::MicrostructureCalculator>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FeatureUpdate",
        "file": "crates/feature_store/src/lib.rs",
        "line": 351,
        "fields": [
          [
            "entity_id",
            "String"
          ],
          [
            "feature_id",
            "String"
          ],
          [
            "value",
            "FeatureValue"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "metadata",
            "Option<serde_json::Value>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FeatureLineage",
        "file": "crates/feature_store/src/lib.rs",
        "line": 371,
        "fields": [
          [
            "feature_id",
            "String"
          ],
          [
            "version",
            "String"
          ],
          [
            "created_at",
            "DateTime<Utc>"
          ],
          [
            "updated_at",
            "DateTime<Utc>"
          ],
          [
            "dependencies",
            "Vec<String>"
          ],
          [
            "transformations",
            "Vec<String>"
          ],
          [
            "data_sources",
            "Vec<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "HealthMetrics",
        "file": "crates/feature_store/src/lib.rs",
        "line": 383,
        "fields": [
          [
            "online_store_latency_ms",
            "f64"
          ],
          [
            "offline_store_latency_ms",
            "f64"
          ],
          [
            "feature_freshness_ms",
            "f64"
          ],
          [
            "drift_alerts",
            "usize"
          ],
          [
            "active_experiments",
            "usize"
          ],
          [
            "total_features",
            "usize"
          ],
          [
            "storage_usage_gb",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DriftConfig",
        "file": "crates/feature_store/src/drift_detection.rs",
        "line": 21,
        "fields": [
          [
            "check_interval_seconds",
            "u64"
          ],
          [
            "baseline_window_days",
            "i64"
          ],
          [
            "detection_window_hours",
            "i64"
          ],
          [
            "psi_threshold",
            "f64"
          ],
          [
            "kl_threshold",
            "f64"
          ],
          [
            "wasserstein_threshold",
            "f64"
          ],
          [
            "chi_square_threshold",
            "f64"
          ],
          [
            "alert_cooldown_minutes",
            "i64"
          ],
          [
            "min_samples",
            "usize"
          ],
          [
            "enable_auto_retrain",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DriftDetector",
        "file": "crates/feature_store/src/drift_detection.rs",
        "line": 52,
        "fields": [
          [
            "config",
            "DriftConfig"
          ],
          [
            "registry",
            "Arc<FeatureRegistry>"
          ],
          [
            "offline_store",
            "Arc<OfflineStore>"
          ],
          [
            "baselines",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "active_alerts",
            "Arc<RwLock<Vec<DriftAlert>>>"
          ],
          [
            "last_checks",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "monitor_handle",
            "Arc<RwLock<Option<tokio::task::JoinHandle<()>>>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "BaselineDistribution",
        "file": "crates/feature_store/src/drift_detection.rs",
        "line": 533,
        "fields": [
          [
            "feature_name",
            "String"
          ],
          [
            "mean",
            "f64"
          ],
          [
            "stddev",
            "f64"
          ],
          [
            "min",
            "f64"
          ],
          [
            "max",
            "f64"
          ],
          [
            "percentiles",
            "Vec<f64>"
          ],
          [
            "sample_count",
            "u64"
          ],
          [
            "computed_at",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "DriftAlert",
        "file": "crates/feature_store/src/drift_detection.rs",
        "line": 546,
        "fields": [
          [
            "feature_name",
            "String"
          ],
          [
            "drift_type",
            "DriftType"
          ],
          [
            "severity",
            "Severity"
          ],
          [
            "metrics",
            "DriftMetrics"
          ],
          [
            "baseline_period",
            "(DateTime<Utc>"
          ],
          [
            "detection_time",
            "DateTime<Utc>"
          ],
          [
            "recommended_action",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DriftMetrics",
        "file": "crates/feature_store/src/drift_detection.rs",
        "line": 577,
        "fields": [
          [
            "psi_score",
            "Option<f64>"
          ],
          [
            "kl_divergence",
            "Option<f64>"
          ],
          [
            "wasserstein_distance",
            "Option<f64>"
          ],
          [
            "chi_square_statistic",
            "Option<f64>"
          ],
          [
            "z_score",
            "Option<f64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PipelineConfig",
        "file": "crates/feature_store/src/feature_pipeline.rs",
        "line": 18,
        "fields": [
          [
            "batch_size",
            "usize"
          ],
          [
            "batch_timeout_ms",
            "u64"
          ],
          [
            "parallelism",
            "usize"
          ],
          [
            "buffer_size",
            "usize"
          ],
          [
            "checkpoint_interval_seconds",
            "u64"
          ],
          [
            "enable_streaming",
            "bool"
          ],
          [
            "enable_batch",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FeaturePipeline",
        "file": "crates/feature_store/src/feature_pipeline.rs",
        "line": 43,
        "fields": [
          [
            "config",
            "PipelineConfig"
          ],
          [
            "online_store",
            "Arc<OnlineStore>"
          ],
          [
            "offline_store",
            "Arc<OfflineStore>"
          ],
          [
            "registry",
            "Arc<FeatureRegistry>"
          ],
          [
            "streaming_engine",
            "Arc<StreamingEngine>"
          ],
          [
            "batch_processor",
            "Arc<BatchProcessor>"
          ],
          [
            "transformers",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "is_running",
            "Arc<RwLock<bool>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "StreamingEngine",
        "file": "crates/feature_store/src/feature_pipeline.rs",
        "line": 242,
        "fields": [
          [
            "config",
            "PipelineConfig"
          ],
          [
            "online_store",
            "Arc<OnlineStore>"
          ],
          [
            "offline_store",
            "Arc<OfflineStore>"
          ],
          [
            "input_tx",
            "Option<Sender<FeatureUpdate>>"
          ],
          [
            "input_rx",
            "Option<Receiver<FeatureUpdate>>"
          ],
          [
            "workers",
            "Arc<RwLock<Vec<tokio::task::JoinHandle<()>>>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "BatchProcessor",
        "file": "crates/feature_store/src/feature_pipeline.rs",
        "line": 356,
        "fields": [
          [
            "config",
            "PipelineConfig"
          ],
          [
            "offline_store",
            "Arc<OfflineStore>"
          ],
          [
            "handle",
            "Arc<RwLock<Option<tokio::task::JoinHandle<()>>>>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "MovingAverageTransformer",
        "file": "crates/feature_store/src/feature_pipeline.rs",
        "line": 409,
        "fields": [
          [
            "window",
            "usize"
          ],
          [
            "history",
            "Arc<RwLock<HashMap<String"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "EMATransformer",
        "file": "crates/feature_store/src/feature_pipeline.rs",
        "line": 451,
        "fields": [
          [
            "alpha",
            "f64"
          ],
          [
            "state",
            "Arc<RwLock<HashMap<String"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ZScoreTransformer",
        "file": "crates/feature_store/src/feature_pipeline.rs",
        "line": 488,
        "fields": [
          [
            "stats",
            "Arc<RwLock<HashMap<String"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "LogTransformer",
        "file": "crates/feature_store/src/feature_pipeline.rs",
        "line": 530,
        "fields": [],
        "visibility": "private"
      },
      {
        "name": "LagTransformer",
        "file": "crates/feature_store/src/feature_pipeline.rs",
        "line": 562,
        "fields": [
          [
            "lag",
            "usize"
          ],
          [
            "history",
            "Arc<RwLock<HashMap<String"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "TimescaleConfig",
        "file": "crates/feature_store/src/offline_store.rs",
        "line": 20,
        "fields": [
          [
            "host",
            "String"
          ],
          [
            "port",
            "u16"
          ],
          [
            "database",
            "String"
          ],
          [
            "username",
            "String"
          ],
          [
            "password",
            "String"
          ],
          [
            "pool_size",
            "usize"
          ],
          [
            "chunk_interval_hours",
            "i64"
          ],
          [
            "compression_after_hours",
            "i64"
          ],
          [
            "retention_days",
            "i64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OfflineStore",
        "file": "crates/feature_store/src/offline_store.rs",
        "line": 49,
        "fields": [
          [
            "config",
            "TimescaleConfig"
          ],
          [
            "pool",
            "Arc<Pool>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FeatureWrite",
        "file": "crates/feature_store/src/offline_store.rs",
        "line": 450,
        "fields": [
          [
            "entity_id",
            "String"
          ],
          [
            "feature_name",
            "String"
          ],
          [
            "value",
            "f64"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "version",
            "Option<String>"
          ],
          [
            "metadata",
            "Option<serde_json::Value>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FeatureStatistics",
        "file": "crates/feature_store/src/offline_store.rs",
        "line": 461,
        "fields": [
          [
            "feature_name",
            "String"
          ],
          [
            "count",
            "u64"
          ],
          [
            "mean",
            "Option<f64>"
          ],
          [
            "stddev",
            "Option<f64>"
          ],
          [
            "min",
            "Option<f64>"
          ],
          [
            "max",
            "Option<f64>"
          ],
          [
            "p25",
            "Option<f64>"
          ],
          [
            "p50",
            "Option<f64>"
          ],
          [
            "p75",
            "Option<f64>"
          ],
          [
            "p95",
            "Option<f64>"
          ],
          [
            "p99",
            "Option<f64>"
          ],
          [
            "computed_at",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "BinaryCopyInWriter",
        "file": "crates/feature_store/src/offline_store.rs",
        "line": 480,
        "fields": [
          [
            "sink",
            "tokio_postgres::CopyInSink<BytesMut>"
          ],
          [
            "types",
            "&'a [Type]"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ABConfig",
        "file": "crates/feature_store/src/ab_testing.rs",
        "line": 22,
        "fields": [
          [
            "min_sample_size",
            "usize"
          ],
          [
            "confidence_level",
            "f64"
          ],
          [
            "min_detectable_effect",
            "f64"
          ],
          [
            "max_experiments",
            "usize"
          ],
          [
            "auto_stop_enabled",
            "bool"
          ],
          [
            "auto_stop_threshold",
            "f64"
          ],
          [
            "allocation_seed",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ABTestManager",
        "file": "crates/feature_store/src/ab_testing.rs",
        "line": 47,
        "fields": [
          [
            "config",
            "ABConfig"
          ],
          [
            "registry",
            "Arc<FeatureRegistry>"
          ],
          [
            "experiments",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "allocations",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "results",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "rng",
            "Arc<RwLock<ChaCha8Rng>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Experiment",
        "file": "crates/feature_store/src/ab_testing.rs",
        "line": 396,
        "fields": [
          [
            "experiment_id",
            "String"
          ],
          [
            "name",
            "String"
          ],
          [
            "description",
            "String"
          ],
          [
            "hypothesis",
            "String"
          ],
          [
            "feature_mappings",
            "HashMap<String"
          ],
          [
            "traffic_allocation",
            "f64"
          ],
          [
            "treatment_split",
            "f64"
          ],
          [
            "expected_improvement",
            "f64"
          ],
          [
            "primary_metric",
            "String"
          ],
          [
            "secondary_metrics",
            "Vec<String>"
          ],
          [
            "guardrail_metrics",
            "Vec<String>"
          ],
          [
            "start_date",
            "DateTime<Utc>"
          ],
          [
            "end_date",
            "DateTime<Utc>"
          ],
          [
            "status",
            "ExperimentStatus"
          ],
          [
            "created_by",
            "String"
          ],
          [
            "created_at",
            "DateTime<Utc>"
          ],
          [
            "stopped_at",
            "Option<DateTime<Utc>>"
          ],
          [
            "stop_reason",
            "Option<StopReason>"
          ],
          [
            "required_sample_size",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ExperimentAllocation",
        "file": "crates/feature_store/src/ab_testing.rs",
        "line": 480,
        "fields": [
          [
            "experiment_id",
            "String"
          ],
          [
            "control_allocation",
            "f64"
          ],
          [
            "treatment_allocation",
            "f64"
          ],
          [
            "hash_seed",
            "u64"
          ],
          [
            "entity_assignments",
            "HashMap<String"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ExperimentResults",
        "file": "crates/feature_store/src/ab_testing.rs",
        "line": 490,
        "fields": [
          [
            "experiment_id",
            "String"
          ],
          [
            "control_group",
            "GroupStats"
          ],
          [
            "treatment_group",
            "GroupStats"
          ],
          [
            "p_value",
            "Option<f64>"
          ],
          [
            "effect_size",
            "Option<f64>"
          ],
          [
            "lift",
            "Option<f64>"
          ],
          [
            "is_significant",
            "bool"
          ],
          [
            "started_at",
            "DateTime<Utc>"
          ],
          [
            "last_updated",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "GroupStats",
        "file": "crates/feature_store/src/ab_testing.rs",
        "line": 524,
        "fields": [
          [
            "count",
            "usize"
          ],
          [
            "mean",
            "Option<f64>"
          ],
          [
            "variance",
            "Option<f64>"
          ],
          [
            "confidence_interval",
            "Option<(f64"
          ],
          [
            "observations",
            "Vec<f64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ParquetConfig",
        "file": "crates/data_ingestion/src/sinks/parquet_writer.rs",
        "line": 32,
        "fields": [
          [
            "base_path",
            "PathBuf"
          ],
          [
            "s3_bucket",
            "Option<String>"
          ],
          [
            "s3_prefix",
            "String"
          ],
          [
            "default",
            "128MB)\n    pub target_file_size: usize"
          ],
          [
            "default",
            "100k)\n    pub row_group_size: usize"
          ],
          [
            "flush_interval",
            "Duration"
          ],
          [
            "compression",
            "CompressionAlgorithm"
          ],
          [
            "enable_dictionary",
            "bool"
          ],
          [
            "enable_statistics",
            "bool"
          ],
          [
            "enable_bloom_filter",
            "bool"
          ],
          [
            "local_retention_hours",
            "u32"
          ],
          [
            "enable_v_order",
            "bool"
          ],
          [
            "partition_strategy",
            "PartitionStrategy"
          ],
          [
            "max_writers",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "EventBuffer",
        "file": "crates/data_ingestion/src/sinks/parquet_writer.rs",
        "line": 115,
        "fields": [
          [
            "events",
            "Vec<MarketEvent>"
          ],
          [
            "first_timestamp",
            "Option<DateTime<Utc>>"
          ],
          [
            "last_timestamp",
            "Option<DateTime<Utc>>"
          ],
          [
            "estimated_size",
            "AtomicUsize"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "PartitionWriter",
        "file": "crates/data_ingestion/src/sinks/parquet_writer.rs",
        "line": 159,
        "fields": [
          [
            "path",
            "PathBuf"
          ],
          [
            "writer",
            "AsyncArrowWriter<File>"
          ],
          [
            "row_count",
            "AtomicU64"
          ],
          [
            "byte_count",
            "AtomicUsize"
          ],
          [
            "created_at",
            "Instant"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ParquetMetrics",
        "file": "crates/data_ingestion/src/sinks/parquet_writer.rs",
        "line": 168,
        "fields": [
          [
            "files_written",
            "AtomicU64"
          ],
          [
            "total_rows",
            "AtomicU64"
          ],
          [
            "total_bytes",
            "AtomicU64"
          ],
          [
            "write_latency_us",
            "AtomicU64"
          ],
          [
            "compression_ratio",
            "AtomicU64"
          ],
          [
            "s3_uploads",
            "AtomicU64"
          ],
          [
            "s3_upload_bytes",
            "AtomicU64"
          ],
          [
            "buffer_overflow_count",
            "AtomicU64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ParquetWriter",
        "file": "crates/data_ingestion/src/sinks/parquet_writer.rs",
        "line": 195,
        "fields": [
          [
            "config",
            "Arc<ParquetConfig>"
          ],
          [
            "schema",
            "Arc<Schema>"
          ],
          [
            "buffers",
            "Arc<DashMap<String"
          ],
          [
            "active_writers",
            "Arc<DashMap<String"
          ],
          [
            "s3_client",
            "Option<Arc<S3Client>>"
          ],
          [
            "metrics",
            "Arc<ParquetMetrics>"
          ],
          [
            "shutdown",
            "Arc<AtomicBool>"
          ],
          [
            "flush_handle",
            "Option<tokio::task::JoinHandle<()>>"
          ],
          [
            "archive_handle",
            "Option<tokio::task::JoinHandle<()>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketEventRow",
        "file": "crates/data_ingestion/src/sinks/clickhouse_sink.rs",
        "line": 34,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "exchange",
            "String"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "event_type",
            "String"
          ],
          [
            "price",
            "Option<f64>"
          ],
          [
            "quantity",
            "Option<f64>"
          ],
          [
            "side",
            "Option<String>"
          ],
          [
            "trade_id",
            "Option<u64>"
          ],
          [
            "bid_price",
            "Option<f64>"
          ],
          [
            "bid_quantity",
            "Option<f64>"
          ],
          [
            "ask_price",
            "Option<f64>"
          ],
          [
            "ask_quantity",
            "Option<f64>"
          ],
          [
            "bid_prices",
            "Vec<f64>"
          ],
          [
            "bid_quantities",
            "Vec<f64>"
          ],
          [
            "ask_prices",
            "Vec<f64>"
          ],
          [
            "ask_quantities",
            "Vec<f64>"
          ],
          [
            "sequence",
            "Option<u64>"
          ],
          [
            "received_at",
            "DateTime<Utc>"
          ],
          [
            "processed_at",
            "DateTime<Utc>"
          ],
          [
            "latency_us",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ClickHouseConfig",
        "file": "crates/data_ingestion/src/sinks/clickhouse_sink.rs",
        "line": 70,
        "fields": [
          [
            "url",
            "String"
          ],
          [
            "database",
            "String"
          ],
          [
            "table",
            "String"
          ],
          [
            "username",
            "Option<String>"
          ],
          [
            "password",
            "Option<String>"
          ],
          [
            "batch_size",
            "usize"
          ],
          [
            "batch_timeout_ms",
            "u64"
          ],
          [
            "max_retries",
            "usize"
          ],
          [
            "compression",
            "CompressionType"
          ],
          [
            "pool_size",
            "usize"
          ],
          [
            "ttl_hours",
            "u32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "WriteBuffer",
        "file": "crates/data_ingestion/src/sinks/clickhouse_sink.rs",
        "line": 111,
        "fields": [
          [
            "events",
            "Vec<MarketEventRow>"
          ],
          [
            "first_event_time",
            "Option<Instant>"
          ],
          [
            "total_bytes",
            "usize"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ClickHouseSink",
        "file": "crates/data_ingestion/src/sinks/clickhouse_sink.rs",
        "line": 164,
        "fields": [
          [
            "clients",
            "Vec<Arc<Client>>"
          ],
          [
            "config",
            "ClickHouseConfig"
          ],
          [
            "write_buffer",
            "Arc<Mutex<WriteBuffer>>"
          ],
          [
            "buffer_semaphore",
            "Arc<Semaphore>"
          ],
          [
            "client_index",
            "Arc<AtomicU64>"
          ],
          [
            "metrics",
            "Arc<ClickHouseMetrics>"
          ],
          [
            "events_written",
            "Arc<AtomicU64>"
          ],
          [
            "events_failed",
            "Arc<AtomicU64>"
          ],
          [
            "bytes_written",
            "Arc<AtomicU64>"
          ],
          [
            "write_latency_us",
            "Arc<AtomicU64>"
          ],
          [
            "consecutive_failures",
            "Arc<AtomicU64>"
          ],
          [
            "circuit_open",
            "Arc<AtomicBool>"
          ],
          [
            "circuit_open_until",
            "Arc<Mutex<Option<Instant>>>"
          ],
          [
            "shutdown",
            "Arc<AtomicBool>"
          ],
          [
            "flush_tx",
            "mpsc::Sender<()>"
          ],
          [
            "flush_rx",
            "Arc<Mutex<mpsc::Receiver<()>>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TimescaleConfig",
        "file": "crates/data_ingestion/src/aggregators/timescale_aggregator.rs",
        "line": 19,
        "fields": [
          [
            "database_url",
            "String"
          ],
          [
            "max_connections",
            "u32"
          ],
          [
            "min_connections",
            "u32"
          ],
          [
            "connect_timeout",
            "Duration"
          ],
          [
            "idle_timeout",
            "Duration"
          ],
          [
            "max_lifetime",
            "Duration"
          ],
          [
            "enable_continuous_aggregates",
            "bool"
          ],
          [
            "enable_compression",
            "bool"
          ],
          [
            "retention_days",
            "u32"
          ],
          [
            "compress_after_days",
            "u32"
          ],
          [
            "batch_size",
            "usize"
          ],
          [
            "flush_interval",
            "Duration"
          ],
          [
            "enable_realtime_aggregation",
            "bool"
          ],
          [
            "candle_intervals",
            "Vec<CandleInterval>"
          ],
          [
            "enable_volume_profile",
            "bool"
          ],
          [
            "enable_order_flow",
            "bool"
          ],
          [
            "enable_vwap",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Candle",
        "file": "crates/data_ingestion/src/aggregators/timescale_aggregator.rs",
        "line": 180,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "exchange",
            "String"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "interval",
            "CandleInterval"
          ],
          [
            "open",
            "Decimal"
          ],
          [
            "high",
            "Decimal"
          ],
          [
            "low",
            "Decimal"
          ],
          [
            "close",
            "Decimal"
          ],
          [
            "volume",
            "Decimal"
          ],
          [
            "quote_volume",
            "Decimal"
          ],
          [
            "trades_count",
            "i64"
          ],
          [
            "buy_volume",
            "Decimal"
          ],
          [
            "sell_volume",
            "Decimal"
          ],
          [
            "vwap",
            "Option<Decimal>"
          ],
          [
            "twap",
            "Option<Decimal>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "VolumeLevel",
        "file": "crates/data_ingestion/src/aggregators/timescale_aggregator.rs",
        "line": 200,
        "fields": [
          [
            "price",
            "Decimal"
          ],
          [
            "volume",
            "Decimal"
          ],
          [
            "buy_volume",
            "Decimal"
          ],
          [
            "sell_volume",
            "Decimal"
          ],
          [
            "trades",
            "i64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderFlowMetrics",
        "file": "crates/data_ingestion/src/aggregators/timescale_aggregator.rs",
        "line": 210,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "exchange",
            "String"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "interval",
            "CandleInterval"
          ],
          [
            "delta",
            "Decimal"
          ],
          [
            "cumulative_delta",
            "Decimal"
          ],
          [
            "imbalance_ratio",
            "Decimal"
          ],
          [
            "aggressor_ratio",
            "Decimal"
          ],
          [
            "absorption_ratio",
            "Decimal"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "EventBatch",
        "file": "crates/data_ingestion/src/aggregators/timescale_aggregator.rs",
        "line": 223,
        "fields": [
          [
            "events",
            "Vec<MarketEvent>"
          ],
          [
            "created_at",
            "Instant"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "AggregatorMetrics",
        "file": "crates/data_ingestion/src/aggregators/timescale_aggregator.rs",
        "line": 252,
        "fields": [
          [
            "events_processed",
            "AtomicU64"
          ],
          [
            "candles_generated",
            "AtomicU64"
          ],
          [
            "insert_latency_us",
            "AtomicU64"
          ],
          [
            "aggregation_latency_us",
            "AtomicU64"
          ],
          [
            "batch_flushes",
            "AtomicU64"
          ],
          [
            "compression_runs",
            "AtomicU64"
          ],
          [
            "query_cache_hits",
            "AtomicU64"
          ],
          [
            "query_cache_misses",
            "AtomicU64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CandleCache",
        "file": "crates/data_ingestion/src/aggregators/timescale_aggregator.rs",
        "line": 279,
        "fields": [
          [
            "candles",
            "Arc<DashMap<String"
          ],
          [
            "max_size_per_key",
            "usize"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "TimescaleAggregator",
        "file": "crates/data_ingestion/src/aggregators/timescale_aggregator.rs",
        "line": 322,
        "fields": [
          [
            "config",
            "Arc<TimescaleConfig>"
          ],
          [
            "pool",
            "Arc<PgPool>"
          ],
          [
            "batch",
            "Arc<Mutex<EventBatch>>"
          ],
          [
            "metrics",
            "Arc<AggregatorMetrics>"
          ],
          [
            "cache",
            "Arc<CandleCache>"
          ],
          [
            "shutdown",
            "Arc<AtomicBool>"
          ],
          [
            "flush_semaphore",
            "Arc<Semaphore>"
          ],
          [
            "flush_handle",
            "Option<tokio::task::JoinHandle<()>>"
          ],
          [
            "aggregation_handle",
            "Option<tokio::task::JoinHandle<()>>"
          ],
          [
            "compression_handle",
            "Option<tokio::task::JoinHandle<()>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ChunkConfig",
        "file": "crates/data_ingestion/src/timescale/hypertable.rs",
        "line": 13,
        "fields": [
          [
            "table_name",
            "String"
          ],
          [
            "time_column",
            "String"
          ],
          [
            "chunk_interval",
            "Duration"
          ],
          [
            "space_partition_column",
            "Option<String>"
          ],
          [
            "number_partitions",
            "Option<i32>"
          ],
          [
            "compression_after",
            "Option<Duration>"
          ],
          [
            "retention_period",
            "Option<Duration>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "HypertableManager",
        "file": "crates/data_ingestion/src/timescale/hypertable.rs",
        "line": 24,
        "fields": [
          [
            "pool",
            "Arc<Pool>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ChunkStats",
        "file": "crates/data_ingestion/src/timescale/hypertable.rs",
        "line": 174,
        "fields": [
          [
            "total_chunks",
            "i64"
          ],
          [
            "compressed_chunks",
            "i64"
          ],
          [
            "total_bytes",
            "Option<i64>"
          ],
          [
            "compressed_bytes",
            "Option<i64>"
          ],
          [
            "oldest_data",
            "Option<chrono::DateTime<chrono::Utc>>"
          ],
          [
            "newest_data",
            "Option<chrono::DateTime<chrono::Utc>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "QueryStats",
        "file": "crates/data_ingestion/src/timescale/monitoring.rs",
        "line": 15,
        "fields": [
          [
            "query_name",
            "String"
          ],
          [
            "execution_time_ms",
            "f64"
          ],
          [
            "rows_returned",
            "usize"
          ],
          [
            "timestamp",
            "chrono::DateTime<chrono::Utc>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "IngestionStats",
        "file": "crates/data_ingestion/src/timescale/monitoring.rs",
        "line": 24,
        "fields": [
          [
            "events_per_second",
            "f64"
          ],
          [
            "avg_latency_ms",
            "f64"
          ],
          [
            "p50_latency_ms",
            "f64"
          ],
          [
            "p95_latency_ms",
            "f64"
          ],
          [
            "p99_latency_ms",
            "f64"
          ],
          [
            "max_latency_ms",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PerformanceMonitor",
        "file": "crates/data_ingestion/src/timescale/monitoring.rs",
        "line": 34,
        "fields": [
          [
            "pool",
            "Arc<Pool>"
          ],
          [
            "query_history",
            "Arc<RwLock<VecDeque<QueryStats>>>"
          ],
          [
            "batch_history",
            "Arc<RwLock<VecDeque<BatchStats>>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "BatchStats",
        "file": "crates/data_ingestion/src/timescale/monitoring.rs",
        "line": 41,
        "fields": [
          [
            "table",
            "String"
          ],
          [
            "count",
            "usize"
          ],
          [
            "duration",
            "Duration"
          ],
          [
            "timestamp",
            "chrono::DateTime<chrono::Utc>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "BenchmarkResults",
        "file": "crates/data_ingestion/src/timescale/monitoring.rs",
        "line": 258,
        "fields": [
          [
            "recent_ticks_ms",
            "f64"
          ],
          [
            "recent_ticks_rows",
            "usize"
          ],
          [
            "aggregate_1m_ms",
            "f64"
          ],
          [
            "aggregate_1m_rows",
            "usize"
          ],
          [
            "analytical_query_ms",
            "f64"
          ],
          [
            "orderbook_latest_ms",
            "f64"
          ],
          [
            "meets_target",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "QuerySummary",
        "file": "crates/data_ingestion/src/timescale/monitoring.rs",
        "line": 269,
        "fields": [
          [
            "total_queries",
            "usize"
          ],
          [
            "avg_time_ms",
            "f64"
          ],
          [
            "p50_time_ms",
            "f64"
          ],
          [
            "p95_time_ms",
            "f64"
          ],
          [
            "p99_time_ms",
            "f64"
          ],
          [
            "max_time_ms",
            "f64"
          ],
          [
            "queries_over_100ms",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "AggregateManager",
        "file": "crates/data_ingestion/src/timescale/aggregates.rs",
        "line": 62,
        "fields": [
          [
            "pool",
            "Arc<Pool>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "AggregateFreshness",
        "file": "crates/data_ingestion/src/timescale/aggregates.rs",
        "line": 334,
        "fields": [
          [
            "view_name",
            "String"
          ],
          [
            "watermark",
            "Option<DateTime<Utc>>"
          ],
          [
            "lag_seconds",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CompressionPolicy",
        "file": "crates/data_ingestion/src/timescale/compression.rs",
        "line": 13,
        "fields": [
          [
            "table_name",
            "String"
          ],
          [
            "compress_after",
            "Duration"
          ],
          [
            "orderby_columns",
            "Vec<String>"
          ],
          [
            "segmentby_columns",
            "Vec<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CompressionManager",
        "file": "crates/data_ingestion/src/timescale/compression.rs",
        "line": 21,
        "fields": [
          [
            "pool",
            "Arc<Pool>"
          ],
          [
            "default_compress_after",
            "Duration"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CompressionStats",
        "file": "crates/data_ingestion/src/timescale/compression.rs",
        "line": 187,
        "fields": [
          [
            "table_name",
            "String"
          ],
          [
            "total_chunks",
            "i64"
          ],
          [
            "compressed_chunks",
            "i64"
          ],
          [
            "total_bytes",
            "Option<i64>"
          ],
          [
            "compressed_bytes",
            "Option<i64>"
          ],
          [
            "uncompressed_bytes",
            "Option<i64>"
          ],
          [
            "compression_ratio_pct",
            "Option<f64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TimescaleConfig",
        "file": "crates/data_ingestion/src/timescale/mod.rs",
        "line": 50,
        "fields": [
          [
            "host",
            "String"
          ],
          [
            "port",
            "u16"
          ],
          [
            "database",
            "String"
          ],
          [
            "username",
            "String"
          ],
          [
            "password",
            "String"
          ],
          [
            "pool_size",
            "usize"
          ],
          [
            "connection_timeout",
            "Duration"
          ],
          [
            "idle_timeout",
            "Duration"
          ],
          [
            "max_lifetime",
            "Duration"
          ],
          [
            "batch_size",
            "usize"
          ],
          [
            "batch_timeout",
            "Duration"
          ],
          [
            "compression_after",
            "Duration"
          ],
          [
            "retention_days",
            "u32"
          ],
          [
            "enable_compression",
            "bool"
          ],
          [
            "enable_continuous_aggregates",
            "bool"
          ],
          [
            "enable_replication",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TimescaleClient",
        "file": "crates/data_ingestion/src/timescale/mod.rs",
        "line": 102,
        "fields": [
          [
            "pool",
            "Arc<Pool>"
          ],
          [
            "config",
            "TimescaleConfig"
          ],
          [
            "hypertable_mgr",
            "Arc<HypertableManager>"
          ],
          [
            "aggregate_mgr",
            "Arc<AggregateManager>"
          ],
          [
            "compression_mgr",
            "Arc<CompressionManager>"
          ],
          [
            "performance_monitor",
            "Arc<PerformanceMonitor>"
          ],
          [
            "tick_buffer",
            "Arc<RwLock<Vec<MarketTick>>>"
          ],
          [
            "orderbook_buffer",
            "Arc<RwLock<Vec<OrderBookSnapshot>>>"
          ],
          [
            "execution_buffer",
            "Arc<RwLock<Vec<ExecutionRecord>>>"
          ],
          [
            "write_semaphore",
            "Arc<Semaphore>"
          ],
          [
            "total_written",
            "Arc<RwLock<u64>>"
          ],
          [
            "last_flush",
            "Arc<RwLock<Instant>>"
          ],
          [
            "shutdown",
            "Arc<RwLock<bool>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketTick",
        "file": "crates/data_ingestion/src/timescale/mod.rs",
        "line": 129,
        "fields": [
          [
            "time",
            "DateTime<Utc>"
          ],
          [
            "exchange",
            "String"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "price",
            "Decimal"
          ],
          [
            "volume",
            "Decimal"
          ],
          [
            "side",
            "TradeSide"
          ],
          [
            "trade_id",
            "i64"
          ],
          [
            "price_delta",
            "Option<Decimal>"
          ],
          [
            "volume_bucket",
            "Option<i16>"
          ],
          [
            "tick_direction",
            "Option<i16>"
          ],
          [
            "exchange_time",
            "Option<DateTime<Utc>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderBookSnapshot",
        "file": "crates/data_ingestion/src/timescale/mod.rs",
        "line": 162,
        "fields": [
          [
            "time",
            "DateTime<Utc>"
          ],
          [
            "exchange",
            "String"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "snapshot_type",
            "SnapshotType"
          ],
          [
            "sequence_num",
            "i64"
          ],
          [
            "bid_prices",
            "Vec<Decimal>"
          ],
          [
            "bid_volumes",
            "Vec<Decimal>"
          ],
          [
            "bid_counts",
            "Vec<i32>"
          ],
          [
            "ask_prices",
            "Vec<Decimal>"
          ],
          [
            "ask_volumes",
            "Vec<Decimal>"
          ],
          [
            "ask_counts",
            "Vec<i32>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ExecutionRecord",
        "file": "crates/data_ingestion/src/timescale/mod.rs",
        "line": 184,
        "fields": [
          [
            "time",
            "DateTime<Utc>"
          ],
          [
            "order_id",
            "String"
          ],
          [
            "trade_id",
            "String"
          ],
          [
            "exchange",
            "String"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "side",
            "TradeSide"
          ],
          [
            "order_type",
            "String"
          ],
          [
            "price",
            "Decimal"
          ],
          [
            "volume",
            "Decimal"
          ],
          [
            "fee",
            "Decimal"
          ],
          [
            "fee_currency",
            "String"
          ],
          [
            "strategy_id",
            "String"
          ],
          [
            "signal_strength",
            "Option<Decimal>"
          ],
          [
            "intended_price",
            "Option<Decimal>"
          ],
          [
            "pnl_realized",
            "Option<Decimal>"
          ],
          [
            "position_after",
            "Option<Decimal>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OHLCVData",
        "file": "crates/data_ingestion/src/timescale/mod.rs",
        "line": 759,
        "fields": [
          [
            "time",
            "DateTime<Utc>"
          ],
          [
            "open",
            "Decimal"
          ],
          [
            "high",
            "Decimal"
          ],
          [
            "low",
            "Decimal"
          ],
          [
            "close",
            "Decimal"
          ],
          [
            "volume",
            "Decimal"
          ],
          [
            "vwap",
            "Option<Decimal>"
          ],
          [
            "volatility",
            "Option<Decimal>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PerformanceMetrics",
        "file": "crates/data_ingestion/src/timescale/mod.rs",
        "line": 772,
        "fields": [
          [
            "events_per_second",
            "f64"
          ],
          [
            "avg_latency_us",
            "f64"
          ],
          [
            "p95_latency_us",
            "f64"
          ],
          [
            "p99_latency_us",
            "f64"
          ],
          [
            "slow_events",
            "i64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ReplicationConfig",
        "file": "crates/data_ingestion/src/timescale/replication.rs",
        "line": 13,
        "fields": [
          [
            "standby_names",
            "Vec<String>"
          ],
          [
            "synchronous_commit",
            "bool"
          ],
          [
            "wal_keep_size",
            "String"
          ],
          [
            "max_wal_senders",
            "i32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "BackupConfig",
        "file": "crates/data_ingestion/src/timescale/replication.rs",
        "line": 22,
        "fields": [
          [
            "backup_interval",
            "chrono::Duration"
          ],
          [
            "retention_days",
            "i32"
          ],
          [
            "backup_location",
            "String"
          ],
          [
            "compress_backups",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ReplicationManager",
        "file": "crates/data_ingestion/src/timescale/replication.rs",
        "line": 30,
        "fields": [
          [
            "pool",
            "Arc<Pool>"
          ],
          [
            "config",
            "Option<ReplicationConfig>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "StandbyLag",
        "file": "crates/data_ingestion/src/timescale/replication.rs",
        "line": 239,
        "fields": [
          [
            "standby_name",
            "String"
          ],
          [
            "state",
            "String"
          ],
          [
            "sync_state",
            "String"
          ],
          [
            "lag_bytes",
            "i64"
          ],
          [
            "lag_seconds",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "BackupInfo",
        "file": "crates/data_ingestion/src/timescale/replication.rs",
        "line": 248,
        "fields": [
          [
            "backup_id",
            "String"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "tables",
            "usize"
          ],
          [
            "total_size",
            "i64"
          ],
          [
            "duration_seconds",
            "i32"
          ],
          [
            "status",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TimeWindow",
        "file": "crates/data_ingestion/src/event_driven/time_window.rs",
        "line": 6,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "WindowManager",
        "file": "crates/data_ingestion/src/event_driven/time_window.rs",
        "line": 7,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "WindowConfig",
        "file": "crates/data_ingestion/src/event_driven/time_window.rs",
        "line": 10,
        "fields": [
          [
            "window_size_ms",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TumblingWindow",
        "file": "crates/data_ingestion/src/event_driven/time_window.rs",
        "line": 20,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "SlidingWindow",
        "file": "crates/data_ingestion/src/event_driven/time_window.rs",
        "line": 21,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "SessionWindow",
        "file": "crates/data_ingestion/src/event_driven/time_window.rs",
        "line": 22,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "SamplingRate",
        "file": "crates/data_ingestion/src/event_driven/adaptive_sampler.rs",
        "line": 62,
        "fields": [
          [
            "interval_ms",
            "u64"
          ],
          [
            "events_per_second",
            "f64"
          ],
          [
            "regime",
            "VolatilityRegime"
          ],
          [
            "confidence",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SamplerConfig",
        "file": "crates/data_ingestion/src/event_driven/adaptive_sampler.rs",
        "line": 71,
        "fields": [
          [
            "base_interval_ms",
            "u64"
          ],
          [
            "min_interval_ms",
            "u64"
          ],
          [
            "max_interval_ms",
            "u64"
          ],
          [
            "volatility_window_sec",
            "u64"
          ],
          [
            "regime_change_threshold",
            "f64"
          ],
          [
            "use_garch",
            "bool"
          ],
          [
            "use_realized_vol",
            "bool"
          ],
          [
            "use_implied_vol",
            "bool"
          ],
          [
            "strategy",
            "SamplingStrategy"
          ],
          [
            "burst_threshold",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PriceSample",
        "file": "crates/data_ingestion/src/event_driven/adaptive_sampler.rs",
        "line": 125,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "price",
            "Price"
          ],
          [
            "volume",
            "Quantity"
          ],
          [
            "spread",
            "Option<Decimal>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "GarchModel",
        "file": "crates/data_ingestion/src/event_driven/adaptive_sampler.rs",
        "line": 133,
        "fields": [
          [
            "omega",
            "f64"
          ],
          [
            "alpha",
            "f64"
          ],
          [
            "beta",
            "f64"
          ],
          [
            "current_vol",
            "f64"
          ],
          [
            "last_return",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "AdaptiveSampler",
        "file": "crates/data_ingestion/src/event_driven/adaptive_sampler.rs",
        "line": 177,
        "fields": [
          [
            "config",
            "Arc<SamplerConfig>"
          ],
          [
            "price_history",
            "Arc<RwLock<VecDeque<PriceSample>>>"
          ],
          [
            "current_volatility",
            "Arc<RwLock<f64>>"
          ],
          [
            "current_regime",
            "Arc<RwLock<VolatilityRegime>>"
          ],
          [
            "garch_model",
            "Arc<RwLock<GarchModel>>"
          ],
          [
            "current_rate",
            "Arc<RwLock<SamplingRate>>"
          ],
          [
            "sampling_rate_changes",
            "Arc<dyn MetricsCollector>"
          ],
          [
            "regime_changes",
            "Arc<dyn MetricsCollector>"
          ],
          [
            "volatility_histogram",
            "Arc<dyn MetricsCollector>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "EventDispatcher",
        "file": "crates/data_ingestion/src/event_driven/event_dispatcher.rs",
        "line": 6,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "EventRoute",
        "file": "crates/data_ingestion/src/event_driven/event_dispatcher.rs",
        "line": 12,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "DispatchMetrics",
        "file": "crates/data_ingestion/src/event_driven/event_dispatcher.rs",
        "line": 13,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "PerformanceMonitor",
        "file": "crates/data_ingestion/src/event_driven/performance_monitor.rs",
        "line": 4,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "LatencyTracker",
        "file": "crates/data_ingestion/src/event_driven/performance_monitor.rs",
        "line": 5,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "ThroughputMetrics",
        "file": "crates/data_ingestion/src/event_driven/performance_monitor.rs",
        "line": 6,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "SystemLoad",
        "file": "crates/data_ingestion/src/event_driven/performance_monitor.rs",
        "line": 7,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "ProcessingResult",
        "file": "crates/data_ingestion/src/event_driven/processor.rs",
        "line": 41,
        "fields": [
          [
            "event_id",
            "u64"
          ],
          [
            "processing_time_ns",
            "u64"
          ],
          [
            "queue_time_ns",
            "u64"
          ],
          [
            "priority",
            "EventPriority"
          ],
          [
            "success",
            "bool"
          ],
          [
            "error",
            "Option<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Event",
        "file": "crates/data_ingestion/src/event_driven/processor.rs",
        "line": 52,
        "fields": [
          [
            "id",
            "u64"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "symbol",
            "Symbol"
          ],
          [
            "priority",
            "EventPriority"
          ],
          [
            "payload",
            "EventPayload"
          ],
          [
            "arrival_time",
            "Instant"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ProcessorConfig",
        "file": "crates/data_ingestion/src/event_driven/processor.rs",
        "line": 97,
        "fields": [
          [
            "max_throughput",
            "u64"
          ],
          [
            "queue_sizes",
            "[usize; 5]"
          ],
          [
            "worker_threads",
            "usize"
          ],
          [
            "enable_batching",
            "bool"
          ],
          [
            "min_batch_size",
            "usize"
          ],
          [
            "max_batch_size",
            "usize"
          ],
          [
            "max_queue_latency_us",
            "u64"
          ],
          [
            "enable_backpressure",
            "bool"
          ],
          [
            "monitoring_interval_ms",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ProcessorMetrics",
        "file": "crates/data_ingestion/src/event_driven/processor.rs",
        "line": 141,
        "fields": [
          [
            "events_processed",
            "Arc<dyn MetricsCollector>"
          ],
          [
            "events_dropped",
            "Arc<dyn MetricsCollector>"
          ],
          [
            "processing_latency",
            "Arc<dyn MetricsCollector>"
          ],
          [
            "queue_latency",
            "Arc<dyn MetricsCollector>"
          ],
          [
            "batch_size",
            "Arc<dyn MetricsCollector>"
          ],
          [
            "throughput",
            "Arc<dyn MetricsCollector>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "QueueStats",
        "file": "crates/data_ingestion/src/event_driven/processor.rs",
        "line": 152,
        "fields": [
          [
            "depth",
            "usize"
          ],
          [
            "max_latency_ns",
            "u64"
          ],
          [
            "avg_latency_ns",
            "u64"
          ],
          [
            "events_processed",
            "u64"
          ],
          [
            "events_dropped",
            "u64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "Worker",
        "file": "crates/data_ingestion/src/event_driven/processor.rs",
        "line": 161,
        "fields": [
          [
            "id",
            "usize"
          ],
          [
            "handle",
            "Option<tokio::task::JoinHandle<()>>"
          ],
          [
            "shutdown",
            "Arc<AtomicBool>"
          ],
          [
            "stats",
            "Arc<RwLock<WorkerStats>>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "WorkerStats",
        "file": "crates/data_ingestion/src/event_driven/processor.rs",
        "line": 170,
        "fields": [
          [
            "events_processed",
            "u64"
          ],
          [
            "total_processing_ns",
            "u64"
          ],
          [
            "last_event_time",
            "Option<Instant>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "EventProcessor",
        "file": "crates/data_ingestion/src/event_driven/processor.rs",
        "line": 177,
        "fields": [
          [
            "config",
            "Arc<ProcessorConfig>"
          ],
          [
            "priority_queues",
            "Arc<[Receiver<Event>; 5]>"
          ],
          [
            "priority_senders",
            "Arc<[Sender<Event>; 5]>"
          ],
          [
            "event_counter",
            "Arc<AtomicU64>"
          ],
          [
            "workers",
            "Arc<RwLock<Vec<Worker>>>"
          ],
          [
            "metrics",
            "Arc<ProcessorMetrics>"
          ],
          [
            "queue_stats",
            "Arc<DashMap<EventPriority"
          ],
          [
            "shutdown",
            "Arc<AtomicBool>"
          ],
          [
            "rate_limiter",
            "Arc<RwLock<RateLimiter>>"
          ],
          [
            "handlers",
            "Arc<DashMap<EventPriority"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RateLimiter",
        "file": "crates/data_ingestion/src/event_driven/processor.rs",
        "line": 213,
        "fields": [
          [
            "tokens",
            "f64"
          ],
          [
            "max_tokens",
            "f64"
          ],
          [
            "refill_rate",
            "f64"
          ],
          [
            "last_refill",
            "Instant"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ProcessingStats",
        "file": "crates/data_ingestion/src/event_driven/processor.rs",
        "line": 629,
        "fields": [
          [
            "total_events",
            "u64"
          ],
          [
            "events_processed",
            "u64"
          ],
          [
            "avg_processing_ns",
            "u64"
          ],
          [
            "queue_depths",
            "[usize; 5]"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "VolatilityConfig",
        "file": "crates/data_ingestion/src/event_driven/volatility_tracker.rs",
        "line": 7,
        "fields": [
          [
            "window_size",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "VolatilityTracker",
        "file": "crates/data_ingestion/src/event_driven/volatility_tracker.rs",
        "line": 17,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "VolatilityMetrics",
        "file": "crates/data_ingestion/src/event_driven/volatility_tracker.rs",
        "line": 18,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "RegimeChange",
        "file": "crates/data_ingestion/src/event_driven/volatility_tracker.rs",
        "line": 19,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "AggregateWindow",
        "file": "crates/data_ingestion/src/event_driven/bucketed_aggregator.rs",
        "line": 44,
        "fields": [
          [
            "window_id",
            "u64"
          ],
          [
            "symbol",
            "Symbol"
          ],
          [
            "start_time",
            "DateTime<Utc>"
          ],
          [
            "end_time",
            "DateTime<Utc>"
          ],
          [
            "duration_ms",
            "u64"
          ],
          [
            "open",
            "Price"
          ],
          [
            "high",
            "Price"
          ],
          [
            "low",
            "Price"
          ],
          [
            "close",
            "Price"
          ],
          [
            "volume",
            "Quantity"
          ],
          [
            "trade_count",
            "u32"
          ],
          [
            "vwap",
            "Price"
          ],
          [
            "twap",
            "Price"
          ],
          [
            "spread_avg",
            "Decimal"
          ],
          [
            "spread_max",
            "Decimal"
          ],
          [
            "buy_volume",
            "Quantity"
          ],
          [
            "sell_volume",
            "Quantity"
          ],
          [
            "order_imbalance",
            "f64"
          ],
          [
            "tick_direction",
            "i8"
          ],
          [
            "realized_volatility",
            "f64"
          ],
          [
            "high_low_range",
            "Decimal"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "BucketConfig",
        "file": "crates/data_ingestion/src/event_driven/bucketed_aggregator.rs",
        "line": 78,
        "fields": [
          [
            "window_duration_ms",
            "u64"
          ],
          [
            "window_type",
            "WindowType"
          ],
          [
            "max_windows",
            "usize"
          ],
          [
            "enable_microstructure",
            "bool"
          ],
          [
            "enable_volatility",
            "bool"
          ],
          [
            "aggregation_levels",
            "Vec<u64>"
          ],
          [
            "sliding_overlap",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "BucketStats",
        "file": "crates/data_ingestion/src/event_driven/bucketed_aggregator.rs",
        "line": 117,
        "fields": [
          [
            "total_windows",
            "u64"
          ],
          [
            "active_windows",
            "usize"
          ],
          [
            "events_processed",
            "u64"
          ],
          [
            "avg_events_per_window",
            "f64"
          ],
          [
            "compression_ratio",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TradeEvent",
        "file": "crates/data_ingestion/src/event_driven/bucketed_aggregator.rs",
        "line": 127,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "price",
            "Price"
          ],
          [
            "quantity",
            "Quantity"
          ],
          [
            "is_buy",
            "bool"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "MultiLevelAggregator",
        "file": "crates/data_ingestion/src/event_driven/bucketed_aggregator.rs",
        "line": 135,
        "fields": [
          [
            "levels",
            "BTreeMap<u64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "LevelAggregator",
        "file": "crates/data_ingestion/src/event_driven/bucketed_aggregator.rs",
        "line": 160,
        "fields": [
          [
            "duration_ms",
            "u64"
          ],
          [
            "current_window",
            "Option<WindowBuilder>"
          ],
          [
            "completed_windows",
            "VecDeque<AggregateWindow>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "WindowBuilder",
        "file": "crates/data_ingestion/src/event_driven/bucketed_aggregator.rs",
        "line": 222,
        "fields": [
          [
            "symbol",
            "Symbol"
          ],
          [
            "start_time",
            "DateTime<Utc>"
          ],
          [
            "duration_ms",
            "u64"
          ],
          [
            "window_id",
            "u64"
          ],
          [
            "first_trade",
            "Option<TradeEvent>"
          ],
          [
            "last_trade",
            "Option<TradeEvent>"
          ],
          [
            "high_price",
            "Option<Price>"
          ],
          [
            "low_price",
            "Option<Price>"
          ],
          [
            "total_volume",
            "Decimal"
          ],
          [
            "trade_count",
            "u32"
          ],
          [
            "volume_price_sum",
            "Decimal"
          ],
          [
            "price_time_sum",
            "Decimal"
          ],
          [
            "time_weight_sum",
            "i64"
          ],
          [
            "buy_volume",
            "Decimal"
          ],
          [
            "sell_volume",
            "Decimal"
          ],
          [
            "spread_sum",
            "Decimal"
          ],
          [
            "spread_max",
            "Decimal"
          ],
          [
            "spread_count",
            "u32"
          ],
          [
            "price_squares_sum",
            "Decimal"
          ],
          [
            "price_sum",
            "Decimal"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "BucketedAggregator",
        "file": "crates/data_ingestion/src/event_driven/bucketed_aggregator.rs",
        "line": 427,
        "fields": [
          [
            "config",
            "Arc<BucketConfig>"
          ],
          [
            "aggregators",
            "Arc<RwLock<BTreeMap<Symbol"
          ],
          [
            "completed_windows",
            "Arc<RwLock<VecDeque<AggregateWindow>>>"
          ],
          [
            "windows_created",
            "Arc<AtomicU64>"
          ],
          [
            "events_processed",
            "Arc<AtomicU64>"
          ],
          [
            "window_duration_histogram",
            "Arc<dyn MetricsCollector>"
          ],
          [
            "events_per_window",
            "Arc<dyn MetricsCollector>"
          ],
          [
            "compression_ratio",
            "Arc<dyn MetricsCollector>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MicrostructureFeatures",
        "file": "crates/data_ingestion/src/event_driven/bucketed_aggregator.rs",
        "line": 602,
        "fields": [
          [
            "flow_toxicity",
            "f64"
          ],
          [
            "avg_order_imbalance",
            "f64"
          ],
          [
            "volatility_clustering",
            "f64"
          ],
          [
            "price_efficiency",
            "f64"
          ],
          [
            "avg_spread",
            "Decimal"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ProducerConfig",
        "file": "crates/data_ingestion/src/producers/redpanda_producer.rs",
        "line": 78,
        "fields": [
          [
            "brokers",
            "String"
          ],
          [
            "batch_size",
            "usize"
          ],
          [
            "batch_timeout_ms",
            "u64"
          ],
          [
            "compression",
            "CompressionType"
          ],
          [
            "max_in_flight",
            "usize"
          ],
          [
            "acks",
            "AckLevel"
          ],
          [
            "enable_idempotence",
            "bool"
          ],
          [
            "linger_ms",
            "u64"
          ],
          [
            "buffer_memory",
            "usize"
          ],
          [
            "request_timeout_ms",
            "u64"
          ],
          [
            "delivery_timeout_ms",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RedpandaProducer",
        "file": "crates/data_ingestion/src/producers/redpanda_producer.rs",
        "line": 127,
        "fields": [
          [
            "producer",
            "Arc<FutureProducer>"
          ],
          [
            "config",
            "ProducerConfig"
          ],
          [
            "batch_buffer",
            "Arc<Mutex<VecDeque<(MarketEvent"
          ],
          [
            "batch_semaphore",
            "Arc<Semaphore>"
          ],
          [
            "schema_registry",
            "Arc<SchemaRegistry>"
          ],
          [
            "metrics",
            "Arc<ProducerMetrics>"
          ],
          [
            "events_sent",
            "Arc<AtomicU64>"
          ],
          [
            "events_failed",
            "Arc<AtomicU64>"
          ],
          [
            "bytes_sent",
            "Arc<AtomicU64>"
          ],
          [
            "failure_count",
            "Arc<AtomicU64>"
          ],
          [
            "circuit_open",
            "Arc<AtomicBool>"
          ],
          [
            "circuit_half_open_at",
            "Arc<Mutex<Option<Instant>>>"
          ],
          [
            "partition_cache",
            "Arc<SyncRwLock<AHashMap<String"
          ],
          [
            "shutdown",
            "Arc<AtomicBool>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Counter",
        "file": "crates/data_ingestion/src/monitoring/mod.rs",
        "line": 14,
        "fields": [
          [
            "value",
            "AtomicU64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Histogram",
        "file": "crates/data_ingestion/src/monitoring/mod.rs",
        "line": 41,
        "fields": [
          [
            "values",
            "Arc<RwLock<Vec<f64>>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ProducerMetrics",
        "file": "crates/data_ingestion/src/monitoring/mod.rs",
        "line": 97,
        "fields": [
          [
            "queuing_latency_us",
            "Arc<AtomicU64>"
          ],
          [
            "throughput_events",
            "Arc<AtomicU64>"
          ],
          [
            "throughput_bytes",
            "Arc<AtomicU64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ConsumerMetrics",
        "file": "crates/data_ingestion/src/monitoring/mod.rs",
        "line": 122,
        "fields": [
          [
            "events_processed",
            "Arc<AtomicU64>"
          ],
          [
            "processing_latency_us",
            "Arc<AtomicU64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ClickHouseMetrics",
        "file": "crates/data_ingestion/src/monitoring/mod.rs",
        "line": 137,
        "fields": [
          [
            "writes_total",
            "Arc<dyn MetricsCollector>"
          ],
          [
            "write_latency_ms",
            "Arc<dyn MetricsCollector>"
          ],
          [
            "errors_total",
            "Arc<dyn MetricsCollector>"
          ],
          [
            "bytes_written",
            "Arc<dyn MetricsCollector>"
          ],
          [
            "buffer_size",
            "Arc<AtomicU64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SchemaRegistryConfig",
        "file": "crates/data_ingestion/src/schema/mod.rs",
        "line": 23,
        "fields": [
          [
            "url",
            "String"
          ],
          [
            "auth",
            "Option<SchemaAuth>"
          ],
          [
            "connect_timeout",
            "Duration"
          ],
          [
            "request_timeout",
            "Duration"
          ],
          [
            "max_retries",
            "u32"
          ],
          [
            "retry_backoff",
            "Duration"
          ],
          [
            "cache_size",
            "usize"
          ],
          [
            "cache_ttl",
            "Duration"
          ],
          [
            "enable_validation",
            "bool"
          ],
          [
            "compatibility",
            "CompatibilityLevel"
          ],
          [
            "subject_strategy",
            "SubjectStrategy"
          ],
          [
            "auto_register",
            "bool"
          ],
          [
            "track_evolution",
            "bool"
          ],
          [
            "max_versions",
            "u32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SchemaInfo",
        "file": "crates/data_ingestion/src/schema/mod.rs",
        "line": 140,
        "fields": [
          [
            "id",
            "i32"
          ],
          [
            "version",
            "i32"
          ],
          [
            "subject",
            "String"
          ],
          [
            "schema",
            "String"
          ],
          [
            "schema_type",
            "SchemaType"
          ],
          [
            "references",
            "Vec<SchemaReference>"
          ],
          [
            "metadata",
            "HashMap<String"
          ],
          [
            "created_at",
            "i64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SchemaReference",
        "file": "crates/data_ingestion/src/schema/mod.rs",
        "line": 153,
        "fields": [
          [
            "name",
            "String"
          ],
          [
            "subject",
            "String"
          ],
          [
            "version",
            "i32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SchemaEvolution",
        "file": "crates/data_ingestion/src/schema/mod.rs",
        "line": 161,
        "fields": [
          [
            "from_version",
            "i32"
          ],
          [
            "to_version",
            "i32"
          ],
          [
            "changes",
            "Vec<SchemaChange>"
          ],
          [
            "compatibility",
            "CompatibilityLevel"
          ],
          [
            "migration_rules",
            "Vec<MigrationRule>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MigrationRule",
        "file": "crates/data_ingestion/src/schema/mod.rs",
        "line": 181,
        "fields": [
          [
            "rule_type",
            "String"
          ],
          [
            "field",
            "String"
          ],
          [
            "transformation",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CacheEntry",
        "file": "crates/data_ingestion/src/schema/mod.rs",
        "line": 188,
        "fields": [
          [
            "schema",
            "Arc<SchemaInfo>"
          ],
          [
            "parsed",
            "Option<Arc<AvroSchema>>"
          ],
          [
            "created_at",
            "Instant"
          ],
          [
            "access_count",
            "AtomicU64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "RegistryMetrics",
        "file": "crates/data_ingestion/src/schema/mod.rs",
        "line": 196,
        "fields": [
          [
            "schemas_registered",
            "AtomicU64"
          ],
          [
            "schemas_fetched",
            "AtomicU64"
          ],
          [
            "cache_hits",
            "AtomicU64"
          ],
          [
            "cache_misses",
            "AtomicU64"
          ],
          [
            "validation_success",
            "AtomicU64"
          ],
          [
            "validation_failures",
            "AtomicU64"
          ],
          [
            "compatibility_checks",
            "AtomicU64"
          ],
          [
            "api_latency_us",
            "AtomicU64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DataContract",
        "file": "crates/data_ingestion/src/schema/mod.rs",
        "line": 224,
        "fields": [
          [
            "name",
            "String"
          ],
          [
            "version",
            "String"
          ],
          [
            "owner",
            "String"
          ],
          [
            "description",
            "String"
          ],
          [
            "schemas",
            "Vec<ContractSchema>"
          ],
          [
            "sla",
            "ServiceLevelAgreement"
          ],
          [
            "quality_rules",
            "Vec<QualityRule>"
          ],
          [
            "metadata",
            "HashMap<String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ContractSchema",
        "file": "crates/data_ingestion/src/schema/mod.rs",
        "line": 237,
        "fields": [
          [
            "subject",
            "String"
          ],
          [
            "version",
            "i32"
          ],
          [
            "format",
            "SchemaType"
          ],
          [
            "required",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ServiceLevelAgreement",
        "file": "crates/data_ingestion/src/schema/mod.rs",
        "line": 246,
        "fields": [
          [
            "availability",
            "f64"
          ],
          [
            "latency_p99_ms",
            "u64"
          ],
          [
            "throughput_eps",
            "u64"
          ],
          [
            "freshness_ms",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "QualityRule",
        "file": "crates/data_ingestion/src/schema/mod.rs",
        "line": 255,
        "fields": [
          [
            "name",
            "String"
          ],
          [
            "field",
            "String"
          ],
          [
            "rule_type",
            "String"
          ],
          [
            "parameters",
            "HashMap<String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SchemaRegistry",
        "file": "crates/data_ingestion/src/schema/mod.rs",
        "line": 263,
        "fields": [
          [
            "config",
            "Arc<SchemaRegistryConfig>"
          ],
          [
            "client",
            "Arc<Client>"
          ],
          [
            "cache",
            "Arc<RwLock<LruCache<String"
          ],
          [
            "id_cache",
            "Arc<DashMap<i32"
          ],
          [
            "evolution_history",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "contracts",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "metrics",
            "Arc<RegistryMetrics>"
          ],
          [
            "request_semaphore",
            "Arc<Semaphore>"
          ],
          [
            "shutdown",
            "Arc<AtomicBool>"
          ],
          [
            "cleanup_handle",
            "Option<tokio::task::JoinHandle<()>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ScoringConfig",
        "file": "crates/data_ingestion/src/data_quality/quality_scorer.rs",
        "line": 11,
        "fields": [
          [
            "weights",
            "QualityWeights"
          ],
          [
            "decay_rate",
            "f64"
          ],
          [
            "min_acceptable_score",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "QualityWeights",
        "file": "crates/data_ingestion/src/data_quality/quality_scorer.rs",
        "line": 28,
        "fields": [
          [
            "completeness",
            "f64"
          ],
          [
            "accuracy",
            "f64"
          ],
          [
            "consistency",
            "f64"
          ],
          [
            "timeliness",
            "f64"
          ],
          [
            "validity",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "QualityScorer",
        "file": "crates/data_ingestion/src/data_quality/quality_scorer.rs",
        "line": 49,
        "fields": [
          [
            "config",
            "ScoringConfig"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "QualityMetrics",
        "file": "crates/data_ingestion/src/data_quality/quality_scorer.rs",
        "line": 117,
        "fields": [
          [
            "completeness",
            "f64"
          ],
          [
            "accuracy",
            "f64"
          ],
          [
            "consistency",
            "f64"
          ],
          [
            "timeliness",
            "f64"
          ],
          [
            "validity",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "QualityScore",
        "file": "crates/data_ingestion/src/data_quality/quality_scorer.rs",
        "line": 126,
        "fields": [
          [
            "overall_score",
            "f64"
          ],
          [
            "metrics",
            "QualityMetrics"
          ],
          [
            "level",
            "QualityLevel"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "recommendations",
            "Vec<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MonitoringConfig",
        "file": "crates/data_ingestion/src/data_quality/monitoring.rs",
        "line": 17,
        "fields": [
          [
            "check_interval_ms",
            "u64"
          ],
          [
            "alert_channels",
            "Vec<AlertChannel>"
          ],
          [
            "retention_hours",
            "i64"
          ],
          [
            "alert_rate_limit",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "QualityMonitor",
        "file": "crates/data_ingestion/src/data_quality/monitoring.rs",
        "line": 48,
        "fields": [
          [
            "config",
            "MonitoringConfig"
          ],
          [
            "metrics_buffer",
            "Arc<RwLock<VecDeque<MonitoringMetrics>>>"
          ],
          [
            "alert_queue",
            "mpsc::Sender<QualityAlert>"
          ],
          [
            "alert_receiver",
            "Arc<RwLock<mpsc::Receiver<QualityAlert>>>"
          ],
          [
            "shutdown",
            "Arc<RwLock<bool>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RateLimiter",
        "file": "crates/data_ingestion/src/data_quality/monitoring.rs",
        "line": 227,
        "fields": [
          [
            "max_per_minute",
            "usize"
          ],
          [
            "recent_times",
            "VecDeque<std::time::Instant>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "MonitoringMetrics",
        "file": "crates/data_ingestion/src/data_quality/monitoring.rs",
        "line": 263,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "quality_score",
            "f64"
          ],
          [
            "issue_count",
            "usize"
          ],
          [
            "is_valid",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "QualityAlert",
        "file": "crates/data_ingestion/src/data_quality/monitoring.rs",
        "line": 272,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "severity",
            "AlertSeverity"
          ],
          [
            "category",
            "IssueCategory"
          ],
          [
            "message",
            "String"
          ],
          [
            "quality_score",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "KalmanConfig",
        "file": "crates/data_ingestion/src/data_quality/kalman_filter.rs",
        "line": 26,
        "fields": [
          [
            "process_noise",
            "f64"
          ],
          [
            "Q",
            "Process noise covariance\n    pub measurement_noise: f64"
          ],
          [
            "R",
            "Measurement noise covariance\n    pub initial_covariance: f64"
          ],
          [
            "P0",
            "Initial error covariance\n    pub gap_threshold_seconds: i64"
          ],
          [
            "prediction_std_multiplier",
            "f64"
          ],
          [
            "adaptive_noise",
            "bool"
          ],
          [
            "max_gap_interpolate",
            "i64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "KalmanGapDetector",
        "file": "crates/data_ingestion/src/data_quality/kalman_filter.rs",
        "line": 51,
        "fields": [
          [
            "config",
            "KalmanConfig"
          ],
          [
            "symbol_states",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "gap_history",
            "VecDeque<GapEvent>"
          ],
          [
            "innovation_stats",
            "Arc<RwLock<HashMap<String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "KalmanState",
        "file": "crates/data_ingestion/src/data_quality/kalman_filter.rs",
        "line": 65,
        "fields": [
          [
            "vector",
            "[position"
          ],
          [
            "x",
            "DVector<f64>"
          ],
          [
            "P",
            "DMatrix<f64>"
          ],
          [
            "F",
            "DMatrix<f64>"
          ],
          [
            "H",
            "DMatrix<f64>"
          ],
          [
            "Q",
            "DMatrix<f64>"
          ],
          [
            "R",
            "DMatrix<f64>"
          ],
          [
            "last_timestamp",
            "DateTime<Utc>"
          ],
          [
            "expected_interval",
            "Duration"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "InnovationStats",
        "file": "crates/data_ingestion/src/data_quality/kalman_filter.rs",
        "line": 430,
        "fields": [
          [
            "count",
            "usize"
          ],
          [
            "mean",
            "f64"
          ],
          [
            "variance",
            "f64"
          ],
          [
            "sum",
            "f64"
          ],
          [
            "sum_squared",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "GapEvent",
        "file": "crates/data_ingestion/src/data_quality/kalman_filter.rs",
        "line": 451,
        "fields": [
          [
            "symbol",
            "String"
          ],
          [
            "gap_start",
            "DateTime<Utc>"
          ],
          [
            "gap_end",
            "DateTime<Utc>"
          ],
          [
            "gap_duration",
            "Duration"
          ],
          [
            "expected_points",
            "usize"
          ],
          [
            "severity",
            "GapSeverity"
          ],
          [
            "detected_at",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "InterpolatedPoint",
        "file": "crates/data_ingestion/src/data_quality/kalman_filter.rs",
        "line": 473,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "value",
            "f64"
          ],
          [
            "confidence",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "GapStatistics",
        "file": "crates/data_ingestion/src/data_quality/kalman_filter.rs",
        "line": 481,
        "fields": [
          [
            "total_gaps",
            "usize"
          ],
          [
            "total_duration_seconds",
            "i64"
          ],
          [
            "average_duration_seconds",
            "f64"
          ],
          [
            "max_gap",
            "Option<GapEvent>"
          ],
          [
            "gaps_by_severity",
            "HashMap<GapSeverity"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ChangeDetectionConfig",
        "file": "crates/data_ingestion/src/data_quality/change_detection.rs",
        "line": 13,
        "fields": [
          [
            "algorithm",
            "DetectionAlgorithm"
          ],
          [
            "window_size",
            "usize"
          ],
          [
            "threshold",
            "f64"
          ],
          [
            "min_segment_length",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ChangeDetector",
        "file": "crates/data_ingestion/src/data_quality/change_detection.rs",
        "line": 38,
        "fields": [
          [
            "config",
            "ChangeDetectionConfig"
          ],
          [
            "buffer",
            "VecDeque<f64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ChangePoint",
        "file": "crates/data_ingestion/src/data_quality/change_detection.rs",
        "line": 180,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "index",
            "usize"
          ],
          [
            "confidence",
            "f64"
          ],
          [
            "change_type",
            "ChangeType"
          ],
          [
            "magnitude",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ReconciliationConfig",
        "file": "crates/data_ingestion/src/data_quality/reconciliation.rs",
        "line": 27,
        "fields": [
          [
            "min_sources_for_consensus",
            "usize"
          ],
          [
            "price_tolerance_percent",
            "f64"
          ],
          [
            "volume_tolerance_percent",
            "f64"
          ],
          [
            "timestamp_tolerance_ms",
            "i64"
          ],
          [
            "consensus_threshold",
            "f64"
          ],
          [
            "enable_outlier_detection",
            "bool"
          ],
          [
            "outlier_std_multiplier",
            "f64"
          ],
          [
            "enable_fuzzy_matching",
            "bool"
          ],
          [
            "fuzzy_threshold",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MockSource",
        "file": "crates/data_ingestion/src/data_quality/reconciliation.rs",
        "line": 65,
        "fields": [
          [
            "name",
            "String"
          ],
          [
            "reliability",
            "f64"
          ],
          [
            "latency",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "CrossSourceReconciler",
        "file": "crates/data_ingestion/src/data_quality/reconciliation.rs",
        "line": 100,
        "fields": [
          [
            "config",
            "ReconciliationConfig"
          ],
          [
            "sources",
            "Arc<RwLock<Vec<Arc<dyn DataSource>>>>"
          ],
          [
            "history",
            "Arc<RwLock<Vec<ReconciliationResult>>>"
          ],
          [
            "source_metrics",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "consensus_cache",
            "Arc<RwLock<HashMap<String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SourceData",
        "file": "crates/data_ingestion/src/data_quality/reconciliation.rs",
        "line": 457,
        "fields": [
          [
            "source",
            "String"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "price",
            "f64"
          ],
          [
            "volume",
            "f64"
          ],
          [
            "bid",
            "f64"
          ],
          [
            "ask",
            "f64"
          ],
          [
            "metadata",
            "HashMap<String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ConsensusData",
        "file": "crates/data_ingestion/src/data_quality/reconciliation.rs",
        "line": 470,
        "fields": [
          [
            "value",
            "f64"
          ],
          [
            "confidence",
            "f64"
          ],
          [
            "agreeing_sources",
            "Vec<String>"
          ],
          [
            "disagreeing_sources",
            "Vec<String>"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "SourceMetrics",
        "file": "crates/data_ingestion/src/data_quality/reconciliation.rs",
        "line": 480,
        "fields": [
          [
            "total_reports",
            "usize"
          ],
          [
            "outlier_count",
            "usize"
          ],
          [
            "reliability",
            "f64"
          ],
          [
            "last_report",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ReconciliationResult",
        "file": "crates/data_ingestion/src/data_quality/reconciliation.rs",
        "line": 489,
        "fields": [
          [
            "symbol",
            "String"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "is_consistent",
            "bool"
          ],
          [
            "consensus_value",
            "Option<f64>"
          ],
          [
            "source_count",
            "usize"
          ],
          [
            "agreeing_sources",
            "Vec<String>"
          ],
          [
            "disagreeing_sources",
            "Vec<String>"
          ],
          [
            "completeness_score",
            "f64"
          ],
          [
            "consistency_score",
            "f64"
          ],
          [
            "confidence",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ReconciliationStatistics",
        "file": "crates/data_ingestion/src/data_quality/reconciliation.rs",
        "line": 504,
        "fields": [
          [
            "total_reconciliations",
            "usize"
          ],
          [
            "consistent_count",
            "usize"
          ],
          [
            "inconsistent_count",
            "usize"
          ],
          [
            "average_confidence",
            "f64"
          ],
          [
            "source_statistics",
            "HashMap<String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SourceStatistics",
        "file": "crates/data_ingestion/src/data_quality/reconciliation.rs",
        "line": 514,
        "fields": [
          [
            "total_reports",
            "usize"
          ],
          [
            "outlier_count",
            "usize"
          ],
          [
            "reliability",
            "f64"
          ],
          [
            "last_report",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "BenfordConfig",
        "file": "crates/data_ingestion/src/data_quality/benford.rs",
        "line": 24,
        "fields": [
          [
            "min_sample_size",
            "usize"
          ],
          [
            "chi_squared_threshold",
            "f64"
          ],
          [
            "deviation_threshold",
            "f64"
          ],
          [
            "enable_second_digit",
            "bool"
          ],
          [
            "enable_mantissa",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "BenfordValidator",
        "file": "crates/data_ingestion/src/data_quality/benford.rs",
        "line": 45,
        "fields": [
          [
            "config",
            "BenfordConfig"
          ],
          [
            "first_digit_dist",
            "HashMap<u8"
          ],
          [
            "second_digit_dist",
            "HashMap<u8"
          ],
          [
            "first_two_digits_dist",
            "HashMap<u8"
          ],
          [
            "historical_deviations",
            "Vec<f64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DigitData",
        "file": "crates/data_ingestion/src/data_quality/benford.rs",
        "line": 338,
        "fields": [
          [
            "first_digits",
            "Vec<u8>"
          ],
          [
            "second_digits",
            "Vec<u8>"
          ],
          [
            "first_two_digits",
            "Vec<u8>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "TestResult",
        "file": "crates/data_ingestion/src/data_quality/benford.rs",
        "line": 345,
        "fields": [
          [
            "chi_squared",
            "f64"
          ],
          [
            "max_deviation",
            "f64"
          ],
          [
            "suspicious_digits",
            "Vec<u8>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "BenfordAnomaly",
        "file": "crates/data_ingestion/src/data_quality/benford.rs",
        "line": 353,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "anomaly_type",
            "AnomalyType"
          ],
          [
            "chi_squared",
            "f64"
          ],
          [
            "deviation",
            "f64"
          ],
          [
            "suspicious_digits",
            "Vec<u8>"
          ],
          [
            "confidence",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DataQualityConfig",
        "file": "crates/data_ingestion/src/data_quality/mod.rs",
        "line": 50,
        "fields": [
          [
            "benford_config",
            "benford::BenfordConfig"
          ],
          [
            "kalman_config",
            "kalman_filter::KalmanConfig"
          ],
          [
            "backfill_config",
            "backfill::BackfillConfig"
          ],
          [
            "reconciliation_config",
            "reconciliation::ReconciliationConfig"
          ],
          [
            "change_detection_config",
            "change_detection::ChangeDetectionConfig"
          ],
          [
            "scoring_config",
            "quality_scorer::ScoringConfig"
          ],
          [
            "monitoring_config",
            "monitoring::MonitoringConfig"
          ],
          [
            "enable_auto_correction",
            "bool"
          ],
          [
            "max_correction_attempts",
            "usize"
          ],
          [
            "quality_threshold",
            "f64"
          ],
          [
            "alert_cooldown_ms",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DataQualityManager",
        "file": "crates/data_ingestion/src/data_quality/mod.rs",
        "line": 85,
        "fields": [
          [
            "config",
            "DataQualityConfig"
          ],
          [
            "benford_validator",
            "Arc<BenfordValidator>"
          ],
          [
            "gap_detector",
            "Arc<KalmanGapDetector>"
          ],
          [
            "backfill_system",
            "Arc<BackfillSystem>"
          ],
          [
            "reconciler",
            "Arc<CrossSourceReconciler>"
          ],
          [
            "change_detector",
            "Arc<ChangeDetector>"
          ],
          [
            "quality_scorer",
            "Arc<QualityScorer>"
          ],
          [
            "monitor",
            "Arc<QualityMonitor>"
          ],
          [
            "validation_history",
            "Arc<RwLock<VecDeque<ValidationResult>>>"
          ],
          [
            "quality_scores",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "active_alerts",
            "Arc<RwLock<Vec<QualityAlert>>>"
          ],
          [
            "total_validations",
            "Arc<RwLock<u64>>"
          ],
          [
            "failed_validations",
            "Arc<RwLock<u64>>"
          ],
          [
            "auto_corrections",
            "Arc<RwLock<u64>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DataBatch",
        "file": "crates/data_ingestion/src/data_quality/mod.rs",
        "line": 461,
        "fields": [
          [
            "symbol",
            "String"
          ],
          [
            "data_type",
            "DataType"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "values",
            "Vec<f64>"
          ],
          [
            "source",
            "String"
          ],
          [
            "metadata",
            "Option<serde_json::Value>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ValidationResult",
        "file": "crates/data_ingestion/src/data_quality/mod.rs",
        "line": 483,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "data_type",
            "DataType"
          ],
          [
            "is_valid",
            "bool"
          ],
          [
            "quality_score",
            "f64"
          ],
          [
            "issues",
            "Vec<ValidationIssue>"
          ],
          [
            "corrections_applied",
            "Vec<Correction>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ValidationIssue",
        "file": "crates/data_ingestion/src/data_quality/mod.rs",
        "line": 495,
        "fields": [
          [
            "severity",
            "IssueSeverity"
          ],
          [
            "category",
            "IssueCategory"
          ],
          [
            "description",
            "String"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Correction",
        "file": "crates/data_ingestion/src/data_quality/mod.rs",
        "line": 554,
        "fields": [
          [
            "correction_type",
            "CorrectionType"
          ],
          [
            "description",
            "String"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "BatchValidationResult",
        "file": "crates/data_ingestion/src/data_quality/mod.rs",
        "line": 571,
        "fields": [
          [
            "total_items",
            "usize"
          ],
          [
            "valid_items",
            "usize"
          ],
          [
            "invalid_items",
            "usize"
          ],
          [
            "average_quality",
            "f64"
          ],
          [
            "individual_results",
            "Vec<ValidationResult>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "QualityStatus",
        "file": "crates/data_ingestion/src/data_quality/mod.rs",
        "line": 581,
        "fields": [
          [
            "symbol",
            "String"
          ],
          [
            "current_score",
            "Option<QualityScore>"
          ],
          [
            "recent_validations",
            "Vec<ValidationResult>"
          ],
          [
            "active_alerts",
            "Vec<QualityAlert>"
          ],
          [
            "last_updated",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ValidationStatistics",
        "file": "crates/data_ingestion/src/data_quality/mod.rs",
        "line": 591,
        "fields": [
          [
            "total_validations",
            "u64"
          ],
          [
            "failed_validations",
            "u64"
          ],
          [
            "success_rate",
            "f64"
          ],
          [
            "auto_corrections",
            "u64"
          ],
          [
            "active_alerts",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "BackfillConfig",
        "file": "crates/data_ingestion/src/data_quality/backfill.rs",
        "line": 26,
        "fields": [
          [
            "max_concurrent_jobs",
            "usize"
          ],
          [
            "max_retries_per_request",
            "usize"
          ],
          [
            "retry_delay_ms",
            "u64"
          ],
          [
            "exponential_backoff",
            "bool"
          ],
          [
            "max_backoff_ms",
            "u64"
          ],
          [
            "priority_boost_age_hours",
            "i64"
          ],
          [
            "cost_threshold_per_day",
            "f64"
          ],
          [
            "enable_multi_source",
            "bool"
          ],
          [
            "source_priority",
            "Vec<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "BackfillRequest",
        "file": "crates/data_ingestion/src/data_quality/backfill.rs",
        "line": 81,
        "fields": [
          [
            "symbol",
            "String"
          ],
          [
            "start_time",
            "DateTime<Utc>"
          ],
          [
            "end_time",
            "DateTime<Utc>"
          ],
          [
            "priority",
            "BackfillPriority"
          ],
          [
            "source",
            "String"
          ],
          [
            "max_retries",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "BackfillJob",
        "file": "crates/data_ingestion/src/data_quality/backfill.rs",
        "line": 143,
        "fields": [
          [
            "id",
            "String"
          ],
          [
            "request",
            "BackfillRequest"
          ],
          [
            "status",
            "JobStatus"
          ],
          [
            "attempts",
            "usize"
          ],
          [
            "created_at",
            "DateTime<Utc>"
          ],
          [
            "started_at",
            "Option<DateTime<Utc>>"
          ],
          [
            "completed_at",
            "Option<DateTime<Utc>>"
          ],
          [
            "data_points_filled",
            "usize"
          ],
          [
            "cost_estimate",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "MockDataSource",
        "file": "crates/data_ingestion/src/data_quality/backfill.rs",
        "line": 171,
        "fields": [
          [
            "name",
            "String"
          ],
          [
            "reliability",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "BackfillSystem",
        "file": "crates/data_ingestion/src/data_quality/backfill.rs",
        "line": 219,
        "fields": [
          [
            "config",
            "BackfillConfig"
          ],
          [
            "request_queue",
            "Arc<Mutex<BinaryHeap<BackfillRequest>>>"
          ],
          [
            "active_jobs",
            "Arc<RwLock<HashMap<String"
          ],
          [
            "completed_jobs",
            "Arc<RwLock<Vec<BackfillJob>>>"
          ],
          [
            "data_sources",
            "Arc<RwLock<Vec<Arc<dyn BackfillSource>>>>"
          ],
          [
            "seen_requests",
            "Arc<RwLock<HashSet<String>>>"
          ],
          [
            "daily_cost",
            "Arc<RwLock<f64>>"
          ],
          [
            "job_sender",
            "mpsc::Sender<BackfillRequest>"
          ],
          [
            "job_receiver",
            "Arc<Mutex<mpsc::Receiver<BackfillRequest>>>"
          ],
          [
            "shutdown",
            "Arc<RwLock<bool>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DataPoint",
        "file": "crates/data_ingestion/src/data_quality/backfill.rs",
        "line": 606,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "value",
            "f64"
          ],
          [
            "volume",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "BackfillStatistics",
        "file": "crates/data_ingestion/src/data_quality/backfill.rs",
        "line": 615,
        "fields": [
          [
            "active_jobs",
            "usize"
          ],
          [
            "pending_requests",
            "usize"
          ],
          [
            "completed_jobs",
            "usize"
          ],
          [
            "successful_jobs",
            "usize"
          ],
          [
            "failed_jobs",
            "usize"
          ],
          [
            "total_points_filled",
            "usize"
          ],
          [
            "daily_cost",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SlippageConfig",
        "file": "crates/data_ingestion/src/replay/slippage_model.rs",
        "line": 28,
        "fields": [
          [
            "linear_impact_bps",
            "f64"
          ],
          [
            "sqrt_impact_bps",
            "f64"
          ],
          [
            "temp_impact_decay_rate",
            "f64"
          ],
          [
            "permanent_impact_ratio",
            "f64"
          ],
          [
            "spread_cost_multiplier",
            "f64"
          ],
          [
            "volatility_factor",
            "f64"
          ],
          [
            "enable_intraday_patterns",
            "bool"
          ],
          [
            "max_participation_rate",
            "f64"
          ],
          [
            "model_adverse_selection",
            "bool"
          ],
          [
            "opportunity_cost_bps",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ExecutionCost",
        "file": "crates/data_ingestion/src/replay/slippage_model.rs",
        "line": 79,
        "fields": [
          [
            "symbol",
            "Symbol"
          ],
          [
            "side",
            "TradeSide"
          ],
          [
            "quantity",
            "Quantity"
          ],
          [
            "arrival_price",
            "Price"
          ],
          [
            "execution_price",
            "Price"
          ],
          [
            "spread_cost_bps",
            "f64"
          ],
          [
            "temporary_impact_bps",
            "f64"
          ],
          [
            "permanent_impact_bps",
            "f64"
          ],
          [
            "timing_cost_bps",
            "f64"
          ],
          [
            "opportunity_cost_bps",
            "f64"
          ],
          [
            "total_cost_bps",
            "f64"
          ],
          [
            "participation_rate",
            "f64"
          ],
          [
            "execution_time_ms",
            "u64"
          ],
          [
            "market_volatility",
            "f64"
          ],
          [
            "adverse_selection_cost_bps",
            "Option<f64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TemporaryImpact",
        "file": "crates/data_ingestion/src/replay/slippage_model.rs",
        "line": 133,
        "fields": [
          [
            "initial_impact_bps",
            "f64"
          ],
          [
            "decay_rate",
            "f64"
          ],
          [
            "half_life_ms",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PermanentImpact",
        "file": "crates/data_ingestion/src/replay/slippage_model.rs",
        "line": 141,
        "fields": [
          [
            "impact_bps",
            "f64"
          ],
          [
            "information_ratio",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "IntradayPattern",
        "file": "crates/data_ingestion/src/replay/slippage_model.rs",
        "line": 147,
        "fields": [
          [
            "hour_multipliers",
            "[f64; 24]"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "SlippageModel",
        "file": "crates/data_ingestion/src/replay/slippage_model.rs",
        "line": 174,
        "fields": [
          [
            "config",
            "Arc<SlippageConfig>"
          ],
          [
            "volatility_tracker",
            "Arc<RwLock<VolatilityTracker>>"
          ],
          [
            "intraday_pattern",
            "Arc<IntradayPattern>"
          ],
          [
            "slippage_histogram",
            "Arc<dyn MetricsCollector>"
          ],
          [
            "impact_histogram",
            "Arc<dyn MetricsCollector>"
          ],
          [
            "execution_time_histogram",
            "Arc<dyn MetricsCollector>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "VolatilityTracker",
        "file": "crates/data_ingestion/src/replay/slippage_model.rs",
        "line": 190,
        "fields": [
          [
            "returns",
            "Vec<f64>"
          ],
          [
            "window_size",
            "usize"
          ],
          [
            "ewma_alpha",
            "f64"
          ],
          [
            "current_volatility",
            "f64"
          ],
          [
            "realized_volatility",
            "f64"
          ],
          [
            "garch_volatility",
            "Option<f64>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "AdvancedSlippageModels",
        "file": "crates/data_ingestion/src/replay/slippage_model.rs",
        "line": 563,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "PlaybackConfig",
        "file": "crates/data_ingestion/src/replay/playback_engine.rs",
        "line": 33,
        "fields": [
          [
            "speed_multiplier",
            "f64"
          ],
          [
            "max_events_per_sec",
            "u64"
          ],
          [
            "enable_slippage",
            "bool"
          ],
          [
            "enable_fees",
            "bool"
          ],
          [
            "enable_microburst_detection",
            "bool"
          ],
          [
            "enable_market_impact",
            "bool"
          ],
          [
            "warmup_period_sec",
            "u64"
          ],
          [
            "event_buffer_size",
            "usize"
          ],
          [
            "simulate_latency",
            "bool"
          ],
          [
            "random_seed",
            "Option<u64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "EventSequence",
        "file": "crates/data_ingestion/src/replay/playback_engine.rs",
        "line": 128,
        "fields": [
          [
            "events",
            "VecDeque<SimulationEvent>"
          ],
          [
            "start_time",
            "DateTime<Utc>"
          ],
          [
            "end_time",
            "DateTime<Utc>"
          ],
          [
            "total_events",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ReplayResult",
        "file": "crates/data_ingestion/src/replay/playback_engine.rs",
        "line": 137,
        "fields": [
          [
            "events_processed",
            "u64"
          ],
          [
            "events_skipped",
            "u64"
          ],
          [
            "microbursts_detected",
            "u32"
          ],
          [
            "total_slippage_bps",
            "f64"
          ],
          [
            "total_fees_paid",
            "Decimal"
          ],
          [
            "simulation_time_ms",
            "u64"
          ],
          [
            "effective_speed",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SimulationStats",
        "file": "crates/data_ingestion/src/replay/playback_engine.rs",
        "line": 149,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "events_processed",
            "u64"
          ],
          [
            "events_per_second",
            "f64"
          ],
          [
            "current_spread_bps",
            "f64"
          ],
          [
            "book_depth_imbalance",
            "f64"
          ],
          [
            "latency_p50_us",
            "u64"
          ],
          [
            "latency_p99_us",
            "u64"
          ],
          [
            "memory_usage_mb",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "StrategySignal",
        "file": "crates/data_ingestion/src/replay/playback_engine.rs",
        "line": 181,
        "fields": [
          [
            "symbol",
            "Symbol"
          ],
          [
            "side",
            "TradeSide"
          ],
          [
            "quantity",
            "Quantity"
          ],
          [
            "order_type",
            "OrderType"
          ],
          [
            "limit_price",
            "Option<Price>"
          ],
          [
            "urgency",
            "SignalUrgency"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "Position",
        "file": "crates/data_ingestion/src/replay/playback_engine.rs",
        "line": 201,
        "fields": [
          [
            "symbol",
            "Symbol"
          ],
          [
            "quantity",
            "Decimal"
          ],
          [
            "average_price",
            "Price"
          ],
          [
            "unrealized_pnl",
            "Decimal"
          ],
          [
            "realized_pnl",
            "Decimal"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PlaybackEngine",
        "file": "crates/data_ingestion/src/replay/playback_engine.rs",
        "line": 210,
        "fields": [
          [
            "config",
            "Arc<PlaybackConfig>"
          ],
          [
            "lob_simulator",
            "Arc<LOBSimulator>"
          ],
          [
            "microburst_detector",
            "Arc<MicroburstDetector>"
          ],
          [
            "slippage_model",
            "Arc<SlippageModel>"
          ],
          [
            "fee_calculator",
            "Arc<FeeCalculator>"
          ],
          [
            "impact_calculator",
            "Arc<MarketImpactCalculator>"
          ],
          [
            "event_queue",
            "Arc<RwLock<VecDeque<SimulationEvent>>>"
          ],
          [
            "event_sender",
            "mpsc::Sender<SimulationEvent>"
          ],
          [
            "event_receiver",
            "Arc<RwLock<mpsc::Receiver<SimulationEvent>>>"
          ],
          [
            "current_time",
            "Arc<RwLock<DateTime<Utc>>>"
          ],
          [
            "events_processed",
            "Arc<RwLock<u64>>"
          ],
          [
            "playback_speed",
            "Arc<RwLock<PlaybackSpeed>>"
          ],
          [
            "is_running",
            "Arc<RwLock<bool>>"
          ],
          [
            "stats_collector",
            "Arc<StatsCollector>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "StatsCollector",
        "file": "crates/data_ingestion/src/replay/playback_engine.rs",
        "line": 234,
        "fields": [
          [
            "events_processed",
            "RwLock<u64>"
          ],
          [
            "events_skipped",
            "RwLock<u64>"
          ],
          [
            "microbursts_detected",
            "RwLock<u32>"
          ],
          [
            "total_slippage",
            "RwLock<f64>"
          ],
          [
            "total_fees",
            "RwLock<Decimal>"
          ],
          [
            "latency_samples",
            "RwLock<Vec<u64>>"
          ],
          [
            "start_time",
            "RwLock<Option<Instant>>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "DummyStrategy",
        "file": "crates/data_ingestion/src/replay/playback_engine.rs",
        "line": 614,
        "fields": [],
        "visibility": "private"
      },
      {
        "name": "FeeStructure",
        "file": "crates/data_ingestion/src/replay/fee_calculator.rs",
        "line": 24,
        "fields": [
          [
            "exchange",
            "Exchange"
          ],
          [
            "base_maker_fee_bps",
            "f64"
          ],
          [
            "base_taker_fee_bps",
            "f64"
          ],
          [
            "volume_tiers",
            "Vec<VolumeTier>"
          ],
          [
            "maker_rebate_available",
            "bool"
          ],
          [
            "special_programs",
            "Vec<SpecialProgram>"
          ],
          [
            "payment_discount",
            "Option<PaymentDiscount>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "VolumeTier",
        "file": "crates/data_ingestion/src/replay/fee_calculator.rs",
        "line": 36,
        "fields": [
          [
            "tier_name",
            "String"
          ],
          [
            "min_volume_usd",
            "Decimal"
          ],
          [
            "maker_fee_bps",
            "f64"
          ],
          [
            "taker_fee_bps",
            "f64"
          ],
          [
            "maker_rebate_bps",
            "Option<f64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PaymentDiscount",
        "file": "crates/data_ingestion/src/replay/fee_calculator.rs",
        "line": 67,
        "fields": [
          [
            "token_symbol",
            "String"
          ],
          [
            "discount_pct",
            "f64"
          ],
          [
            "requires_holding",
            "bool"
          ],
          [
            "min_holding_amount",
            "Option<Decimal>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MakerTakerFees",
        "file": "crates/data_ingestion/src/replay/fee_calculator.rs",
        "line": 76,
        "fields": [
          [
            "maker_fee_bps",
            "f64"
          ],
          [
            "taker_fee_bps",
            "f64"
          ],
          [
            "maker_rebate_bps",
            "Option<f64>"
          ],
          [
            "effective_date",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "VolumeDiscount",
        "file": "crates/data_ingestion/src/replay/fee_calculator.rs",
        "line": 85,
        "fields": [
          [
            "thirty_day_volume_usd",
            "Decimal"
          ],
          [
            "current_tier",
            "TierLevel"
          ],
          [
            "next_tier_volume",
            "Option<Decimal>"
          ],
          [
            "days_in_period",
            "u32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TierLevel",
        "file": "crates/data_ingestion/src/replay/fee_calculator.rs",
        "line": 94,
        "fields": [
          [
            "level",
            "u8"
          ],
          [
            "name",
            "String"
          ],
          [
            "maker_fee_bps",
            "f64"
          ],
          [
            "taker_fee_bps",
            "f64"
          ],
          [
            "benefits",
            "Vec<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ExchangeFees",
        "file": "crates/data_ingestion/src/replay/fee_calculator.rs",
        "line": 104,
        "fields": [
          [
            "binance",
            "FeeStructure"
          ],
          [
            "coinbase",
            "FeeStructure"
          ],
          [
            "kraken",
            "FeeStructure"
          ],
          [
            "okx",
            "FeeStructure"
          ],
          [
            "bybit",
            "FeeStructure"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "FeeCalculator",
        "file": "crates/data_ingestion/src/replay/fee_calculator.rs",
        "line": 480,
        "fields": [
          [
            "exchange_fees",
            "Arc<ExchangeFees>"
          ],
          [
            "volume_tracker",
            "Arc<RwLock<HashMap<(Exchange"
          ],
          [
            "custom_overrides",
            "Arc<RwLock<HashMap<Exchange"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "VolumeTracker",
        "file": "crates/data_ingestion/src/replay/fee_calculator.rs",
        "line": 488,
        "fields": [
          [
            "user_id",
            "String"
          ],
          [
            "exchange",
            "Exchange"
          ],
          [
            "thirty_day_volume",
            "Decimal"
          ],
          [
            "current_tier",
            "TierLevel"
          ],
          [
            "last_update",
            "DateTime<Utc>"
          ],
          [
            "daily_volumes",
            "VecDeque<(DateTime<Utc>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "OrderBookLevel",
        "file": "crates/data_ingestion/src/replay/lob_simulator.rs",
        "line": 27,
        "fields": [
          [
            "price",
            "Price"
          ],
          [
            "quantity",
            "Quantity"
          ],
          [
            "order_count",
            "u32"
          ],
          [
            "exchange_timestamp",
            "DateTime<Utc>"
          ],
          [
            "local_timestamp",
            "DateTime<Utc>"
          ],
          [
            "implied_quantity",
            "Option<Quantity>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderBook",
        "file": "crates/data_ingestion/src/replay/lob_simulator.rs",
        "line": 79,
        "fields": [
          [
            "symbol",
            "Symbol"
          ],
          [
            "exchange",
            "Exchange"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "sequence_number",
            "u64"
          ],
          [
            "bids",
            "BTreeMap<Decimal"
          ],
          [
            "asks",
            "BTreeMap<Decimal"
          ],
          [
            "orders",
            "HashMap<u64"
          ],
          [
            "is_crossed",
            "bool"
          ],
          [
            "is_locked",
            "bool"
          ],
          [
            "last_trade_price",
            "Option<Price>"
          ],
          [
            "last_trade_quantity",
            "Option<Quantity>"
          ],
          [
            "total_bid_depth",
            "Quantity"
          ],
          [
            "total_ask_depth",
            "Quantity"
          ],
          [
            "spread",
            "Option<Decimal>"
          ],
          [
            "mid_price",
            "Option<Price>"
          ],
          [
            "weighted_mid_price",
            "Option<Price>"
          ],
          [
            "micro_price",
            "Option<Price>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderInfo",
        "file": "crates/data_ingestion/src/replay/lob_simulator.rs",
        "line": 109,
        "fields": [
          [
            "order_id",
            "u64"
          ],
          [
            "side",
            "Side"
          ],
          [
            "price",
            "Price"
          ],
          [
            "original_quantity",
            "Quantity"
          ],
          [
            "remaining_quantity",
            "Quantity"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "priority_timestamp",
            "DateTime<Utc>"
          ],
          [
            "hidden",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderBookSnapshot",
        "file": "crates/data_ingestion/src/replay/lob_simulator.rs",
        "line": 122,
        "fields": [
          [
            "symbol",
            "Symbol"
          ],
          [
            "exchange",
            "Exchange"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "sequence_number",
            "u64"
          ],
          [
            "bid_levels",
            "Vec<OrderBookLevel>"
          ],
          [
            "ask_levels",
            "Vec<OrderBookLevel>"
          ],
          [
            "checksum",
            "u32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderBookUpdate",
        "file": "crates/data_ingestion/src/replay/lob_simulator.rs",
        "line": 134,
        "fields": [
          [
            "symbol",
            "Symbol"
          ],
          [
            "exchange",
            "Exchange"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "sequence_number",
            "u64"
          ],
          [
            "update_type",
            "UpdateType"
          ],
          [
            "latency_ns",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SimulatorConfig",
        "file": "crates/data_ingestion/src/replay/lob_simulator.rs",
        "line": 145,
        "fields": [
          [
            "max_depth_levels",
            "usize"
          ],
          [
            "enable_order_tracking",
            "bool"
          ],
          [
            "track_hidden_liquidity",
            "bool"
          ],
          [
            "snapshot_interval_ms",
            "u64"
          ],
          [
            "detect_crossed_books",
            "bool"
          ],
          [
            "model_queue_position",
            "bool"
          ],
          [
            "min_latency_us",
            "u64"
          ],
          [
            "max_latency_us",
            "u64"
          ],
          [
            "latency_std_dev_us",
            "f64"
          ],
          [
            "memory_pool_size",
            "usize"
          ],
          [
            "checkpoint_interval_sec",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SimulatorMetrics",
        "file": "crates/data_ingestion/src/replay/lob_simulator.rs",
        "line": 195,
        "fields": [
          [
            "updates_processed",
            "Arc<dyn MetricsCollector>"
          ],
          [
            "snapshots_generated",
            "Arc<dyn MetricsCollector>"
          ],
          [
            "crossed_books_detected",
            "Arc<dyn MetricsCollector>"
          ],
          [
            "latency_distribution",
            "Arc<dyn MetricsCollector>"
          ],
          [
            "depth_imbalance",
            "Arc<dyn MetricsCollector>"
          ],
          [
            "spread_distribution",
            "Arc<dyn MetricsCollector>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "LOBSimulator",
        "file": "crates/data_ingestion/src/replay/lob_simulator.rs",
        "line": 205,
        "fields": [
          [
            "config",
            "Arc<SimulatorConfig>"
          ],
          [
            "books",
            "Arc<DashMap<Symbol"
          ],
          [
            "snapshots",
            "Arc<DashMap<Symbol"
          ],
          [
            "update_queue",
            "Arc<Mutex<VecDeque<OrderBookUpdate>>>"
          ],
          [
            "metrics",
            "Arc<SimulatorMetrics>"
          ],
          [
            "sequence_tracker",
            "Arc<DashMap<Symbol"
          ],
          [
            "last_checkpoint",
            "Arc<RwLock<DateTime<Utc>>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "VolumeSpike",
        "file": "crates/data_ingestion/src/replay/microburst_detector.rs",
        "line": 80,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "symbol",
            "Symbol"
          ],
          [
            "baseline_volume",
            "Quantity"
          ],
          [
            "spike_volume",
            "Quantity"
          ],
          [
            "z_score",
            "f64"
          ],
          [
            "duration_ms",
            "u64"
          ],
          [
            "orders_in_spike",
            "u32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PriceJump",
        "file": "crates/data_ingestion/src/replay/microburst_detector.rs",
        "line": 92,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "symbol",
            "Symbol"
          ],
          [
            "pre_price",
            "Price"
          ],
          [
            "post_price",
            "Price"
          ],
          [
            "price_change_pct",
            "f64"
          ],
          [
            "ticks_moved",
            "i32"
          ],
          [
            "duration_ms",
            "u64"
          ],
          [
            "volume_during_jump",
            "Quantity"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "LatencySpike",
        "file": "crates/data_ingestion/src/replay/microburst_detector.rs",
        "line": 105,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "normal_latency_us",
            "u64"
          ],
          [
            "spike_latency_us",
            "u64"
          ],
          [
            "duration_ms",
            "u64"
          ],
          [
            "messages_delayed",
            "u32"
          ],
          [
            "potential_arbitrage",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MicroburstEvent",
        "file": "crates/data_ingestion/src/replay/microburst_detector.rs",
        "line": 116,
        "fields": [
          [
            "id",
            "u64"
          ],
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "symbol",
            "Symbol"
          ],
          [
            "event_type",
            "MicroburstType"
          ],
          [
            "severity",
            "EventSeverity"
          ],
          [
            "market_impact",
            "MarketImpact"
          ],
          [
            "detected_by",
            "Vec<DetectionMethod>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketImpact",
        "file": "crates/data_ingestion/src/replay/microburst_detector.rs",
        "line": 137,
        "fields": [
          [
            "spread_widening_bps",
            "f64"
          ],
          [
            "depth_reduction_pct",
            "f64"
          ],
          [
            "volatility_increase",
            "f64"
          ],
          [
            "correlation_breakdown",
            "bool"
          ],
          [
            "estimated_slippage_bps",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DetectorConfig",
        "file": "crates/data_ingestion/src/replay/microburst_detector.rs",
        "line": 159,
        "fields": [
          [
            "volume_z_threshold",
            "f64"
          ],
          [
            "price_jump_threshold_bps",
            "f64"
          ],
          [
            "latency_spike_threshold_us",
            "u64"
          ],
          [
            "lookback_window_ms",
            "u64"
          ],
          [
            "min_sample_size",
            "usize"
          ],
          [
            "enable_ml_detection",
            "bool"
          ],
          [
            "quote_rate_multiplier",
            "f64"
          ],
          [
            "cascade_detection_enabled",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "StatisticsTracker",
        "file": "crates/data_ingestion/src/replay/microburst_detector.rs",
        "line": 201,
        "fields": [
          [
            "volume_window",
            "VecDeque<f64>"
          ],
          [
            "price_window",
            "VecDeque<f64>"
          ],
          [
            "latency_window",
            "VecDeque<f64>"
          ],
          [
            "message_rate_window",
            "VecDeque<f64>"
          ],
          [
            "window_size",
            "usize"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "MicroburstDetector",
        "file": "crates/data_ingestion/src/replay/microburst_detector.rs",
        "line": 300,
        "fields": [
          [
            "config",
            "Arc<DetectorConfig>"
          ],
          [
            "stats",
            "Arc<RwLock<ahash::AHashMap<Symbol"
          ],
          [
            "events",
            "Arc<RwLock<VecDeque<MicroburstEvent>>>"
          ],
          [
            "event_counter",
            "Arc<RwLock<u64>>"
          ],
          [
            "volume_spikes_detected",
            "Arc<dyn MetricsCollector>"
          ],
          [
            "price_jumps_detected",
            "Arc<dyn MetricsCollector>"
          ],
          [
            "latency_spikes_detected",
            "Arc<dyn MetricsCollector>"
          ],
          [
            "quote_stuffing_detected",
            "Arc<dyn MetricsCollector>"
          ],
          [
            "cascade_events_detected",
            "Arc<dyn MetricsCollector>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "KyleLambda",
        "file": "crates/data_ingestion/src/replay/market_impact.rs",
        "line": 24,
        "fields": [
          [
            "lambda",
            "f64"
          ],
          [
            "confidence_interval",
            "(f64"
          ],
          [
            "r_squared",
            "f64"
          ],
          [
            "sample_size",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "AlmgrenChriss",
        "file": "crates/data_ingestion/src/replay/market_impact.rs",
        "line": 40,
        "fields": [
          [
            "gamma",
            "f64"
          ],
          [
            "eta",
            "f64"
          ],
          [
            "lambda",
            "f64"
          ],
          [
            "sigma",
            "f64"
          ],
          [
            "daily_volume",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ObizhaevWang",
        "file": "crates/data_ingestion/src/replay/market_impact.rs",
        "line": 59,
        "fields": [
          [
            "kappa",
            "f64"
          ],
          [
            "rho",
            "f64"
          ],
          [
            "alpha",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ImpactParameters",
        "file": "crates/data_ingestion/src/replay/market_impact.rs",
        "line": 72,
        "fields": [
          [
            "order_size",
            "Quantity"
          ],
          [
            "adv",
            "Quantity"
          ],
          [
            "volatility",
            "f64"
          ],
          [
            "spread",
            "Decimal"
          ],
          [
            "duration_sec",
            "u64"
          ],
          [
            "participation_rate",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketImpactCalculator",
        "file": "crates/data_ingestion/src/replay/market_impact.rs",
        "line": 93,
        "fields": [
          [
            "order_flow_history",
            "Arc<RwLock<Vec<OrderFlowSample>>>"
          ],
          [
            "kyle_lambda",
            "Arc<RwLock<Option<KyleLambda>>>"
          ],
          [
            "ac_params",
            "Arc<RwLock<Option<AlmgrenChriss>>>"
          ],
          [
            "ow_params",
            "Arc<RwLock<Option<ObizhaevWang>>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderFlowSample",
        "file": "crates/data_ingestion/src/replay/market_impact.rs",
        "line": 109,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "signed_volume",
            "f64"
          ],
          [
            "price_change",
            "f64"
          ],
          [
            "spread",
            "f64"
          ],
          [
            "market_volume",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ImpactSurface",
        "file": "crates/data_ingestion/src/replay/market_impact.rs",
        "line": 498,
        "fields": [
          [
            "participation_rates",
            "Vec<f64>"
          ],
          [
            "time_horizons",
            "Vec<f64>"
          ],
          [
            "impacts",
            "Vec<Vec<f64>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TickData",
        "file": "crates/data_ingestion/src/replay/historical_loader.rs",
        "line": 120,
        "fields": [
          [
            "timestamp",
            "DateTime<Utc>"
          ],
          [
            "symbol",
            "Symbol"
          ],
          [
            "exchange",
            "Exchange"
          ],
          [
            "sequence",
            "u64"
          ],
          [
            "tick_type",
            "TickType"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TradeData",
        "file": "crates/data_ingestion/src/replay/historical_loader.rs",
        "line": 138,
        "fields": [
          [
            "price",
            "Price"
          ],
          [
            "quantity",
            "Quantity"
          ],
          [
            "side",
            "Side"
          ],
          [
            "trade_id",
            "u64"
          ],
          [
            "is_implied",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "QuoteData",
        "file": "crates/data_ingestion/src/replay/historical_loader.rs",
        "line": 148,
        "fields": [
          [
            "bid_price",
            "Price"
          ],
          [
            "bid_quantity",
            "Quantity"
          ],
          [
            "ask_price",
            "Price"
          ],
          [
            "ask_quantity",
            "Quantity"
          ],
          [
            "bid_count",
            "u32"
          ],
          [
            "ask_count",
            "u32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "LOBSTERMessage",
        "file": "crates/data_ingestion/src/replay/historical_loader.rs",
        "line": 171,
        "fields": [
          [
            "timestamp",
            "f64"
          ],
          [
            "message_type",
            "u8"
          ],
          [
            "order_id",
            "u64"
          ],
          [
            "size",
            "u64"
          ],
          [
            "price",
            "u64"
          ],
          [
            "direction",
            "i8"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "TardisBookSnapshot",
        "file": "crates/data_ingestion/src/replay/historical_loader.rs",
        "line": 182,
        "fields": [
          [
            "timestamp",
            "String"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "exchange",
            "String"
          ],
          [
            "bids",
            "Vec<TardisLevel>"
          ],
          [
            "asks",
            "Vec<TardisLevel>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "TardisLevel",
        "file": "crates/data_ingestion/src/replay/historical_loader.rs",
        "line": 192,
        "fields": [
          [
            "price",
            "String"
          ],
          [
            "amount",
            "String"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "DataMetadata",
        "file": "crates/data_ingestion/src/replay/historical_loader.rs",
        "line": 212,
        "fields": [
          [
            "symbol",
            "Symbol"
          ],
          [
            "exchange",
            "Exchange"
          ],
          [
            "start_time",
            "DateTime<Utc>"
          ],
          [
            "end_time",
            "DateTime<Utc>"
          ],
          [
            "tick_count",
            "u64"
          ],
          [
            "data_format",
            "DataFormat"
          ],
          [
            "has_l3_data",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "HistoricalDataLoader",
        "file": "crates/data_ingestion/src/replay/historical_loader.rs",
        "line": 223,
        "fields": [
          [
            "source",
            "DataSource"
          ],
          [
            "buffer_size",
            "usize"
          ],
          [
            "cache",
            "Arc<RwLock<Vec<TickData>>>"
          ],
          [
            "metadata",
            "Option<DataMetadata>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "VecIterator",
        "file": "crates/data_ingestion/src/replay/historical_loader.rs",
        "line": 731,
        "fields": [
          [
            "data",
            "Vec<TickData>"
          ],
          [
            "index",
            "usize"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "BackpressureConfig",
        "file": "crates/data_ingestion/src/consumers/redpanda_consumer.rs",
        "line": 36,
        "fields": [
          [
            "max_lag_messages",
            "i64"
          ],
          [
            "max_lag_ms",
            "i64"
          ],
          [
            "max_memory_mb",
            "usize"
          ],
          [
            "max_inflight_requests",
            "usize"
          ],
          [
            "pause_threshold",
            "f64"
          ],
          [
            "resume_threshold",
            "f64"
          ],
          [
            "adaptive_window_size",
            "usize"
          ],
          [
            "gradient_smoothing",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ConsumerConfig",
        "file": "crates/data_ingestion/src/consumers/redpanda_consumer.rs",
        "line": 64,
        "fields": [
          [
            "brokers",
            "String"
          ],
          [
            "group_id",
            "String"
          ],
          [
            "topics",
            "Vec<String>"
          ],
          [
            "auto_offset_reset",
            "String"
          ],
          [
            "enable_auto_commit",
            "bool"
          ],
          [
            "max_poll_records",
            "usize"
          ],
          [
            "fetch_min_bytes",
            "usize"
          ],
          [
            "fetch_max_wait_ms",
            "u64"
          ],
          [
            "session_timeout_ms",
            "u64"
          ],
          [
            "heartbeat_interval_ms",
            "u64"
          ],
          [
            "backpressure",
            "BackpressureConfig"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "AdaptiveBackpressure",
        "file": "crates/data_ingestion/src/consumers/redpanda_consumer.rs",
        "line": 101,
        "fields": [
          [
            "current_throughput",
            "Arc<AtomicU64>"
          ],
          [
            "current_latency_us",
            "Arc<AtomicU64>"
          ],
          [
            "current_errors",
            "Arc<AtomicU64>"
          ],
          [
            "max_concurrency",
            "Arc<AtomicU64>"
          ],
          [
            "min_concurrency",
            "Arc<AtomicU64>"
          ],
          [
            "current_concurrency",
            "Arc<AtomicU64>"
          ],
          [
            "memory_used_bytes",
            "Arc<AtomicU64>"
          ],
          [
            "memory_limit_bytes",
            "Arc<AtomicU64>"
          ],
          [
            "consumer_lag",
            "Arc<AtomicI64>"
          ],
          [
            "lag_threshold",
            "Arc<AtomicI64>"
          ],
          [
            "is_paused",
            "Arc<AtomicBool>"
          ],
          [
            "should_shed_load",
            "Arc<AtomicBool>"
          ],
          [
            "throughput_history",
            "Arc<RwLock<VecDeque<f64>>>"
          ],
          [
            "latency_history",
            "Arc<RwLock<VecDeque<f64>>>"
          ],
          [
            "config",
            "BackpressureConfig"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RedpandaConsumer",
        "file": "crates/data_ingestion/src/consumers/redpanda_consumer.rs",
        "line": 308,
        "fields": [
          [
            "consumer",
            "Arc<StreamConsumer>"
          ],
          [
            "config",
            "ConsumerConfig"
          ],
          [
            "clickhouse_sink",
            "Arc<ClickHouseSink>"
          ],
          [
            "parquet_writer",
            "Arc<ParquetWriter>"
          ],
          [
            "backpressure",
            "Arc<AdaptiveBackpressure>"
          ],
          [
            "semaphore",
            "Arc<Semaphore>"
          ],
          [
            "metrics",
            "Arc<ConsumerMetrics>"
          ],
          [
            "events_processed",
            "Arc<AtomicU64>"
          ],
          [
            "events_failed",
            "Arc<AtomicU64>"
          ],
          [
            "bytes_processed",
            "Arc<AtomicU64>"
          ],
          [
            "offset_tracker",
            "Arc<DashMap<(String"
          ],
          [
            "last_commit_time",
            "Arc<RwLock<Instant>>"
          ],
          [
            "shutdown",
            "Arc<AtomicBool>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TestConfig",
        "file": "crates/data_ingestion/tests/integration_test.rs",
        "line": 48,
        "fields": [
          [
            "target_eps",
            "u64"
          ],
          [
            "duration",
            "Duration"
          ],
          [
            "producer_threads",
            "usize"
          ],
          [
            "consumer_threads",
            "usize"
          ],
          [
            "symbol_count",
            "usize"
          ],
          [
            "exchange_count",
            "usize"
          ],
          [
            "enable_chaos",
            "bool"
          ],
          [
            "latency_requirements",
            "LatencyRequirements"
          ],
          [
            "validation_level",
            "ValidationLevel"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "LatencyRequirements",
        "file": "crates/data_ingestion/tests/integration_test.rs",
        "line": 95,
        "fields": [
          [
            "producer_p50_us",
            "u64"
          ],
          [
            "producer_p99_us",
            "u64"
          ],
          [
            "producer_p999_us",
            "u64"
          ],
          [
            "consumer_p50_us",
            "u64"
          ],
          [
            "consumer_p99_us",
            "u64"
          ],
          [
            "consumer_p999_us",
            "u64"
          ],
          [
            "end_to_end_p50_us",
            "u64"
          ],
          [
            "end_to_end_p99_us",
            "u64"
          ],
          [
            "end_to_end_p999_us",
            "u64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "LoadGenerator",
        "file": "crates/data_ingestion/tests/integration_test.rs",
        "line": 132,
        "fields": [
          [
            "config",
            "TestConfig"
          ],
          [
            "exchanges",
            "Vec<String>"
          ],
          [
            "symbols",
            "Vec<String>"
          ],
          [
            "price_generators",
            "HashMap<String"
          ],
          [
            "volume_dist",
            "Pareto<f64>"
          ],
          [
            "event_interval",
            "Exponential<f64>"
          ],
          [
            "sequence_number",
            "AtomicU64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "GeometricBrownianMotion",
        "file": "crates/data_ingestion/tests/integration_test.rs",
        "line": 267,
        "fields": [
          [
            "current_price",
            "Mutex<f64>"
          ],
          [
            "volatility",
            "f64"
          ],
          [
            "drift",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "OrnsteinUhlenbeck",
        "file": "crates/data_ingestion/tests/integration_test.rs",
        "line": 297,
        "fields": [
          [
            "current_price",
            "Mutex<f64>"
          ],
          [
            "mean",
            "f64"
          ],
          [
            "theta",
            "f64"
          ],
          [
            "sigma",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "JumpDiffusion",
        "file": "crates/data_ingestion/tests/integration_test.rs",
        "line": 329,
        "fields": [
          [
            "current_price",
            "Mutex<f64>"
          ],
          [
            "volatility",
            "f64"
          ],
          [
            "drift",
            "f64"
          ],
          [
            "jump_intensity",
            "f64"
          ],
          [
            "jump_size",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "TestMetrics",
        "file": "crates/data_ingestion/tests/integration_test.rs",
        "line": 371,
        "fields": [
          [
            "events_generated",
            "AtomicU64"
          ],
          [
            "events_consumed",
            "AtomicU64"
          ],
          [
            "events_stored_clickhouse",
            "AtomicU64"
          ],
          [
            "events_stored_parquet",
            "AtomicU64"
          ],
          [
            "events_aggregated",
            "AtomicU64"
          ],
          [
            "producer_latencies",
            "Arc<Mutex<Histogram<u64>>>"
          ],
          [
            "consumer_latencies",
            "Arc<Mutex<Histogram<u64>>>"
          ],
          [
            "end_to_end_latencies",
            "Arc<Mutex<Histogram<u64>>>"
          ],
          [
            "errors",
            "AtomicU64"
          ],
          [
            "backpressure_activations",
            "AtomicU64"
          ],
          [
            "circuit_breaker_trips",
            "AtomicU64"
          ],
          [
            "start_time",
            "Instant"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "DataIntegrityValidator",
        "file": "crates/data_ingestion/tests/integration_test.rs",
        "line": 496,
        "fields": [
          [
            "expected_sequences",
            "Arc<DashMap<String"
          ],
          [
            "missing_sequences",
            "Arc<RwLock<Vec<(String"
          ],
          [
            "duplicate_sequences",
            "Arc<RwLock<Vec<(String"
          ],
          [
            "data_corruption",
            "Arc<AtomicU64>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ChaosMonkey",
        "file": "crates/data_ingestion/tests/integration_test.rs",
        "line": 577,
        "fields": [
          [
            "enabled",
            "Arc<AtomicBool>"
          ],
          [
            "network_delay",
            "Arc<AtomicU64>"
          ],
          [
            "packet_loss_rate",
            "Arc<AtomicU64>"
          ],
          [
            "cpu_stress_level",
            "Arc<AtomicU64>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "NetworkCondition",
        "file": "benches/network_jitter_bench.rs",
        "line": 13,
        "fields": [
          [
            "name",
            "String"
          ],
          [
            "base_latency_ms",
            "f64"
          ],
          [
            "jitter_ms",
            "f64"
          ],
          [
            "packet_loss_rate",
            "f64"
          ],
          [
            "burst_delay_ms",
            "Option<f64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "MonotonicSequencer",
        "file": "infrastructure/src/event_ordering.rs",
        "line": 14,
        "fields": [
          [
            "sequence",
            "Arc<AtomicU64>"
          ],
          [
            "partition_sequences",
            "Arc<RwLock<BTreeMap<PartitionId"
          ],
          [
            "last_timestamp",
            "Arc<AtomicU64>"
          ],
          [
            "node_id",
            "u16"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "EventSequence",
        "file": "infrastructure/src/event_ordering.rs",
        "line": 104,
        "fields": [
          [
            "sequence",
            "u64"
          ],
          [
            "timestamp",
            "u64"
          ],
          [
            "node_id",
            "u16"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "EventOrderingBuffer",
        "file": "infrastructure/src/event_ordering.rs",
        "line": 124,
        "fields": [
          [
            "buffer",
            "Arc<RwLock<BTreeMap<EventSequence"
          ],
          [
            "last_delivered",
            "Arc<AtomicU64>"
          ],
          [
            "max_buffer_size",
            "usize"
          ],
          [
            "max_wait_time",
            "Duration"
          ],
          [
            "reorder_count",
            "Arc<AtomicU64>"
          ],
          [
            "gaps_detected",
            "Arc<AtomicU64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "VectorClock",
        "file": "infrastructure/src/event_ordering.rs",
        "line": 258,
        "fields": [
          [
            "clocks",
            "Arc<RwLock<BTreeMap<u16"
          ],
          [
            "node_id",
            "u16"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "VectorTimestamp",
        "file": "infrastructure/src/event_ordering.rs",
        "line": 311,
        "fields": [
          [
            "clocks",
            "BTreeMap<u16"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "LamportClock",
        "file": "infrastructure/src/event_ordering.rs",
        "line": 344,
        "fields": [
          [
            "counter",
            "Arc<AtomicU64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderingMetrics",
        "file": "infrastructure/src/event_ordering.rs",
        "line": 379,
        "fields": [
          [
            "buffer_size",
            "usize"
          ],
          [
            "last_delivered",
            "u64"
          ],
          [
            "reorder_count",
            "u64"
          ],
          [
            "gaps_detected",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "BackpressureManager",
        "file": "infrastructure/src/backpressure.rs",
        "line": 51,
        "fields": [
          [
            "policy",
            "BackpressurePolicy"
          ],
          [
            "queue_capacity",
            "usize"
          ],
          [
            "current_depth",
            "Arc<AtomicU64>"
          ],
          [
            "tokens",
            "Arc<AtomicU64>"
          ],
          [
            "last_refill",
            "Arc<parking_lot::Mutex<Instant>>"
          ],
          [
            "circuit_open",
            "Arc<AtomicBool>"
          ],
          [
            "circuit_opened_at",
            "Arc<parking_lot::Mutex<Option<Instant>>>"
          ],
          [
            "semaphore",
            "Arc<Semaphore>"
          ],
          [
            "dropped_count",
            "Arc<AtomicU64>"
          ],
          [
            "rejected_count",
            "Arc<AtomicU64>"
          ],
          [
            "throttled_count",
            "Arc<AtomicU64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "BackpressureMetrics",
        "file": "infrastructure/src/backpressure.rs",
        "line": 303,
        "fields": [
          [
            "queue_depth",
            "u64"
          ],
          [
            "queue_capacity",
            "usize"
          ],
          [
            "fill_ratio",
            "f64"
          ],
          [
            "dropped_count",
            "u64"
          ],
          [
            "rejected_count",
            "u64"
          ],
          [
            "throttled_count",
            "u64"
          ],
          [
            "circuit_open",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "AdaptiveBackpressure",
        "file": "infrastructure/src/backpressure.rs",
        "line": 314,
        "fields": [
          [
            "managers",
            "Vec<Arc<BackpressureManager>>"
          ],
          [
            "global_pressure",
            "Arc<AtomicU64>"
          ],
          [
            "metrics_window",
            "Duration"
          ],
          [
            "last_adjustment",
            "Arc<parking_lot::Mutex<Instant>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "BoundedIdempotencyManager",
        "file": "adapters/outbound/exchanges/bounded_idempotency.rs",
        "line": 15,
        "fields": [
          [
            "cache",
            "Arc<DashMap<String"
          ],
          [
            "lru_queue",
            "Arc<Mutex<LruCache<String"
          ],
          [
            "time_wheel",
            "Arc<TimeWheel>"
          ],
          [
            "max_entries",
            "usize"
          ],
          [
            "ttl",
            "Duration"
          ],
          [
            "hits",
            "Arc<AtomicU64>"
          ],
          [
            "misses",
            "Arc<AtomicU64>"
          ],
          [
            "evictions",
            "Arc<AtomicU64>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "IdempotencyEntry",
        "file": "adapters/outbound/exchanges/bounded_idempotency.rs",
        "line": 36,
        "fields": [
          [
            "order_id",
            "String"
          ],
          [
            "request_hash",
            "String"
          ],
          [
            "created_at",
            "Instant"
          ],
          [
            "response",
            "OrderResponse"
          ],
          [
            "access_count",
            "AtomicU32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TimeWheel",
        "file": "adapters/outbound/exchanges/bounded_idempotency.rs",
        "line": 45,
        "fields": [
          [
            "buckets",
            "Vec<Mutex<Vec<(String"
          ],
          [
            "bucket_duration",
            "Duration"
          ],
          [
            "current_bucket",
            "AtomicUsize"
          ],
          [
            "last_rotation",
            "Mutex<Instant>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "StpManager",
        "file": "adapters/outbound/exchanges/bounded_idempotency.rs",
        "line": 280,
        "fields": [
          [
            "orders_by_account",
            "Arc<DashMap<AccountId"
          ],
          [
            "policies",
            "Arc<DashMap<(AccountId"
          ],
          [
            "default_policy",
            "StpPolicy"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ActorStats",
        "file": "adapters/outbound/exchanges/symbol_actor.rs",
        "line": 45,
        "fields": [
          [
            "messages_processed",
            "u64"
          ],
          [
            "orders_placed",
            "u64"
          ],
          [
            "orders_cancelled",
            "u64"
          ],
          [
            "orders_modified",
            "u64"
          ],
          [
            "errors",
            "u64"
          ],
          [
            "avg_processing_time_ms",
            "f64"
          ],
          [
            "max_processing_time_ms",
            "u64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SymbolActor",
        "file": "adapters/outbound/exchanges/symbol_actor.rs",
        "line": 58,
        "fields": [
          [
            "symbol",
            "Symbol"
          ],
          [
            "receiver",
            "mpsc::Receiver<SymbolMessage>"
          ],
          [
            "stats",
            "Arc<RwLock<ActorStats>>"
          ],
          [
            "max_queue_size",
            "usize"
          ],
          [
            "processing_timeout",
            "Duration"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SymbolActorManager",
        "file": "adapters/outbound/exchanges/symbol_actor.rs",
        "line": 231,
        "fields": [
          [
            "actors",
            "Arc<RwLock<HashMap<Symbol"
          ],
          [
            "handles",
            "Arc<RwLock<HashMap<Symbol"
          ],
          [
            "max_queue_size",
            "usize"
          ],
          [
            "max_actors",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "IdempotencyEntry",
        "file": "adapters/outbound/exchanges/idempotency_manager.rs",
        "line": 13,
        "fields": [
          [
            "exchange_order_id",
            "String"
          ],
          [
            "created_at",
            "Instant"
          ],
          [
            "request_hash",
            "u64"
          ],
          [
            "hit_count",
            "u32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "IdempotencyManager",
        "file": "adapters/outbound/exchanges/idempotency_manager.rs",
        "line": 26,
        "fields": [
          [
            "entries",
            "Arc<DashMap<String"
          ],
          [
            "ttl",
            "Duration"
          ],
          [
            "max_entries",
            "usize"
          ],
          [
            "last_cleanup",
            "Arc<tokio::sync::RwLock<Instant>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "IdempotencyStats",
        "file": "adapters/outbound/exchanges/idempotency_manager.rs",
        "line": 211,
        "fields": [
          [
            "total_entries",
            "usize"
          ],
          [
            "total_hits",
            "u64"
          ],
          [
            "max_hits_per_entry",
            "u32"
          ],
          [
            "oldest_entry_age",
            "Duration"
          ],
          [
            "cache_size_bytes",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "BinanceRealAdapter",
        "file": "adapters/outbound/exchanges/binance_real.rs",
        "line": 31,
        "fields": [
          [
            "config",
            "ExchangeConfig"
          ],
          [
            "client",
            "Client"
          ],
          [
            "api_key",
            "String"
          ],
          [
            "api_secret",
            "String"
          ],
          [
            "rate_limiter",
            "Arc<RateLimiter>"
          ],
          [
            "order_map",
            "Arc<DashMap<OrderId"
          ],
          [
            "ws_manager",
            "Arc<RwLock<Option<WebSocketConnection>>>"
          ],
          [
            "symbol_info",
            "Arc<DashMap<String"
          ],
          [
            "metrics",
            "Arc<Metrics>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RateLimiter",
        "file": "adapters/outbound/exchanges/binance_real.rs",
        "line": 54,
        "fields": [
          [
            "requests",
            "Arc<RwLock<Vec<Instant>>>"
          ],
          [
            "order_requests",
            "Arc<RwLock<Vec<Instant>>>"
          ],
          [
            "weight_used",
            "Arc<RwLock<u32>>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "SymbolInfo",
        "file": "adapters/outbound/exchanges/binance_real.rs",
        "line": 114,
        "fields": [
          [
            "symbol",
            "String"
          ],
          [
            "status",
            "String"
          ],
          [
            "base_asset",
            "String"
          ],
          [
            "quote_asset",
            "String"
          ],
          [
            "base_asset_precision",
            "u8"
          ],
          [
            "quote_asset_precision",
            "u8"
          ],
          [
            "order_types",
            "Vec<String>"
          ],
          [
            "iceberg_allowed",
            "bool"
          ],
          [
            "oco_allowed",
            "bool"
          ],
          [
            "is_spot_trading_allowed",
            "bool"
          ],
          [
            "filters",
            "Vec<SymbolFilter>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "WebSocketConnection",
        "file": "adapters/outbound/exchanges/binance_real.rs",
        "line": 163,
        "fields": [
          [
            "sender",
            "futures::channel::mpsc::UnboundedSender<WsMessage>"
          ],
          [
            "receiver",
            "Arc<RwLock<futures::channel::mpsc::UnboundedReceiver<MarketDataUpdate>>>"
          ],
          [
            "connected",
            "bool"
          ],
          [
            "subscribed_symbols",
            "Vec<String>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "MarketDataUpdate",
        "file": "adapters/outbound/exchanges/binance_real.rs",
        "line": 171,
        "fields": [
          [
            "event_type",
            "String"
          ],
          [
            "event_time",
            "i64"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "close_price",
            "Option<String>"
          ],
          [
            "open_price",
            "Option<String>"
          ],
          [
            "high_price",
            "Option<String>"
          ],
          [
            "low_price",
            "Option<String>"
          ],
          [
            "volume",
            "Option<String>"
          ],
          [
            "quote_volume",
            "Option<String>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "Metrics",
        "file": "adapters/outbound/exchanges/binance_real.rs",
        "line": 193,
        "fields": [
          [
            "total_requests",
            "Arc<RwLock<u64>>"
          ],
          [
            "successful_requests",
            "Arc<RwLock<u64>>"
          ],
          [
            "failed_requests",
            "Arc<RwLock<u64>>"
          ],
          [
            "total_orders",
            "Arc<RwLock<u64>>"
          ],
          [
            "avg_latency_ms",
            "Arc<RwLock<f64>>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ExchangeInfo",
        "file": "adapters/outbound/exchanges/binance_real.rs",
        "line": 727,
        "fields": [
          [
            "symbols",
            "Vec<SymbolInfo>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "BinanceOrderBook",
        "file": "adapters/outbound/exchanges/binance_real.rs",
        "line": 732,
        "fields": [
          [
            "last_update_id",
            "u64"
          ],
          [
            "bids",
            "Vec<[String; 2]>"
          ],
          [
            "asks",
            "Vec<[String; 2]>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "BinanceOrderResponse",
        "file": "adapters/outbound/exchanges/binance_real.rs",
        "line": 740,
        "fields": [
          [
            "order_id",
            "u64"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "status",
            "String"
          ],
          [
            "client_order_id",
            "String"
          ],
          [
            "price",
            "String"
          ],
          [
            "orig_qty",
            "String"
          ],
          [
            "executed_qty",
            "String"
          ],
          [
            "cummulative_quote_qty",
            "String"
          ],
          [
            "time_in_force",
            "String"
          ],
          [
            "order_type",
            "String"
          ],
          [
            "side",
            "String"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "BinanceOrderStatus",
        "file": "adapters/outbound/exchanges/binance_real.rs",
        "line": 762,
        "fields": [
          [
            "symbol",
            "String"
          ],
          [
            "order_id",
            "u64"
          ],
          [
            "status",
            "String"
          ],
          [
            "price",
            "String"
          ],
          [
            "orig_qty",
            "String"
          ],
          [
            "executed_qty",
            "String"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "BinanceAccount",
        "file": "adapters/outbound/exchanges/binance_real.rs",
        "line": 775,
        "fields": [
          [
            "balances",
            "Vec<BinanceBalance>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "BinanceBalance",
        "file": "adapters/outbound/exchanges/binance_real.rs",
        "line": 780,
        "fields": [
          [
            "asset",
            "String"
          ],
          [
            "free",
            "String"
          ],
          [
            "locked",
            "String"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "RateLimitConfig",
        "file": "adapters/outbound/exchanges/exchange_simulator.rs",
        "line": 46,
        "fields": [
          [
            "orders_per_second",
            "u32"
          ],
          [
            "weight_per_order",
            "u32"
          ],
          [
            "max_weight_per_minute",
            "u32"
          ],
          [
            "enable_burst",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "SimulatedOrder",
        "file": "adapters/outbound/exchanges/exchange_simulator.rs",
        "line": 75,
        "fields": [
          [
            "order_id",
            "String"
          ],
          [
            "client_order_id",
            "OrderId"
          ],
          [
            "symbol",
            "Symbol"
          ],
          [
            "side",
            "OrderSide"
          ],
          [
            "order_type",
            "OrderType"
          ],
          [
            "price",
            "Option<Price>"
          ],
          [
            "quantity",
            "Quantity"
          ],
          [
            "filled_quantity",
            "Quantity"
          ],
          [
            "status",
            "OrderStatus"
          ],
          [
            "created_at",
            "DateTime<Utc>"
          ],
          [
            "updated_at",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "SimulatorState",
        "file": "adapters/outbound/exchanges/exchange_simulator.rs",
        "line": 90,
        "fields": [
          [
            "orders",
            "HashMap<String"
          ],
          [
            "order_books",
            "HashMap<Symbol"
          ],
          [
            "balances",
            "HashMap<String"
          ],
          [
            "last_prices",
            "HashMap<Symbol"
          ],
          [
            "recent_trades",
            "HashMap<Symbol"
          ],
          [
            "rate_limit_tokens",
            "u32"
          ],
          [
            "last_rate_limit_reset",
            "DateTime<Utc>"
          ],
          [
            "total_orders_placed",
            "u64"
          ],
          [
            "total_orders_filled",
            "u64"
          ],
          [
            "total_orders_cancelled",
            "u64"
          ],
          [
            "total_volume_traded",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "SimulatedOrderBook",
        "file": "adapters/outbound/exchanges/exchange_simulator.rs",
        "line": 115,
        "fields": [
          [
            "bids",
            "Vec<OrderBookLevel>"
          ],
          [
            "asks",
            "Vec<OrderBookLevel>"
          ],
          [
            "last_update",
            "DateTime<Utc>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ExchangeSimulator",
        "file": "adapters/outbound/exchanges/exchange_simulator.rs",
        "line": 135,
        "fields": [
          [
            "state",
            "Arc<RwLock<SimulatorState>>"
          ],
          [
            "latency_mode",
            "LatencyMode"
          ],
          [
            "fill_mode",
            "FillMode"
          ],
          [
            "rate_limit_config",
            "RateLimitConfig"
          ],
          [
            "failure_mode",
            "FailureMode"
          ],
          [
            "idempotency_mgr",
            "Arc<IdempotencyManager>"
          ],
          [
            "market_stats",
            "MarketStatistics"
          ],
          [
            "maker_fee",
            "f64"
          ],
          [
            "taker_fee",
            "f64"
          ],
          [
            "min_order_size",
            "f64"
          ],
          [
            "tick_size",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ExchangeFactory",
        "file": "adapters/outbound/exchanges/mod.rs",
        "line": 21,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "ExchangeHealth",
        "file": "adapters/outbound/exchanges/exchange_adapter_trait.rs",
        "line": 46,
        "fields": [
          [
            "is_healthy",
            "bool"
          ],
          [
            "latency_ms",
            "u64"
          ],
          [
            "last_heartbeat",
            "DateTime<Utc>"
          ],
          [
            "open_connections",
            "usize"
          ],
          [
            "rate_limit_remaining",
            "Option<u32>"
          ],
          [
            "messages",
            "Vec<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ExchangeConfig",
        "file": "adapters/outbound/exchanges/exchange_adapter_trait.rs",
        "line": 57,
        "fields": [
          [
            "api_url",
            "String"
          ],
          [
            "ws_url",
            "String"
          ],
          [
            "testnet",
            "bool"
          ],
          [
            "rate_limits",
            "RateLimits"
          ],
          [
            "features",
            "ExchangeFeatures"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RateLimits",
        "file": "adapters/outbound/exchanges/exchange_adapter_trait.rs",
        "line": 67,
        "fields": [
          [
            "orders_per_second",
            "u32"
          ],
          [
            "orders_per_minute",
            "u32"
          ],
          [
            "weight_per_minute",
            "u32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ExchangeFeatures",
        "file": "adapters/outbound/exchanges/exchange_adapter_trait.rs",
        "line": 75,
        "fields": [
          [
            "supports_oco",
            "bool"
          ],
          [
            "supports_iceberg",
            "bool"
          ],
          [
            "supports_post_only",
            "bool"
          ],
          [
            "supports_reduce_only",
            "bool"
          ],
          [
            "supports_margin",
            "bool"
          ],
          [
            "supports_futures",
            "bool"
          ],
          [
            "supports_options",
            "bool"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ExchangeLimits",
        "file": "adapters/outbound/exchanges/exchange_adapter_trait.rs",
        "line": 87,
        "fields": [
          [
            "min_price",
            "Price"
          ],
          [
            "max_price",
            "Price"
          ],
          [
            "tick_size",
            "f64"
          ],
          [
            "min_quantity",
            "Quantity"
          ],
          [
            "max_quantity",
            "Quantity"
          ],
          [
            "step_size",
            "f64"
          ],
          [
            "min_notional",
            "f64"
          ],
          [
            "max_orders_per_symbol",
            "u32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ValidationResult",
        "file": "adapters/outbound/exchanges/exchange_adapter_trait.rs",
        "line": 100,
        "fields": [
          [
            "is_valid",
            "bool"
          ],
          [
            "errors",
            "Vec<ValidationError>"
          ],
          [
            "warnings",
            "Vec<ValidationWarning>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ValidationError",
        "file": "adapters/outbound/exchanges/exchange_adapter_trait.rs",
        "line": 108,
        "fields": [
          [
            "code",
            "String"
          ],
          [
            "message",
            "String"
          ],
          [
            "field",
            "Option<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ValidationWarning",
        "file": "adapters/outbound/exchanges/exchange_adapter_trait.rs",
        "line": 116,
        "fields": [
          [
            "code",
            "String"
          ],
          [
            "message",
            "String"
          ],
          [
            "suggestion",
            "Option<String>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "BinanceAdapter",
        "file": "adapters/outbound/exchanges/exchange_adapter_trait.rs",
        "line": 123,
        "fields": [
          [
            "config",
            "ExchangeConfig"
          ],
          [
            "client",
            "reqwest::Client"
          ],
          [
            "ws_client",
            "Option<tokio_tungstenite::WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "KrakenAdapter",
        "file": "adapters/outbound/exchanges/exchange_adapter_trait.rs",
        "line": 353,
        "fields": [
          [
            "config",
            "ExchangeConfig"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ExchangeAdapterFactory",
        "file": "adapters/outbound/exchanges/exchange_adapter_trait.rs",
        "line": 387,
        "fields": [],
        "visibility": "pub"
      },
      {
        "name": "PostgresOrderRepository",
        "file": "adapters/outbound/persistence/postgres_order_repository.rs",
        "line": 20,
        "fields": [
          [
            "pool",
            "Arc<PgPool>"
          ],
          [
            "table_name",
            "String"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TransactionManager",
        "file": "adapters/outbound/persistence/transaction_manager.rs",
        "line": 18,
        "fields": [
          [
            "pool",
            "Arc<PgPool>"
          ],
          [
            "connection_semaphore",
            "Arc<Semaphore>"
          ],
          [
            "default_timeout",
            "Duration"
          ],
          [
            "retry_config",
            "RetryConfig"
          ],
          [
            "metrics",
            "Arc<RwLock<TransactionMetrics>>"
          ],
          [
            "deadlock_detector",
            "Arc<DeadlockDetector>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RetryConfig",
        "file": "adapters/outbound/persistence/transaction_manager.rs",
        "line": 38,
        "fields": [
          [
            "max_retries",
            "u32"
          ],
          [
            "initial_backoff",
            "Duration"
          ],
          [
            "max_backoff",
            "Duration"
          ],
          [
            "exponential_base",
            "f64"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "TransactionMetrics",
        "file": "adapters/outbound/persistence/transaction_manager.rs",
        "line": 57,
        "fields": [
          [
            "total_transactions",
            "u64"
          ],
          [
            "successful_commits",
            "u64"
          ],
          [
            "rollbacks",
            "u64"
          ],
          [
            "deadlocks",
            "u64"
          ],
          [
            "timeouts",
            "u64"
          ],
          [
            "avg_duration_ms",
            "f64"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "DeadlockDetector",
        "file": "adapters/outbound/persistence/transaction_manager.rs",
        "line": 67,
        "fields": [
          [
            "active_transactions",
            "Arc<DashMap<String"
          ],
          [
            "lock_graph",
            "Arc<RwLock<LockGraph>>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "TransactionInfo",
        "file": "adapters/outbound/persistence/transaction_manager.rs",
        "line": 73,
        "fields": [
          [
            "id",
            "String"
          ],
          [
            "started_at",
            "Instant"
          ],
          [
            "tables_locked",
            "Vec<String>"
          ],
          [
            "waiting_for",
            "Option<String>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "LockGraph",
        "file": "adapters/outbound/persistence/transaction_manager.rs",
        "line": 80,
        "fields": [
          [
            "edges",
            "HashMap<String"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "DistributedTransactionCoordinator",
        "file": "adapters/outbound/persistence/transaction_manager.rs",
        "line": 376,
        "fields": [
          [
            "participants",
            "Vec<Arc<dyn TransactionParticipant>>"
          ],
          [
            "timeout",
            "Duration"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DatabaseConfig",
        "file": "adapters/outbound/persistence/postgres_connection.rs",
        "line": 14,
        "fields": [
          [
            "host",
            "String"
          ],
          [
            "port",
            "u16"
          ],
          [
            "database",
            "String"
          ],
          [
            "username",
            "String"
          ],
          [
            "password",
            "String"
          ],
          [
            "max_connections",
            "u32"
          ],
          [
            "min_connections",
            "u32"
          ],
          [
            "connection_timeout",
            "Duration"
          ],
          [
            "idle_timeout",
            "Duration"
          ],
          [
            "max_lifetime",
            "Duration"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DatabaseConnectionPool",
        "file": "adapters/outbound/persistence/postgres_connection.rs",
        "line": 82,
        "fields": [
          [
            "pool",
            "Arc<PgPool>"
          ],
          [
            "config",
            "DatabaseConfig"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PoolStats",
        "file": "adapters/outbound/persistence/postgres_connection.rs",
        "line": 156,
        "fields": [
          [
            "connections",
            "u32"
          ],
          [
            "idle_connections",
            "usize"
          ],
          [
            "max_connections",
            "u32"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "DatabaseHealthCheck",
        "file": "adapters/outbound/persistence/postgres_connection.rs",
        "line": 163,
        "fields": [
          [
            "pool",
            "Arc<PgPool>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "HealthStatus",
        "file": "adapters/outbound/persistence/postgres_connection.rs",
        "line": 215,
        "fields": [
          [
            "is_healthy",
            "bool"
          ],
          [
            "latency_ms",
            "u64"
          ],
          [
            "connections",
            "u32"
          ],
          [
            "idle_connections",
            "usize"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PostgresUnitOfWork",
        "file": "adapters/outbound/persistence/postgres_connection.rs",
        "line": 223,
        "fields": [
          [
            "pool",
            "Arc<PgPool>"
          ],
          [
            "transaction",
            "Option<sqlx::Transaction<'static"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "RepositoryFactory",
        "file": "adapters/outbound/persistence/postgres_connection.rs",
        "line": 293,
        "fields": [
          [
            "pool",
            "Arc<PgPool>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ApiState",
        "file": "adapters/inbound/rest/api_server.rs",
        "line": 34,
        "fields": [
          [
            "Casey",
            "\"Main trading operations\"\n    trading_service: Arc<dyn TradingService>"
          ],
          [
            "Quinn",
            "\"Risk checks and monitoring\"\n    risk_service: Arc<dyn RiskService>"
          ],
          [
            "Avery",
            "\"Real-time and historical data\"\n    market_data_service: Arc<dyn MarketDataService>"
          ],
          [
            "Jordan",
            "\"Performance tracking\"\n    metrics: Arc<ApiMetrics>"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "ApiConfig",
        "file": "adapters/inbound/rest/api_server.rs",
        "line": 55,
        "fields": [
          [
            "host",
            "String"
          ],
          [
            "port",
            "u16"
          ],
          [
            "cors_origins",
            "Vec<String>"
          ],
          [
            "max_body_size",
            "usize"
          ],
          [
            "request_timeout",
            "std::time::Duration"
          ]
        ],
        "visibility": "pub"
      },
      {
        "name": "PlaceOrderRequest",
        "file": "adapters/inbound/rest/api_server.rs",
        "line": 288,
        "fields": [
          [
            "symbol",
            "String"
          ],
          [
            "side",
            "String"
          ],
          [
            "order_type",
            "String"
          ],
          [
            "quantity",
            "f64"
          ],
          [
            "price",
            "Option<f64>"
          ],
          [
            "time_in_force",
            "Option<String>"
          ],
          [
            "client_order_id",
            "Option<String>"
          ],
          [
            "stp_policy",
            "Option<String>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "PlaceOrderResponse",
        "file": "adapters/inbound/rest/api_server.rs",
        "line": 353,
        "fields": [
          [
            "order_id",
            "String"
          ],
          [
            "exchange_order_id",
            "Option<String>"
          ],
          [
            "status",
            "String"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ListOrdersParams",
        "file": "adapters/inbound/rest/api_server.rs",
        "line": 360,
        "fields": [
          [
            "status",
            "Option<String>"
          ],
          [
            "symbol",
            "Option<String>"
          ],
          [
            "limit",
            "Option<usize>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ListOrdersResponse",
        "file": "adapters/inbound/rest/api_server.rs",
        "line": 367,
        "fields": [
          [
            "orders",
            "Vec<OrderDto>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "OrderDto",
        "file": "adapters/inbound/rest/api_server.rs",
        "line": 372,
        "fields": [
          [
            "id",
            "String"
          ],
          [
            "symbol",
            "String"
          ],
          [
            "side",
            "String"
          ],
          [
            "order_type",
            "String"
          ],
          [
            "quantity",
            "f64"
          ],
          [
            "price",
            "Option<f64>"
          ],
          [
            "status",
            "String"
          ],
          [
            "created_at",
            "chrono::DateTime<chrono::Utc>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "HealthResponse",
        "file": "adapters/inbound/rest/api_server.rs",
        "line": 384,
        "fields": [
          [
            "status",
            "String"
          ],
          [
            "timestamp",
            "chrono::DateTime<chrono::Utc>"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ReadyResponse",
        "file": "adapters/inbound/rest/api_server.rs",
        "line": 390,
        "fields": [
          [
            "ready",
            "bool"
          ],
          [
            "services",
            "ServiceStatus"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ServiceStatus",
        "file": "adapters/inbound/rest/api_server.rs",
        "line": 396,
        "fields": [
          [
            "trading",
            "bool"
          ],
          [
            "risk",
            "bool"
          ],
          [
            "market_data",
            "bool"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ErrorResponse",
        "file": "adapters/inbound/rest/api_server.rs",
        "line": 432,
        "fields": [
          [
            "error",
            "String"
          ]
        ],
        "visibility": "private"
      },
      {
        "name": "ApiMetrics",
        "file": "adapters/inbound/rest/api_server.rs",
        "line": 475,
        "fields": [],
        "visibility": "private"
      }
    ],
    "functions": [
      {
        "name": "simd_decision_avx2",
        "file": "test_simd_standalone.rs",
        "line": 10,
        "return_type": "f64",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "main",
        "file": "test_simd_standalone.rs",
        "line": 40,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "simd_decision_avx2",
        "file": "test_simd_detailed.rs",
        "line": 10,
        "return_type": "f64",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "benchmark_with_iterations",
        "file": "test_simd_detailed.rs",
        "line": 40,
        "return_type": "Duration",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "main",
        "file": "test_simd_detailed.rs",
        "line": 52,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "main",
        "file": "performance_report.rs",
        "line": 12,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "format_duration",
        "file": "performance_report.rs",
        "line": 106,
        "return_type": "String",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_allocation_performance",
        "file": "performance_report.rs",
        "line": 121,
        "return_type": "Duration",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_object_pool_performance",
        "file": "performance_report.rs",
        "line": 130,
        "return_type": "Duration",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_hot_path_latency",
        "file": "performance_report.rs",
        "line": 142,
        "return_type": "Duration",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_avx512_performance",
        "file": "performance_report.rs",
        "line": 164,
        "return_type": "f64",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_parallel_throughput",
        "file": "performance_report.rs",
        "line": 187,
        "return_type": "f64",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_order_submission",
        "file": "performance_report.rs",
        "line": 207,
        "return_type": "Duration",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_risk_check_performance",
        "file": "performance_report.rs",
        "line": 227,
        "return_type": "Duration",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_zero_copy",
        "file": "performance_report.rs",
        "line": 243,
        "return_type": "bool",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_circuit_breaker",
        "file": "performance_report.rs",
        "line": 261,
        "return_type": "Duration",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_end_to_end_latency",
        "file": "performance_report.rs",
        "line": 273,
        "return_type": "Duration",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "main",
        "file": "test_avx512_hot_path.rs",
        "line": 8,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "main",
        "file": "test_decimal.rs",
        "line": 4,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "main",
        "file": "bot4-main/src/main.rs",
        "line": 17,
        "return_type": "Result<()>",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "generate_sample_metrics",
        "file": "bot4-main/src/main.rs",
        "line": 42,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "start_main_metrics_server",
        "file": "bot4-main/src/observability/server.rs",
        "line": 19,
        "return_type": "()",
        "is_async": true,
        "visibility": "pub"
      },
      {
        "name": "start_cb_metrics_server",
        "file": "bot4-main/src/observability/server.rs",
        "line": 37,
        "return_type": "()",
        "is_async": true,
        "visibility": "pub"
      },
      {
        "name": "start_risk_metrics_server",
        "file": "bot4-main/src/observability/server.rs",
        "line": 52,
        "return_type": "()",
        "is_async": true,
        "visibility": "pub"
      },
      {
        "name": "start_order_metrics_server",
        "file": "bot4-main/src/observability/server.rs",
        "line": 67,
        "return_type": "()",
        "is_async": true,
        "visibility": "pub"
      },
      {
        "name": "start_memory_metrics_server",
        "file": "bot4-main/src/observability/server.rs",
        "line": 82,
        "return_type": "()",
        "is_async": true,
        "visibility": "pub"
      },
      {
        "name": "start_all_metrics_servers",
        "file": "bot4-main/src/observability/server.rs",
        "line": 212,
        "return_type": "()",
        "is_async": true,
        "visibility": "pub"
      },
      {
        "name": "init_metrics",
        "file": "bot4-main/src/observability/metrics.rs",
        "line": 166,
        "return_type": "()",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "migrate_price_f64_to_decimal",
        "file": "domain/value_objects/decimal_money.rs",
        "line": 351,
        "return_type": "Price",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "migrate_amount_f64_to_money",
        "file": "domain/value_objects/decimal_money.rs",
        "line": 359,
        "return_type": "Money",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "create_memory_metrics_router",
        "file": "src/metrics_server.rs",
        "line": 18,
        "return_type": "Router",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "start_memory_metrics_server",
        "file": "src/metrics_server.rs",
        "line": 55,
        "return_type": "Result<(), Box<dyn std::error::Error>>",
        "is_async": true,
        "visibility": "pub"
      },
      {
        "name": "init_logging",
        "file": "src/logging.rs",
        "line": 18,
        "return_type": "anyhow::Result<()>",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "main",
        "file": "src/main.rs",
        "line": 11,
        "return_type": "Result<()>",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "start_main_metrics_server",
        "file": "src/observability/server.rs",
        "line": 20,
        "return_type": "()",
        "is_async": true,
        "visibility": "pub"
      },
      {
        "name": "start_cb_metrics_server",
        "file": "src/observability/server.rs",
        "line": 38,
        "return_type": "()",
        "is_async": true,
        "visibility": "pub"
      },
      {
        "name": "start_risk_metrics_server",
        "file": "src/observability/server.rs",
        "line": 53,
        "return_type": "()",
        "is_async": true,
        "visibility": "pub"
      },
      {
        "name": "start_order_metrics_server",
        "file": "src/observability/server.rs",
        "line": 68,
        "return_type": "()",
        "is_async": true,
        "visibility": "pub"
      },
      {
        "name": "start_memory_metrics_server",
        "file": "src/observability/server.rs",
        "line": 83,
        "return_type": "()",
        "is_async": true,
        "visibility": "pub"
      },
      {
        "name": "start_all_metrics_servers",
        "file": "src/observability/server.rs",
        "line": 213,
        "return_type": "()",
        "is_async": true,
        "visibility": "pub"
      },
      {
        "name": "init_metrics",
        "file": "src/observability/metrics.rs",
        "line": 163,
        "return_type": "()",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "test_exchange_outage_recovery_under_5s",
        "file": "src/tests/exchange_outage_recovery.rs",
        "line": 16,
        "return_type": "()",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "test_cascading_exchange_failures",
        "file": "src/tests/exchange_outage_recovery.rs",
        "line": 64,
        "return_type": "()",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "test_websocket_auto_reconnect",
        "file": "src/tests/exchange_outage_recovery.rs",
        "line": 99,
        "return_type": "()",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "test_kill_switch_on_prolonged_outage",
        "file": "src/tests/exchange_outage_recovery.rs",
        "line": 144,
        "return_type": "()",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "test_recovery_plan_execution",
        "file": "src/tests/exchange_outage_recovery.rs",
        "line": 177,
        "return_type": "()",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "test_degraded_service_handling",
        "file": "src/tests/exchange_outage_recovery.rs",
        "line": 213,
        "return_type": "()",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "simulate_exchange_outage",
        "file": "src/tests/exchange_outage_recovery.rs",
        "line": 236,
        "return_type": "()",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "simulate_successful_reconnection",
        "file": "src/tests/exchange_outage_recovery.rs",
        "line": 248,
        "return_type": "()",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "simulate_connection_failure",
        "file": "src/tests/exchange_outage_recovery.rs",
        "line": 258,
        "return_type": "()",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "simulate_failed_request",
        "file": "src/tests/exchange_outage_recovery.rs",
        "line": 262,
        "return_type": "()",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "simulate_successful_request",
        "file": "src/tests/exchange_outage_recovery.rs",
        "line": 268,
        "return_type": "()",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "bench_recovery_performance",
        "file": "src/tests/exchange_outage_recovery.rs",
        "line": 276,
        "return_type": "()",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "test_complete_ml_pipeline_integration",
        "file": "tests/phase3_integration.rs",
        "line": 40,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_model_registry_deployment_integration",
        "file": "tests/phase3_integration.rs",
        "line": 210,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_inference_engine_under_load",
        "file": "tests/phase3_integration.rs",
        "line": 290,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_data_flow_validation",
        "file": "tests/phase3_integration.rs",
        "line": 407,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_risk_scenarios",
        "file": "tests/phase3_integration.rs",
        "line": 472,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "generate_realistic_market_data",
        "file": "tests/phase3_integration.rs",
        "line": 535,
        "return_type": "Vec<bot4_ml::feature_engine::indicators::Candle>",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "generate_volatile_market_data",
        "file": "tests/phase3_integration.rs",
        "line": 562,
        "return_type": "Vec<bot4_ml::feature_engine::indicators::Candle>",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "prepare_lstm_data",
        "file": "tests/phase3_integration.rs",
        "line": 586,
        "return_type": "Array3<f32>",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "prepare_gru_data",
        "file": "tests/phase3_integration.rs",
        "line": 604,
        "return_type": "Array3<f32>",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "prepare_sequences",
        "file": "tests/phase3_integration.rs",
        "line": 609,
        "return_type": "Array3<f32>",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "prepare_labels",
        "file": "tests/phase3_integration.rs",
        "line": 613,
        "return_type": "Array2<f32>",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "ks_critical_value",
        "file": "tests/ks_statistical_tests.rs",
        "line": 35,
        "return_type": "f64",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_poisson_fill_counts",
        "file": "tests/ks_statistical_tests.rs",
        "line": 40,
        "return_type": "Result<()>",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_beta_fill_ratios",
        "file": "tests/ks_statistical_tests.rs",
        "line": 89,
        "return_type": "Result<()>",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_log_normal_latency",
        "file": "tests/ks_statistical_tests.rs",
        "line": 125,
        "return_type": "Result<()>",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_slippage_distribution",
        "file": "tests/ks_statistical_tests.rs",
        "line": 176,
        "return_type": "Result<()>",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_market_profiles",
        "file": "tests/ks_statistical_tests.rs",
        "line": 230,
        "return_type": "Result<()>",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_fill_distribution_profiles",
        "file": "tests/ks_statistical_tests.rs",
        "line": 288,
        "return_type": "Result<()>",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "poisson_pmf",
        "file": "tests/ks_statistical_tests.rs",
        "line": 324,
        "return_type": "f64",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_two_sample_ks",
        "file": "tests/ks_statistical_tests.rs",
        "line": 332,
        "return_type": "Result<()>",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "two_sample_ks",
        "file": "tests/ks_statistical_tests.rs",
        "line": 364,
        "return_type": "f64",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_distribution_consistency",
        "file": "tests/ks_statistical_tests.rs",
        "line": 386,
        "return_type": "Result<()>",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_mimalloc_performance",
        "file": "tests/performance_validation.rs",
        "line": 23,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_object_pool_zero_allocation",
        "file": "tests/performance_validation.rs",
        "line": 49,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_rayon_parallelization",
        "file": "tests/performance_validation.rs",
        "line": 84,
        "return_type": "()",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "test_avx512_performance",
        "file": "tests/performance_validation.rs",
        "line": 116,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_risk_check_latency",
        "file": "tests/performance_validation.rs",
        "line": 160,
        "return_type": "()",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "test_ml_inference_latency",
        "file": "tests/performance_validation.rs",
        "line": 205,
        "return_type": "()",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "test_garch_performance",
        "file": "tests/performance_validation.rs",
        "line": 250,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_orderbook_throughput",
        "file": "tests/performance_validation.rs",
        "line": 278,
        "return_type": "()",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "generate_performance_report",
        "file": "tests/performance_validation.rs",
        "line": 329,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_full_trading_flow",
        "file": "tests/integration_test.rs",
        "line": 63,
        "return_type": "Result<()>",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "test_risk_circuit_breaker",
        "file": "tests/integration_test.rs",
        "line": 150,
        "return_type": "Result<()>",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "test_database_persistence",
        "file": "tests/integration_test.rs",
        "line": 189,
        "return_type": "Result<()>",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "test_object_pool_performance",
        "file": "tests/integration_test.rs",
        "line": 235,
        "return_type": "Result<()>",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "test_stp_policy_enforcement",
        "file": "tests/integration_test.rs",
        "line": 268,
        "return_type": "Result<()>",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "test_historical_calibration",
        "file": "tests/integration_test.rs",
        "line": 320,
        "return_type": "Result<()>",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "test_api_rate_limiting",
        "file": "tests/integration_test.rs",
        "line": 357,
        "return_type": "Result<()>",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "test_websocket_streaming",
        "file": "tests/integration_test.rs",
        "line": 394,
        "return_type": "Result<()>",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "test_error_recovery",
        "file": "tests/integration_test.rs",
        "line": 445,
        "return_type": "Result<()>",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "test_trading_engine_initialization",
        "file": "tests/integration_tests.rs",
        "line": 44,
        "return_type": "()",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "test_order_submission_latency",
        "file": "tests/integration_tests.rs",
        "line": 55,
        "return_type": "()",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "test_concurrent_order_processing",
        "file": "tests/integration_tests.rs",
        "line": 75,
        "return_type": "()",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "test_risk_checks_mandatory_stop_loss",
        "file": "tests/integration_tests.rs",
        "line": 108,
        "return_type": "()",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "test_position_size_limits",
        "file": "tests/integration_tests.rs",
        "line": 136,
        "return_type": "()",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "test_correlation_analysis",
        "file": "tests/integration_tests.rs",
        "line": 164,
        "return_type": "()",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "test_ml_signal_generation",
        "file": "tests/integration_tests.rs",
        "line": 189,
        "return_type": "()",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "test_ml_walk_forward_analysis",
        "file": "tests/integration_tests.rs",
        "line": 209,
        "return_type": "()",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "test_ml_convergence_monitoring",
        "file": "tests/integration_tests.rs",
        "line": 231,
        "return_type": "()",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "test_exchange_connector_initialization",
        "file": "tests/integration_tests.rs",
        "line": 252,
        "return_type": "()",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "test_websocket_reconnection",
        "file": "tests/integration_tests.rs",
        "line": 264,
        "return_type": "()",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "test_position_tracking",
        "file": "tests/integration_tests.rs",
        "line": 290,
        "return_type": "()",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "test_pnl_calculation",
        "file": "tests/integration_tests.rs",
        "line": 313,
        "return_type": "()",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "test_object_pool_performance",
        "file": "tests/integration_tests.rs",
        "line": 338,
        "return_type": "()",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "test_circuit_breaker",
        "file": "tests/integration_tests.rs",
        "line": 357,
        "return_type": "()",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "test_end_to_end_latency",
        "file": "tests/integration_tests.rs",
        "line": 389,
        "return_type": "()",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "stress_test_high_frequency_trading",
        "file": "tests/integration_tests.rs",
        "line": 423,
        "return_type": "()",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "test_database_operations",
        "file": "tests/integration_tests.rs",
        "line": 453,
        "return_type": "()",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "setup_test_env",
        "file": "tests/integration_tests.rs",
        "line": 460,
        "return_type": "TestConfig",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "cleanup_test_env",
        "file": "tests/integration_tests.rs",
        "line": 471,
        "return_type": "()",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "sigmoid",
        "file": "crates/risk/src/xgboost_model.rs",
        "line": 712,
        "return_type": "f64",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "calculate_correlation",
        "file": "crates/risk/src/hyperparameter_integration.rs",
        "line": 571,
        "return_type": "f64",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "run_all_validations",
        "file": "crates/risk/src/deep_dive_validation_study.rs",
        "line": 518,
        "return_type": "()",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "test_tpe_sampler_initialization",
        "file": "crates/risk/src/hyperparameter_optimization_tests.rs",
        "line": 65,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_parameter_space_definition",
        "file": "crates/risk/src/hyperparameter_optimization_tests.rs",
        "line": 78,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_tpe_sampling_strategy",
        "file": "crates/risk/src/hyperparameter_optimization_tests.rs",
        "line": 108,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_median_pruner",
        "file": "crates/risk/src/hyperparameter_optimization_tests.rs",
        "line": 151,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_auto_tuner_integration",
        "file": "crates/risk/src/hyperparameter_optimization_tests.rs",
        "line": 182,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_market_regime_adaptation",
        "file": "crates/risk/src/hyperparameter_optimization_tests.rs",
        "line": 217,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_continuous_learning",
        "file": "crates/risk/src/hyperparameter_optimization_tests.rs",
        "line": 277,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_multi_objective_optimization",
        "file": "crates/risk/src/hyperparameter_optimization_tests.rs",
        "line": 322,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_information_asymmetry_exploitation",
        "file": "crates/risk/src/hyperparameter_optimization_tests.rs",
        "line": 372,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_nash_equilibrium_convergence",
        "file": "crates/risk/src/hyperparameter_optimization_tests.rs",
        "line": 402,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_performance_metrics",
        "file": "crates/risk/src/hyperparameter_optimization_tests.rs",
        "line": 465,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_full_optimization_pipeline",
        "file": "crates/risk/src/hyperparameter_optimization_tests.rs",
        "line": 500,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "create_risk_system",
        "file": "crates/risk/src/lib.rs",
        "line": 102,
        "return_type": "(RiskClampSystem, KellySizer)",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "calculate_atr",
        "file": "crates/risk/src/type_compatibility.rs",
        "line": 100,
        "return_type": "f64",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "find_support_resistance",
        "file": "crates/risk/src/type_compatibility.rs",
        "line": 110,
        "return_type": "SupportResistance",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "estimate_market_impact",
        "file": "crates/risk/src/type_compatibility.rs",
        "line": 170,
        "return_type": "f64",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "convert_signal_action",
        "file": "crates/risk/src/type_compatibility.rs",
        "line": 178,
        "return_type": "SignalAction",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "convert_ta_indicators",
        "file": "crates/risk/src/type_compatibility.rs",
        "line": 190,
        "return_type": "HashMap<String, f64>",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "detect_market_regime",
        "file": "crates/risk/src/type_compatibility.rs",
        "line": 208,
        "return_type": "MarketRegime",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "create_default_sentiment",
        "file": "crates/risk/src/type_compatibility.rs",
        "line": 228,
        "return_type": "SentimentData",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "calculate_correlation",
        "file": "crates/risk/src/hyperparameter_optimization.rs",
        "line": 1800,
        "return_type": "f64",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_kelly_sizing_with_real_market_data",
        "file": "crates/risk/src/deep_dive_tests.rs",
        "line": 32,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_kelly_with_extreme_conditions",
        "file": "crates/risk/src/deep_dive_tests.rs",
        "line": 104,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_all_8_clamp_layers",
        "file": "crates/risk/src/deep_dive_tests.rs",
        "line": 167,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_garch_volatility_forecasting",
        "file": "crates/risk/src/deep_dive_tests.rs",
        "line": 289,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_auto_tuning_market_adaptation",
        "file": "crates/risk/src/deep_dive_tests.rs",
        "line": 367,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_ml_feedback_learning",
        "file": "crates/risk/src/deep_dive_tests.rs",
        "line": 413,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_profit_extraction_full_cycle",
        "file": "crates/risk/src/deep_dive_tests.rs",
        "line": 487,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_market_analytics_calculations",
        "file": "crates/risk/src/deep_dive_tests.rs",
        "line": 720,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_full_system_integration",
        "file": "crates/risk/src/deep_dive_tests.rs",
        "line": 947,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_exchange_minimum_orders",
        "file": "crates/risk/src/deep_dive_tests.rs",
        "line": 1099,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "erf",
        "file": "crates/risk/src/vpin_validation.rs",
        "line": 492,
        "return_type": "f64",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "normal_pdf",
        "file": "crates/risk/src/historical_regime_calibration.rs",
        "line": 933,
        "return_type": "f64",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "categorize_feature",
        "file": "crates/risk/src/feature_importance.rs",
        "line": 742,
        "return_type": "FeatureCategory",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "binomial",
        "file": "crates/risk/src/feature_importance.rs",
        "line": 762,
        "return_type": "usize",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "factorial",
        "file": "crates/risk/src/feature_importance.rs",
        "line": 780,
        "return_type": "usize",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "cpu_features",
        "file": "crates/risk_engine/src/correlation_portable.rs",
        "line": 57,
        "return_type": "CpuFeatures",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "calculate_correlation",
        "file": "crates/analysis/src/statistical_tests.rs",
        "line": 221,
        "return_type": "f64",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "validate_trading_data",
        "file": "crates/analysis/src/lib.rs",
        "line": 27,
        "return_type": "Result<bool, anyhow::Error>",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "generate_validation_report",
        "file": "crates/ml/src/integrated_optimization.rs",
        "line": 732,
        "return_type": "String",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "normal_quantile",
        "file": "crates/ml/src/garch.rs",
        "line": 327,
        "return_type": "f64",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "gamma",
        "file": "crates/ml/src/garch.rs",
        "line": 358,
        "return_type": "f64",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "ljung_box_test",
        "file": "crates/ml/src/garch.rs",
        "line": 392,
        "return_type": "f64",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "autocorrelation",
        "file": "crates/ml/src/garch.rs",
        "line": 405,
        "return_type": "f64",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "arch_test",
        "file": "crates/ml/src/garch.rs",
        "line": 424,
        "return_type": "f64",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "has_avx512",
        "file": "crates/ml/src/simd/mod.rs",
        "line": 172,
        "return_type": "bool",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "has_avx512_vnni",
        "file": "crates/ml/src/simd/mod.rs",
        "line": 181,
        "return_type": "bool",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "dot_product",
        "file": "crates/ml/src/simd/mod.rs",
        "line": 564,
        "return_type": "f64",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "mae",
        "file": "crates/ml/src/training/metrics.rs",
        "line": 16,
        "return_type": "f64",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "mse",
        "file": "crates/ml/src/training/metrics.rs",
        "line": 22,
        "return_type": "f64",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "rmse",
        "file": "crates/ml/src/training/metrics.rs",
        "line": 28,
        "return_type": "f64",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "mape",
        "file": "crates/ml/src/training/metrics.rs",
        "line": 33,
        "return_type": "f64",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "r2_score",
        "file": "crates/ml/src/training/metrics.rs",
        "line": 56,
        "return_type": "f64",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "adjusted_r2",
        "file": "crates/ml/src/training/metrics.rs",
        "line": 69,
        "return_type": "f64",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "huber_loss",
        "file": "crates/ml/src/training/metrics.rs",
        "line": 81,
        "return_type": "f64",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "quantile_loss",
        "file": "crates/ml/src/training/metrics.rs",
        "line": 98,
        "return_type": "f64",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "sharpe_ratio",
        "file": "crates/ml/src/training/metrics.rs",
        "line": 118,
        "return_type": "f64",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "sortino_ratio",
        "file": "crates/ml/src/training/metrics.rs",
        "line": 130,
        "return_type": "f64",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "max_drawdown",
        "file": "crates/ml/src/training/metrics.rs",
        "line": 154,
        "return_type": "f64",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "calmar_ratio",
        "file": "crates/ml/src/training/metrics.rs",
        "line": 172,
        "return_type": "f64",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "information_ratio",
        "file": "crates/ml/src/training/metrics.rs",
        "line": 192,
        "return_type": "f64",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "directional_accuracy",
        "file": "crates/ml/src/training/metrics.rs",
        "line": 208,
        "return_type": "f64",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "hit_rate",
        "file": "crates/ml/src/training/metrics.rs",
        "line": 230,
        "return_type": "f64",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "profit_factor",
        "file": "crates/ml/src/training/metrics.rs",
        "line": 242,
        "return_type": "f64",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "register_all_indicators",
        "file": "crates/ml/src/feature_engine/indicators_extended.rs",
        "line": 721,
        "return_type": "HashMap<String, Box<dyn Indicator>>",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "sigmoid",
        "file": "crates/ml/src/models/gru.rs",
        "line": 552,
        "return_type": "Array1<f32>",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "tanh",
        "file": "crates/ml/src/models/gru.rs",
        "line": 557,
        "return_type": "Array1<f32>",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "apply_layer_norm",
        "file": "crates/ml/src/models/gru.rs",
        "line": 561,
        "return_type": "Array1<f32>",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "sigmoid",
        "file": "crates/ml/src/models/lstm.rs",
        "line": 467,
        "return_type": "Array1<f32>",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "tanh",
        "file": "crates/ml/src/models/lstm.rs",
        "line": 472,
        "return_type": "Array1<f32>",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_arima_with_real_btc_data",
        "file": "crates/ml/tests/arima_integration.rs",
        "line": 30,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_model_registry_full_lifecycle",
        "file": "crates/ml/tests/arima_integration.rs",
        "line": 120,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_concurrent_inference_stress",
        "file": "crates/ml/tests/arima_integration.rs",
        "line": 193,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_end_to_end_ml_pipeline",
        "file": "crates/ml/tests/arima_integration.rs",
        "line": 300,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "load_btc_historical_data",
        "file": "crates/ml/tests/arima_integration.rs",
        "line": 368,
        "return_type": "Vec<Candle>",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "generate_realistic_btc_data",
        "file": "crates/ml/tests/arima_integration.rs",
        "line": 374,
        "return_type": "Vec<Candle>",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "generate_test_candles",
        "file": "crates/ml/tests/arima_integration.rs",
        "line": 405,
        "return_type": "Vec<ml::feature_engine::indicators::Candle>",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "create_test_model_metadata",
        "file": "crates/ml/tests/arima_integration.rs",
        "line": 419,
        "return_type": "ml::models::ModelMetadata",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "bench_arima_fitting",
        "file": "crates/ml/benches/ml_benchmarks.rs",
        "line": 30,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "bench_arima_prediction",
        "file": "crates/ml/benches/ml_benchmarks.rs",
        "line": 64,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "bench_feature_calculation",
        "file": "crates/ml/benches/ml_benchmarks.rs",
        "line": 122,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "bench_inference_engine",
        "file": "crates/ml/benches/ml_benchmarks.rs",
        "line": 199,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "bench_model_registry",
        "file": "crates/ml/benches/ml_benchmarks.rs",
        "line": 285,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "bench_end_to_end_pipeline",
        "file": "crates/ml/benches/ml_benchmarks.rs",
        "line": 357,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "bench_stress_scenarios",
        "file": "crates/ml/benches/ml_benchmarks.rs",
        "line": 415,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "generate_candles",
        "file": "crates/ml/benches/feature_bench.rs",
        "line": 9,
        "return_type": "Vec<Candle>",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "benchmark_individual_indicators",
        "file": "crates/ml/benches/feature_bench.rs",
        "line": 23,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "benchmark_full_feature_vector",
        "file": "crates/ml/benches/feature_bench.rs",
        "line": 73,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "benchmark_simd_vs_scalar",
        "file": "crates/ml/benches/feature_bench.rs",
        "line": 97,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "benchmark_cache_effectiveness",
        "file": "crates/ml/benches/feature_bench.rs",
        "line": 137,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "benchmark_memory_allocation",
        "file": "crates/ml/benches/feature_bench.rs",
        "line": 164,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "benchmark_hot_paths",
        "file": "crates/infrastructure/src/hot_path_verification.rs",
        "line": 162,
        "return_type": "BenchmarkResults",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "is_avx512_available",
        "file": "crates/infrastructure/src/simd_avx512.rs",
        "line": 298,
        "return_type": "bool",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "configure_mimalloc",
        "file": "crates/infrastructure/src/allocator.rs",
        "line": 18,
        "return_type": "()",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "pin_to_core",
        "file": "crates/infrastructure/src/rayon_enhanced.rs",
        "line": 380,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "pin_to_core",
        "file": "crates/infrastructure/src/rayon_enhanced.rs",
        "line": 398,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "acquire_order",
        "file": "crates/infrastructure/src/object_pools.rs",
        "line": 247,
        "return_type": "PoolGuard<Order>",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "acquire_signal",
        "file": "crates/infrastructure/src/object_pools.rs",
        "line": 253,
        "return_type": "PoolGuard<Signal>",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "acquire_market_data",
        "file": "crates/infrastructure/src/object_pools.rs",
        "line": 259,
        "return_type": "PoolGuard<MarketData>",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "acquire_position",
        "file": "crates/infrastructure/src/object_pools.rs",
        "line": 265,
        "return_type": "PoolGuard<Position>",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "acquire_risk_check",
        "file": "crates/infrastructure/src/object_pools.rs",
        "line": 271,
        "return_type": "PoolGuard<RiskCheck>",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "acquire_execution",
        "file": "crates/infrastructure/src/object_pools.rs",
        "line": 277,
        "return_type": "PoolGuard<ExecutionReport>",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "acquire_feature",
        "file": "crates/infrastructure/src/object_pools.rs",
        "line": 283,
        "return_type": "PoolGuard<Feature>",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "acquire_ml_inference",
        "file": "crates/infrastructure/src/object_pools.rs",
        "line": 289,
        "return_type": "PoolGuard<MLInference>",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "extract_token",
        "file": "crates/infrastructure/src/external_control.rs",
        "line": 738,
        "return_type": "Result<String, StatusCode>",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "verify_token",
        "file": "crates/infrastructure/src/external_control.rs",
        "line": 748,
        "return_type": "Result<Claims, StatusCode>",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "metrics",
        "file": "crates/infrastructure/src/memory/metrics.rs",
        "line": 258,
        "return_type": "&'static MemoryMetrics",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "initialize_metrics",
        "file": "crates/infrastructure/src/memory/metrics.rs",
        "line": 263,
        "return_type": "()",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "start_pressure_monitor",
        "file": "crates/infrastructure/src/memory/metrics.rs",
        "line": 273,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "create_order_pool",
        "file": "crates/infrastructure/src/memory/safe_pools.rs",
        "line": 587,
        "return_type": "Arc<SafeObjectPool<Order>>",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "create_signal_pool",
        "file": "crates/infrastructure/src/memory/safe_pools.rs",
        "line": 599,
        "return_type": "Arc<SafeObjectPool<Signal>>",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "create_tick_pool",
        "file": "crates/infrastructure/src/memory/safe_pools.rs",
        "line": 611,
        "return_type": "Arc<SafeObjectPool<Tick>>",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "initialize_all_pools",
        "file": "crates/infrastructure/src/memory/pools.rs",
        "line": 386,
        "return_type": "()",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "get_pool_stats",
        "file": "crates/infrastructure/src/memory/pools.rs",
        "line": 408,
        "return_type": "PoolStats",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "acquire_order",
        "file": "crates/infrastructure/src/memory/pools.rs",
        "line": 441,
        "return_type": "Box<Order>",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "release_order",
        "file": "crates/infrastructure/src/memory/pools.rs",
        "line": 447,
        "return_type": "()",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "acquire_signal",
        "file": "crates/infrastructure/src/memory/pools.rs",
        "line": 453,
        "return_type": "Box<Signal>",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "release_signal",
        "file": "crates/infrastructure/src/memory/pools.rs",
        "line": 459,
        "return_type": "()",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "acquire_tick",
        "file": "crates/infrastructure/src/memory/pools.rs",
        "line": 465,
        "return_type": "Box<Tick>",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "release_tick",
        "file": "crates/infrastructure/src/memory/pools.rs",
        "line": 471,
        "return_type": "()",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "initialize_memory_system",
        "file": "crates/infrastructure/src/memory/mod.rs",
        "line": 32,
        "return_type": "()",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "warm_allocator",
        "file": "crates/infrastructure/src/memory/mod.rs",
        "line": 49,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "verify_allocation_latency",
        "file": "crates/infrastructure/src/memory/mod.rs",
        "line": 60,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "create_compensator",
        "file": "crates/trading_engine/src/transactions/compensator.rs",
        "line": 42,
        "return_type": "Result<Box<dyn CompensatingTransaction>>",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "get_exchange_connection",
        "file": "crates/trading_engine/src/transactions/compensator.rs",
        "line": 392,
        "return_type": "Result<ExchangeConnection>",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "get_position_manager",
        "file": "crates/trading_engine/src/transactions/compensator.rs",
        "line": 396,
        "return_type": "Result<PositionManager>",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "get_account_manager",
        "file": "crates/trading_engine/src/transactions/compensator.rs",
        "line": 400,
        "return_type": "Result<AccountManager>",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "get_fee_manager",
        "file": "crates/trading_engine/src/transactions/compensator.rs",
        "line": 404,
        "return_type": "Result<FeeManager>",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "get_margin_manager",
        "file": "crates/trading_engine/src/transactions/compensator.rs",
        "line": 408,
        "return_type": "Result<MarginManager>",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "extract_base_currency",
        "file": "crates/trading_engine/src/transactions/compensator.rs",
        "line": 412,
        "return_type": "String",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "format_bytes",
        "file": "crates/data_ingestion/src/timescale/replication.rs",
        "line": 257,
        "return_type": "String",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "calculate_autocorrelation",
        "file": "crates/data_ingestion/src/event_driven/bucketed_aggregator.rs",
        "line": 611,
        "return_type": "f64",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "calculate_price_efficiency",
        "file": "crates/data_ingestion/src/event_driven/bucketed_aggregator.rs",
        "line": 637,
        "return_type": "f64",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "variance",
        "file": "crates/data_ingestion/src/event_driven/bucketed_aggregator.rs",
        "line": 673,
        "return_type": "f64",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "register_histogram",
        "file": "crates/data_ingestion/src/monitoring/mod.rs",
        "line": 88,
        "return_type": "Arc<dyn MetricsCollector>",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "register_counter",
        "file": "crates/data_ingestion/src/monitoring/mod.rs",
        "line": 93,
        "return_type": "Arc<dyn MetricsCollector>",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "test_event_processor_latency",
        "file": "crates/data_ingestion/tests/event_driven_performance.rs",
        "line": 31,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_adaptive_sampler_responsiveness",
        "file": "crates/data_ingestion/tests/event_driven_performance.rs",
        "line": 91,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_bucketed_aggregator_accuracy",
        "file": "crates/data_ingestion/tests/event_driven_performance.rs",
        "line": 148,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_sustained_throughput",
        "file": "crates/data_ingestion/tests/event_driven_performance.rs",
        "line": 204,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_burst_handling",
        "file": "crates/data_ingestion/tests/event_driven_performance.rs",
        "line": 261,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_priority_ordering",
        "file": "crates/data_ingestion/tests/event_driven_performance.rs",
        "line": 321,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_memory_efficiency",
        "file": "crates/data_ingestion/tests/event_driven_performance.rs",
        "line": 373,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "create_test_event",
        "file": "crates/data_ingestion/tests/event_driven_performance.rs",
        "line": 409,
        "return_type": "MarketEvent",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "get_memory_usage",
        "file": "crates/data_ingestion/tests/event_driven_performance.rs",
        "line": 421,
        "return_type": "usize",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_concurrent_producers",
        "file": "crates/data_ingestion/tests/event_driven_performance.rs",
        "line": 437,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "test_300k_events_per_second",
        "file": "crates/data_ingestion/tests/integration_test.rs",
        "line": 641,
        "return_type": "Result<()>",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "test_monitoring_layer_integration",
        "file": "crates/data_ingestion/tests/integration_test.rs",
        "line": 974,
        "return_type": "Result<()>",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "test_execution_layer_integration",
        "file": "crates/data_ingestion/tests/integration_test.rs",
        "line": 981,
        "return_type": "Result<()>",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "test_strategy_layer_integration",
        "file": "crates/data_ingestion/tests/integration_test.rs",
        "line": 988,
        "return_type": "Result<()>",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "test_analysis_layer_integration",
        "file": "crates/data_ingestion/tests/integration_test.rs",
        "line": 995,
        "return_type": "Result<()>",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "test_risk_layer_integration",
        "file": "crates/data_ingestion/tests/integration_test.rs",
        "line": 1002,
        "return_type": "Result<()>",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "test_exchange_layer_integration",
        "file": "crates/data_ingestion/tests/integration_test.rs",
        "line": 1009,
        "return_type": "Result<()>",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "test_infrastructure_layer_integration",
        "file": "crates/data_ingestion/tests/integration_test.rs",
        "line": 1016,
        "return_type": "Result<()>",
        "is_async": true,
        "visibility": "private"
      },
      {
        "name": "setup_risk_engine",
        "file": "benches/risk_engine_bench.rs",
        "line": 18,
        "return_type": "Arc<RiskEngine>",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "create_test_order",
        "file": "benches/risk_engine_bench.rs",
        "line": 35,
        "return_type": "Order",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "bench_pre_trade_checks",
        "file": "benches/risk_engine_bench.rs",
        "line": 53,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "bench_position_limits",
        "file": "benches/risk_engine_bench.rs",
        "line": 81,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "bench_stop_loss_check",
        "file": "benches/risk_engine_bench.rs",
        "line": 99,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "bench_correlation_check",
        "file": "benches/risk_engine_bench.rs",
        "line": 113,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "bench_kill_switch",
        "file": "benches/risk_engine_bench.rs",
        "line": 133,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "bench_full_pipeline",
        "file": "benches/risk_engine_bench.rs",
        "line": 145,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "bench_throughput",
        "file": "benches/risk_engine_bench.rs",
        "line": 179,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "bench_latency_percentiles",
        "file": "benches/risk_engine_bench.rs",
        "line": 199,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "bench_circuit_breaker_contention",
        "file": "benches/contention_bench.rs",
        "line": 16,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "bench_latency_distribution",
        "file": "benches/contention_bench.rs",
        "line": 74,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "bench_hot_path_contention",
        "file": "benches/contention_bench.rs",
        "line": 163,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "bench_state_transition_storm",
        "file": "benches/contention_bench.rs",
        "line": 207,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "bench_memory_pressure",
        "file": "benches/contention_bench.rs",
        "line": 268,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "bench_fairness",
        "file": "benches/contention_bench.rs",
        "line": 317,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "bench_order_submission",
        "file": "benches/performance_benchmarks.rs",
        "line": 19,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "bench_concurrent_orders",
        "file": "benches/performance_benchmarks.rs",
        "line": 46,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "bench_risk_checks",
        "file": "benches/performance_benchmarks.rs",
        "line": 84,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "bench_correlation_analysis",
        "file": "benches/performance_benchmarks.rs",
        "line": 124,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "bench_ml_feature_extraction",
        "file": "benches/performance_benchmarks.rs",
        "line": 161,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "bench_ml_inference",
        "file": "benches/performance_benchmarks.rs",
        "line": 187,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "bench_object_pool",
        "file": "benches/performance_benchmarks.rs",
        "line": 228,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "bench_circuit_breaker",
        "file": "benches/performance_benchmarks.rs",
        "line": 258,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "bench_position_tracking",
        "file": "benches/performance_benchmarks.rs",
        "line": 297,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "bench_full_trading_cycle",
        "file": "benches/performance_benchmarks.rs",
        "line": 342,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "create_test_order",
        "file": "benches/performance_benchmarks.rs",
        "line": 374,
        "return_type": "order_management::Order",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "generate_mock_signal",
        "file": "benches/performance_benchmarks.rs",
        "line": 394,
        "return_type": "f64",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "check_mock_risk",
        "file": "benches/performance_benchmarks.rs",
        "line": 399,
        "return_type": "bool",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "simulate_order_submission",
        "file": "benches/network_jitter_bench.rs",
        "line": 102,
        "return_type": "Result<Duration, &'static str>",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "bench_order_submission_with_jitter",
        "file": "benches/network_jitter_bench.rs",
        "line": 123,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "bench_websocket_with_jitter",
        "file": "benches/network_jitter_bench.rs",
        "line": 152,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "bench_outage_recovery",
        "file": "benches/network_jitter_bench.rs",
        "line": 186,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "bench_realistic_latency_distribution",
        "file": "benches/network_jitter_bench.rs",
        "line": 215,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "create_test_order",
        "file": "benches/order_management_bench.rs",
        "line": 17,
        "return_type": "Order",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "bench_state_transitions",
        "file": "benches/order_management_bench.rs",
        "line": 35,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "bench_order_validation",
        "file": "benches/order_management_bench.rs",
        "line": 70,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "bench_order_routing",
        "file": "benches/order_management_bench.rs",
        "line": 84,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "bench_position_tracking",
        "file": "benches/order_management_bench.rs",
        "line": 137,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "bench_pnl_calculation",
        "file": "benches/order_management_bench.rs",
        "line": 162,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "bench_full_order_pipeline",
        "file": "benches/order_management_bench.rs",
        "line": 183,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "bench_order_throughput",
        "file": "benches/order_management_bench.rs",
        "line": 231,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "bench_critical_latency",
        "file": "benches/order_management_bench.rs",
        "line": 249,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "bench_concurrent_orders",
        "file": "benches/order_management_bench.rs",
        "line": 286,
        "return_type": "()",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "create_router",
        "file": "adapters/inbound/rest/api_server.rs",
        "line": 77,
        "return_type": "Router",
        "is_async": false,
        "visibility": "pub"
      },
      {
        "name": "trading_routes",
        "file": "adapters/inbound/rest/api_server.rs",
        "line": 113,
        "return_type": "Router<ApiState>",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "risk_routes",
        "file": "adapters/inbound/rest/api_server.rs",
        "line": 133,
        "return_type": "Router<ApiState>",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "market_data_routes",
        "file": "adapters/inbound/rest/api_server.rs",
        "line": 145,
        "return_type": "Router<ApiState>",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "account_routes",
        "file": "adapters/inbound/rest/api_server.rs",
        "line": 156,
        "return_type": "Router<ApiState>",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "admin_routes",
        "file": "adapters/inbound/rest/api_server.rs",
        "line": 166,
        "return_type": "Router<ApiState>",
        "is_async": false,
        "visibility": "private"
      },
      {
        "name": "track_metrics",
        "file": "adapters/inbound/rest/api_server.rs",
        "line": 440,
        "return_type": "Response",
        "is_async": true,
        "visibility": "private"
      }
    ],
    "impls": [
      {
        "struct": "IntoResponse",
        "trait": null,
        "file": "bot4-main/src/observability/server.rs",
        "line": 97,
        "methods": []
      },
      {
        "struct": "IntoResponse",
        "trait": null,
        "file": "bot4-main/src/observability/server.rs",
        "line": 107,
        "methods": []
      },
      {
        "struct": "IntoResponse",
        "trait": null,
        "file": "bot4-main/src/observability/server.rs",
        "line": 112,
        "methods": []
      },
      {
        "struct": "IntoResponse",
        "trait": null,
        "file": "bot4-main/src/observability/server.rs",
        "line": 129,
        "methods": []
      },
      {
        "struct": "IntoResponse",
        "trait": null,
        "file": "bot4-main/src/observability/server.rs",
        "line": 152,
        "methods": []
      },
      {
        "struct": "IntoResponse",
        "trait": null,
        "file": "bot4-main/src/observability/server.rs",
        "line": 174,
        "methods": []
      },
      {
        "struct": "Timer",
        "trait": null,
        "file": "bot4-main/src/observability/metrics.rs",
        "line": 202,
        "methods": [
          {
            "name": "new",
            "line": 202,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "elapsed_micros",
            "line": 207,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "elapsed_nanos",
            "line": 211,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "elapsed_millis",
            "line": 215,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "STPService",
        "trait": null,
        "file": "domain/services/stp_policy.rs",
        "line": 93,
        "methods": [
          {
            "name": "new",
            "line": 95,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "check_order",
            "line": 110,
            "return_type": "Result<STPAction>",
            "is_async": false
          },
          {
            "name": "find_violations",
            "line": 146,
            "return_type": "Result<Vec<OrderRecord>>",
            "is_async": false
          },
          {
            "name": "apply_policy",
            "line": 195,
            "return_type": "Result<STPAction>",
            "is_async": false
          },
          {
            "name": "get_policy",
            "line": 259,
            "return_type": "STPPolicy",
            "is_async": false
          },
          {
            "name": "set_account_policy",
            "line": 269,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "add_order",
            "line": 275,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "remove_order",
            "line": 294,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "metrics",
            "line": 303,
            "return_type": "STPMetricsSnapshot",
            "is_async": false
          }
        ]
      },
      {
        "struct": "OrderEvent",
        "trait": null,
        "file": "domain/events/order_event.rs",
        "line": 73,
        "methods": [
          {
            "name": "order_id",
            "line": 74,
            "return_type": "&OrderId",
            "is_async": false
          },
          {
            "name": "timestamp",
            "line": 87,
            "return_type": "DateTime<Utc>",
            "is_async": false
          },
          {
            "name": "event_type",
            "line": 100,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "is_terminal",
            "line": 113,
            "return_type": "bool",
            "is_async": false
          }
        ]
      },
      {
        "struct": "VenueError",
        "trait": null,
        "file": "domain/errors/error_taxonomy.rs",
        "line": 430,
        "methods": [
          {
            "name": "recovery_strategy",
            "line": 431,
            "return_type": "RecoveryStrategy",
            "is_async": false
          },
          {
            "name": "is_retryable",
            "line": 482,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "severity",
            "line": 492,
            "return_type": "Severity",
            "is_async": false
          },
          {
            "name": "from_exchange_error",
            "line": 506,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "from_binance_error",
            "line": 516,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "from_kraken_error",
            "line": 539,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "from_coinbase_error",
            "line": 557,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "OrderId",
        "trait": null,
        "file": "domain/entities/order.rs",
        "line": 17,
        "methods": [
          {
            "name": "new",
            "line": 17,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "from_string",
            "line": 20,
            "return_type": "Result<Self>",
            "is_async": false
          },
          {
            "name": "as_string",
            "line": 24,
            "return_type": "String",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Order",
        "trait": null,
        "file": "domain/entities/order.rs",
        "line": 117,
        "methods": [
          {
            "name": "market",
            "line": 118,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "limit",
            "line": 145,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "stop_market",
            "line": 178,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "stop_limit",
            "line": 210,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "with_price",
            "line": 246,
            "return_type": "Result<Self>",
            "is_async": false
          },
          {
            "name": "with_stop_price",
            "line": 256,
            "return_type": "Result<Self>",
            "is_async": false
          },
          {
            "name": "with_quantity",
            "line": 266,
            "return_type": "Result<Self>",
            "is_async": false
          },
          {
            "name": "id",
            "line": 276,
            "return_type": "&OrderId",
            "is_async": false
          },
          {
            "name": "symbol",
            "line": 277,
            "return_type": "&Symbol",
            "is_async": false
          },
          {
            "name": "order_type",
            "line": 278,
            "return_type": "OrderType",
            "is_async": false
          },
          {
            "name": "side",
            "line": 279,
            "return_type": "OrderSide",
            "is_async": false
          },
          {
            "name": "price",
            "line": 280,
            "return_type": "Option<&Price>",
            "is_async": false
          },
          {
            "name": "stop_price",
            "line": 281,
            "return_type": "Option<&Price>",
            "is_async": false
          },
          {
            "name": "quantity",
            "line": 282,
            "return_type": "&Quantity",
            "is_async": false
          },
          {
            "name": "status",
            "line": 283,
            "return_type": "OrderStatus",
            "is_async": false
          },
          {
            "name": "filled_quantity",
            "line": 284,
            "return_type": "&Quantity",
            "is_async": false
          },
          {
            "name": "remaining_quantity",
            "line": 285,
            "return_type": "Result<Quantity>",
            "is_async": false
          },
          {
            "name": "can_cancel",
            "line": 292,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "can_modify",
            "line": 300,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "is_terminal",
            "line": 308,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "is_active",
            "line": 316,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "submit",
            "line": 326,
            "return_type": "Result<(Order, OrderEvent)>",
            "is_async": false
          },
          {
            "name": "confirm",
            "line": 347,
            "return_type": "Result<(Order, OrderEvent)>",
            "is_async": false
          },
          {
            "name": "fill",
            "line": 366,
            "return_type": "Result<(Order, OrderEvent)>",
            "is_async": false
          },
          {
            "name": "cancel",
            "line": 420,
            "return_type": "Result<(Order, OrderEvent)>",
            "is_async": false
          },
          {
            "name": "reject",
            "line": 439,
            "return_type": "Result<(Order, OrderEvent)>",
            "is_async": false
          },
          {
            "name": "with_risk_params",
            "line": 457,
            "return_type": "Result<Self>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "OcoOrder",
        "trait": null,
        "file": "domain/entities/oco_order.rs",
        "line": 94,
        "methods": [
          {
            "name": "new",
            "line": 95,
            "return_type": "Result<Self>",
            "is_async": false
          },
          {
            "name": "validate_oco_pair",
            "line": 116,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "handle_trigger",
            "line": 169,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "handle_partial_fill",
            "line": 197,
            "return_type": "Result<bool>",
            "is_async": true
          },
          {
            "name": "handle_simultaneous_trigger",
            "line": 214,
            "return_type": "Result<OcoLeg>",
            "is_async": true
          },
          {
            "name": "cancel",
            "line": 236,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "amend_leg",
            "line": 257,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "get_winning_order",
            "line": 311,
            "return_type": "Option<Order>",
            "is_async": true
          },
          {
            "name": "get_cancelled_order",
            "line": 321,
            "return_type": "Option<Order>",
            "is_async": true
          },
          {
            "name": "id",
            "line": 331,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "limit_order",
            "line": 332,
            "return_type": "&Order",
            "is_async": false
          },
          {
            "name": "stop_order",
            "line": 333,
            "return_type": "&Order",
            "is_async": false
          },
          {
            "name": "semantics",
            "line": 334,
            "return_type": "&OcoSemantics",
            "is_async": false
          },
          {
            "name": "state",
            "line": 335,
            "return_type": "OcoState",
            "is_async": true
          },
          {
            "name": "created_at",
            "line": 336,
            "return_type": "DateTime<Utc>",
            "is_async": false
          },
          {
            "name": "updated_at",
            "line": 337,
            "return_type": "DateTime<Utc>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "FillDistribution",
        "trait": null,
        "file": "domain/value_objects/statistical_distributions.rs",
        "line": 32,
        "methods": [
          {
            "name": "conservative",
            "line": 33,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "aggressive",
            "line": 42,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "generate_fills",
            "line": 51,
            "return_type": "Result<Vec<f64>>",
            "is_async": false
          },
          {
            "name": "expected_fills",
            "line": 81,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "expected_min_ratio",
            "line": 86,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "LatencyDistribution",
        "trait": null,
        "file": "domain/value_objects/statistical_distributions.rs",
        "line": 121,
        "methods": [
          {
            "name": "fast",
            "line": 122,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "slow",
            "line": 132,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "generate_latency",
            "line": 142,
            "return_type": "Duration",
            "is_async": false
          },
          {
            "name": "median_latency",
            "line": 155,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "p95_latency",
            "line": 160,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "p99_latency",
            "line": 166,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "SlippageDistribution",
        "trait": null,
        "file": "domain/value_objects/statistical_distributions.rs",
        "line": 194,
        "methods": [
          {
            "name": "generate_slippage",
            "line": 195,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ArrivalRateDistribution",
        "trait": null,
        "file": "domain/value_objects/statistical_distributions.rs",
        "line": 241,
        "methods": [
          {
            "name": "generate_inter_arrival",
            "line": 242,
            "return_type": "Duration",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MarketStatistics",
        "trait": null,
        "file": "domain/value_objects/statistical_distributions.rs",
        "line": 276,
        "methods": [
          {
            "name": "liquid_market",
            "line": 277,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "illiquid_market",
            "line": 295,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Price",
        "trait": null,
        "file": "domain/value_objects/price.rs",
        "line": 17,
        "methods": [
          {
            "name": "new",
            "line": 30,
            "return_type": "Result<Self>",
            "is_async": false
          },
          {
            "name": "value",
            "line": 42,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "apply_slippage",
            "line": 54,
            "return_type": "Result<Price>",
            "is_async": false
          },
          {
            "name": "percentage_diff",
            "line": 64,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "round_to",
            "line": 70,
            "return_type": "Price",
            "is_async": false
          },
          {
            "name": "is_within_range",
            "line": 77,
            "return_type": "bool",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Symbol",
        "trait": null,
        "file": "domain/value_objects/symbol.rs",
        "line": 21,
        "methods": [
          {
            "name": "new",
            "line": 36,
            "return_type": "Result<Self>",
            "is_async": false
          },
          {
            "name": "from_parts",
            "line": 80,
            "return_type": "Result<Self>",
            "is_async": false
          },
          {
            "name": "base",
            "line": 87,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "quote",
            "line": 93,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "as_str",
            "line": 99,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "to_exchange_format",
            "line": 104,
            "return_type": "String",
            "is_async": false
          },
          {
            "name": "is_stablecoin_pair",
            "line": 114,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "is_fiat_pair",
            "line": 120,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "inverse",
            "line": 126,
            "return_type": "Symbol",
            "is_async": false
          },
          {
            "name": "is_valid_asset_code",
            "line": 135,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "split_combined",
            "line": 142,
            "return_type": "Result<Vec<&str>>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "PriceFilter",
        "trait": null,
        "file": "domain/value_objects/validation_filters.rs",
        "line": 21,
        "methods": [
          {
            "name": "validate",
            "line": 22,
            "return_type": "Result<()>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "LotSizeFilter",
        "trait": null,
        "file": "domain/value_objects/validation_filters.rs",
        "line": 77,
        "methods": [
          {
            "name": "validate",
            "line": 78,
            "return_type": "Result<()>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "NotionalFilter",
        "trait": null,
        "file": "domain/value_objects/validation_filters.rs",
        "line": 143,
        "methods": [
          {
            "name": "validate",
            "line": 144,
            "return_type": "Result<()>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "PercentPriceFilter",
        "trait": null,
        "file": "domain/value_objects/validation_filters.rs",
        "line": 184,
        "methods": [
          {
            "name": "validate",
            "line": 185,
            "return_type": "Result<()>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ValidationFilters",
        "trait": null,
        "file": "domain/value_objects/validation_filters.rs",
        "line": 257,
        "methods": [
          {
            "name": "btc_usdt",
            "line": 258,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "validate_order",
            "line": 294,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "would_cross_spread",
            "line": 334,
            "return_type": "bool",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ExchangeErrorCode",
        "trait": null,
        "file": "domain/value_objects/validation_filters.rs",
        "line": 364,
        "methods": [
          {
            "name": "to_string",
            "line": 364,
            "return_type": "String",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Quantity",
        "trait": null,
        "file": "domain/value_objects/quantity.rs",
        "line": 17,
        "methods": [
          {
            "name": "new",
            "line": 25,
            "return_type": "Result<Self>",
            "is_async": false
          },
          {
            "name": "zero",
            "line": 36,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "value",
            "line": 42,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "is_zero",
            "line": 48,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "is_positive",
            "line": 54,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "add",
            "line": 59,
            "return_type": "Result<Quantity>",
            "is_async": false
          },
          {
            "name": "subtract",
            "line": 64,
            "return_type": "Result<Quantity>",
            "is_async": false
          },
          {
            "name": "multiply",
            "line": 74,
            "return_type": "Result<Quantity>",
            "is_async": false
          },
          {
            "name": "divide",
            "line": 82,
            "return_type": "Result<Quantity>",
            "is_async": false
          },
          {
            "name": "split",
            "line": 90,
            "return_type": "Result<Vec<Quantity>>",
            "is_async": false
          },
          {
            "name": "round_to",
            "line": 107,
            "return_type": "Quantity",
            "is_async": false
          },
          {
            "name": "min",
            "line": 114,
            "return_type": "Quantity",
            "is_async": false
          },
          {
            "name": "max",
            "line": 124,
            "return_type": "Quantity",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Money",
        "trait": null,
        "file": "domain/value_objects/decimal_money.rs",
        "line": 30,
        "methods": [
          {
            "name": "new",
            "line": 31,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "from_str",
            "line": 36,
            "return_type": "Result<Self, MoneyError>",
            "is_async": false
          },
          {
            "name": "from_minor_units",
            "line": 43,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "to_minor_units",
            "line": 50,
            "return_type": "i64",
            "is_async": false
          },
          {
            "name": "round",
            "line": 56,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "is_zero",
            "line": 62,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "is_positive",
            "line": 67,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "is_negative",
            "line": 72,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "abs",
            "line": 77,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "percentage",
            "line": 82,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "apply_fee",
            "line": 88,
            "return_type": "(Money, Money)",
            "is_async": false
          },
          {
            "name": "convert_to",
            "line": 100,
            "return_type": "Money",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Currency",
        "trait": null,
        "file": "domain/value_objects/decimal_money.rs",
        "line": 107,
        "methods": [
          {
            "name": "decimal_places",
            "line": 108,
            "return_type": "u32",
            "is_async": false
          },
          {
            "name": "min_amount",
            "line": 117,
            "return_type": "Decimal",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Price",
        "trait": null,
        "file": "domain/value_objects/decimal_money.rs",
        "line": 195,
        "methods": [
          {
            "name": "new",
            "line": 195,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "from_str",
            "line": 198,
            "return_type": "Result<Self, MoneyError>",
            "is_async": false
          },
          {
            "name": "calculate_value",
            "line": 206,
            "return_type": "Money",
            "is_async": false
          },
          {
            "name": "improve_by_bps",
            "line": 212,
            "return_type": "Price",
            "is_async": false
          },
          {
            "name": "is_at_tick",
            "line": 223,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "round_to_tick",
            "line": 228,
            "return_type": "Price",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Quantity",
        "trait": null,
        "file": "domain/value_objects/decimal_money.rs",
        "line": 242,
        "methods": [
          {
            "name": "new",
            "line": 242,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "from_str",
            "line": 245,
            "return_type": "Result<Self, MoneyError>",
            "is_async": false
          },
          {
            "name": "is_valid_lot",
            "line": 253,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "round_to_lot",
            "line": 258,
            "return_type": "Quantity",
            "is_async": false
          },
          {
            "name": "split",
            "line": 264,
            "return_type": "Vec<Quantity>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Portfolio",
        "trait": null,
        "file": "domain/value_objects/decimal_money.rs",
        "line": 289,
        "methods": [
          {
            "name": "new",
            "line": 289,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "add_balance",
            "line": 297,
            "return_type": "Result<(), MoneyError>",
            "is_async": false
          },
          {
            "name": "get_balance",
            "line": 307,
            "return_type": "Money",
            "is_async": false
          },
          {
            "name": "total_value",
            "line": 314,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "has_sufficient_balance",
            "line": 332,
            "return_type": "bool",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MarketImpactModel",
        "trait": null,
        "file": "domain/value_objects/market_impact.rs",
        "line": 51,
        "methods": [
          {
            "name": "conservative",
            "line": 52,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "aggressive",
            "line": 60,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "almgren_chriss_standard",
            "line": 68,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MarketImpact",
        "trait": null,
        "file": "domain/value_objects/market_impact.rs",
        "line": 83,
        "methods": [
          {
            "name": "new",
            "line": 84,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "calculate_impact_bps",
            "line": 89,
            "return_type": "Result<f64>",
            "is_async": false
          },
          {
            "name": "calculate_slippage",
            "line": 158,
            "return_type": "Result<f64>",
            "is_async": false
          },
          {
            "name": "calculate_execution_price",
            "line": 177,
            "return_type": "Result<f64>",
            "is_async": false
          },
          {
            "name": "optimal_execution_schedule",
            "line": 189,
            "return_type": "Result<Vec<(f64, f64)>>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MarketDepth",
        "trait": null,
        "file": "domain/value_objects/market_impact.rs",
        "line": 255,
        "methods": [
          {
            "name": "liquidity_to_price",
            "line": 256,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "estimate_adv",
            "line": 273,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_walk_impact",
            "line": 283,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Fee",
        "trait": null,
        "file": "domain/value_objects/fee.rs",
        "line": 20,
        "methods": [
          {
            "name": "new",
            "line": 21,
            "return_type": "Result<Self>",
            "is_async": false
          },
          {
            "name": "zero",
            "line": 34,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "amount",
            "line": 43,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "abs_amount",
            "line": 52,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "currency",
            "line": 57,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "is_rebate",
            "line": 62,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "add",
            "line": 67,
            "return_type": "Result<Fee>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "FeeModel",
        "trait": null,
        "file": "domain/value_objects/fee.rs",
        "line": 115,
        "methods": [
          {
            "name": "new",
            "line": 116,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "standard",
            "line": 127,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "zero",
            "line": 169,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "with_min_fee",
            "line": 180,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "with_max_fee",
            "line": 186,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "with_tiers",
            "line": 192,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "get_tier",
            "line": 198,
            "return_type": "(i32, i32)",
            "is_async": false
          },
          {
            "name": "calculate_fee",
            "line": 220,
            "return_type": "Fee",
            "is_async": false
          }
        ]
      },
      {
        "struct": "FillWithFee",
        "trait": null,
        "file": "domain/value_objects/fee.rs",
        "line": 273,
        "methods": [
          {
            "name": "net_proceeds",
            "line": 274,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "effective_price",
            "line": 287,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "TimestampConfig",
        "trait": null,
        "file": "domain/value_objects/timestamp_validator.rs",
        "line": 35,
        "methods": [
          {
            "name": "strict",
            "line": 36,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "lenient",
            "line": 46,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "TimestampValidator",
        "trait": null,
        "file": "domain/value_objects/timestamp_validator.rs",
        "line": 69,
        "methods": [
          {
            "name": "new",
            "line": 70,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "default",
            "line": 81,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "update_server_time",
            "line": 86,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "server_time",
            "line": 92,
            "return_type": "DateTime<Utc>",
            "is_async": false
          },
          {
            "name": "validate_timestamp",
            "line": 98,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "validate_request",
            "line": 167,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "calculate_signature",
            "line": 188,
            "return_type": "String",
            "is_async": false
          },
          {
            "name": "stats",
            "line": 203,
            "return_type": "ValidationStats",
            "is_async": false
          },
          {
            "name": "reset_stats",
            "line": 215,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ValidationStats",
        "trait": null,
        "file": "domain/value_objects/timestamp_validator.rs",
        "line": 237,
        "methods": [
          {
            "name": "total",
            "line": 238,
            "return_type": "u64",
            "is_async": false
          },
          {
            "name": "success_rate",
            "line": 244,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "error_breakdown",
            "line": 254,
            "return_type": "String",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ServerTimeSync",
        "trait": null,
        "file": "domain/value_objects/timestamp_validator.rs",
        "line": 272,
        "methods": [
          {
            "name": "new",
            "line": 273,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "start_sync",
            "line": 278,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "get_time_offset",
            "line": 290,
            "return_type": "Duration",
            "is_async": false
          }
        ]
      },
      {
        "struct": "PlaceOrderCommand",
        "trait": null,
        "file": "application/commands/place_order_command.rs",
        "line": 43,
        "methods": [
          {
            "name": "new",
            "line": 43,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "CancelOrderCommand",
        "trait": null,
        "file": "application/commands/place_order_command.rs",
        "line": 181,
        "methods": [
          {
            "name": "new",
            "line": 181,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "BatchOrderCommand",
        "trait": null,
        "file": "application/commands/place_order_command.rs",
        "line": 260,
        "methods": [
          {
            "name": "new",
            "line": 260,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "IntoResponse",
        "trait": null,
        "file": "src/metrics_server.rs",
        "line": 30,
        "methods": []
      },
      {
        "struct": "IntoResponse",
        "trait": null,
        "file": "src/metrics_server.rs",
        "line": 50,
        "methods": []
      },
      {
        "struct": "CpuAffinity",
        "trait": null,
        "file": "src/runtime_config.rs",
        "line": 17,
        "methods": [
          {
            "name": "auto_detect",
            "line": 18,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "pin_to_core",
            "line": 55,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "pin_main_thread",
            "line": 60,
            "return_type": "bool",
            "is_async": false
          }
        ]
      },
      {
        "struct": "OptimizedRuntime",
        "trait": null,
        "file": "src/runtime_config.rs",
        "line": 80,
        "methods": [
          {
            "name": "new",
            "line": 81,
            "return_type": "std::io::Result<Self>",
            "is_async": false
          },
          {
            "name": "handle",
            "line": 130,
            "return_type": "tokio::runtime::Handle",
            "is_async": false
          },
          {
            "name": "block_on",
            "line": 135,
            "return_type": "F::Output\n    where\n        F: std::future::Future,",
            "is_async": false
          },
          {
            "name": "spawn",
            "line": 143,
            "return_type": "tokio::task::JoinHandle<F::Output>\n    where\n        F: std::future::Future + Send + 'static,\n        F::Output: Send + 'static,",
            "is_async": false
          }
        ]
      },
      {
        "struct": "SystemOptimizations",
        "trait": null,
        "file": "src/runtime_config.rs",
        "line": 156,
        "methods": [
          {
            "name": "apply_all",
            "line": 157,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "set_thread_priorities",
            "line": 164,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "configure_memory_allocator",
            "line": 190,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "set_cpu_governor",
            "line": 196,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "IntoResponse",
        "trait": null,
        "file": "src/observability/server.rs",
        "line": 98,
        "methods": []
      },
      {
        "struct": "IntoResponse",
        "trait": null,
        "file": "src/observability/server.rs",
        "line": 108,
        "methods": []
      },
      {
        "struct": "IntoResponse",
        "trait": null,
        "file": "src/observability/server.rs",
        "line": 113,
        "methods": []
      },
      {
        "struct": "IntoResponse",
        "trait": null,
        "file": "src/observability/server.rs",
        "line": 130,
        "methods": []
      },
      {
        "struct": "IntoResponse",
        "trait": null,
        "file": "src/observability/server.rs",
        "line": 153,
        "methods": []
      },
      {
        "struct": "IntoResponse",
        "trait": null,
        "file": "src/observability/server.rs",
        "line": 175,
        "methods": []
      },
      {
        "struct": "Timer",
        "trait": null,
        "file": "src/observability/metrics.rs",
        "line": 197,
        "methods": [
          {
            "name": "new",
            "line": 197,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "elapsed_micros",
            "line": 202,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "elapsed_nanos",
            "line": 206,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "elapsed_millis",
            "line": 210,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MockTradingService",
        "trait": null,
        "file": "tests/integration_test.rs",
        "line": 493,
        "methods": [
          {
            "name": "new",
            "line": 493,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MockRiskService",
        "trait": null,
        "file": "tests/integration_test.rs",
        "line": 514,
        "methods": [
          {
            "name": "new",
            "line": 514,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MockMarketDataService",
        "trait": null,
        "file": "tests/integration_test.rs",
        "line": 526,
        "methods": [
          {
            "name": "new",
            "line": 526,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ApiMetrics",
        "trait": null,
        "file": "tests/integration_test.rs",
        "line": 536,
        "methods": [
          {
            "name": "new",
            "line": 536,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "PlaceOrderRequest",
        "trait": null,
        "file": "dto/request/order_dto.rs",
        "line": 42,
        "methods": [
          {
            "name": "to_domain",
            "line": 43,
            "return_type": "Result<Order>",
            "is_async": false
          },
          {
            "name": "parse_time_in_force",
            "line": 101,
            "return_type": "Result<TimeInForce>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "OrderResponse",
        "trait": null,
        "file": "dto/response/order_response.rs",
        "line": 34,
        "methods": [
          {
            "name": "from_domain",
            "line": 35,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "OrderSummary",
        "trait": null,
        "file": "dto/response/order_response.rs",
        "line": 72,
        "methods": [
          {
            "name": "from_domain",
            "line": 72,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "PlaceOrderResponse",
        "trait": null,
        "file": "dto/response/order_response.rs",
        "line": 114,
        "methods": [
          {
            "name": "success",
            "line": 114,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "failure",
            "line": 122,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ErrorResponse",
        "trait": null,
        "file": "dto/response/order_response.rs",
        "line": 183,
        "methods": [
          {
            "name": "new",
            "line": 183,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "with_details",
            "line": 190,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "OrderDto",
        "trait": null,
        "file": "dto/database/order_dto.rs",
        "line": 32,
        "methods": [
          {
            "name": "from_row",
            "line": 33,
            "return_type": "Result<Self> \n    where\n        for<'r> String: sqlx::Decode<'r, <R as Row>::Database> + sqlx::Type<<R as Row>::Database>,\n        for<'r> f64: sqlx::Decode<'r, <R as Row>::Database> + sqlx::Type<<R as Row>::Database>,\n        for<'r> Option<f64>: sqlx::Decode<'r, <R as Row>::Database> + sqlx::Type<<R as Row>::Database>,\n        for<'r> Option<String>: sqlx::Decode<'r, <R as Row>::Database> + sqlx::Type<<R as Row>::Database>,\n        for<'r> DateTime<Utc>: sqlx::Decode<'r, <R as Row>::Database> + sqlx::Type<<R as Row>::Database>,\n        for<'r> Option<serde_json::Value>: sqlx::Decode<'r, <R as Row>::Database> + sqlx::Type<<R as Row>::Database>,",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MacroEconomyCorrelationEngine",
        "trait": null,
        "file": "crates/data_intelligence/src/macro_economy_enhanced.rs",
        "line": 215,
        "methods": [
          {
            "name": "new",
            "line": 215,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "update_macro_data",
            "line": 247,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "update_crypto_data",
            "line": 256,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "calculate_correlations",
            "line": 265,
            "return_type": "CorrelationAnalysis",
            "is_async": false
          },
          {
            "name": "detect_macro_regime",
            "line": 303,
            "return_type": "MacroRegimeAnalysis",
            "is_async": false
          },
          {
            "name": "analyze_lead_lag_relationships",
            "line": 342,
            "return_type": "LeadLagAnalysis",
            "is_async": false
          },
          {
            "name": "test_cointegration",
            "line": 391,
            "return_type": "CointegrationAnalysis",
            "is_async": false
          },
          {
            "name": "generate_macro_signals",
            "line": 421,
            "return_type": "MacroTradingSignals",
            "is_async": false
          },
          {
            "name": "calculate_returns",
            "line": 443,
            "return_type": "Vec<f64>\n    where\n        F: Fn(&CryptoDataPoint) -> f64,",
            "is_async": false
          },
          {
            "name": "calculate_returns_macro",
            "line": 461,
            "return_type": "Vec<f64>\n    where\n        F: Fn(&MacroDataPoint) -> f64,",
            "is_async": false
          },
          {
            "name": "extract_levels",
            "line": 480,
            "return_type": "Vec<f64>\n    where\n        F: Fn(&CryptoDataPoint) -> f64,",
            "is_async": false
          },
          {
            "name": "extract_levels_macro",
            "line": 488,
            "return_type": "Vec<f64>\n    where\n        F: Fn(&MacroDataPoint) -> f64,",
            "is_async": false
          },
          {
            "name": "pearson_correlation",
            "line": 495,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "rolling_correlation",
            "line": 516,
            "return_type": "Vec<f64>",
            "is_async": false
          },
          {
            "name": "assess_correlation_stability",
            "line": 531,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "detect_correlation_regime",
            "line": 544,
            "return_type": "String",
            "is_async": false
          },
          {
            "name": "generate_predictive_signals",
            "line": 557,
            "return_type": "Vec<String>",
            "is_async": false
          },
          {
            "name": "calculate_growth_score",
            "line": 565,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_inflation_score",
            "line": 583,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_policy_score",
            "line": 597,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_risk_score",
            "line": 611,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "classify_regime",
            "line": 628,
            "return_type": "MacroRegime",
            "is_async": false
          },
          {
            "name": "calculate_regime_persistence",
            "line": 645,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_regime_confidence",
            "line": 655,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "identify_regime_catalysts",
            "line": 662,
            "return_type": "Vec<String>",
            "is_async": false
          },
          {
            "name": "regime_crypto_implications",
            "line": 680,
            "return_type": "Vec<String>",
            "is_async": false
          },
          {
            "name": "cross_correlation_lag",
            "line": 706,
            "return_type": "i32",
            "is_async": false
          },
          {
            "name": "calculate_lagged_correlation",
            "line": 736,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "granger_causality_test",
            "line": 741,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "find_optimal_prediction_horizon",
            "line": 747,
            "return_type": "usize",
            "is_async": false
          },
          {
            "name": "generate_lead_lag_signals",
            "line": 752,
            "return_type": "Vec<String>",
            "is_async": false
          },
          {
            "name": "engle_granger_test",
            "line": 758,
            "return_type": "Option<CointegrationResult>",
            "is_async": false
          },
          {
            "name": "generate_cointegration_signals",
            "line": 774,
            "return_type": "Vec<String>",
            "is_async": false
          },
          {
            "name": "find_mean_reversion_trades",
            "line": 781,
            "return_type": "Vec<MeanReversionTrade>",
            "is_async": false
          },
          {
            "name": "calculate_signal_strength",
            "line": 794,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "determine_direction",
            "line": 801,
            "return_type": "TradingDirection",
            "is_async": false
          },
          {
            "name": "calculate_confidence",
            "line": 820,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "regime_position_sizing",
            "line": 827,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "suggest_correlation_hedges",
            "line": 836,
            "return_type": "Vec<String>",
            "is_async": false
          },
          {
            "name": "identify_upcoming_catalysts",
            "line": 852,
            "return_type": "Vec<String>",
            "is_async": false
          },
          {
            "name": "generate_risk_warnings",
            "line": 860,
            "return_type": "Vec<String>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "GreeksCalculator",
        "trait": null,
        "file": "crates/data_intelligence/src/options_flow.rs",
        "line": 146,
        "methods": [
          {
            "name": "new",
            "line": 146,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "calculate_greeks",
            "line": 151,
            "return_type": "Greeks",
            "is_async": false
          },
          {
            "name": "calculate_implied_volatility",
            "line": 208,
            "return_type": "Option<f64>",
            "is_async": false
          },
          {
            "name": "black_scholes_price",
            "line": 242,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "GammaExposureCalculator",
        "trait": null,
        "file": "crates/data_intelligence/src/options_flow.rs",
        "line": 288,
        "methods": [
          {
            "name": "new",
            "line": 288,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "calculate_gex",
            "line": 295,
            "return_type": "GammaExposureProfile",
            "is_async": false
          },
          {
            "name": "calculate_max_pain",
            "line": 329,
            "return_type": "Option<Decimal>",
            "is_async": false
          },
          {
            "name": "find_zero_gamma_level",
            "line": 366,
            "return_type": "Option<Decimal>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "VolatilitySurfaceAnalyzer",
        "trait": null,
        "file": "crates/data_intelligence/src/options_flow.rs",
        "line": 403,
        "methods": [
          {
            "name": "new",
            "line": 403,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "build_surface",
            "line": 410,
            "return_type": "VolatilitySurface",
            "is_async": false
          },
          {
            "name": "calculate_skew",
            "line": 434,
            "return_type": "Option<f64>",
            "is_async": false
          },
          {
            "name": "calculate_term_structure",
            "line": 441,
            "return_type": "Vec<(u32, f64)>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "OptionsFlowMonitor",
        "trait": null,
        "file": "crates/data_intelligence/src/options_flow.rs",
        "line": 517,
        "methods": [
          {
            "name": "new",
            "line": 517,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "start_monitoring",
            "line": 545,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "clone_refs",
            "line": 571,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "monitor_deribit",
            "line": 585,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "monitor_cme",
            "line": 599,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "fetch_deribit_options",
            "line": 605,
            "return_type": "Result<Vec<OptionContract>>",
            "is_async": true
          },
          {
            "name": "fetch_deribit_flows",
            "line": 631,
            "return_type": "Result<Vec<OptionsFlow>>",
            "is_async": true
          },
          {
            "name": "parse_deribit_response",
            "line": 637,
            "return_type": "Result<Vec<OptionContract>>",
            "is_async": true
          },
          {
            "name": "calculate_option_greeks",
            "line": 642,
            "return_type": "Result<Vec<OptionContract>>",
            "is_async": false
          },
          {
            "name": "process_options_chain",
            "line": 681,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "process_flows",
            "line": 706,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "update_metrics",
            "line": 725,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "detect_unusual_activity",
            "line": 763,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "determine_sentiment",
            "line": 785,
            "return_type": "FlowSentiment",
            "is_async": false
          },
          {
            "name": "get_metrics",
            "line": 810,
            "return_type": "OptionsMetrics",
            "is_async": false
          },
          {
            "name": "subscribe",
            "line": 815,
            "return_type": "mpsc::UnboundedReceiver<OptionsEvent>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "WebSocketAggregator",
        "trait": null,
        "file": "crates/data_intelligence/src/websocket_aggregator.rs",
        "line": 86,
        "methods": [
          {
            "name": "new",
            "line": 86,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "connect_exchange",
            "line": 97,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "subscribe",
            "line": 103,
            "return_type": "mpsc::UnboundedReceiver<MarketEvent>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MacroEconomicCorrelator",
        "trait": null,
        "file": "crates/data_intelligence/src/macro_correlator.rs",
        "line": 52,
        "methods": [
          {
            "name": "new",
            "line": 52,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "calculate_correlation",
            "line": 60,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "EnhancedPromptTemplates",
        "trait": null,
        "file": "crates/data_intelligence/src/xai_enhanced_prompts.rs",
        "line": 14,
        "methods": [
          {
            "name": "new",
            "line": 14,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "get_prompt",
            "line": 451,
            "return_type": "String",
            "is_async": false
          },
          {
            "name": "select_optimal_prompt",
            "line": 464,
            "return_type": "&str",
            "is_async": false
          }
        ]
      },
      {
        "struct": "PromptOptimizer",
        "trait": null,
        "file": "crates/data_intelligence/src/xai_enhanced_prompts.rs",
        "line": 543,
        "methods": [
          {
            "name": "for_realtime_trading",
            "line": 544,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "for_deep_analysis",
            "line": 554,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "OverfittingPreventionSystem",
        "trait": null,
        "file": "crates/data_intelligence/src/overfitting_prevention.rs",
        "line": 216,
        "methods": [
          {
            "name": "new",
            "line": 216,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "validate_correlation_stability",
            "line": 283,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "walk_forward_validation",
            "line": 340,
            "return_type": "WalkForwardResults\n    where\n        F: Fn(&[f64]) -> Performance,",
            "is_async": false
          },
          {
            "name": "purged_kfold_validation",
            "line": 423,
            "return_type": "PurgedKFoldResults\n    where\n        F: Fn(&[f64], &[f64]) -> Performance,",
            "is_async": false
          },
          {
            "name": "apply_regularization",
            "line": 503,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "select_features",
            "line": 530,
            "return_type": "Vec<usize>",
            "is_async": false
          },
          {
            "name": "test_noise_robustness",
            "line": 585,
            "return_type": "RobustnessResults",
            "is_async": false
          },
          {
            "name": "monte_carlo_validation",
            "line": 612,
            "return_type": "MonteCarloResults\n    where\n        F: Fn(&[f64]) -> Performance,",
            "is_async": false
          },
          {
            "name": "calculate_std",
            "line": 683,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "count_sign_changes",
            "line": 696,
            "return_type": "usize",
            "is_async": false
          },
          {
            "name": "autocorrelation",
            "line": 709,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "correlation_recommendation",
            "line": 734,
            "return_type": "String",
            "is_async": false
          },
          {
            "name": "calculate_overall_stability",
            "line": 746,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "generate_correlation_warnings",
            "line": 751,
            "return_type": "Vec<String>",
            "is_async": false
          },
          {
            "name": "detect_overfitting",
            "line": 758,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "calculate_confidence",
            "line": 796,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_correlation_matrix",
            "line": 803,
            "return_type": "DMatrix<f64>",
            "is_async": false
          },
          {
            "name": "pearson_correlation",
            "line": 825,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_vif",
            "line": 846,
            "return_type": "Vec<f64>",
            "is_async": false
          },
          {
            "name": "add_noise",
            "line": 862,
            "return_type": "Vec<f64>",
            "is_async": false
          },
          {
            "name": "evaluate_performance",
            "line": 870,
            "return_type": "Performance",
            "is_async": false
          },
          {
            "name": "find_max_acceptable_noise",
            "line": 882,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "NewsSentimentProcessor",
        "trait": null,
        "file": "crates/data_intelligence/src/news_sentiment.rs",
        "line": 60,
        "methods": [
          {
            "name": "new",
            "line": 60,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "analyze_article",
            "line": 68,
            "return_type": "Result<SentimentScore>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "DexProtocol",
        "trait": null,
        "file": "crates/data_intelligence/src/dex_analytics.rs",
        "line": 77,
        "methods": [
          {
            "name": "subgraph_id",
            "line": 77,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "chain",
            "line": 90,
            "return_type": "&str",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ImpermanentLossCalculator",
        "trait": null,
        "file": "crates/data_intelligence/src/dex_analytics.rs",
        "line": 195,
        "methods": [
          {
            "name": "new",
            "line": 195,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "calculate_il",
            "line": 202,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_net_il",
            "line": 214,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ArbitrageDetector",
        "trait": null,
        "file": "crates/data_intelligence/src/dex_analytics.rs",
        "line": 230,
        "methods": [
          {
            "name": "new",
            "line": 230,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "detect_arbitrage",
            "line": 238,
            "return_type": "Vec<ArbitrageOpportunity>",
            "is_async": false
          },
          {
            "name": "update_price",
            "line": 288,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "DexAnalytics",
        "trait": null,
        "file": "crates/data_intelligence/src/dex_analytics.rs",
        "line": 348,
        "methods": [
          {
            "name": "new",
            "line": 348,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "start_monitoring",
            "line": 375,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "clone_refs",
            "line": 402,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "monitor_protocol",
            "line": 415,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "fetch_pools",
            "line": 437,
            "return_type": "Result<Vec<DexPool>>",
            "is_async": true
          },
          {
            "name": "fetch_swaps",
            "line": 445,
            "return_type": "Result<Vec<DexSwap>>",
            "is_async": true
          },
          {
            "name": "build_pools_query",
            "line": 453,
            "return_type": "String",
            "is_async": false
          },
          {
            "name": "build_swaps_query",
            "line": 525,
            "return_type": "String",
            "is_async": false
          },
          {
            "name": "execute_graphql_query",
            "line": 596,
            "return_type": "Result<serde_json::Value>",
            "is_async": true
          },
          {
            "name": "parse_pools_response",
            "line": 629,
            "return_type": "Result<Vec<DexPool>>",
            "is_async": false
          },
          {
            "name": "parse_swaps_response",
            "line": 641,
            "return_type": "Result<Vec<DexSwap>>",
            "is_async": false
          },
          {
            "name": "process_pools",
            "line": 653,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "process_swaps",
            "line": 682,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "detect_cross_dex_arbitrage",
            "line": 704,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "detect_mev_activity",
            "line": 724,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_metrics",
            "line": 740,
            "return_type": "DexMetrics",
            "is_async": false
          },
          {
            "name": "subscribe",
            "line": 745,
            "return_type": "mpsc::UnboundedReceiver<DexEvent>",
            "is_async": false
          },
          {
            "name": "find_optimal_route",
            "line": 751,
            "return_type": "Option<SwapRoute>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Stablecoin",
        "trait": null,
        "file": "crates/data_intelligence/src/stablecoin_tracker.rs",
        "line": 84,
        "methods": [
          {
            "name": "name",
            "line": 84,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "treasury_api",
            "line": 96,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "issuer",
            "line": 106,
            "return_type": "&str",
            "is_async": false
          }
        ]
      },
      {
        "struct": "LiquidityAnalyzer",
        "trait": null,
        "file": "crates/data_intelligence/src/stablecoin_tracker.rs",
        "line": 195,
        "methods": [
          {
            "name": "new",
            "line": 195,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "analyze_liquidity",
            "line": 203,
            "return_type": "LiquidityAnalysis",
            "is_async": false
          },
          {
            "name": "calculate_flows",
            "line": 258,
            "return_type": "(Decimal, Decimal)",
            "is_async": false
          },
          {
            "name": "calculate_crisis_probability",
            "line": 279,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "determine_market_condition",
            "line": 326,
            "return_type": "MarketCondition",
            "is_async": false
          }
        ]
      },
      {
        "struct": "DemandForecaster",
        "trait": null,
        "file": "crates/data_intelligence/src/stablecoin_tracker.rs",
        "line": 376,
        "methods": [
          {
            "name": "new",
            "line": 376,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "forecast_demand",
            "line": 384,
            "return_type": "DemandForecast",
            "is_async": false
          },
          {
            "name": "calculate_trend",
            "line": 425,
            "return_type": "DemandTrend",
            "is_async": false
          },
          {
            "name": "calculate_average_flow",
            "line": 455,
            "return_type": "Decimal",
            "is_async": false
          },
          {
            "name": "detect_seasonality",
            "line": 471,
            "return_type": "SeasonalityPattern",
            "is_async": false
          },
          {
            "name": "calculate_volatility",
            "line": 477,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "generate_forecast",
            "line": 499,
            "return_type": "Vec<ForecastPoint>",
            "is_async": false
          },
          {
            "name": "calculate_confidence",
            "line": 529,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "StablecoinTracker",
        "trait": null,
        "file": "crates/data_intelligence/src/stablecoin_tracker.rs",
        "line": 614,
        "methods": [
          {
            "name": "new",
            "line": 614,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "start_monitoring",
            "line": 641,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "clone_refs",
            "line": 657,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "get_tracked_stablecoins",
            "line": 670,
            "return_type": "Vec<Stablecoin>",
            "is_async": false
          },
          {
            "name": "monitor_stablecoin",
            "line": 683,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "fetch_treasury_data",
            "line": 729,
            "return_type": "Result<TreasuryData>",
            "is_async": true
          },
          {
            "name": "fetch_mint_burn_events",
            "line": 750,
            "return_type": "Result<Vec<MintBurnEvent>>",
            "is_async": true
          },
          {
            "name": "process_events",
            "line": 757,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "get_metrics",
            "line": 793,
            "return_type": "StablecoinMetrics",
            "is_async": false
          },
          {
            "name": "subscribe",
            "line": 798,
            "return_type": "mpsc::UnboundedReceiver<StablecoinEvent>",
            "is_async": false
          },
          {
            "name": "get_liquidity_analysis",
            "line": 804,
            "return_type": "Option<LiquidityAnalysis>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "OnChainAnalytics",
        "trait": null,
        "file": "crates/data_intelligence/src/onchain_analytics.rs",
        "line": 57,
        "methods": [
          {
            "name": "new",
            "line": 57,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "get_metrics",
            "line": 65,
            "return_type": "OnChainMetrics",
            "is_async": false
          }
        ]
      },
      {
        "struct": "DataIntelligenceSystem",
        "trait": null,
        "file": "crates/data_intelligence/src/lib.rs",
        "line": 86,
        "methods": [
          {
            "name": "new",
            "line": 86,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "process_unified_stream",
            "line": 158,
            "return_type": "Result<UnifiedDataStream>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "SimdProcessor",
        "trait": null,
        "file": "crates/data_intelligence/src/simd_processors.rs",
        "line": 28,
        "methods": [
          {
            "name": "new",
            "line": 28,
            "return_type": "Result<Self>",
            "is_async": false
          },
          {
            "name": "moving_average_simd",
            "line": 56,
            "return_type": "Vec<f32>",
            "is_async": false
          },
          {
            "name": "moving_average_avx512",
            "line": 77,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "moving_average_avx2",
            "line": 109,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "moving_average_sse4",
            "line": 138,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "hsum_ps_avx512",
            "line": 167,
            "return_type": "f32",
            "is_async": false
          },
          {
            "name": "hsum_ps_avx2",
            "line": 177,
            "return_type": "f32",
            "is_async": false
          },
          {
            "name": "hsum_ps_sse",
            "line": 187,
            "return_type": "f32",
            "is_async": false
          },
          {
            "name": "correlation_matrix_simd",
            "line": 197,
            "return_type": "Vec<Vec<f32>>",
            "is_async": false
          },
          {
            "name": "mean_simd",
            "line": 226,
            "return_type": "f32",
            "is_async": false
          },
          {
            "name": "std_simd",
            "line": 244,
            "return_type": "f32",
            "is_async": false
          },
          {
            "name": "correlation_simd",
            "line": 262,
            "return_type": "f32",
            "is_async": false
          },
          {
            "name": "sum_avx512",
            "line": 280,
            "return_type": "f32",
            "is_async": false
          },
          {
            "name": "sum_avx2",
            "line": 301,
            "return_type": "f32",
            "is_async": false
          },
          {
            "name": "sum_sse4",
            "line": 322,
            "return_type": "f32",
            "is_async": false
          },
          {
            "name": "variance_avx512",
            "line": 343,
            "return_type": "f32",
            "is_async": false
          },
          {
            "name": "variance_avx2",
            "line": 368,
            "return_type": "f32",
            "is_async": false
          },
          {
            "name": "variance_sse4",
            "line": 393,
            "return_type": "f32",
            "is_async": false
          },
          {
            "name": "covariance_avx512",
            "line": 418,
            "return_type": "f32",
            "is_async": false
          },
          {
            "name": "covariance_avx2",
            "line": 445,
            "return_type": "f32",
            "is_async": false
          },
          {
            "name": "covariance_sse4",
            "line": 472,
            "return_type": "f32",
            "is_async": false
          },
          {
            "name": "metrics",
            "line": 498,
            "return_type": "SimdMetrics",
            "is_async": false
          }
        ]
      },
      {
        "struct": "DataQuantizer",
        "trait": null,
        "file": "crates/data_intelligence/src/data_quantizer.rs",
        "line": 52,
        "methods": [
          {
            "name": "new",
            "line": 52,
            "return_type": "Result<Self>",
            "is_async": false
          },
          {
            "name": "quantize",
            "line": 60,
            "return_type": "Result<u8>",
            "is_async": false
          },
          {
            "name": "fit",
            "line": 76,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "compute_uniform_bins",
            "line": 86,
            "return_type": "Vec<f64>",
            "is_async": false
          },
          {
            "name": "compute_quantile_bins",
            "line": 100,
            "return_type": "Vec<f64>",
            "is_async": false
          },
          {
            "name": "compute_kmeans_bins",
            "line": 112,
            "return_type": "Vec<f64>",
            "is_async": false
          },
          {
            "name": "compute_adaptive_bins",
            "line": 117,
            "return_type": "Vec<f64>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ZeroCopyPipeline",
        "trait": null,
        "file": "crates/data_intelligence/src/zero_copy_pipeline.rs",
        "line": 95,
        "methods": [
          {
            "name": "new",
            "line": 95,
            "return_type": "Result<Self>",
            "is_async": false
          },
          {
            "name": "push",
            "line": 126,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "pop",
            "line": 166,
            "return_type": "Option<RawEvent>",
            "is_async": false
          },
          {
            "name": "process_batch",
            "line": 196,
            "return_type": "usize\n        where F: FnMut(&[RawEvent])",
            "is_async": false
          },
          {
            "name": "allocate_mmap_region",
            "line": 218,
            "return_type": "Result<usize>",
            "is_async": false
          },
          {
            "name": "write_to_mmap",
            "line": 249,
            "return_type": "Result<u32>",
            "is_async": false
          },
          {
            "name": "read_from_mmap",
            "line": 273,
            "return_type": "Result<&[u8]>",
            "is_async": false
          },
          {
            "name": "metrics",
            "line": 295,
            "return_type": "PipelineMetrics",
            "is_async": false
          },
          {
            "name": "buffer_utilization",
            "line": 302,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MultiTierCache",
        "trait": null,
        "file": "crates/data_intelligence/src/cache_layer.rs",
        "line": 145,
        "methods": [
          {
            "name": "new",
            "line": 145,
            "return_type": "Result<Self>",
            "is_async": false
          },
          {
            "name": "get",
            "line": 211,
            "return_type": "Option<Vec<u8>>",
            "is_async": true
          },
          {
            "name": "set",
            "line": 242,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "invalidate",
            "line": 286,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "get_from_hot_cache",
            "line": 303,
            "return_type": "Option<CachedItem>",
            "is_async": false
          },
          {
            "name": "get_from_warm_cache",
            "line": 313,
            "return_type": "Option<CachedItem>",
            "is_async": true
          },
          {
            "name": "get_from_cold_cache",
            "line": 326,
            "return_type": "Option<CachedItem>",
            "is_async": true
          },
          {
            "name": "set_in_hot_cache",
            "line": 350,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "set_in_warm_cache",
            "line": 368,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "set_in_cold_cache",
            "line": 381,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "evict_lru_from_hot_cache",
            "line": 406,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "promote_to_hot",
            "line": 430,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "promote_to_warm",
            "line": 435,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "compress_if_needed",
            "line": 440,
            "return_type": "(Vec<u8>, bool, CompressionType)",
            "is_async": false
          },
          {
            "name": "decompress_if_needed",
            "line": 467,
            "return_type": "Vec<u8>",
            "is_async": false
          },
          {
            "name": "get_default_ttl",
            "line": 486,
            "return_type": "i64",
            "is_async": false
          },
          {
            "name": "update_metrics_hot",
            "line": 495,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "update_metrics_warm",
            "line": 505,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "update_metrics_cold",
            "line": 515,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "update_metrics_miss",
            "line": 525,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "metrics",
            "line": 531,
            "return_type": "CacheMetrics",
            "is_async": false
          },
          {
            "name": "hit_rate",
            "line": 536,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "WhaleBehaviorPredictor",
        "trait": null,
        "file": "crates/data_intelligence/src/whale_alert.rs",
        "line": 173,
        "methods": [
          {
            "name": "new",
            "line": 173,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "analyze_transaction",
            "line": 195,
            "return_type": "WhaleBehaviorPattern",
            "is_async": false
          },
          {
            "name": "detect_pattern",
            "line": 235,
            "return_type": "WhalePatternType",
            "is_async": false
          },
          {
            "name": "is_rotation_pattern",
            "line": 284,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "is_liquidation_pattern",
            "line": 301,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "is_arbitrage_pattern",
            "line": 329,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "calculate_impact",
            "line": 348,
            "return_type": "(f64, f64, f64)",
            "is_async": false
          },
          {
            "name": "detect_cascade_risk",
            "line": 368,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "WhaleAlertIntegration",
        "trait": null,
        "file": "crates/data_intelligence/src/whale_alert.rs",
        "line": 418,
        "methods": [
          {
            "name": "new",
            "line": 418,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "start_monitoring",
            "line": 442,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "poll_rest_api",
            "line": 452,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "connect_websocket",
            "line": 474,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "fetch_recent_transactions",
            "line": 482,
            "return_type": "Result<Vec<WhaleTransaction>>",
            "is_async": true
          },
          {
            "name": "is_duplicate",
            "line": 517,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "process_transaction",
            "line": 535,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "update_metrics",
            "line": 571,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_metrics",
            "line": 583,
            "return_type": "WhaleAlertMetrics",
            "is_async": false
          },
          {
            "name": "subscribe",
            "line": 588,
            "return_type": "mpsc::UnboundedReceiver<WhaleEvent>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "XAIIntegration",
        "trait": null,
        "file": "crates/data_intelligence/src/xai_integration.rs",
        "line": 73,
        "methods": [
          {
            "name": "new",
            "line": 73,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "get_market_sentiment",
            "line": 182,
            "return_type": "Result<XAISentiment>",
            "is_async": true
          },
          {
            "name": "analyze_event_impact",
            "line": 222,
            "return_type": "Result<EventImpactAnalysis>",
            "is_async": true
          },
          {
            "name": "augment_technical_analysis",
            "line": 249,
            "return_type": "Result<TechnicalAugmentation>",
            "is_async": true
          },
          {
            "name": "analyze_macro_correlations",
            "line": 269,
            "return_type": "Result<MacroCorrelationAnalysis>",
            "is_async": true
          },
          {
            "name": "call_grok_api",
            "line": 293,
            "return_type": "Result<String>",
            "is_async": true
          },
          {
            "name": "parse_sentiment_response",
            "line": 331,
            "return_type": "Result<XAISentiment>",
            "is_async": false
          },
          {
            "name": "parse_event_response",
            "line": 360,
            "return_type": "Result<EventImpactAnalysis>",
            "is_async": false
          },
          {
            "name": "parse_technical_response",
            "line": 372,
            "return_type": "Result<TechnicalAugmentation>",
            "is_async": false
          },
          {
            "name": "parse_macro_response",
            "line": 384,
            "return_type": "Result<MacroCorrelationAnalysis>",
            "is_async": false
          },
          {
            "name": "extract_score",
            "line": 395,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "extract_topics",
            "line": 406,
            "return_type": "Vec<String>",
            "is_async": false
          },
          {
            "name": "extract_regime",
            "line": 412,
            "return_type": "String",
            "is_async": false
          },
          {
            "name": "get_from_cache",
            "line": 423,
            "return_type": "Option<XAISentiment>",
            "is_async": false
          },
          {
            "name": "get_event_from_cache",
            "line": 438,
            "return_type": "Option<EventImpactAnalysis>",
            "is_async": false
          },
          {
            "name": "cache_sentiment",
            "line": 444,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "wait_for_rate_limit",
            "line": 460,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "cache_metrics",
            "line": 482,
            "return_type": "CacheMetrics",
            "is_async": false
          }
        ]
      },
      {
        "struct": "HistoricalValidator",
        "trait": null,
        "file": "crates/data_intelligence/src/historical_validator.rs",
        "line": 51,
        "methods": [
          {
            "name": "new",
            "line": 51,
            "return_type": "Result<Self>",
            "is_async": false
          },
          {
            "name": "validate",
            "line": 59,
            "return_type": "Result<bool>",
            "is_async": false
          },
          {
            "name": "calculate_z_score",
            "line": 77,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ZeroCopyParser",
        "trait": null,
        "file": "crates/websocket/src/zero_copy.rs",
        "line": 48,
        "methods": [
          {
            "name": "new",
            "line": 48,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "parse_frame",
            "line": 56,
            "return_type": "Result<Option<Frame<'a>>, ParseError>",
            "is_async": false
          },
          {
            "name": "parse_payload_length",
            "line": 117,
            "return_type": "Result<usize, ParseError>",
            "is_async": false
          },
          {
            "name": "reset",
            "line": 140,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "OpCode",
        "trait": null,
        "file": "crates/websocket/src/zero_copy.rs",
        "line": 146,
        "methods": [
          {
            "name": "from_byte",
            "line": 146,
            "return_type": "Result<Self, ParseError>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "JsonMessageParser",
        "trait": null,
        "file": "crates/websocket/src/zero_copy.rs",
        "line": 165,
        "methods": [
          {
            "name": "new",
            "line": 165,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "parse_json",
            "line": 172,
            "return_type": "Result<Option<T>, ParseError>\n    where\n        T: DeserializeOwned,",
            "is_async": false
          }
        ]
      },
      {
        "struct": "OrderBookParser",
        "trait": null,
        "file": "crates/websocket/src/zero_copy.rs",
        "line": 199,
        "methods": [
          {
            "name": "new",
            "line": 199,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "parse_update",
            "line": 206,
            "return_type": "Result<Option<OrderBookUpdate<'a>>, ParseError>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "WebSocketClient",
        "trait": null,
        "file": "crates/websocket/src/client.rs",
        "line": 96,
        "methods": [
          {
            "name": "new",
            "line": 96,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "connect",
            "line": 114,
            "return_type": "Result<(), WebSocketError>",
            "is_async": true
          },
          {
            "name": "start_message_handler",
            "line": 144,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "send",
            "line": 220,
            "return_type": "Result<(), WebSocketError>",
            "is_async": true
          },
          {
            "name": "disconnect",
            "line": 229,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "is_connected",
            "line": 234,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "stats",
            "line": 238,
            "return_type": "WebSocketStats",
            "is_async": false
          }
        ]
      },
      {
        "struct": "WebSocketManager",
        "trait": null,
        "file": "crates/websocket/src/manager.rs",
        "line": 33,
        "methods": [
          {
            "name": "new",
            "line": 33,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "add_connection",
            "line": 43,
            "return_type": "Result<(), Box<dyn std::error::Error>>",
            "is_async": true
          },
          {
            "name": "remove_connection",
            "line": 61,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "get_connection",
            "line": 69,
            "return_type": "Option<Arc<WebSocketClient>>",
            "is_async": false
          },
          {
            "name": "send_to",
            "line": 74,
            "return_type": "Result<(), Box<dyn std::error::Error>>",
            "is_async": true
          },
          {
            "name": "broadcast",
            "line": 88,
            "return_type": "Vec<(String, Result<(), String>)>",
            "is_async": true
          },
          {
            "name": "get_all_stats",
            "line": 107,
            "return_type": "HashMap<String, WebSocketStats>",
            "is_async": false
          },
          {
            "name": "start_monitoring",
            "line": 118,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "stop_monitoring",
            "line": 149,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MessageRouter",
        "trait": null,
        "file": "crates/websocket/src/manager.rs",
        "line": 161,
        "methods": [
          {
            "name": "new",
            "line": 161,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "register_handler",
            "line": 171,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "route",
            "line": 183,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "subscribe",
            "line": 198,
            "return_type": "broadcast::Receiver<Message>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "StatsCollector",
        "trait": null,
        "file": "crates/websocket/src/manager.rs",
        "line": 212,
        "methods": [
          {
            "name": "new",
            "line": 212,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "update",
            "line": 219,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_summary",
            "line": 238,
            "return_type": "StatsSummary",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ConnectionPool",
        "trait": null,
        "file": "crates/websocket/src/manager.rs",
        "line": 273,
        "methods": [
          {
            "name": "new",
            "line": 273,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "add",
            "line": 279,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_next",
            "line": 283,
            "return_type": "Option<Arc<WebSocketClient>>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ExponentialBackoff",
        "trait": null,
        "file": "crates/websocket/src/reconnect.rs",
        "line": 41,
        "methods": [
          {
            "name": "new",
            "line": 41,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "calculate_delay",
            "line": 53,
            "return_type": "Duration",
            "is_async": false
          }
        ]
      },
      {
        "struct": "FixedInterval",
        "trait": null,
        "file": "crates/websocket/src/reconnect.rs",
        "line": 98,
        "methods": [
          {
            "name": "new",
            "line": 98,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "LinearBackoff",
        "trait": null,
        "file": "crates/websocket/src/reconnect.rs",
        "line": 129,
        "methods": [
          {
            "name": "new",
            "line": 129,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ReliableWebSocketConfig",
        "trait": null,
        "file": "crates/websocket/src/reliable_client.rs",
        "line": 114,
        "methods": [
          {
            "name": "for_market_data",
            "line": 115,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "for_orders",
            "line": 130,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ReliableWebSocketClient",
        "trait": null,
        "file": "crates/websocket/src/reliable_client.rs",
        "line": 189,
        "methods": [
          {
            "name": "new",
            "line": 189,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "start",
            "line": 232,
            "return_type": "Result<(), ReliableWebSocketError>",
            "is_async": true
          },
          {
            "name": "connect_with_retry",
            "line": 320,
            "return_type": "Result<WebSocketStream<MaybeTlsStream<TcpStream>>, ReliableWebSocketError>",
            "is_async": true
          },
          {
            "name": "handle_connection",
            "line": 340,
            "return_type": "Result<(), ReliableWebSocketError>",
            "is_async": true
          },
          {
            "name": "calculate_reconnect_delay",
            "line": 498,
            "return_type": "Duration",
            "is_async": false
          },
          {
            "name": "flush_pending_messages",
            "line": 515,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "send",
            "line": 523,
            "return_type": "Result<(), ReliableWebSocketError>",
            "is_async": true
          },
          {
            "name": "subscribe",
            "line": 551,
            "return_type": "broadcast::Receiver<Message>",
            "is_async": false
          },
          {
            "name": "stop",
            "line": 556,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "state",
            "line": 566,
            "return_type": "ConnectionState",
            "is_async": false
          },
          {
            "name": "stats",
            "line": 570,
            "return_type": "WebSocketStats",
            "is_async": false
          },
          {
            "name": "clone_inner",
            "line": 586,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Message",
        "trait": null,
        "file": "crates/websocket/src/message.rs",
        "line": 202,
        "methods": [
          {
            "name": "message_type",
            "line": 202,
            "return_type": "MessageType",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ExchangeLimits",
        "trait": null,
        "file": "crates/exchanges/src/rate_limiter.rs",
        "line": 44,
        "methods": [
          {
            "name": "binance",
            "line": 44,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "kraken",
            "line": 53,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "coinbase",
            "line": 64,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "RateLimiter",
        "trait": null,
        "file": "crates/exchanges/src/rate_limiter.rs",
        "line": 103,
        "methods": [
          {
            "name": "new",
            "line": 103,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "try_acquire",
            "line": 123,
            "return_type": "Result<(), RateLimitError>",
            "is_async": false
          },
          {
            "name": "try_acquire_burst",
            "line": 151,
            "return_type": "Result<(), RateLimitError>",
            "is_async": false
          },
          {
            "name": "refill_tokens",
            "line": 190,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "acquire",
            "line": 223,
            "return_type": "Result<(), RateLimitError>",
            "is_async": true
          },
          {
            "name": "stats",
            "line": 245,
            "return_type": "RateLimiterStats",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ExchangeRateLimitManager",
        "trait": null,
        "file": "crates/exchanges/src/rate_limiter.rs",
        "line": 274,
        "methods": [
          {
            "name": "new",
            "line": 274,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "get_limiter",
            "line": 304,
            "return_type": "Option<Arc<RateLimiter>>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MasterOrchestrationSystem",
        "trait": null,
        "file": "crates/risk/src/master_orchestration_system.rs",
        "line": 244,
        "methods": [
          {
            "name": "new",
            "line": 245,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "start",
            "line": 370,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "make_integrated_decision",
            "line": 384,
            "return_type": "Result<IntegratedSignal>",
            "is_async": true
          },
          {
            "name": "check_system_health",
            "line": 459,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "detect_current_regime",
            "line": 476,
            "return_type": "Result<MarketRegime>",
            "is_async": true
          },
          {
            "name": "get_regime_optimized_parameters",
            "line": 499,
            "return_type": "Result<HashMap<String, f64>>",
            "is_async": true
          },
          {
            "name": "apply_integrated_risk_management",
            "line": 550,
            "return_type": "Result<TradingSignal>",
            "is_async": true
          },
          {
            "name": "select_optimal_execution",
            "line": 587,
            "return_type": "Result<ExecutionAlgorithm>",
            "is_async": true
          },
          {
            "name": "estimate_execution_costs",
            "line": 619,
            "return_type": "Result<ExecutionCosts>",
            "is_async": true
          },
          {
            "name": "final_profitability_check",
            "line": 652,
            "return_type": "Result<TradingSignal>",
            "is_async": true
          },
          {
            "name": "record_decision_for_learning",
            "line": 677,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "start_optimization_loop",
            "line": 703,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "should_optimize",
            "line": 731,
            "return_type": "bool",
            "is_async": true
          },
          {
            "name": "run_optimization_cycle",
            "line": 751,
            "return_type": "Result<HashMap<String, f64>>",
            "is_async": true
          },
          {
            "name": "start_health_monitoring",
            "line": 786,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "start_regime_detection",
            "line": 792,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "start_feedback_processing",
            "line": 798,
            "return_type": "Result<()>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "MLFeedbackSystem",
        "trait": null,
        "file": "crates/risk/src/ml_method_wrappers.rs",
        "line": 13,
        "methods": [
          {
            "name": "calibrate_probability",
            "line": 14,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "update_prediction_history",
            "line": 26,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "SHAPCalculator",
        "trait": null,
        "file": "crates/risk/src/ml_method_wrappers.rs",
        "line": 35,
        "methods": [
          {
            "name": "calculate_shap_values",
            "line": 36,
            "return_type": "Vec<f64>",
            "is_async": false
          },
          {
            "name": "get_feature_names",
            "line": 55,
            "return_type": "Vec<String>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MarketAnalytics",
        "trait": null,
        "file": "crates/risk/src/ml_method_wrappers.rs",
        "line": 64,
        "methods": [
          {
            "name": "get_stochastic",
            "line": 65,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "get_obv",
            "line": 73,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "get_obv_ma",
            "line": 80,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "GradientBoostingModel",
        "trait": null,
        "file": "crates/risk/src/xgboost_model.rs",
        "line": 71,
        "methods": [
          {
            "name": "new",
            "line": 72,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "set_objective",
            "line": 97,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "objective",
            "line": 102,
            "return_type": "&ObjectiveFunction",
            "is_async": false
          },
          {
            "name": "feature_importance",
            "line": 107,
            "return_type": "&HashMap<String, f64>",
            "is_async": false
          },
          {
            "name": "feature_names",
            "line": 112,
            "return_type": "&[String]",
            "is_async": false
          },
          {
            "name": "train",
            "line": 117,
            "return_type": "TrainingResult",
            "is_async": false
          },
          {
            "name": "build_tree",
            "line": 240,
            "return_type": "DecisionTree",
            "is_async": false
          },
          {
            "name": "build_tree_recursive",
            "line": 265,
            "return_type": "TreeNode",
            "is_async": false
          },
          {
            "name": "find_best_split",
            "line": 351,
            "return_type": "BestSplit",
            "is_async": false
          },
          {
            "name": "calculate_node_loss",
            "line": 423,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "split_samples",
            "line": 428,
            "return_type": "(Vec<usize>, Vec<usize>)",
            "is_async": false
          },
          {
            "name": "compute_gradients_hessians",
            "line": 450,
            "return_type": "(Array1<f64>, Array1<f64>)",
            "is_async": false
          },
          {
            "name": "calculate_loss",
            "line": 510,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "compute_base_prediction",
            "line": 550,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "subsample_rows",
            "line": 563,
            "return_type": "Vec<usize>",
            "is_async": false
          },
          {
            "name": "subsample_features",
            "line": 579,
            "return_type": "Vec<usize>",
            "is_async": false
          },
          {
            "name": "update_feature_importance",
            "line": 595,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "update_importance_recursive",
            "line": 597,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "predict",
            "line": 617,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "predict_batch",
            "line": 636,
            "return_type": "Array1<f64>",
            "is_async": false
          },
          {
            "name": "get_feature_importance",
            "line": 648,
            "return_type": "Vec<(String, f64)>",
            "is_async": false
          },
          {
            "name": "to_bytes",
            "line": 659,
            "return_type": "Vec<u8>",
            "is_async": false
          },
          {
            "name": "from_bytes",
            "line": 664,
            "return_type": "Result<Self, Box<dyn std::error::Error>>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "DecisionTree",
        "trait": null,
        "file": "crates/risk/src/xgboost_model.rs",
        "line": 685,
        "methods": [
          {
            "name": "predict",
            "line": 686,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "predict_recursive",
            "line": 688,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ExperienceBuffer",
        "trait": null,
        "file": "crates/risk/src/ml_feedback.rs",
        "line": 85,
        "methods": [
          {
            "name": "new",
            "line": 85,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "add",
            "line": 96,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "sample_batch",
            "line": 110,
            "return_type": "Vec<(Experience, f64)>",
            "is_async": false
          },
          {
            "name": "update_priority",
            "line": 138,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "FeatureImportance",
        "trait": null,
        "file": "crates/risk/src/ml_feedback.rs",
        "line": 162,
        "methods": [
          {
            "name": "new",
            "line": 162,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "update_gradient_importance",
            "line": 172,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "update_correlation",
            "line": 178,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "top_features",
            "line": 185,
            "return_type": "Vec<(String, f64)>",
            "is_async": false
          },
          {
            "name": "update_shap_importance",
            "line": 195,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "calculate_stability_scores",
            "line": 209,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "StrategyPerformance",
        "trait": null,
        "file": "crates/risk/src/ml_feedback.rs",
        "line": 276,
        "methods": [
          {
            "name": "new",
            "line": 276,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "update",
            "line": 285,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "sample_beta_static",
            "line": 319,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "best_strategy",
            "line": 326,
            "return_type": "Option<String>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "PredictionTracker",
        "trait": null,
        "file": "crates/risk/src/ml_feedback.rs",
        "line": 375,
        "methods": [
          {
            "name": "new",
            "line": 375,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "add_prediction",
            "line": 396,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "calibration_score",
            "line": 440,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "avg_brier_score",
            "line": 461,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "FeatureNormalizer",
        "trait": null,
        "file": "crates/risk/src/ml_feedback.rs",
        "line": 510,
        "methods": [
          {
            "name": "new",
            "line": 510,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "update_statistics",
            "line": 519,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "normalize",
            "line": 542,
            "return_type": "Vec<f64>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "TrainingBuffer",
        "trait": null,
        "file": "crates/risk/src/ml_feedback.rs",
        "line": 584,
        "methods": [
          {
            "name": "new",
            "line": 584,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "add",
            "line": 591,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "to_arrays",
            "line": 604,
            "return_type": "(Array2<f64>, Array1<f64>)",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ModelVersionManager",
        "trait": null,
        "file": "crates/risk/src/ml_feedback.rs",
        "line": 634,
        "methods": [
          {
            "name": "new",
            "line": 634,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "add_version",
            "line": 641,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_active",
            "line": 648,
            "return_type": "Option<Arc<GradientBoostingModel>>",
            "is_async": false
          },
          {
            "name": "promote_challenger",
            "line": 652,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ModelPerformanceTracker",
        "trait": null,
        "file": "crates/risk/src/ml_feedback.rs",
        "line": 672,
        "methods": [
          {
            "name": "new",
            "line": 672,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "add_prediction",
            "line": 678,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "calculate_metrics",
            "line": 691,
            "return_type": "MLMetrics",
            "is_async": false
          }
        ]
      },
      {
        "struct": "OnlineLearner",
        "trait": null,
        "file": "crates/risk/src/ml_feedback.rs",
        "line": 732,
        "methods": [
          {
            "name": "new",
            "line": 732,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "update",
            "line": 757,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "retrain_model",
            "line": 777,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "predict",
            "line": 823,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ContextualBandit",
        "trait": null,
        "file": "crates/risk/src/ml_feedback.rs",
        "line": 849,
        "methods": [
          {
            "name": "new",
            "line": 849,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "select_action",
            "line": 857,
            "return_type": "SignalAction",
            "is_async": false
          },
          {
            "name": "update",
            "line": 890,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "sample_beta_static",
            "line": 902,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MLFeedbackSystem",
        "trait": null,
        "file": "crates/risk/src/ml_feedback.rs",
        "line": 917,
        "methods": [
          {
            "name": "new",
            "line": 917,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "process_outcome",
            "line": 930,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "predict",
            "line": 999,
            "return_type": "(SignalAction, f64)",
            "is_async": false
          },
          {
            "name": "train_from_buffer",
            "line": 1021,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_feature_importance",
            "line": 1052,
            "return_type": "Vec<(String, f64)>",
            "is_async": false
          },
          {
            "name": "recommend_action",
            "line": 1059,
            "return_type": "(SignalAction, f64)",
            "is_async": false
          },
          {
            "name": "get_metrics",
            "line": 1072,
            "return_type": "MLMetrics",
            "is_async": false
          },
          {
            "name": "update_feature_importance",
            "line": 1087,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "PriceHistory",
        "trait": null,
        "file": "crates/risk/src/market_analytics.rs",
        "line": 82,
        "methods": [
          {
            "name": "new",
            "line": 82,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "add_candle",
            "line": 89,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "add_tick",
            "line": 96,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_returns",
            "line": 103,
            "return_type": "Vec<f64>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "VolatilityEngine",
        "trait": null,
        "file": "crates/risk/src/market_analytics.rs",
        "line": 143,
        "methods": [
          {
            "name": "new",
            "line": 143,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "calculate_all",
            "line": 158,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "calc_close_to_close",
            "line": 177,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calc_parkinson",
            "line": 197,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calc_garman_klass",
            "line": 215,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calc_rogers_satchell",
            "line": 234,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calc_yang_zhang",
            "line": 255,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "get_best_estimate",
            "line": 294,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "TechnicalAnalysis",
        "trait": null,
        "file": "crates/risk/src/market_analytics.rs",
        "line": 361,
        "methods": [
          {
            "name": "new",
            "line": 361,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "calculate_all",
            "line": 397,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "calculate_moving_averages",
            "line": 430,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "calculate_ema",
            "line": 463,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_momentum_indicators",
            "line": 478,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "calculate_rsi",
            "line": 502,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_stochastic",
            "line": 530,
            "return_type": "(f64, f64)",
            "is_async": false
          },
          {
            "name": "calculate_williams_r",
            "line": 558,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_adx",
            "line": 581,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_volatility_bands",
            "line": 633,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "calculate_atr",
            "line": 663,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_volume_indicators",
            "line": 685,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "calculate_mfi",
            "line": 733,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_support_resistance",
            "line": 761,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "cluster_levels",
            "line": 809,
            "return_type": "Vec<f64>",
            "is_async": false
          },
          {
            "name": "get_all_indicators",
            "line": 841,
            "return_type": "Vec<f64>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "FeatureExtractor",
        "trait": null,
        "file": "crates/risk/src/market_analytics.rs",
        "line": 919,
        "methods": [
          {
            "name": "new",
            "line": 919,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "extract_all",
            "line": 944,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "extract_microstructure_features",
            "line": 955,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "extract_price_features",
            "line": 994,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "extract_volume_features",
            "line": 1040,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "extract_statistical_features",
            "line": 1089,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "calculate_hurst",
            "line": 1127,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "extract_fourier_features",
            "line": 1164,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "extract_entropy_features",
            "line": 1226,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "extract_price_impact",
            "line": 1286,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_all_features",
            "line": 1386,
            "return_type": "Vec<f64>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "PerformanceCalculator",
        "trait": null,
        "file": "crates/risk/src/market_analytics.rs",
        "line": 1440,
        "methods": [
          {
            "name": "new",
            "line": 1440,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "update_trade",
            "line": 1454,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "calculate_sharpe",
            "line": 1484,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_sortino",
            "line": 1505,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_calmar",
            "line": 1537,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "get_win_rate",
            "line": 1546,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "get_profit_factor",
            "line": 1556,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "VolumeProfile",
        "trait": null,
        "file": "crates/risk/src/market_analytics.rs",
        "line": 1586,
        "methods": [
          {
            "name": "new",
            "line": 1586,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "update",
            "line": 1594,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MarketAnalytics",
        "trait": null,
        "file": "crates/risk/src/market_analytics.rs",
        "line": 1657,
        "methods": [
          {
            "name": "new",
            "line": 1657,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "update",
            "line": 1669,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "update_all_calculations",
            "line": 1679,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_volatility",
            "line": 1710,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "get_ta_indicators",
            "line": 1715,
            "return_type": "Vec<f64>",
            "is_async": false
          },
          {
            "name": "get_ml_features",
            "line": 1720,
            "return_type": "Vec<f64>",
            "is_async": false
          },
          {
            "name": "get_sharpe_ratio",
            "line": 1725,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "get_current_volatility",
            "line": 1730,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "get_rsi",
            "line": 1735,
            "return_type": "Option<f64>",
            "is_async": false
          },
          {
            "name": "get_macd",
            "line": 1741,
            "return_type": "Option<MACDResult>",
            "is_async": false
          },
          {
            "name": "get_bollinger_position",
            "line": 1751,
            "return_type": "Option<f64>",
            "is_async": false
          },
          {
            "name": "get_bollinger_bands",
            "line": 1763,
            "return_type": "Option<(f64, f64, f64)>",
            "is_async": false
          },
          {
            "name": "get_atr",
            "line": 1774,
            "return_type": "Option<f64>",
            "is_async": false
          },
          {
            "name": "get_volume_ratio",
            "line": 1780,
            "return_type": "Option<f64>",
            "is_async": false
          },
          {
            "name": "get_adx",
            "line": 1790,
            "return_type": "Option<f64>",
            "is_async": false
          },
          {
            "name": "get_stochastic",
            "line": 1796,
            "return_type": "Option<StochasticResult>",
            "is_async": false
          },
          {
            "name": "get_support_level",
            "line": 1805,
            "return_type": "Option<f64>",
            "is_async": false
          },
          {
            "name": "get_resistance_level",
            "line": 1811,
            "return_type": "Option<f64>",
            "is_async": false
          },
          {
            "name": "record_trade",
            "line": 1817,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "update_ta_indicators",
            "line": 1823,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "calculate_atr",
            "line": 1829,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_stochastic",
            "line": 1859,
            "return_type": "(f64, f64)",
            "is_async": false
          },
          {
            "name": "calculate_mfi",
            "line": 1891,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "get_all_metrics",
            "line": 1928,
            "return_type": "MarketMetrics",
            "is_async": false
          }
        ]
      },
      {
        "struct": "OptimalExecutor",
        "trait": null,
        "file": "crates/risk/src/hyperparameter_integration.rs",
        "line": 27,
        "methods": [
          {
            "name": "new",
            "line": 27,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "set_algorithm_bias",
            "line": 32,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "set_max_participation_rate",
            "line": 36,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "HyperparameterIntegrationSystem",
        "trait": null,
        "file": "crates/risk/src/hyperparameter_integration.rs",
        "line": 105,
        "methods": [
          {
            "name": "new",
            "line": 105,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "current_params",
            "line": 141,
            "return_type": "Arc<RwLock<HashMap<String, f64>>>",
            "is_async": false
          },
          {
            "name": "performance_history",
            "line": 145,
            "return_type": "&[PerformanceSnapshot]",
            "is_async": false
          },
          {
            "name": "optimization_history",
            "line": 150,
            "return_type": "&[OptimizationEvent]",
            "is_async": false
          },
          {
            "name": "current_regime",
            "line": 156,
            "return_type": "MarketRegime",
            "is_async": false
          },
          {
            "name": "recent_metrics",
            "line": 161,
            "return_type": "(f64, f64, f64)",
            "is_async": false
          },
          {
            "name": "run_optimization_cycle",
            "line": 166,
            "return_type": "HashMap<String, f64>",
            "is_async": false
          },
          {
            "name": "build_comprehensive_objective",
            "line": 204,
            "return_type": "Box<dyn Fn(&HashMap<String, f64>) -> f64>",
            "is_async": false
          },
          {
            "name": "apply_parameters_to_all_components",
            "line": 265,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "should_use_regime_specific",
            "line": 344,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "calculate_improvement",
            "line": 349,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "update_performance_metrics",
            "line": 365,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "should_trigger_emergency_optimization",
            "line": 393,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "update_market_regime",
            "line": 399,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_current_parameters",
            "line": 420,
            "return_type": "HashMap<String, f64>",
            "is_async": false
          },
          {
            "name": "should_optimize",
            "line": 425,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "get_optimization_stats",
            "line": 431,
            "return_type": "OptimizationStats",
            "is_async": false
          },
          {
            "name": "analyze_parameter_sensitivity",
            "line": 460,
            "return_type": "HashMap<String, f64>",
            "is_async": false
          },
          {
            "name": "get_recommended_parameters",
            "line": 494,
            "return_type": "HashMap<String, f64>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "AutoTuner",
        "trait": null,
        "file": "crates/risk/src/hyperparameter_integration.rs",
        "line": 594,
        "methods": [
          {
            "name": "optimize_with_trials",
            "line": 595,
            "return_type": "f64>,\n                                n_trials: usize) -> HashMap<String, f64>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ManipulationDetector",
        "trait": null,
        "file": "crates/risk/src/manipulation_detection.rs",
        "line": 131,
        "methods": [
          {
            "name": "new",
            "line": 131,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "process_snapshot",
            "line": 159,
            "return_type": "ManipulationReport",
            "is_async": false
          },
          {
            "name": "detect_spoofing",
            "line": 219,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "detect_layering",
            "line": 272,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "detect_wash_trading",
            "line": 302,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "detect_ramping",
            "line": 334,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "detect_quote_stuffing",
            "line": 377,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "detect_momentum_ignition",
            "line": 391,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "analyze_game_theory",
            "line": 425,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "analyze_cancellation_patterns",
            "line": 452,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_depth_variance",
            "line": 471,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_size_similarity",
            "line": 489,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "detect_circular_trading",
            "line": 515,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_order_rate",
            "line": 539,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "detect_predatory_behavior",
            "line": 550,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "detect_coordination",
            "line": 572,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "estimate_market_impact",
            "line": 578,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_aggregate_score",
            "line": 586,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "determine_alert_level",
            "line": 609,
            "return_type": "AlertLevel",
            "is_async": false
          },
          {
            "name": "get_detected_patterns",
            "line": 622,
            "return_type": "Vec<ManipulationType>",
            "is_async": false
          },
          {
            "name": "get_suspicious_traders",
            "line": 636,
            "return_type": "Vec<String>",
            "is_async": false
          },
          {
            "name": "get_recommended_action",
            "line": 643,
            "return_type": "String",
            "is_async": false
          },
          {
            "name": "is_regulatory_reportable",
            "line": 652,
            "return_type": "bool",
            "is_async": false
          }
        ]
      },
      {
        "struct": "KellySizer",
        "trait": null,
        "file": "crates/risk/src/kelly_sizing.rs",
        "line": 125,
        "methods": [
          {
            "name": "new",
            "line": 126,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "add_trade",
            "line": 136,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "calculate_position_size",
            "line": 151,
            "return_type": "Result<Decimal>",
            "is_async": false
          },
          {
            "name": "discrete_kelly",
            "line": 209,
            "return_type": "Result<Decimal>",
            "is_async": false
          },
          {
            "name": "continuous_kelly",
            "line": 229,
            "return_type": "Result<Decimal>",
            "is_async": false
          },
          {
            "name": "adjust_for_costs",
            "line": 256,
            "return_type": "Decimal",
            "is_async": false
          },
          {
            "name": "apply_risk_adjustments",
            "line": 271,
            "return_type": "Decimal",
            "is_async": false
          },
          {
            "name": "update_statistics",
            "line": 281,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "calculate_sharpe_ratio",
            "line": 353,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "calculate_confidence_interval",
            "line": 379,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "update_risk_adjustments",
            "line": 404,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_stats",
            "line": 428,
            "return_type": "&KellyStatistics",
            "is_async": false
          },
          {
            "name": "get_recommendation",
            "line": 433,
            "return_type": "KellyRecommendation",
            "is_async": false
          },
          {
            "name": "calculate_discrete_kelly",
            "line": 467,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MLPrediction",
        "trait": null,
        "file": "crates/risk/src/order_book_extensions.rs",
        "line": 178,
        "methods": [
          {
            "name": "new",
            "line": 178,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "TCopula",
        "trait": null,
        "file": "crates/risk/src/t_copula.rs",
        "line": 84,
        "methods": [
          {
            "name": "new",
            "line": 85,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "new_with_df",
            "line": 91,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "calculate_tail_dependence",
            "line": 152,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calibrate_from_data",
            "line": 172,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "empirical_transform",
            "line": 205,
            "return_type": "Vec<DVector<f64>>",
            "is_async": false
          },
          {
            "name": "inverse_t_transform",
            "line": 228,
            "return_type": "Vec<DVector<f64>>",
            "is_async": false
          },
          {
            "name": "estimate_correlation_kendall",
            "line": 244,
            "return_type": "DMatrix<f64>",
            "is_async": false
          },
          {
            "name": "estimate_degrees_of_freedom_mle",
            "line": 282,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_log_likelihood",
            "line": 303,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "golden_section_search_df",
            "line": 334,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "nearest_correlation_matrix",
            "line": 363,
            "return_type": "DMatrix<f64>",
            "is_async": false
          },
          {
            "name": "update_tail_dependence",
            "line": 413,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "simulate",
            "line": 429,
            "return_type": "Vec<DVector<f64>>",
            "is_async": false
          },
          {
            "name": "joint_tail_probability",
            "line": 477,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "conditional_var",
            "line": 494,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "get_max_correlation",
            "line": 524,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "stress_test_crisis",
            "line": 540,
            "return_type": "CrisisScenario",
            "is_async": false
          },
          {
            "name": "calculate_contagion_probability",
            "line": 584,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_expected_joint_losses",
            "line": 605,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "auto_tune",
            "line": 626,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "TCopula",
        "trait": null,
        "file": "crates/risk/src/t_copula.rs",
        "line": 682,
        "methods": [
          {
            "name": "calculate_portfolio_tail_risk",
            "line": 684,
            "return_type": "TailRiskMetrics",
            "is_async": false
          },
          {
            "name": "calculate_contagion_risk",
            "line": 736,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "dimension",
            "line": 764,
            "return_type": "usize",
            "is_async": false
          },
          {
            "name": "get_correlation_matrix",
            "line": 769,
            "return_type": "DMatrix<f64>",
            "is_async": false
          },
          {
            "name": "update_correlation_matrix",
            "line": 774,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "set_degrees_of_freedom",
            "line": 780,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_degrees_of_freedom",
            "line": 786,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_tail_dependence_by_indices",
            "line": 791,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calibrate_from_returns",
            "line": 798,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_tail_metrics",
            "line": 809,
            "return_type": "TailDependenceMetrics",
            "is_async": false
          },
          {
            "name": "portfolio_tail_risk",
            "line": 848,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "stress_correlation_matrix",
            "line": 858,
            "return_type": "DMatrix<f64>",
            "is_async": false
          },
          {
            "name": "auto_tune_parameters",
            "line": 879,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "estimate_df_mle",
            "line": 897,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "KyleLambdaValidator",
        "trait": null,
        "file": "crates/risk/src/kyle_lambda_validation.rs",
        "line": 28,
        "methods": [
          {
            "name": "new",
            "line": 28,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "generate_synthetic_market",
            "line": 39,
            "return_type": "Vec<OrderBookSnapshot>",
            "is_async": false
          },
          {
            "name": "validate_lambda_calculation",
            "line": 129,
            "return_type": "ValidationResult",
            "is_async": false
          },
          {
            "name": "test_volatility_sensitivity",
            "line": 177,
            "return_type": "SensitivityResult",
            "is_async": false
          },
          {
            "name": "test_volume_sensitivity",
            "line": 214,
            "return_type": "SensitivityResult",
            "is_async": false
          },
          {
            "name": "test_price_impact_linearity",
            "line": 251,
            "return_type": "LinearityResult",
            "is_async": false
          },
          {
            "name": "test_regime_stability",
            "line": 295,
            "return_type": "RegimeResult",
            "is_async": false
          },
          {
            "name": "generate_details",
            "line": 341,
            "return_type": "String",
            "is_async": false
          },
          {
            "name": "calculate_correlation",
            "line": 350,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ParameterManager",
        "trait": null,
        "file": "crates/risk/src/parameter_manager.rs",
        "line": 30,
        "methods": [
          {
            "name": "new",
            "line": 30,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "get",
            "line": 91,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "get_decimal",
            "line": 119,
            "return_type": "Decimal",
            "is_async": false
          },
          {
            "name": "update_from_optimization",
            "line": 128,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "set_regime_overrides",
            "line": 149,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_current_regime",
            "line": 162,
            "return_type": "String",
            "is_async": false
          },
          {
            "name": "calculate_stability",
            "line": 168,
            "return_type": "HashMap<String, f64>",
            "is_async": false
          },
          {
            "name": "export_parameters",
            "line": 205,
            "return_type": "HashMap<String, f64>",
            "is_async": false
          },
          {
            "name": "get_bounds",
            "line": 210,
            "return_type": "Option<(f64, f64)>",
            "is_async": false
          },
          {
            "name": "needs_optimization",
            "line": 215,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "update_parameter",
            "line": 221,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "update_all",
            "line": 249,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "GameTheoryCalculator",
        "trait": null,
        "file": "crates/risk/src/parameter_manager.rs",
        "line": 263,
        "methods": [
          {
            "name": "new",
            "line": 263,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "calculate_nash_position_size",
            "line": 269,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_optimal_spread",
            "line": 309,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "EnhancedDecisionOrchestrator",
        "trait": null,
        "file": "crates/risk/src/decision_orchestrator_enhanced_impl.rs",
        "line": 43,
        "methods": [
          {
            "name": "get_ml_prediction_with_shap",
            "line": 44,
            "return_type": "Result<EnhancedMLSignal>",
            "is_async": true
          },
          {
            "name": "get_advanced_ta_signal",
            "line": 93,
            "return_type": "Result<Signal>",
            "is_async": true
          },
          {
            "name": "detect_regime_with_hmm",
            "line": 213,
            "return_type": "Result<HistoricalRegime>",
            "is_async": true
          },
          {
            "name": "get_regime_adjusted_signal",
            "line": 229,
            "return_type": "Result<Signal>",
            "is_async": true
          },
          {
            "name": "analyze_sentiment_with_nlp",
            "line": 254,
            "return_type": "Result<Signal>",
            "is_async": true
          },
          {
            "name": "calculate_vpin_toxicity",
            "line": 286,
            "return_type": "Result<f64>",
            "is_async": true
          },
          {
            "name": "analyze_systemic_risks",
            "line": 303,
            "return_type": "Result<(f64, f64)>",
            "is_async": true
          },
          {
            "name": "create_ensemble_signal",
            "line": 327,
            "return_type": "Result<Signal>",
            "is_async": true
          },
          {
            "name": "calculate_advanced_kelly_size",
            "line": 414,
            "return_type": "Result<f64>",
            "is_async": true
          },
          {
            "name": "apply_comprehensive_risk_clamps",
            "line": 463,
            "return_type": "Result<Signal>",
            "is_async": true
          },
          {
            "name": "validate_with_monte_carlo",
            "line": 516,
            "return_type": "Result<MonteCarloValidation>",
            "is_async": true
          },
          {
            "name": "optimize_for_profit_extraction",
            "line": 548,
            "return_type": "Result<Signal>",
            "is_async": true
          },
          {
            "name": "select_optimal_execution",
            "line": 583,
            "return_type": "Result<ExecutionAlgorithm>",
            "is_async": true
          },
          {
            "name": "auto_tune_parameters",
            "line": 610,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "record_enhanced_decision",
            "line": 665,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "update_ml_feedback",
            "line": 701,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "construct_final_signal",
            "line": 731,
            "return_type": "Result<TradingSignal>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "ValidationReport",
        "trait": null,
        "file": "crates/risk/src/deep_dive_validation_study.rs",
        "line": 475,
        "methods": [
          {
            "name": "new",
            "line": 475,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "add_check",
            "line": 482,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "print_summary",
            "line": 496,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "is_valid",
            "line": 509,
            "return_type": "bool",
            "is_async": false
          }
        ]
      },
      {
        "struct": "EnhancedOrderBook",
        "trait": null,
        "file": "crates/risk/src/order_book_methods.rs",
        "line": 13,
        "methods": [
          {
            "name": "total_bid_volume",
            "line": 15,
            "return_type": "Decimal",
            "is_async": false
          },
          {
            "name": "total_ask_volume",
            "line": 24,
            "return_type": "Decimal",
            "is_async": false
          },
          {
            "name": "weighted_mid_price",
            "line": 33,
            "return_type": "Price",
            "is_async": false
          },
          {
            "name": "calculate_vwap",
            "line": 56,
            "return_type": "Price",
            "is_async": false
          },
          {
            "name": "calculate_imbalance",
            "line": 81,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_kyle_lambda",
            "line": 96,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_microprice",
            "line": 130,
            "return_type": "Price",
            "is_async": false
          },
          {
            "name": "calculate_effective_spread",
            "line": 154,
            "return_type": "Price",
            "is_async": false
          },
          {
            "name": "calculate_realized_spread",
            "line": 166,
            "return_type": "Price",
            "is_async": false
          },
          {
            "name": "get_depth_at_price",
            "line": 175,
            "return_type": "Decimal",
            "is_async": false
          },
          {
            "name": "calculate_book_pressure",
            "line": 194,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "is_crossed",
            "line": 225,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "is_locked",
            "line": 234,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "spread_bps",
            "line": 243,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "volume_imbalance",
            "line": 262,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "bid_ask_spread",
            "line": 267,
            "return_type": "Price",
            "is_async": false
          },
          {
            "name": "mid_price",
            "line": 275,
            "return_type": "Price",
            "is_async": false
          },
          {
            "name": "order_flow_imbalance",
            "line": 280,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "depth_imbalance",
            "line": 285,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "WildersRSI",
        "trait": null,
        "file": "crates/risk/src/ta_improvements.rs",
        "line": 18,
        "methods": [
          {
            "name": "new",
            "line": 18,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "update",
            "line": 30,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ProperMACD",
        "trait": null,
        "file": "crates/risk/src/ta_improvements.rs",
        "line": 93,
        "methods": [
          {
            "name": "new",
            "line": 93,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "update",
            "line": 102,
            "return_type": "(f64, f64, f64)",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ExponentialMovingAverage",
        "trait": null,
        "file": "crates/risk/src/ta_improvements.rs",
        "line": 123,
        "methods": [
          {
            "name": "new",
            "line": 123,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "update",
            "line": 129,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ADXIndicator",
        "trait": null,
        "file": "crates/risk/src/ta_improvements.rs",
        "line": 162,
        "methods": [
          {
            "name": "new",
            "line": 162,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "update",
            "line": 174,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "IchimokuCloud",
        "trait": null,
        "file": "crates/risk/src/ta_improvements.rs",
        "line": 267,
        "methods": [
          {
            "name": "new",
            "line": 267,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "calculate",
            "line": 277,
            "return_type": "IchimokuValues",
            "is_async": false
          },
          {
            "name": "calculate_midpoint",
            "line": 302,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "FibonacciLevels",
        "trait": null,
        "file": "crates/risk/src/ta_improvements.rs",
        "line": 434,
        "methods": [
          {
            "name": "new",
            "line": 434,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "calculate_retracements",
            "line": 459,
            "return_type": "Vec<(f64, f64)>",
            "is_async": false
          },
          {
            "name": "calculate_extensions",
            "line": 470,
            "return_type": "Vec<(f64, f64)>",
            "is_async": false
          },
          {
            "name": "find_nearest_level",
            "line": 486,
            "return_type": "(f64, f64, f64)",
            "is_async": false
          },
          {
            "name": "is_at_fibonacci_level",
            "line": 507,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "calculate_time_zones",
            "line": 517,
            "return_type": "Vec<usize>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "PivotPoints",
        "trait": null,
        "file": "crates/risk/src/ta_improvements.rs",
        "line": 548,
        "methods": [
          {
            "name": "calculate_classic",
            "line": 549,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "calculate_fibonacci",
            "line": 564,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "calculate_camarilla",
            "line": 580,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MockTradingSystem",
        "trait": null,
        "file": "crates/risk/src/hyperparameter_optimization_tests.rs",
        "line": 17,
        "methods": [
          {
            "name": "new",
            "line": 17,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "simulate_trading",
            "line": 26,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MonteCarloEngine",
        "trait": null,
        "file": "crates/risk/src/monte_carlo.rs",
        "line": 163,
        "methods": [
          {
            "name": "new",
            "line": 164,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "run_simulation_suite",
            "line": 212,
            "return_type": "Result<MonteCarloReport>",
            "is_async": false
          },
          {
            "name": "validate_trading_strategy",
            "line": 246,
            "return_type": "Result<StrategyValidation>",
            "is_async": false
          },
          {
            "name": "run_single_simulation",
            "line": 290,
            "return_type": "SimulationResult",
            "is_async": false
          },
          {
            "name": "generate_next_price",
            "line": 348,
            "return_type": "(f64, f64)",
            "is_async": false
          },
          {
            "name": "update_volatility",
            "line": 452,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "generate_fractional_noise",
            "line": 490,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_position_size",
            "line": 500,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_returns",
            "line": 521,
            "return_type": "Vec<f64>",
            "is_async": false
          },
          {
            "name": "calculate_std",
            "line": 532,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_max_drawdown",
            "line": 546,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_sharpe_ratio",
            "line": 564,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_sortino_ratio",
            "line": 581,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_var",
            "line": 603,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_cvar",
            "line": 612,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_profit_factor",
            "line": 628,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "assess_tail_risks",
            "line": 640,
            "return_type": "Result<RiskMetrics>",
            "is_async": false
          },
          {
            "name": "simulate_black_swan",
            "line": 674,
            "return_type": "SimulationResult",
            "is_async": false
          },
          {
            "name": "optimize_parameters",
            "line": 717,
            "return_type": "Result<OptimalParameters>",
            "is_async": false
          },
          {
            "name": "evaluate_parameters",
            "line": 750,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "run_stress_tests",
            "line": 759,
            "return_type": "Result<StressTestResults>",
            "is_async": false
          },
          {
            "name": "test_scenario",
            "line": 779,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "simulate_game_theory_scenarios",
            "line": 795,
            "return_type": "Result<GameTheoryAnalysis>",
            "is_async": false
          },
          {
            "name": "find_nash_equilibrium",
            "line": 820,
            "return_type": "String",
            "is_async": false
          },
          {
            "name": "analyze_market_making_dilemma",
            "line": 826,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "analyze_information_asymmetry",
            "line": 832,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "analyze_predator_prey_dynamics",
            "line": 838,
            "return_type": "Vec<f64>",
            "is_async": false
          },
          {
            "name": "calculate_payoff_matrix",
            "line": 844,
            "return_type": "Vec<Vec<f64>>",
            "is_async": false
          },
          {
            "name": "analyze_kelly_stability",
            "line": 854,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "analyze_regime_performance",
            "line": 864,
            "return_type": "Vec<(String, f64)>",
            "is_async": false
          },
          {
            "name": "calculate_confidence_intervals",
            "line": 874,
            "return_type": "Vec<(String, f64, f64)>",
            "is_async": false
          },
          {
            "name": "generate_recommendations",
            "line": 883,
            "return_type": "Vec<String>",
            "is_async": false
          },
          {
            "name": "get_rng",
            "line": 894,
            "return_type": "StdRng",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MonteCarloEngine",
        "trait": null,
        "file": "crates/risk/src/monte_carlo.rs",
        "line": 997,
        "methods": [
          {
            "name": "analyze_black_swan_impact",
            "line": 997,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "GARCHModel",
        "trait": null,
        "file": "crates/risk/src/garch.rs",
        "line": 50,
        "methods": [
          {
            "name": "new",
            "line": 52,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "calibrate",
            "line": 78,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "method_of_moments_init",
            "line": 115,
            "return_type": "(f64, f64, f64)",
            "is_async": false
          },
          {
            "name": "optimize_mle",
            "line": 183,
            "return_type": "Result<(f64, f64, f64)>",
            "is_async": false
          },
          {
            "name": "log_likelihood_calc",
            "line": 295,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "student_t_log_likelihood",
            "line": 356,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "update",
            "line": 375,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "forecast",
            "line": 398,
            "return_type": "Vec<f64>",
            "is_async": false
          },
          {
            "name": "forecast_scalar",
            "line": 413,
            "return_type": "Vec<f64>",
            "is_async": false
          },
          {
            "name": "forecast_avx512",
            "line": 440,
            "return_type": "Vec<f64>",
            "is_async": false
          },
          {
            "name": "calculate_diagnostics",
            "line": 505,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "current_volatility",
            "line": 520,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_var",
            "line": 525,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_es",
            "line": 545,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "normal_quantile",
            "line": 568,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "student_t_quantile",
            "line": 605,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "ljung_box_test",
            "line": 613,
            "return_type": "(f64, f64)",
            "is_async": false
          },
          {
            "name": "chi_square_cdf",
            "line": 653,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "normal_cdf",
            "line": 661,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "erf",
            "line": 666,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "DecisionOrchestrator",
        "trait": null,
        "file": "crates/risk/src/decision_orchestrator.rs",
        "line": 100,
        "methods": [
          {
            "name": "new",
            "line": 101,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "make_trading_decision",
            "line": 208,
            "return_type": "Result<TradingSignal>",
            "is_async": true
          },
          {
            "name": "extract_ml_features",
            "line": 319,
            "return_type": "Result<Vec<f64>>",
            "is_async": true
          },
          {
            "name": "get_ml_signal",
            "line": 357,
            "return_type": "Result<Signal>",
            "is_async": true
          },
          {
            "name": "calculate_ta_indicators",
            "line": 414,
            "return_type": "Result<TAIndicators>",
            "is_async": true
          },
          {
            "name": "get_ta_signal",
            "line": 429,
            "return_type": "Result<Signal>",
            "is_async": true
          },
          {
            "name": "get_sentiment_signal",
            "line": 486,
            "return_type": "Result<Signal>",
            "is_async": true
          },
          {
            "name": "combine_signals",
            "line": 507,
            "return_type": "Result<Signal>",
            "is_async": true
          },
          {
            "name": "calculate_order_book_imbalance",
            "line": 579,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_depth_ratio",
            "line": 598,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "adjust_for_tail_risk",
            "line": 616,
            "return_type": "Signal",
            "is_async": false
          },
          {
            "name": "detect_market_regime",
            "line": 657,
            "return_type": "Result<String>",
            "is_async": true
          },
          {
            "name": "calculate_kelly_size",
            "line": 673,
            "return_type": "Result<f64>",
            "is_async": true
          },
          {
            "name": "apply_risk_clamps",
            "line": 686,
            "return_type": "Result<TradingSignal>",
            "is_async": true
          },
          {
            "name": "extract_profit_opportunity",
            "line": 730,
            "return_type": "Result<TradingSignal>",
            "is_async": true
          },
          {
            "name": "record_decision",
            "line": 741,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "update_auto_tuning",
            "line": 771,
            "return_type": "Result<()>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "MLFeedbackSystem",
        "trait": null,
        "file": "crates/risk/src/ml_methods_impl.rs",
        "line": 18,
        "methods": [
          {
            "name": "calibrate_probability",
            "line": 20,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "update_prediction_history",
            "line": 30,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "recalibrate_model",
            "line": 54,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "SHAPCalculator",
        "trait": null,
        "file": "crates/risk/src/ml_methods_impl.rs",
        "line": 83,
        "methods": [
          {
            "name": "calculate_shap_values",
            "line": 85,
            "return_type": "Vec<f64>",
            "is_async": false
          },
          {
            "name": "predict_with_features",
            "line": 120,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "get_feature_names",
            "line": 135,
            "return_type": "Vec<String>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MarketAnalytics",
        "trait": null,
        "file": "crates/risk/src/ml_methods_impl.rs",
        "line": 142,
        "methods": [
          {
            "name": "get_stochastic",
            "line": 144,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "get_obv",
            "line": 169,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "get_obv_ma",
            "line": 191,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "EnhancedOrderBook",
        "trait": null,
        "file": "crates/risk/src/ml_methods_impl.rs",
        "line": 210,
        "methods": [
          {
            "name": "total_bid_volume",
            "line": 211,
            "return_type": "Decimal",
            "is_async": false
          },
          {
            "name": "total_ask_volume",
            "line": 218,
            "return_type": "Decimal",
            "is_async": false
          },
          {
            "name": "weighted_mid_price",
            "line": 225,
            "return_type": "Decimal",
            "is_async": false
          },
          {
            "name": "calculate_imbalance",
            "line": 244,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "TradingSignal",
        "trait": null,
        "file": "crates/risk/src/ml_methods_impl.rs",
        "line": 259,
        "methods": [
          {
            "name": "to_f64",
            "line": 260,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "new",
            "line": 265,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ObjectPool",
        "trait": null,
        "file": "crates/risk/src/performance_optimizations.rs",
        "line": 24,
        "methods": [
          {
            "name": "new",
            "line": 24,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "acquire",
            "line": 37,
            "return_type": "PooledObject<T>",
            "is_async": false
          },
          {
            "name": "stats",
            "line": 58,
            "return_type": "PoolStats",
            "is_async": false
          }
        ]
      },
      {
        "struct": "LockFreeRingBuffer",
        "trait": null,
        "file": "crates/risk/src/performance_optimizations.rs",
        "line": 131,
        "methods": [
          {
            "name": "new",
            "line": 131,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "push",
            "line": 148,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "pop",
            "line": 166,
            "return_type": "Option<T>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "CacheAligned",
        "trait": null,
        "file": "crates/risk/src/performance_optimizations.rs",
        "line": 205,
        "methods": [
          {
            "name": "new",
            "line": 206,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "LookupTables",
        "trait": null,
        "file": "crates/risk/src/performance_optimizations.rs",
        "line": 244,
        "methods": [
          {
            "name": "new",
            "line": 244,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "get_ema_factor",
            "line": 272,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "sigmoid",
            "line": 281,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "PerformanceMetrics",
        "trait": null,
        "file": "crates/risk/src/performance_optimizations.rs",
        "line": 345,
        "methods": [
          {
            "name": "new",
            "line": 345,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "record_decision",
            "line": 355,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "AssetClass",
        "trait": null,
        "file": "crates/risk/src/cross_asset_correlations.rs",
        "line": 67,
        "methods": [
          {
            "name": "all_assets",
            "line": 67,
            "return_type": "Vec<AssetClass>",
            "is_async": false
          },
          {
            "name": "to_index",
            "line": 73,
            "return_type": "usize",
            "is_async": false
          }
        ]
      },
      {
        "struct": "DCCGARCHModel",
        "trait": null,
        "file": "crates/risk/src/cross_asset_correlations.rs",
        "line": 128,
        "methods": [
          {
            "name": "new",
            "line": 129,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "update",
            "line": 153,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "update_quasi_correlation",
            "line": 183,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "update_conditional_correlation",
            "line": 196,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "ensure_positive_definite",
            "line": 215,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "calibrate",
            "line": 239,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "estimate_unconditional_correlation",
            "line": 286,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "optimize_dcc_parameters",
            "line": 309,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "calculate_likelihood",
            "line": 335,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "CrossAssetCorrelations",
        "trait": null,
        "file": "crates/risk/src/cross_asset_correlations.rs",
        "line": 444,
        "methods": [
          {
            "name": "new",
            "line": 445,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "update",
            "line": 484,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "detect_contagion",
            "line": 517,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "check_correlation_breakdown",
            "line": 583,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "calculate_spillovers",
            "line": 612,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "update_systemic_risk",
            "line": 642,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "update_rolling_correlations",
            "line": 667,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_correlation_matrix",
            "line": 691,
            "return_type": "DMatrix<f64>",
            "is_async": false
          },
          {
            "name": "get_correlation",
            "line": 696,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "get_contagion_risk",
            "line": 705,
            "return_type": "ContagionRisk",
            "is_async": false
          },
          {
            "name": "set_t_copula",
            "line": 729,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "set_regime_calibration",
            "line": 734,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "calculate_portfolio_risk",
            "line": 739,
            "return_type": "PortfolioRisk",
            "is_async": false
          }
        ]
      },
      {
        "struct": "AlignedBuffer",
        "trait": null,
        "file": "crates/risk/src/simd_decision_engine.rs",
        "line": 36,
        "methods": [
          {
            "name": "new",
            "line": 36,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "as_ptr",
            "line": 40,
            "return_type": "*const T",
            "is_async": false
          },
          {
            "name": "as_mut_ptr",
            "line": 45,
            "return_type": "*mut T",
            "is_async": false
          }
        ]
      },
      {
        "struct": "SimdDecisionEngine",
        "trait": null,
        "file": "crates/risk/src/simd_decision_engine.rs",
        "line": 54,
        "methods": [
          {
            "name": "new",
            "line": 55,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "make_decision_fast",
            "line": 76,
            "return_type": "FastDecision",
            "is_async": false
          },
          {
            "name": "decide_avx512",
            "line": 101,
            "return_type": "FastDecision",
            "is_async": false
          },
          {
            "name": "decide_avx2",
            "line": 166,
            "return_type": "FastDecision",
            "is_async": false
          },
          {
            "name": "decide_sse2",
            "line": 229,
            "return_type": "FastDecision",
            "is_async": false
          },
          {
            "name": "hsum_avx512",
            "line": 289,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "hsum_avx2",
            "line": 299,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "hsum_sse2",
            "line": 308,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "update_metrics",
            "line": 316,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_performance_stats",
            "line": 324,
            "return_type": "PerformanceStats",
            "is_async": false
          },
          {
            "name": "warm_up",
            "line": 341,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ExtendedMarketData",
        "trait": null,
        "file": "crates/risk/src/profit_extractor.rs",
        "line": 40,
        "methods": [
          {
            "name": "from_market_data",
            "line": 41,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "spread_percentage",
            "line": 58,
            "return_type": "Percentage",
            "is_async": false
          },
          {
            "name": "to_market_data",
            "line": 68,
            "return_type": "MarketData",
            "is_async": false
          }
        ]
      },
      {
        "struct": "OrderBookAnalyzer",
        "trait": null,
        "file": "crates/risk/src/profit_extractor.rs",
        "line": 134,
        "methods": [
          {
            "name": "new",
            "line": 134,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "get_current_imbalance",
            "line": 145,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "analyze_opportunity",
            "line": 151,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "determine_action",
            "line": 209,
            "return_type": "SignalAction",
            "is_async": false
          },
          {
            "name": "calculate_confidence",
            "line": 233,
            "return_type": "Percentage",
            "is_async": false
          },
          {
            "name": "estimate_profit_per_unit",
            "line": 275,
            "return_type": "Price",
            "is_async": false
          },
          {
            "name": "estimate_total_profit",
            "line": 282,
            "return_type": "Price",
            "is_async": false
          },
          {
            "name": "assess_risk",
            "line": 288,
            "return_type": "Percentage",
            "is_async": false
          },
          {
            "name": "calculate_optimal_size",
            "line": 296,
            "return_type": "Quantity",
            "is_async": false
          },
          {
            "name": "calculate_entry_price",
            "line": 304,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "calculate_exit_price",
            "line": 314,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "WhaleDetector",
        "trait": null,
        "file": "crates/risk/src/profit_extractor.rs",
        "line": 345,
        "methods": [
          {
            "name": "new",
            "line": 345,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "detect",
            "line": 352,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "SpoofDetector",
        "trait": null,
        "file": "crates/risk/src/profit_extractor.rs",
        "line": 442,
        "methods": [
          {
            "name": "new",
            "line": 442,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "detect",
            "line": 446,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ExecutionOptimizer",
        "trait": null,
        "file": "crates/risk/src/profit_extractor.rs",
        "line": 482,
        "methods": [
          {
            "name": "new",
            "line": 482,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "optimize_execution",
            "line": 492,
            "return_type": "ExecutionPlan",
            "is_async": false
          },
          {
            "name": "calculate_chunks",
            "line": 521,
            "return_type": "Vec<Quantity>",
            "is_async": false
          },
          {
            "name": "calculate_timing",
            "line": 536,
            "return_type": "Vec<u64>",
            "is_async": false
          },
          {
            "name": "calculate_limit",
            "line": 551,
            "return_type": "Option<Price>",
            "is_async": false
          },
          {
            "name": "estimate_slippage",
            "line": 562,
            "return_type": "Percentage",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ExchangeConfig",
        "trait": null,
        "file": "crates/risk/src/profit_extractor.rs",
        "line": 584,
        "methods": [
          {
            "name": "binance",
            "line": 584,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "coinbase",
            "line": 591,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "kraken",
            "line": 600,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "bybit",
            "line": 609,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "AdvancedPositionSizer",
        "trait": null,
        "file": "crates/risk/src/profit_extractor.rs",
        "line": 644,
        "methods": [
          {
            "name": "new",
            "line": 644,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "calculate_optimal_size",
            "line": 657,
            "return_type": "Quantity",
            "is_async": false
          },
          {
            "name": "calculate_kelly_size",
            "line": 813,
            "return_type": "Decimal",
            "is_async": false
          },
          {
            "name": "calculate_kelly_size_with_edge",
            "line": 825,
            "return_type": "Decimal",
            "is_async": false
          },
          {
            "name": "adjust_for_correlation",
            "line": 876,
            "return_type": "Decimal",
            "is_async": false
          },
          {
            "name": "apply_risk_budget",
            "line": 888,
            "return_type": "Decimal",
            "is_async": false
          },
          {
            "name": "adjust_for_regime",
            "line": 894,
            "return_type": "Decimal",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ExitManager",
        "trait": null,
        "file": "crates/risk/src/profit_extractor.rs",
        "line": 927,
        "methods": [
          {
            "name": "new",
            "line": 927,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "calculate_exit_levels",
            "line": 937,
            "return_type": "ExitLevels",
            "is_async": false
          },
          {
            "name": "should_exit",
            "line": 951,
            "return_type": "ExitSignal",
            "is_async": false
          }
        ]
      },
      {
        "struct": "TwapEngine",
        "trait": null,
        "file": "crates/risk/src/profit_extractor.rs",
        "line": 1024,
        "methods": [
          {
            "name": "new",
            "line": 1024,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "VwapEngine",
        "trait": null,
        "file": "crates/risk/src/profit_extractor.rs",
        "line": 1038,
        "methods": [
          {
            "name": "new",
            "line": 1038,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "CostOptimizer",
        "trait": null,
        "file": "crates/risk/src/profit_extractor.rs",
        "line": 1053,
        "methods": [
          {
            "name": "new",
            "line": 1053,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "calculate_total_cost",
            "line": 1062,
            "return_type": "Price",
            "is_async": false
          }
        ]
      },
      {
        "struct": "PerformanceTracker",
        "trait": null,
        "file": "crates/risk/src/profit_extractor.rs",
        "line": 1104,
        "methods": [
          {
            "name": "new",
            "line": 1104,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ProfitExtractor",
        "trait": null,
        "file": "crates/risk/src/profit_extractor.rs",
        "line": 1135,
        "methods": [
          {
            "name": "new",
            "line": 1135,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "set_exchange",
            "line": 1155,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "extract_profit",
            "line": 1173,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "create_risk_metrics",
            "line": 1344,
            "return_type": "RiskMetrics",
            "is_async": false
          },
          {
            "name": "calculate_current_heat",
            "line": 1373,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_current_leverage",
            "line": 1386,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "create_temp_signal",
            "line": 1404,
            "return_type": "TradingSignal",
            "is_async": false
          },
          {
            "name": "create_hold_signal",
            "line": 1423,
            "return_type": "TradingSignal",
            "is_async": false
          },
          {
            "name": "record_trade_outcome",
            "line": 1445,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_ml_metrics",
            "line": 1518,
            "return_type": "crate::ml_feedback::MLMetrics",
            "is_async": false
          },
          {
            "name": "get_performance_stats",
            "line": 1524,
            "return_type": "PerformanceStats",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ExecutionAlgorithm",
        "trait": null,
        "file": "crates/risk/src/trading_types_complete.rs",
        "line": 88,
        "methods": [
          {
            "name": "select_optimal",
            "line": 90,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "expected_cost_bps",
            "line": 121,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "SentimentData",
        "trait": null,
        "file": "crates/risk/src/trading_types_complete.rs",
        "line": 179,
        "methods": [
          {
            "name": "actionable_score",
            "line": 180,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "AssetClass",
        "trait": null,
        "file": "crates/risk/src/trading_types_complete.rs",
        "line": 360,
        "methods": [
          {
            "name": "risk_params",
            "line": 361,
            "return_type": "RiskParameters",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Price",
        "trait": null,
        "file": "crates/risk/src/trading_types_complete.rs",
        "line": 431,
        "methods": [
          {
            "name": "zero",
            "line": 431,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Percentage",
        "trait": null,
        "file": "crates/risk/src/trading_types_complete.rs",
        "line": 438,
        "methods": [
          {
            "name": "from_f64",
            "line": 438,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Quantity",
        "trait": null,
        "file": "crates/risk/src/trading_types_complete.rs",
        "line": 445,
        "methods": [
          {
            "name": "unwrap",
            "line": 445,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "unwrap_or",
            "line": 448,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "TradingParameterSpace",
        "trait": null,
        "file": "crates/risk/src/hyperparameter_optimization.rs",
        "line": 60,
        "methods": [
          {
            "name": "new",
            "line": 60,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "sample_random",
            "line": 86,
            "return_type": "HashMap<String, f64>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "AutoTuner",
        "trait": null,
        "file": "crates/risk/src/hyperparameter_optimization.rs",
        "line": 112,
        "methods": [
          {
            "name": "new",
            "line": 112,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "optimize",
            "line": 124,
            "return_type": "f64>) -> HashMap<String, f64>",
            "is_async": false
          },
          {
            "name": "optimize_for_regime",
            "line": 158,
            "return_type": "f64>,\n                               _regime: MarketRegime) -> HashMap<String, f64>",
            "is_async": false
          },
          {
            "name": "optimize_quick",
            "line": 166,
            "return_type": "f64>,\n                          n_trials: usize) -> HashMap<String, f64>",
            "is_async": false
          },
          {
            "name": "update_performance",
            "line": 201,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_optimization_stats",
            "line": 205,
            "return_type": "HyperOptStats",
            "is_async": false
          },
          {
            "name": "calculate_optimization_metrics",
            "line": 218,
            "return_type": "HashMap<String, f64>",
            "is_async": false
          },
          {
            "name": "calculate_convergence_rate",
            "line": 226,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "OptimizationStudy",
        "trait": null,
        "file": "crates/risk/src/hyperparameter_optimization.rs",
        "line": 332,
        "methods": [
          {
            "name": "new",
            "line": 332,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "add_simple_trial",
            "line": 344,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "add_trial",
            "line": 382,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_best_trial",
            "line": 401,
            "return_type": "Option<&Trial>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "RandomSampler",
        "trait": null,
        "file": "crates/risk/src/hyperparameter_optimization.rs",
        "line": 413,
        "methods": [
          {
            "name": "new",
            "line": 413,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "TPESampler",
        "trait": null,
        "file": "crates/risk/src/hyperparameter_optimization.rs",
        "line": 517,
        "methods": [
          {
            "name": "new",
            "line": 517,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "get_n_startup_trials",
            "line": 527,
            "return_type": "usize",
            "is_async": false
          },
          {
            "name": "get_n_ei_candidates",
            "line": 531,
            "return_type": "usize",
            "is_async": false
          },
          {
            "name": "get_trial_counts",
            "line": 535,
            "return_type": "(usize, usize)",
            "is_async": false
          },
          {
            "name": "sample_from_space",
            "line": 539,
            "return_type": "HashMap<String, f64>",
            "is_async": false
          },
          {
            "name": "update_with_trial",
            "line": 580,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "update",
            "line": 613,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "sample",
            "line": 632,
            "return_type": "HashMap<String, f64>",
            "is_async": false
          },
          {
            "name": "update_trial_sets",
            "line": 639,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "expected_improvement",
            "line": 687,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "kde_probability",
            "line": 707,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "TPESampler",
        "trait": null,
        "file": "crates/risk/src/hyperparameter_optimization.rs",
        "line": 814,
        "methods": [
          {
            "name": "sample_random",
            "line": 814,
            "return_type": "ParameterValue",
            "is_async": false
          },
          {
            "name": "sample_float_candidates",
            "line": 838,
            "return_type": "Vec<f64>",
            "is_async": false
          },
          {
            "name": "sample_integer_candidates",
            "line": 856,
            "return_type": "Vec<i64>",
            "is_async": false
          },
          {
            "name": "select_best_candidate",
            "line": 874,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "select_best_integer_candidate",
            "line": 911,
            "return_type": "i64",
            "is_async": false
          },
          {
            "name": "select_best_categorical",
            "line": 929,
            "return_type": "String",
            "is_async": false
          },
          {
            "name": "calculate_boolean_probability",
            "line": 975,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_bandwidth",
            "line": 1007,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MedianPruner",
        "trait": null,
        "file": "crates/risk/src/hyperparameter_optimization.rs",
        "line": 1046,
        "methods": [
          {
            "name": "new",
            "line": 1046,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "TradingParameters",
        "trait": null,
        "file": "crates/risk/src/hyperparameter_optimization.rs",
        "line": 1162,
        "methods": [
          {
            "name": "default",
            "line": 1162,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "get_all_parameters",
            "line": 1307,
            "return_type": "Vec<ParameterDef>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "HyperparameterOptimizer",
        "trait": null,
        "file": "crates/risk/src/hyperparameter_optimization.rs",
        "line": 1349,
        "methods": [
          {
            "name": "new",
            "line": 1349,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "create_study",
            "line": 1369,
            "return_type": "&mut OptimizationStudy",
            "is_async": false
          },
          {
            "name": "optimize_trading_strategy",
            "line": 1393,
            "return_type": "OptimizationResult\n    where\n        F: Fn(&HashMap<String, ParameterValue>) -> f64 + Send + Sync + 'static,",
            "is_async": false
          },
          {
            "name": "run_trial",
            "line": 1459,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "should_early_stop",
            "line": 1544,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "auto_tune",
            "line": 1571,
            "return_type": "Option<HashMap<String, ParameterValue>>",
            "is_async": false
          },
          {
            "name": "update_market_regime",
            "line": 1597,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_report",
            "line": 1602,
            "return_type": "OptimizationReport",
            "is_async": false
          },
          {
            "name": "calculate_regime_performance",
            "line": 1624,
            "return_type": "HashMap<MarketRegime, f64>",
            "is_async": false
          },
          {
            "name": "calculate_parameter_importance",
            "line": 1647,
            "return_type": "Vec<(String, f64)>",
            "is_async": false
          },
          {
            "name": "analyze_convergence",
            "line": 1684,
            "return_type": "ConvergenceAnalysis",
            "is_async": false
          },
          {
            "name": "calculate_avg_convergence_trials",
            "line": 1717,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "generate_recommendations",
            "line": 1745,
            "return_type": "Vec<String>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MicrostructureMetrics",
        "trait": null,
        "file": "crates/risk/src/order_book_analytics_ext.rs",
        "line": 180,
        "methods": [
          {
            "name": "kyles_lambda",
            "line": 182,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_vpin",
            "line": 197,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "amihud_illiquidity",
            "line": 235,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "roll_spread",
            "line": 250,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "VPINCalculator",
        "trait": null,
        "file": "crates/risk/src/decision_orchestrator_enhanced.rs",
        "line": 32,
        "methods": [
          {
            "name": "new",
            "line": 32,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "calculate_vpin",
            "line": 38,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "get_current_vpin",
            "line": 48,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "OptimalExecutor",
        "trait": null,
        "file": "crates/risk/src/decision_orchestrator_enhanced.rs",
        "line": 61,
        "methods": [
          {
            "name": "new",
            "line": 61,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "select_algorithm",
            "line": 65,
            "return_type": "ExecutionAlgorithm",
            "is_async": false
          }
        ]
      },
      {
        "struct": "EnhancedDecisionOrchestrator",
        "trait": null,
        "file": "crates/risk/src/decision_orchestrator_enhanced.rs",
        "line": 166,
        "methods": [
          {
            "name": "new",
            "line": 167,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "make_enhanced_trading_decision",
            "line": 327,
            "return_type": "Result<TradingSignal>",
            "is_async": true
          },
          {
            "name": "engineer_all_features",
            "line": 471,
            "return_type": "Result<FeaturePipeline>",
            "is_async": true
          },
          {
            "name": "get_feature_names",
            "line": 554,
            "return_type": "Vec<String>",
            "is_async": false
          },
          {
            "name": "extract_regime_features",
            "line": 582,
            "return_type": "Vec<f64>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "TypedCandle",
        "trait": null,
        "file": "crates/risk/src/type_conversion.rs",
        "line": 183,
        "methods": [
          {
            "name": "from_f64",
            "line": 184,
            "return_type": "Result<Self>",
            "is_async": false
          },
          {
            "name": "to_legacy",
            "line": 196,
            "return_type": "Candle",
            "is_async": false
          },
          {
            "name": "from_legacy",
            "line": 208,
            "return_type": "Result<Self>",
            "is_async": false
          },
          {
            "name": "true_range",
            "line": 221,
            "return_type": "Decimal",
            "is_async": false
          },
          {
            "name": "typical_price",
            "line": 234,
            "return_type": "Price",
            "is_async": false
          },
          {
            "name": "vwap_component",
            "line": 239,
            "return_type": "Decimal",
            "is_async": false
          }
        ]
      },
      {
        "struct": "TypedTick",
        "trait": null,
        "file": "crates/risk/src/type_conversion.rs",
        "line": 255,
        "methods": [
          {
            "name": "from_f64",
            "line": 255,
            "return_type": "Result<Self>",
            "is_async": false
          },
          {
            "name": "to_legacy",
            "line": 263,
            "return_type": "Tick",
            "is_async": false
          },
          {
            "name": "spread",
            "line": 273,
            "return_type": "Price",
            "is_async": false
          },
          {
            "name": "mid_price",
            "line": 277,
            "return_type": "Price",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ExtendedTradingSignal",
        "trait": null,
        "file": "crates/risk/src/type_conversion.rs",
        "line": 308,
        "methods": [
          {
            "name": "new_with_kelly",
            "line": 310,
            "return_type": "Result<Self>",
            "is_async": false
          },
          {
            "name": "validate",
            "line": 356,
            "return_type": "Result<()>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "FeatureConverter",
        "trait": null,
        "file": "crates/risk/src/type_conversion.rs",
        "line": 381,
        "methods": [
          {
            "name": "to_feature_vec",
            "line": 382,
            "return_type": "Vec<f64>",
            "is_async": false
          },
          {
            "name": "from_prediction",
            "line": 406,
            "return_type": "Result<Box<dyn std::any::Any>>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MarketData",
        "trait": null,
        "file": "crates/risk/src/type_conversion.rs",
        "line": 418,
        "methods": [
          {
            "name": "price",
            "line": 419,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "to_typed",
            "line": 424,
            "return_type": "Result<(Price, Price, Quantity)>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Percentage",
        "trait": null,
        "file": "crates/risk/src/type_conversion.rs",
        "line": 452,
        "methods": [
          {
            "name": "inner",
            "line": 452,
            "return_type": "Decimal",
            "is_async": false
          },
          {
            "name": "unwrap",
            "line": 454,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "unwrap_or",
            "line": 458,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Price",
        "trait": null,
        "file": "crates/risk/src/type_conversion.rs",
        "line": 467,
        "methods": [
          {
            "name": "unwrap_or",
            "line": 467,
            "return_type": "Price",
            "is_async": false
          }
        ]
      },
      {
        "struct": "BatchConverter",
        "trait": null,
        "file": "crates/risk/src/type_conversion.rs",
        "line": 477,
        "methods": [
          {
            "name": "f64_to_prices",
            "line": 478,
            "return_type": "Result<Vec<Price>>",
            "is_async": false
          },
          {
            "name": "prices_to_f64",
            "line": 485,
            "return_type": "Vec<f64>",
            "is_async": false
          },
          {
            "name": "validate_and_convert",
            "line": 492,
            "return_type": "Result<Vec<U>>\n    where\n        F: Fn(&T) -> Result<U>,",
            "is_async": false
          }
        ]
      },
      {
        "struct": "AutoTuningPersistence",
        "trait": null,
        "file": "crates/risk/src/auto_tuning_persistence.rs",
        "line": 107,
        "methods": [
          {
            "name": "new",
            "line": 109,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "load_adaptive_parameters",
            "line": 121,
            "return_type": "Result<HashMap<String, AdaptiveParameter>>",
            "is_async": true
          },
          {
            "name": "update_parameter",
            "line": 138,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "save_q_table",
            "line": 200,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "load_q_table",
            "line": 237,
            "return_type": "Result<Vec<QLearningEntry>>",
            "is_async": true
          },
          {
            "name": "record_regime_change",
            "line": 249,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "record_performance_feedback",
            "line": 281,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "get_regime_parameters",
            "line": 317,
            "return_type": "Result<HashMap<String, Decimal>>",
            "is_async": true
          },
          {
            "name": "calculate_stability_score",
            "line": 338,
            "return_type": "Result<Decimal>",
            "is_async": true
          },
          {
            "name": "get_recent_performance",
            "line": 371,
            "return_type": "Result<PerformanceMetrics>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "AdvancedGameTheory",
        "trait": null,
        "file": "crates/risk/src/game_theory_advanced.rs",
        "line": 60,
        "methods": [
          {
            "name": "new",
            "line": 60,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "calculate_optimal_strategy",
            "line": 71,
            "return_type": "(Strategy, f64)",
            "is_async": false
          },
          {
            "name": "calculate_expected_payoff",
            "line": 112,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_payoff_against",
            "line": 148,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "find_nash_equilibrium",
            "line": 232,
            "return_type": "Strategy",
            "is_async": false
          },
          {
            "name": "apply_regret_minimization",
            "line": 289,
            "return_type": "Strategy",
            "is_async": false
          },
          {
            "name": "calculate_strategy_confidence",
            "line": 320,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "estimate_active_players",
            "line": 335,
            "return_type": "Vec<PlayerProfile>",
            "is_async": false
          },
          {
            "name": "calculate_information_asymmetry",
            "line": 378,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "record_payoff",
            "line": 393,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MarketMakerDilemma",
        "trait": null,
        "file": "crates/risk/src/game_theory_advanced.rs",
        "line": 441,
        "methods": [
          {
            "name": "new",
            "line": 441,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "calculate_optimal_spread",
            "line": 446,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "OrderBookAnalytics",
        "trait": null,
        "file": "crates/risk/src/order_book_analytics.rs",
        "line": 171,
        "methods": [
          {
            "name": "new",
            "line": 173,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "process_order_book",
            "line": 202,
            "return_type": "OrderBookMetrics",
            "is_async": false
          },
          {
            "name": "calculate_order_book_imbalance",
            "line": 251,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_microprice",
            "line": 309,
            "return_type": "Decimal",
            "is_async": false
          },
          {
            "name": "calculate_depth_imbalance",
            "line": 326,
            "return_type": "DepthImbalance",
            "is_async": false
          },
          {
            "name": "update_kyle_lambda",
            "line": 398,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_regression_lambda",
            "line": 473,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "update_vpin",
            "line": 486,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_effective_spread",
            "line": 542,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_realized_spread",
            "line": 576,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "estimate_market_impact",
            "line": 591,
            "return_type": "(f64, f64)",
            "is_async": false
          },
          {
            "name": "calculate_book_depth",
            "line": 609,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "update_adverse_selection",
            "line": 621,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_signal",
            "line": 640,
            "return_type": "TradingRecommendation",
            "is_async": false
          },
          {
            "name": "calculate_urgency",
            "line": 674,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_size_limit",
            "line": 694,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "get_imbalance",
            "line": 705,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "get_spoof_ratio",
            "line": 710,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "get_quote_update_rate",
            "line": 715,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "get_average_trade_size",
            "line": 732,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "detect_liquidity_events",
            "line": 746,
            "return_type": "Vec<LiquidityEvent>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "SpoofingDetector",
        "trait": null,
        "file": "crates/risk/src/order_book_analytics.rs",
        "line": 781,
        "methods": [
          {
            "name": "new",
            "line": 781,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "detect",
            "line": 789,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "LayeringDetector",
        "trait": null,
        "file": "crates/risk/src/order_book_analytics.rs",
        "line": 823,
        "methods": [
          {
            "name": "new",
            "line": 823,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "detect",
            "line": 829,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MomentumIgnitionDetector",
        "trait": null,
        "file": "crates/risk/src/order_book_analytics.rs",
        "line": 867,
        "methods": [
          {
            "name": "new",
            "line": 867,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "detect",
            "line": 872,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "VPINCalculator",
        "trait": null,
        "file": "crates/risk/src/vpin_validation.rs",
        "line": 60,
        "methods": [
          {
            "name": "new",
            "line": 60,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "bulk_volume_classification",
            "line": 81,
            "return_type": "(f64, f64)",
            "is_async": false
          },
          {
            "name": "process_snapshot",
            "line": 140,
            "return_type": "VPINMetrics",
            "is_async": false
          },
          {
            "name": "calculate_vpin",
            "line": 241,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "simple_classification",
            "line": 263,
            "return_type": "(f64, f64)",
            "is_async": false
          },
          {
            "name": "calculate_toxicity_score",
            "line": 279,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "update_vpin_cdf",
            "line": 311,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "estimate_pin_parameters",
            "line": 330,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "update_microstructure_metrics",
            "line": 365,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_aggregate_toxicity",
            "line": 413,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "get_aggregate_imbalance",
            "line": 423,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "get_arrival_imbalance",
            "line": 433,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "VPINStrategy",
        "trait": null,
        "file": "crates/risk/src/vpin_validation.rs",
        "line": 468,
        "methods": [
          {
            "name": "from_vpin",
            "line": 468,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "position_adjustment",
            "line": 478,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "HistoricalRegime",
        "trait": null,
        "file": "crates/risk/src/historical_regime_calibration.rs",
        "line": 35,
        "methods": [
          {
            "name": "to_index",
            "line": 35,
            "return_type": "usize",
            "is_async": false
          },
          {
            "name": "from_index",
            "line": 44,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "HistoricalRegimeCalibration",
        "trait": null,
        "file": "crates/risk/src/historical_regime_calibration.rs",
        "line": 207,
        "methods": [
          {
            "name": "new",
            "line": 208,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "calibrate_from_history",
            "line": 424,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "detect_current_regime",
            "line": 465,
            "return_type": "(HistoricalRegime, f64)",
            "is_async": false
          },
          {
            "name": "predict_regime_transition",
            "line": 495,
            "return_type": "Vec<(HistoricalRegime, f64)>",
            "is_async": false
          },
          {
            "name": "check_crisis_indicators",
            "line": 523,
            "return_type": "CrisisWarning",
            "is_async": false
          },
          {
            "name": "get_regime_parameters",
            "line": 576,
            "return_type": "RegimeParameters",
            "is_async": false
          },
          {
            "name": "calculate_emission_probabilities",
            "line": 589,
            "return_type": "DMatrix<f64>",
            "is_async": false
          },
          {
            "name": "calculate_gamma",
            "line": 623,
            "return_type": "DMatrix<f64>",
            "is_async": false
          },
          {
            "name": "calculate_xi",
            "line": 638,
            "return_type": "Vec<DMatrix<f64>>",
            "is_async": false
          },
          {
            "name": "update_transition_matrix",
            "line": 669,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "update_emission_parameters",
            "line": 691,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "extract_regime_history",
            "line": 735,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "HiddenMarkovModel",
        "trait": null,
        "file": "crates/risk/src/historical_regime_calibration.rs",
        "line": 755,
        "methods": [
          {
            "name": "new",
            "line": 755,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "forward_backward",
            "line": 789,
            "return_type": "(DMatrix<f64>, DMatrix<f64>)",
            "is_async": false
          },
          {
            "name": "viterbi",
            "line": 853,
            "return_type": "Vec<usize>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "FeatureExtractor",
        "trait": null,
        "file": "crates/risk/src/historical_regime_calibration.rs",
        "line": 904,
        "methods": [
          {
            "name": "new",
            "line": 904,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "RegimePredictor",
        "trait": null,
        "file": "crates/risk/src/historical_regime_calibration.rs",
        "line": 912,
        "methods": [
          {
            "name": "new",
            "line": 912,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "FundingRateAnalyzer",
        "trait": null,
        "file": "crates/risk/src/funding_rates.rs",
        "line": 113,
        "methods": [
          {
            "name": "new",
            "line": 115,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "update_funding_rate",
            "line": 134,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "calculate_funding_statistics",
            "line": 167,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "identify_arbitrage_opportunities",
            "line": 207,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "calculate_expected_profit",
            "line": 312,
            "return_type": "Decimal",
            "is_async": false
          },
          {
            "name": "calculate_risk_score",
            "line": 333,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_ml_confidence",
            "line": 368,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "determine_execution_strategy",
            "line": 426,
            "return_type": "ExecutionStrategy",
            "is_async": false
          },
          {
            "name": "calculate_required_capital",
            "line": 455,
            "return_type": "Decimal",
            "is_async": false
          },
          {
            "name": "execute_arbitrage",
            "line": 465,
            "return_type": "Result<ExecutionResult, String>",
            "is_async": true
          },
          {
            "name": "get_best_opportunity",
            "line": 547,
            "return_type": "Option<FundingArbitrage>",
            "is_async": false
          },
          {
            "name": "get_funding_pnl",
            "line": 552,
            "return_type": "Decimal",
            "is_async": false
          },
          {
            "name": "predict_next_funding_rate",
            "line": 558,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "AutoTuningSystem",
        "trait": null,
        "file": "crates/risk/src/auto_tuning.rs",
        "line": 69,
        "methods": [
          {
            "name": "new",
            "line": 69,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "detect_regime",
            "line": 95,
            "return_type": "MarketRegime",
            "is_async": false
          },
          {
            "name": "adapt_var_limit",
            "line": 152,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "adapt_kelly_fraction",
            "line": 183,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "auto_tune_parameters",
            "line": 205,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "adapt_volatility_target",
            "line": 231,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "adapt_leverage_cap",
            "line": 251,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "calculate_trend",
            "line": 272,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_volatility_percentile",
            "line": 296,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "detect_volume_surge",
            "line": 305,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "check_correlation_stability",
            "line": 316,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "calculate_volatility",
            "line": 327,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "update_regime_confidence",
            "line": 340,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "update_performance_metrics",
            "line": 349,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_current_state",
            "line": 396,
            "return_type": "usize",
            "is_async": false
          },
          {
            "name": "select_action",
            "line": 409,
            "return_type": "usize",
            "is_async": false
          },
          {
            "name": "calculate_reward",
            "line": 420,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "update_q_value",
            "line": 426,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_kelly_adjustment",
            "line": 431,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "record_adaptation",
            "line": 445,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_adaptive_parameters",
            "line": 470,
            "return_type": "AdaptiveParameters",
            "is_async": false
          },
          {
            "name": "set_var_limit",
            "line": 482,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "set_kelly_fraction",
            "line": 496,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "set_vol_target",
            "line": 510,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "set_leverage_cap",
            "line": 522,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "QTable",
        "trait": null,
        "file": "crates/risk/src/auto_tuning.rs",
        "line": 532,
        "methods": [
          {
            "name": "new",
            "line": 532,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "get_best_action",
            "line": 539,
            "return_type": "usize",
            "is_async": false
          },
          {
            "name": "update",
            "line": 554,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "PortfolioManager",
        "trait": null,
        "file": "crates/risk/src/portfolio_manager.rs",
        "line": 77,
        "methods": [
          {
            "name": "new",
            "line": 79,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "get_account_equity",
            "line": 110,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_portfolio_heat",
            "line": 116,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "get_correlation",
            "line": 141,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "update_position",
            "line": 152,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "close_position",
            "line": 169,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "recalculate_metrics",
            "line": 209,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_positions",
            "line": 256,
            "return_type": "Vec<Position>",
            "is_async": false
          },
          {
            "name": "can_open_position",
            "line": 261,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "get_position_limit",
            "line": 273,
            "return_type": "Decimal",
            "is_async": false
          }
        ]
      },
      {
        "struct": "CorrelationMatrix",
        "trait": null,
        "file": "crates/risk/src/portfolio_manager.rs",
        "line": 292,
        "methods": [
          {
            "name": "new",
            "line": 292,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "get_correlation",
            "line": 298,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "update",
            "line": 319,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "KellyValidator",
        "trait": null,
        "file": "crates/risk/src/kelly_validation.rs",
        "line": 16,
        "methods": [
          {
            "name": "validate_coin_flip",
            "line": 19,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "validate_blackjack",
            "line": 48,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "validate_stock_market",
            "line": 78,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "validate_options_asymmetric",
            "line": 113,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "validate_cost_impact",
            "line": 142,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "validate_all",
            "line": 195,
            "return_type": "ValidationReport",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ValidationReport",
        "trait": null,
        "file": "crates/risk/src/kelly_validation.rs",
        "line": 216,
        "methods": [
          {
            "name": "all_passed",
            "line": 216,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "print_report",
            "line": 222,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "RiskClampSystem",
        "trait": null,
        "file": "crates/risk/src/clamps.rs",
        "line": 112,
        "methods": [
          {
            "name": "new",
            "line": 112,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "update_config",
            "line": 134,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_config",
            "line": 139,
            "return_type": "&ClampConfig",
            "is_async": false
          },
          {
            "name": "calculate_position_size",
            "line": 145,
            "return_type": "f32",
            "is_async": false
          },
          {
            "name": "update_garch",
            "line": 373,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "calibrate_isotonic",
            "line": 378,
            "return_type": "anyhow::Result<()>",
            "is_async": false
          },
          {
            "name": "calibrate_isotonic_regime",
            "line": 384,
            "return_type": "anyhow::Result<()>",
            "is_async": false
          },
          {
            "name": "calibrate_garch",
            "line": 393,
            "return_type": "anyhow::Result<()>",
            "is_async": false
          },
          {
            "name": "detect_regime",
            "line": 399,
            "return_type": "MarketRegime",
            "is_async": false
          },
          {
            "name": "update_var_es",
            "line": 411,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "calculate_leverage",
            "line": 436,
            "return_type": "f32",
            "is_async": false
          },
          {
            "name": "detect_crisis",
            "line": 450,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "assess_crisis_severity",
            "line": 458,
            "return_type": "f32",
            "is_async": false
          },
          {
            "name": "add_trade_outcome",
            "line": 478,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "update_crisis_indicators",
            "line": 492,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_metrics",
            "line": 506,
            "return_type": "ClampMetrics",
            "is_async": false
          },
          {
            "name": "reset_metrics",
            "line": 511,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "auto_tune",
            "line": 517,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "apply_all_clamps",
            "line": 554,
            "return_type": "TradingSignal",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MLFeedbackSystem",
        "trait": null,
        "file": "crates/risk/src/ml_complete_impl.rs",
        "line": 552,
        "methods": [
          {
            "name": "calculate_calibration_errors",
            "line": 552,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "pava_algorithm",
            "line": 574,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "recalibrate_model",
            "line": 601,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "SHAPCalculator",
        "trait": null,
        "file": "crates/risk/src/ml_complete_impl.rs",
        "line": 637,
        "methods": [
          {
            "name": "calculate_baseline",
            "line": 637,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "generate_coalitions",
            "line": 640,
            "return_type": "Vec<Vec<usize>>",
            "is_async": false
          },
          {
            "name": "predict_with_coalition",
            "line": 663,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "shapley_kernel_weight",
            "line": 679,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "binomial_coefficient",
            "line": 690,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "predict",
            "line": 703,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_joint_shap",
            "line": 718,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_single_shap",
            "line": 735,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MarketAnalytics",
        "trait": null,
        "file": "crates/risk/src/ml_complete_impl.rs",
        "line": 747,
        "methods": [
          {
            "name": "calculate_ema",
            "line": 747,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_ema_of_series",
            "line": 760,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MLFeedbackSystem",
        "trait": null,
        "file": "crates/risk/src/ml_complete_impl.rs",
        "line": 796,
        "methods": [
          {
            "name": "new",
            "line": 796,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "SHAPCalculator",
        "trait": null,
        "file": "crates/risk/src/ml_complete_impl.rs",
        "line": 808,
        "methods": [
          {
            "name": "new",
            "line": 808,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MarketAnalytics",
        "trait": null,
        "file": "crates/risk/src/ml_complete_impl.rs",
        "line": 821,
        "methods": [
          {
            "name": "new",
            "line": 821,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "OptimalExecutionEngine",
        "trait": null,
        "file": "crates/risk/src/optimal_execution.rs",
        "line": 86,
        "methods": [
          {
            "name": "new",
            "line": 87,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "create_execution_plan",
            "line": 108,
            "return_type": "Result<ExecutionPlan>",
            "is_async": false
          },
          {
            "name": "select_optimal_algorithm",
            "line": 172,
            "return_type": "Result<ExecutionAlgorithm>",
            "is_async": false
          },
          {
            "name": "calculate_optimal_horizon",
            "line": 223,
            "return_type": "u64",
            "is_async": false
          },
          {
            "name": "generate_twap_slices",
            "line": 251,
            "return_type": "Vec<ExecutionSlice>",
            "is_async": false
          },
          {
            "name": "generate_vwap_slices",
            "line": 277,
            "return_type": "Vec<ExecutionSlice>",
            "is_async": false
          },
          {
            "name": "generate_pov_slices",
            "line": 315,
            "return_type": "Vec<ExecutionSlice>",
            "is_async": false
          },
          {
            "name": "generate_is_slices",
            "line": 354,
            "return_type": "Vec<ExecutionSlice>",
            "is_async": false
          },
          {
            "name": "generate_adaptive_slices",
            "line": 403,
            "return_type": "Vec<ExecutionSlice>",
            "is_async": false
          },
          {
            "name": "generate_iceberg_slices",
            "line": 458,
            "return_type": "Vec<ExecutionSlice>",
            "is_async": false
          },
          {
            "name": "generate_sniper_slices",
            "line": 492,
            "return_type": "Vec<ExecutionSlice>",
            "is_async": false
          },
          {
            "name": "extract_volume_pattern",
            "line": 536,
            "return_type": "Vec<f64>",
            "is_async": false
          },
          {
            "name": "calculate_expected_cost",
            "line": 563,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "apply_adversarial_adjustments",
            "line": 588,
            "return_type": "Vec<ExecutionSlice>",
            "is_async": false
          },
          {
            "name": "detect_predatory_activity",
            "line": 629,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "randomize_iceberg_timing",
            "line": 665,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "execute_slice",
            "line": 678,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "calculate_market_impact",
            "line": 713,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "get_performance_metrics",
            "line": 726,
            "return_type": "ExecutionMetrics",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Price",
        "trait": null,
        "file": "crates/risk/src/unified_types.rs",
        "line": 23,
        "methods": [
          {
            "name": "new",
            "line": 27,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "from_f64",
            "line": 32,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "from_f32",
            "line": 37,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "to_f64",
            "line": 42,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "to_f32",
            "line": 47,
            "return_type": "f32",
            "is_async": false
          },
          {
            "name": "inner",
            "line": 52,
            "return_type": "Decimal",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Quantity",
        "trait": null,
        "file": "crates/risk/src/unified_types.rs",
        "line": 62,
        "methods": [
          {
            "name": "new",
            "line": 65,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "from_f64",
            "line": 70,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "to_f64",
            "line": 75,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "inner",
            "line": 80,
            "return_type": "Decimal",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Percentage",
        "trait": null,
        "file": "crates/risk/src/unified_types.rs",
        "line": 91,
        "methods": [
          {
            "name": "new",
            "line": 96,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "from_basis_points",
            "line": 101,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "to_basis_points",
            "line": 106,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "as_decimal",
            "line": 111,
            "return_type": "Decimal",
            "is_async": false
          },
          {
            "name": "value",
            "line": 116,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "to_f64",
            "line": 121,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MarketData",
        "trait": null,
        "file": "crates/risk/src/unified_types.rs",
        "line": 176,
        "methods": [
          {
            "name": "spread_percentage",
            "line": 176,
            "return_type": "Percentage",
            "is_async": false
          },
          {
            "name": "is_liquid",
            "line": 179,
            "return_type": "bool",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Position",
        "trait": null,
        "file": "crates/risk/src/unified_types.rs",
        "line": 203,
        "methods": [
          {
            "name": "pnl_percentage",
            "line": 203,
            "return_type": "Percentage",
            "is_async": false
          },
          {
            "name": "is_profitable",
            "line": 207,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "time_weighted_return",
            "line": 211,
            "return_type": "Percentage",
            "is_async": false
          }
        ]
      },
      {
        "struct": "SHAPCalculator",
        "trait": null,
        "file": "crates/risk/src/feature_importance.rs",
        "line": 72,
        "methods": [
          {
            "name": "new",
            "line": 72,
            "return_type": "Self \n    where\n        F: Fn(&Array2<f64>) -> Array1<f64> + Send + Sync + 'static,",
            "is_async": false
          },
          {
            "name": "feature_names",
            "line": 116,
            "return_type": "&[String]",
            "is_async": false
          },
          {
            "name": "feature_metadata",
            "line": 121,
            "return_type": "&HashMap<String, FeatureMetadata>",
            "is_async": false
          },
          {
            "name": "shap_values_cache",
            "line": 126,
            "return_type": "Arc<RwLock<HashMap<u64, Array1<f64>>>>",
            "is_async": false
          },
          {
            "name": "computation_time_ms",
            "line": 131,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "accuracy_score",
            "line": 136,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_kernel_shap",
            "line": 141,
            "return_type": "Array2<f64>",
            "is_async": false
          },
          {
            "name": "kernel_shap_single",
            "line": 172,
            "return_type": "Array1<f64>",
            "is_async": false
          },
          {
            "name": "generate_coalitions",
            "line": 195,
            "return_type": "Vec<Vec<usize>>",
            "is_async": false
          },
          {
            "name": "calculate_shap_weights",
            "line": 221,
            "return_type": "Vec<f64>",
            "is_async": false
          },
          {
            "name": "mask_instance",
            "line": 235,
            "return_type": "Array1<f64>",
            "is_async": false
          },
          {
            "name": "solve_shap_regression",
            "line": 253,
            "return_type": "Array1<f64>",
            "is_async": false
          },
          {
            "name": "simple_least_squares",
            "line": 291,
            "return_type": "Array1<f64>",
            "is_async": false
          },
          {
            "name": "calculate_tree_shap",
            "line": 324,
            "return_type": "Array2<f64>",
            "is_async": false
          },
          {
            "name": "calculate_exact_shapley",
            "line": 330,
            "return_type": "Array1<f64>",
            "is_async": false
          },
          {
            "name": "generate_all_coalitions",
            "line": 370,
            "return_type": "Vec<Vec<usize>>",
            "is_async": false
          },
          {
            "name": "evaluate_coalition",
            "line": 388,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_feature_importance",
            "line": 395,
            "return_type": "BTreeMap<String, f64>",
            "is_async": false
          },
          {
            "name": "calculate_interactions",
            "line": 421,
            "return_type": "Array3<f64>",
            "is_async": false
          },
          {
            "name": "calculate_pairwise_interaction",
            "line": 444,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "get_top_features",
            "line": 487,
            "return_type": "Vec<(String, f64)>",
            "is_async": false
          },
          {
            "name": "get_features_by_category",
            "line": 499,
            "return_type": "Vec<FeatureMetadata>",
            "is_async": false
          },
          {
            "name": "calculate_stability",
            "line": 507,
            "return_type": "HashMap<String, f64>",
            "is_async": false
          },
          {
            "name": "generate_report",
            "line": 558,
            "return_type": "FeatureImportanceReport",
            "is_async": false
          },
          {
            "name": "get_category_breakdown",
            "line": 571,
            "return_type": "HashMap<FeatureCategory, CategoryStats>",
            "is_async": false
          },
          {
            "name": "get_stability_analysis",
            "line": 607,
            "return_type": "StabilityAnalysis",
            "is_async": false
          },
          {
            "name": "get_interaction_analysis",
            "line": 627,
            "return_type": "InteractionAnalysis",
            "is_async": false
          },
          {
            "name": "generate_recommendations",
            "line": 654,
            "return_type": "Vec<String>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "IsotonicCalibrator",
        "trait": null,
        "file": "crates/risk/src/isotonic.rs",
        "line": 42,
        "methods": [
          {
            "name": "new",
            "line": 43,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "fit",
            "line": 60,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "pava_algorithm",
            "line": 112,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "transform",
            "line": 188,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "transform_single",
            "line": 201,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "interpolate",
            "line": 206,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "fit_regime",
            "line": 233,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "calculate_brier_score",
            "line": 274,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_ece",
            "line": 287,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "get_calibration_curve",
            "line": 318,
            "return_type": "(Vec<f64>, Vec<f64>)",
            "is_async": false
          },
          {
            "name": "reliability_diagram",
            "line": 333,
            "return_type": "Vec<ReliabilityBin>",
            "is_async": false
          },
          {
            "name": "is_fitted",
            "line": 360,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "get_metrics",
            "line": 365,
            "return_type": "CalibrationMetrics",
            "is_async": false
          },
          {
            "name": "set_regime",
            "line": 376,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "OrderState",
        "trait": null,
        "file": "crates/order_management/src/state_machine.rs",
        "line": 42,
        "methods": [
          {
            "name": "is_terminal",
            "line": 43,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "is_active",
            "line": 55,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "can_transition_to",
            "line": 63,
            "return_type": "bool",
            "is_async": false
          }
        ]
      },
      {
        "struct": "OrderStateMachine",
        "trait": null,
        "file": "crates/order_management/src/state_machine.rs",
        "line": 124,
        "methods": [
          {
            "name": "new",
            "line": 124,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "current_state",
            "line": 135,
            "return_type": "OrderState",
            "is_async": false
          },
          {
            "name": "transition_to",
            "line": 141,
            "return_type": "Result<StateTransition, StateTransitionError>",
            "is_async": false
          },
          {
            "name": "force_transition",
            "line": 207,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "is_terminal",
            "line": 230,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "is_active",
            "line": 235,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "history",
            "line": 240,
            "return_type": "Vec<StateTransition>",
            "is_async": false
          },
          {
            "name": "time_in_current_state",
            "line": 245,
            "return_type": "chrono::Duration",
            "is_async": false
          },
          {
            "name": "process_event",
            "line": 251,
            "return_type": "Result<StateTransition, StateTransitionError>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "PositionId",
        "trait": null,
        "file": "crates/order_management/src/position.rs",
        "line": 26,
        "methods": [
          {
            "name": "new",
            "line": 26,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Position",
        "trait": null,
        "file": "crates/order_management/src/position.rs",
        "line": 73,
        "methods": [
          {
            "name": "new",
            "line": 73,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "update_price",
            "line": 100,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "is_stop_loss_hit",
            "line": 126,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "is_take_profit_hit",
            "line": 138,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "risk_reward_ratio",
            "line": 150,
            "return_type": "Option<Decimal>",
            "is_async": false
          },
          {
            "name": "is_profitable",
            "line": 167,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "total_pnl",
            "line": 172,
            "return_type": "Decimal",
            "is_async": false
          }
        ]
      },
      {
        "struct": "PositionManager",
        "trait": null,
        "file": "crates/order_management/src/position.rs",
        "line": 191,
        "methods": [
          {
            "name": "new",
            "line": 191,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "open_position",
            "line": 200,
            "return_type": "PositionId",
            "is_async": false
          },
          {
            "name": "add_to_position",
            "line": 238,
            "return_type": "Result<(), String>",
            "is_async": false
          },
          {
            "name": "reduce_position",
            "line": 273,
            "return_type": "Result<Decimal, String>",
            "is_async": false
          },
          {
            "name": "update_market_prices",
            "line": 315,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_position",
            "line": 337,
            "return_type": "Option<Position>",
            "is_async": false
          },
          {
            "name": "get_open_positions",
            "line": 342,
            "return_type": "Vec<Position>",
            "is_async": false
          },
          {
            "name": "total_unrealized_pnl",
            "line": 357,
            "return_type": "Decimal",
            "is_async": false
          },
          {
            "name": "total_exposure",
            "line": 365,
            "return_type": "Decimal",
            "is_async": false
          }
        ]
      },
      {
        "struct": "PnLCalculator",
        "trait": null,
        "file": "crates/order_management/src/position.rs",
        "line": 385,
        "methods": [
          {
            "name": "new",
            "line": 385,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "calculate_pnl",
            "line": 392,
            "return_type": "Decimal",
            "is_async": false
          },
          {
            "name": "break_even_price",
            "line": 411,
            "return_type": "Decimal",
            "is_async": false
          },
          {
            "name": "position_size_for_risk",
            "line": 430,
            "return_type": "Decimal",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ExchangeRoute",
        "trait": null,
        "file": "crates/order_management/src/router.rs",
        "line": 42,
        "methods": [
          {
            "name": "new",
            "line": 42,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "can_handle",
            "line": 61,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "calculate_cost",
            "line": 84,
            "return_type": "Decimal",
            "is_async": false
          },
          {
            "name": "score",
            "line": 98,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "OrderRouter",
        "trait": null,
        "file": "crates/order_management/src/router.rs",
        "line": 149,
        "methods": [
          {
            "name": "new",
            "line": 149,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "add_route",
            "line": 159,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "remove_route",
            "line": 165,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "set_primary_exchange",
            "line": 171,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "route_order",
            "line": 176,
            "return_type": "Result<String, RoutingError>",
            "is_async": true
          },
          {
            "name": "route_to_primary",
            "line": 187,
            "return_type": "Result<String, RoutingError>",
            "is_async": false
          },
          {
            "name": "route_round_robin",
            "line": 194,
            "return_type": "Result<String, RoutingError>",
            "is_async": false
          },
          {
            "name": "route_best_price",
            "line": 212,
            "return_type": "Result<String, RoutingError>",
            "is_async": true
          },
          {
            "name": "route_lowest_fee",
            "line": 223,
            "return_type": "Result<String, RoutingError>",
            "is_async": false
          },
          {
            "name": "route_fastest",
            "line": 238,
            "return_type": "Result<String, RoutingError>",
            "is_async": false
          },
          {
            "name": "route_smart",
            "line": 247,
            "return_type": "Result<String, RoutingError>",
            "is_async": false
          },
          {
            "name": "update_metrics",
            "line": 273,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_stats",
            "line": 302,
            "return_type": "RoutingStats",
            "is_async": false
          }
        ]
      },
      {
        "struct": "OrderManager",
        "trait": null,
        "file": "crates/order_management/src/manager.rs",
        "line": 48,
        "methods": [
          {
            "name": "new",
            "line": 48,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "create_order",
            "line": 60,
            "return_type": "Result<OrderId, OrderManagerError>",
            "is_async": true
          },
          {
            "name": "submit_order",
            "line": 154,
            "return_type": "Result<(), OrderManagerError>",
            "is_async": true
          },
          {
            "name": "process_fill",
            "line": 176,
            "return_type": "Result<(), OrderManagerError>",
            "is_async": true
          },
          {
            "name": "cancel_order",
            "line": 244,
            "return_type": "Result<(), OrderManagerError>",
            "is_async": true
          },
          {
            "name": "get_order",
            "line": 277,
            "return_type": "Option<Order>",
            "is_async": false
          },
          {
            "name": "get_symbol_orders",
            "line": 282,
            "return_type": "Vec<Order>",
            "is_async": false
          },
          {
            "name": "get_active_orders",
            "line": 294,
            "return_type": "Vec<Order>",
            "is_async": false
          },
          {
            "name": "get_order_state",
            "line": 313,
            "return_type": "Result<OrderState, OrderManagerError>",
            "is_async": false
          },
          {
            "name": "get_state_machine",
            "line": 319,
            "return_type": "Result<Arc<OrderStateMachine>, OrderManagerError>",
            "is_async": false
          },
          {
            "name": "check_duplicate",
            "line": 325,
            "return_type": "Result<bool, OrderManagerError>",
            "is_async": true
          },
          {
            "name": "check_order_limits",
            "line": 335,
            "return_type": "Result<(), OrderManagerError>",
            "is_async": false
          },
          {
            "name": "perform_risk_checks",
            "line": 371,
            "return_type": "Result<(), OrderManagerError>",
            "is_async": false
          },
          {
            "name": "persist_order",
            "line": 396,
            "return_type": "Result<(), OrderManagerError>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "OrderMetrics",
        "trait": null,
        "file": "crates/order_management/src/manager.rs",
        "line": 419,
        "methods": [
          {
            "name": "new",
            "line": 419,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "OrderId",
        "trait": null,
        "file": "crates/order_management/src/order.rs",
        "line": 21,
        "methods": [
          {
            "name": "new",
            "line": 21,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "OrderSide",
        "trait": null,
        "file": "crates/order_management/src/order.rs",
        "line": 41,
        "methods": [
          {
            "name": "opposite",
            "line": 41,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "OrderType",
        "trait": null,
        "file": "crates/order_management/src/order.rs",
        "line": 62,
        "methods": [
          {
            "name": "requires_price",
            "line": 62,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "requires_stop_price",
            "line": 67,
            "return_type": "bool",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Order",
        "trait": null,
        "file": "crates/order_management/src/order.rs",
        "line": 140,
        "methods": [
          {
            "name": "new",
            "line": 140,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "with_price",
            "line": 179,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "with_stop_price",
            "line": 184,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "with_stop_loss",
            "line": 189,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "with_take_profit",
            "line": 194,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "with_strategy",
            "line": 199,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "with_risk_params",
            "line": 204,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "is_filled",
            "line": 212,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "is_partially_filled",
            "line": 217,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "remaining_quantity",
            "line": 222,
            "return_type": "Decimal",
            "is_async": false
          },
          {
            "name": "fill_percentage",
            "line": 227,
            "return_type": "Decimal",
            "is_async": false
          },
          {
            "name": "validate",
            "line": 235,
            "return_type": "Result<(), OrderValidationError>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "KillSwitch",
        "trait": null,
        "file": "crates/risk_engine/src/emergency.rs",
        "line": 50,
        "methods": [
          {
            "name": "new",
            "line": 50,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "activate",
            "line": 61,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "deactivate",
            "line": 81,
            "return_type": "Result<(), String>",
            "is_async": false
          },
          {
            "name": "is_active",
            "line": 100,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "get_trigger_reason",
            "line": 128,
            "return_type": "Option<TripCondition>",
            "is_async": false
          },
          {
            "name": "get_trigger_count",
            "line": 133,
            "return_type": "u64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "EmergencyStop",
        "trait": null,
        "file": "crates/risk_engine/src/emergency.rs",
        "line": 154,
        "methods": [
          {
            "name": "new",
            "line": 154,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "add_condition",
            "line": 169,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "check_conditions",
            "line": 181,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "manual_stop",
            "line": 224,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "check_daily_loss",
            "line": 232,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "check_drawdown",
            "line": 242,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "check_consecutive_losses",
            "line": 252,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "report_system_error",
            "line": 262,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "report_exchange_issue",
            "line": 267,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_status",
            "line": 272,
            "return_type": "EmergencyStatus",
            "is_async": false
          }
        ]
      },
      {
        "struct": "RecoveryPlan",
        "trait": null,
        "file": "crates/risk_engine/src/emergency.rs",
        "line": 320,
        "methods": [
          {
            "name": "standard",
            "line": 321,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "aggressive",
            "line": 351,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "RiskChecker",
        "trait": null,
        "file": "crates/risk_engine/src/checks.rs",
        "line": 68,
        "methods": [
          {
            "name": "new",
            "line": 68,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "check_order",
            "line": 79,
            "return_type": "RiskCheckResult",
            "is_async": true
          },
          {
            "name": "check_position_size",
            "line": 143,
            "return_type": "Result<(), String>",
            "is_async": false
          },
          {
            "name": "check_stop_loss",
            "line": 158,
            "return_type": "Result<(), String>",
            "is_async": false
          },
          {
            "name": "check_max_exposure",
            "line": 184,
            "return_type": "Result<(), String>",
            "is_async": true
          },
          {
            "name": "check_daily_loss",
            "line": 202,
            "return_type": "Result<(), String>",
            "is_async": false
          },
          {
            "name": "check_leverage",
            "line": 218,
            "return_type": "Result<(), String>",
            "is_async": false
          },
          {
            "name": "update_position",
            "line": 234,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "recalculate_exposure",
            "line": 240,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "update_daily_pnl",
            "line": 250,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_latencies",
            "line": 255,
            "return_type": "Vec<(PreTradeCheck, u64)>",
            "is_async": false
          },
          {
            "name": "emergency_check",
            "line": 263,
            "return_type": "bool",
            "is_async": false
          }
        ]
      },
      {
        "struct": "BatchRiskChecker",
        "trait": null,
        "file": "crates/risk_engine/src/checks.rs",
        "line": 285,
        "methods": [
          {
            "name": "new",
            "line": 285,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "check_orders",
            "line": 290,
            "return_type": "Vec<RiskCheckResult>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "RiskLimits",
        "trait": null,
        "file": "crates/risk_engine/src/limits.rs",
        "line": 147,
        "methods": [
          {
            "name": "conservative",
            "line": 148,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "aggressive",
            "line": 183,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "validate",
            "line": 218,
            "return_type": "Result<(), String>",
            "is_async": false
          },
          {
            "name": "get_limit",
            "line": 244,
            "return_type": "Option<Decimal>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "LimitAdjustment",
        "trait": null,
        "file": "crates/risk_engine/src/limits.rs",
        "line": 269,
        "methods": [
          {
            "name": "new",
            "line": 269,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "approve",
            "line": 281,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "is_approved",
            "line": 286,
            "return_type": "bool",
            "is_async": false
          }
        ]
      },
      {
        "struct": "StopLossManager",
        "trait": null,
        "file": "crates/risk_engine/src/stop_loss_manager.rs",
        "line": 54,
        "methods": [
          {
            "name": "new",
            "line": 54,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "add_stop_loss",
            "line": 66,
            "return_type": "Result<(), String>",
            "is_async": false
          },
          {
            "name": "update_price",
            "line": 129,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "is_stop_triggered",
            "line": 168,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "update_trailing_stop",
            "line": 176,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "execute_stop_loss",
            "line": 230,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "trigger_emergency_liquidation",
            "line": 276,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "activate_emergency_stop",
            "line": 304,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_statistics",
            "line": 310,
            "return_type": "StopLossStatistics",
            "is_async": false
          },
          {
            "name": "validate_all_protected",
            "line": 322,
            "return_type": "Result<(), Vec<String>>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "CorrelationMatrix",
        "trait": null,
        "file": "crates/risk_engine/src/correlation.rs",
        "line": 19,
        "methods": [
          {
            "name": "new",
            "line": 19,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "get_correlation",
            "line": 31,
            "return_type": "Option<f64>",
            "is_async": false
          },
          {
            "name": "update_correlation",
            "line": 40,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_symbol_correlations",
            "line": 53,
            "return_type": "Vec<(String, f64)>",
            "is_async": false
          },
          {
            "name": "find_correlated_pairs",
            "line": 68,
            "return_type": "Vec<(String, String, f64)>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "CorrelationAnalyzer",
        "trait": null,
        "file": "crates/risk_engine/src/correlation.rs",
        "line": 98,
        "methods": [
          {
            "name": "new",
            "line": 98,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "add_price",
            "line": 108,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "update_correlations",
            "line": 120,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "calculate_correlation",
            "line": 145,
            "return_type": "Option<f64>",
            "is_async": false
          },
          {
            "name": "calculate_returns",
            "line": 178,
            "return_type": "Vec<f64>",
            "is_async": false
          },
          {
            "name": "check_correlation_limit",
            "line": 190,
            "return_type": "Result<(), String>",
            "is_async": false
          },
          {
            "name": "correlation_risk_score",
            "line": 210,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "CorrelationMetrics",
        "trait": null,
        "file": "crates/risk_engine/src/correlation.rs",
        "line": 246,
        "methods": [
          {
            "name": "calculate",
            "line": 246,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "is_within_limits",
            "line": 278,
            "return_type": "bool",
            "is_async": false
          }
        ]
      },
      {
        "struct": "CorrelationAnalyzerAVX512",
        "trait": null,
        "file": "crates/risk_engine/src/correlation_avx512.rs",
        "line": 19,
        "methods": [
          {
            "name": "new",
            "line": 19,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "add_price_series",
            "line": 35,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "calculate_returns",
            "line": 47,
            "return_type": "Vec<f64>",
            "is_async": false
          },
          {
            "name": "mean_avx512",
            "line": 62,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "std_dev_avx512",
            "line": 94,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "correlation_avx512",
            "line": 131,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_correlation_matrix",
            "line": 206,
            "return_type": "Vec<Vec<f64>>",
            "is_async": false
          },
          {
            "name": "batch_correlations",
            "line": 250,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MarketMakerDetector",
        "trait": null,
        "file": "crates/risk_engine/src/market_maker_detection.rs",
        "line": 144,
        "methods": [
          {
            "name": "new",
            "line": 144,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "process_event",
            "line": 157,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "analyze_participant",
            "line": 223,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "is_market_maker",
            "line": 389,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "get_profile",
            "line": 397,
            "return_type": "Option<MarketMakerProfile>",
            "is_async": false
          },
          {
            "name": "get_all_market_makers",
            "line": 402,
            "return_type": "Vec<MarketMakerProfile>",
            "is_async": false
          },
          {
            "name": "classify_participant",
            "line": 411,
            "return_type": "ParticipantType",
            "is_async": false
          },
          {
            "name": "get_market_metrics",
            "line": 436,
            "return_type": "MarketMakerMetrics",
            "is_async": false
          },
          {
            "name": "recommend_strategy",
            "line": 468,
            "return_type": "TradingRecommendation",
            "is_async": false
          }
        ]
      },
      {
        "struct": "CpuFeatures",
        "trait": null,
        "file": "crates/risk_engine/src/correlation_portable.rs",
        "line": 18,
        "methods": [
          {
            "name": "detect",
            "line": 19,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "PortableCorrelationAnalyzer",
        "trait": null,
        "file": "crates/risk_engine/src/correlation_portable.rs",
        "line": 69,
        "methods": [
          {
            "name": "new",
            "line": 69,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "add_price_series",
            "line": 92,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "calculate_returns",
            "line": 106,
            "return_type": "Vec<f64>",
            "is_async": false
          },
          {
            "name": "mean",
            "line": 120,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "mean_scalar",
            "line": 133,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "mean_simd",
            "line": 141,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "mean_avx2",
            "line": 171,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "mean_sse2",
            "line": 200,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "mean_neon",
            "line": 229,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "std_dev",
            "line": 255,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "std_dev_scalar",
            "line": 268,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "std_dev_simd",
            "line": 281,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "std_dev_avx2",
            "line": 312,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "std_dev_sse2",
            "line": 345,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "std_dev_neon",
            "line": 378,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "correlation",
            "line": 408,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "correlation_scalar",
            "line": 421,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "correlation_simd",
            "line": 447,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "correlation_avx2",
            "line": 479,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "correlation_sse2",
            "line": 546,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "correlation_neon",
            "line": 554,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_correlation_matrix",
            "line": 560,
            "return_type": "Vec<Vec<f64>>",
            "is_async": false
          },
          {
            "name": "check_correlation_limit",
            "line": 603,
            "return_type": "bool",
            "is_async": false
          }
        ]
      },
      {
        "struct": "StressTestFramework",
        "trait": null,
        "file": "crates/risk_engine/src/stress_testing.rs",
        "line": 158,
        "methods": [
          {
            "name": "new",
            "line": 158,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "load_historical_scenarios",
            "line": 185,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "load_hypothetical_scenarios",
            "line": 266,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "run_comprehensive_tests",
            "line": 334,
            "return_type": "Result<StressTestResults>",
            "is_async": true
          },
          {
            "name": "test_historical_scenario",
            "line": 367,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "test_hypothetical_scenario",
            "line": 422,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "run_monte_carlo_simulations",
            "line": 469,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "simulate_path",
            "line": 503,
            "return_type": "Result<(_bool, u32)>",
            "is_async": true
          },
          {
            "name": "backtest_risk_models",
            "line": 526,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "generate_recommendations",
            "line": 559,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "DrawdownTracker",
        "trait": null,
        "file": "crates/risk_engine/src/monitor.rs",
        "line": 96,
        "methods": [
          {
            "name": "new",
            "line": 96,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "update_value",
            "line": 108,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_current_drawdown",
            "line": 160,
            "return_type": "Decimal",
            "is_async": false
          },
          {
            "name": "get_max_drawdown",
            "line": 164,
            "return_type": "Decimal",
            "is_async": false
          },
          {
            "name": "is_in_drawdown",
            "line": 168,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "get_drawdown_duration",
            "line": 172,
            "return_type": "Option<chrono::Duration>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "RiskMonitor",
        "trait": null,
        "file": "crates/risk_engine/src/monitor.rs",
        "line": 210,
        "methods": [
          {
            "name": "new",
            "line": 210,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "update_position_pnl",
            "line": 222,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "record_trade",
            "line": 228,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "recalculate_metrics",
            "line": 238,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "check_thresholds",
            "line": 263,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_metrics",
            "line": 310,
            "return_type": "RiskMetrics",
            "is_async": false
          },
          {
            "name": "get_alerts",
            "line": 315,
            "return_type": "Vec<RiskAlert>",
            "is_async": false
          },
          {
            "name": "clear_old_alerts",
            "line": 328,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "generate_report",
            "line": 334,
            "return_type": "RiskReport",
            "is_async": false
          }
        ]
      },
      {
        "struct": "RiskReport",
        "trait": null,
        "file": "crates/risk_engine/src/monitor.rs",
        "line": 359,
        "methods": [
          {
            "name": "risk_score",
            "line": 360,
            "return_type": "u8",
            "is_async": false
          }
        ]
      },
      {
        "struct": "LatencyArbitrageDetector",
        "trait": null,
        "file": "crates/risk_engine/src/latency_arbitrage_detection.rs",
        "line": 176,
        "methods": [
          {
            "name": "new",
            "line": 176,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "record_execution",
            "line": 192,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "update_market_snapshot",
            "line": 227,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_snapshot_at",
            "line": 246,
            "return_type": "Option<MarketSnapshot>",
            "is_async": false
          },
          {
            "name": "analyze_execution",
            "line": 256,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "detect_front_running",
            "line": 381,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "detect_quote_fading",
            "line": 403,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "detect_sandwich",
            "line": 420,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "detect_phantom_liquidity",
            "line": 441,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "identify_front_runner",
            "line": 456,
            "return_type": "Option<String>",
            "is_async": false
          },
          {
            "name": "update_arbitrageur_profile",
            "line": 469,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "update_latency_metrics",
            "line": 507,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_protection_recommendations",
            "line": 512,
            "return_type": "ArbitrageProtection",
            "is_async": false
          },
          {
            "name": "get_statistics",
            "line": 563,
            "return_type": "LatencyArbitrageStats",
            "is_async": false
          },
          {
            "name": "calculate_avg_adverse_move",
            "line": 581,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "CorrelationAnalyzerSIMD",
        "trait": null,
        "file": "crates/risk_engine/src/correlation_simd.rs",
        "line": 17,
        "methods": [
          {
            "name": "new",
            "line": 17,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "add_price_series",
            "line": 26,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "calculate_returns",
            "line": 41,
            "return_type": "Vec<f64>",
            "is_async": false
          },
          {
            "name": "mean_simd",
            "line": 55,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "std_dev_simd",
            "line": 79,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "correlation_simd",
            "line": 108,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_correlation_matrix",
            "line": 175,
            "return_type": "Vec<Vec<f64>>",
            "is_async": false
          },
          {
            "name": "check_correlation_limit",
            "line": 218,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "get_correlation",
            "line": 239,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "AdverseSelectionDetector",
        "trait": null,
        "file": "crates/risk_engine/src/adverse_selection.rs",
        "line": 75,
        "methods": [
          {
            "name": "new",
            "line": 75,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "record_fill",
            "line": 89,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "update_price",
            "line": 141,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_mid_price",
            "line": 159,
            "return_type": "Decimal",
            "is_async": false
          },
          {
            "name": "analyze_short_term",
            "line": 178,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "analyze_medium_term",
            "line": 218,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "analyze_long_term",
            "line": 256,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "update_counterparty_profile",
            "line": 303,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "flag_toxic_counterparty",
            "line": 339,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "is_counterparty_toxic",
            "line": 347,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "get_statistics",
            "line": 354,
            "return_type": "AdverseSelectionStats",
            "is_async": false
          },
          {
            "name": "get_toxic_counterparties",
            "line": 376,
            "return_type": "Vec<CounterpartyProfile>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "HistoricalCalibrator",
        "trait": null,
        "file": "crates/analysis/src/historical_calibration.rs",
        "line": 93,
        "methods": [
          {
            "name": "new",
            "line": 93,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "load_binance_data",
            "line": 103,
            "return_type": "Result<Vec<HistoricalCandle>>",
            "is_async": true
          },
          {
            "name": "calibrate_garch",
            "line": 129,
            "return_type": "Result<GarchParams>",
            "is_async": false
          },
          {
            "name": "garch_mle_step",
            "line": 176,
            "return_type": "Result<(f64, f64, f64)>",
            "is_async": false
          },
          {
            "name": "garch_likelihood",
            "line": 222,
            "return_type": "Result<f64>",
            "is_async": false
          },
          {
            "name": "validate_garch_params",
            "line": 244,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "calibrate_distribution",
            "line": 271,
            "return_type": "Result<DistributionParams>",
            "is_async": false
          },
          {
            "name": "detect_regimes",
            "line": 307,
            "return_type": "Result<Vec<VolatilityRegime>>",
            "is_async": false
          },
          {
            "name": "generate_synthetic_data",
            "line": 345,
            "return_type": "Result<Vec<HistoricalCandle>>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "DataStore",
        "trait": null,
        "file": "crates/analysis/src/historical_calibration.rs",
        "line": 412,
        "methods": [
          {
            "name": "new",
            "line": 412,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "store_candles",
            "line": 417,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "store_calibration",
            "line": 422,
            "return_type": "Result<()>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ADFTest",
        "trait": null,
        "file": "crates/analysis/src/statistical_tests.rs",
        "line": 25,
        "methods": [
          {
            "name": "test",
            "line": 28,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "JarqueBeraTest",
        "trait": null,
        "file": "crates/analysis/src/statistical_tests.rs",
        "line": 85,
        "methods": [
          {
            "name": "test",
            "line": 88,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "LjungBoxTest",
        "trait": null,
        "file": "crates/analysis/src/statistical_tests.rs",
        "line": 141,
        "methods": [
          {
            "name": "test",
            "line": 144,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "DCCGarch",
        "trait": null,
        "file": "crates/analysis/src/statistical_tests.rs",
        "line": 187,
        "methods": [
          {
            "name": "estimate",
            "line": 189,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "GaussianCopula",
        "trait": null,
        "file": "crates/analysis/src/statistical_tests.rs",
        "line": 247,
        "methods": [
          {
            "name": "new",
            "line": 247,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "joint_cdf",
            "line": 253,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "tail_dependence",
            "line": 267,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "DccGarch",
        "trait": null,
        "file": "crates/analysis/src/dcc_garch.rs",
        "line": 50,
        "methods": [
          {
            "name": "new",
            "line": 51,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "fit",
            "line": 74,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "fit_univariate_garch",
            "line": 97,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "calculate_standardized_residuals",
            "line": 131,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "estimate_dcc_parameters",
            "line": 155,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "validate_correlations",
            "line": 191,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "forecast",
            "line": 207,
            "return_type": "Result<DMatrix<f64>>",
            "is_async": false
          },
          {
            "name": "get_correlation_matrix",
            "line": 249,
            "return_type": "&DMatrix<f64>",
            "is_async": false
          },
          {
            "name": "portfolio_risk",
            "line": 254,
            "return_type": "Result<f64>",
            "is_async": false
          },
          {
            "name": "correlation_breach",
            "line": 270,
            "return_type": "bool",
            "is_async": false
          }
        ]
      },
      {
        "struct": "IntegratedMLPipeline",
        "trait": null,
        "file": "crates/ml/src/integrated_optimization.rs",
        "line": 71,
        "methods": [
          {
            "name": "new",
            "line": 72,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "extract_features",
            "line": 94,
            "return_type": "Vec<f64>",
            "is_async": false
          },
          {
            "name": "train_model",
            "line": 164,
            "return_type": "TrainedModel",
            "is_async": false
          },
          {
            "name": "predict",
            "line": 225,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "simd_mean",
            "line": 257,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "simd_variance",
            "line": 286,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "simd_skewness",
            "line": 317,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "simd_minmax",
            "line": 346,
            "return_type": "(f64, f64)",
            "is_async": false
          },
          {
            "name": "simd_minmax_static",
            "line": 351,
            "return_type": "(f64, f64)",
            "is_async": false
          },
          {
            "name": "extract_fft_features",
            "line": 385,
            "return_type": "Vec<f64>",
            "is_async": false
          },
          {
            "name": "extract_fft_features_static",
            "line": 401,
            "return_type": "Vec<f64>",
            "is_async": false
          },
          {
            "name": "center_matrix",
            "line": 422,
            "return_type": "Array2<f64>",
            "is_async": false
          },
          {
            "name": "compute_sparsity",
            "line": 428,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "solve_sparse_system",
            "line": 436,
            "return_type": "Vec<f64>",
            "is_async": false
          },
          {
            "name": "solve_dense_system",
            "line": 468,
            "return_type": "Vec<f64>",
            "is_async": false
          },
          {
            "name": "estimate_speedup",
            "line": 495,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "get_metrics",
            "line": 504,
            "return_type": "&PipelineMetrics",
            "is_async": false
          },
          {
            "name": "reset_metrics",
            "line": 509,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MemoryPoolManager",
        "trait": null,
        "file": "crates/ml/src/optimization.rs",
        "line": 11,
        "methods": [
          {
            "name": "new",
            "line": 11,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "allocate",
            "line": 15,
            "return_type": "Vec<u8>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "AVXOptimizer",
        "trait": null,
        "file": "crates/ml/src/optimization.rs",
        "line": 33,
        "methods": [
          {
            "name": "new",
            "line": 33,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "optimize",
            "line": 35,
            "return_type": "Vec<f32>",
            "is_async": false
          },
          {
            "name": "is_enabled",
            "line": 39,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "enable",
            "line": 43,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "disable",
            "line": 47,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "GARCH",
        "trait": null,
        "file": "crates/ml/src/garch.rs",
        "line": 58,
        "methods": [
          {
            "name": "new",
            "line": 59,
            "return_type": "Result<Self>",
            "is_async": false
          },
          {
            "name": "fit",
            "line": 80,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "log_likelihood_t",
            "line": 159,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "compute_gradients",
            "line": 180,
            "return_type": "(f64, f64, f64)",
            "is_async": false
          },
          {
            "name": "forecast",
            "line": 210,
            "return_type": "Vec<f64>",
            "is_async": false
          },
          {
            "name": "calculate_var",
            "line": 232,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "fit_avx512",
            "line": 243,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "fit_standard",
            "line": 249,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "calculate_variance_avx512",
            "line": 261,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "student_t_quantile",
            "line": 309,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "RobustNormalizer",
        "trait": null,
        "file": "crates/ml/src/data_normalization.rs",
        "line": 70,
        "methods": [
          {
            "name": "new",
            "line": 70,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "fit",
            "line": 85,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "transform",
            "line": 115,
            "return_type": "Result<Array2<f64>>",
            "is_async": false
          },
          {
            "name": "fit_transform",
            "line": 136,
            "return_type": "Result<Array2<f64>>",
            "is_async": false
          },
          {
            "name": "inverse_transform",
            "line": 142,
            "return_type": "Result<Array2<f64>>",
            "is_async": false
          },
          {
            "name": "fit_standard",
            "line": 167,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "fit_robust",
            "line": 180,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "fit_quantile",
            "line": 215,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "fit_minmax",
            "line": 240,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "transform_standard",
            "line": 279,
            "return_type": "Result<Array2<f64>>",
            "is_async": false
          },
          {
            "name": "transform_robust",
            "line": 285,
            "return_type": "Result<Array2<f64>>",
            "is_async": false
          },
          {
            "name": "transform_quantile",
            "line": 292,
            "return_type": "Result<Array2<f64>>",
            "is_async": false
          },
          {
            "name": "transform_minmax",
            "line": 331,
            "return_type": "Result<Array2<f64>>",
            "is_async": false
          },
          {
            "name": "transform_vwap",
            "line": 344,
            "return_type": "Result<Array2<f64>>",
            "is_async": false
          },
          {
            "name": "calculate_vwap",
            "line": 367,
            "return_type": "Result<f64>",
            "is_async": false
          },
          {
            "name": "update_vwap",
            "line": 388,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "inverse_normal_cdf",
            "line": 402,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "SignalOrthogonalizer",
        "trait": null,
        "file": "crates/ml/src/signal_processing.rs",
        "line": 46,
        "methods": [
          {
            "name": "new",
            "line": 46,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "fit",
            "line": 59,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "transform",
            "line": 93,
            "return_type": "Result<Array2<f64>>",
            "is_async": false
          },
          {
            "name": "fit_transform",
            "line": 110,
            "return_type": "Result<Array2<f64>>",
            "is_async": false
          },
          {
            "name": "fit_pca",
            "line": 115,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "fit_gram_schmidt",
            "line": 166,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "fit_qr",
            "line": 201,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "fit_ica",
            "line": 232,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "check_decorrelation",
            "line": 290,
            "return_type": "Result<Array2<f64>>",
            "is_async": false
          },
          {
            "name": "correlation",
            "line": 311,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "get_explained_variance",
            "line": 331,
            "return_type": "Option<&Vec<f64>>",
            "is_async": false
          },
          {
            "name": "eigendecomposition",
            "line": 336,
            "return_type": "Result<(Vec<f64>, Array2<f64>)>",
            "is_async": false
          },
          {
            "name": "solve_normal_equations",
            "line": 391,
            "return_type": "Option<Array1<f64>>",
            "is_async": false
          },
          {
            "name": "condition_number",
            "line": 450,
            "return_type": "Result<f64>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "VIFAnalyzer",
        "trait": null,
        "file": "crates/ml/src/signal_processing.rs",
        "line": 470,
        "methods": [
          {
            "name": "calculate_vif",
            "line": 472,
            "return_type": "Result<Vec<f64>>",
            "is_async": false
          },
          {
            "name": "calculate_r_squared",
            "line": 504,
            "return_type": "Result<f64>",
            "is_async": false
          },
          {
            "name": "solve_normal_equations",
            "line": 545,
            "return_type": "Option<Array1<f64>>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "StrassenMultiplier",
        "trait": null,
        "file": "crates/ml/src/math_opt/mod.rs",
        "line": 46,
        "methods": [
          {
            "name": "new",
            "line": 47,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "multiply",
            "line": 55,
            "return_type": "Array2<f64>",
            "is_async": false
          },
          {
            "name": "strassen_recursive",
            "line": 79,
            "return_type": "Array2<f64>",
            "is_async": false
          },
          {
            "name": "multiply_conventional",
            "line": 147,
            "return_type": "Array2<f64>",
            "is_async": false
          },
          {
            "name": "pad_matrix",
            "line": 186,
            "return_type": "Array2<f64>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "RandomizedSVD",
        "trait": null,
        "file": "crates/ml/src/math_opt/mod.rs",
        "line": 210,
        "methods": [
          {
            "name": "new",
            "line": 211,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "decompose",
            "line": 220,
            "return_type": "(Array2<f64>, Array1<f64>, Array2<f64>)",
            "is_async": false
          },
          {
            "name": "random_gaussian_matrix",
            "line": 260,
            "return_type": "Array2<f64>",
            "is_async": false
          },
          {
            "name": "qr_decomposition",
            "line": 268,
            "return_type": "Array2<f64>",
            "is_async": false
          },
          {
            "name": "svd_small",
            "line": 315,
            "return_type": "(Array2<f64>, Array1<f64>, Array2<f64>)",
            "is_async": false
          }
        ]
      },
      {
        "struct": "CSRMatrix",
        "trait": null,
        "file": "crates/ml/src/math_opt/mod.rs",
        "line": 347,
        "methods": [
          {
            "name": "from_dense",
            "line": 348,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "spmv",
            "line": 373,
            "return_type": "Array1<f64>",
            "is_async": false
          },
          {
            "name": "spgemm",
            "line": 397,
            "return_type": "CSRMatrix",
            "is_async": false
          }
        ]
      },
      {
        "struct": "FFTConvolution",
        "trait": null,
        "file": "crates/ml/src/math_opt/mod.rs",
        "line": 479,
        "methods": [
          {
            "name": "new",
            "line": 480,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "convolve",
            "line": 487,
            "return_type": "Vec<f64>",
            "is_async": false
          },
          {
            "name": "pad_to_complex",
            "line": 517,
            "return_type": "Vec<Complex<f64>>",
            "is_async": false
          },
          {
            "name": "convolve_2d",
            "line": 526,
            "return_type": "Array2<f64>",
            "is_async": false
          },
          {
            "name": "fft_2d_inplace",
            "line": 564,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "ifft_2d_inplace",
            "line": 585,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "KahanSum",
        "trait": null,
        "file": "crates/ml/src/math_opt/mod.rs",
        "line": 623,
        "methods": [
          {
            "name": "new",
            "line": 623,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "add",
            "line": 626,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "sum",
            "line": 633,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "kahan_dot",
            "line": 639,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "PurgedWalkForwardCV",
        "trait": null,
        "file": "crates/ml/src/validation/purged_cv.rs",
        "line": 27,
        "methods": [
          {
            "name": "new",
            "line": 27,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "split",
            "line": 42,
            "return_type": "Vec<(Vec<usize>, Vec<usize>)>",
            "is_async": false
          },
          {
            "name": "combinatorial_split",
            "line": 101,
            "return_type": "Vec<(Vec<usize>, Vec<usize>)>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "LeakageSentinel",
        "trait": null,
        "file": "crates/ml/src/validation/purged_cv.rs",
        "line": 158,
        "methods": [
          {
            "name": "new",
            "line": 158,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "test_for_leakage",
            "line": 167,
            "return_type": "LeakageTestResult",
            "is_async": false
          },
          {
            "name": "test_feature_leakage",
            "line": 222,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "calculate_sharpe",
            "line": 265,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_correlation",
            "line": 285,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_correlation_arrays",
            "line": 287,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_accuracy",
            "line": 317,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "test_significance",
            "line": 327,
            "return_type": "(bool, f64)",
            "is_async": false
          }
        ]
      },
      {
        "struct": "TimeDecayWeights",
        "trait": null,
        "file": "crates/ml/src/validation/purged_cv.rs",
        "line": 365,
        "methods": [
          {
            "name": "new",
            "line": 365,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "calculate_weights",
            "line": 368,
            "return_type": "Vec<f64>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MicrostructureFeatures",
        "trait": null,
        "file": "crates/ml/src/features/microstructure.rs",
        "line": 67,
        "methods": [
          {
            "name": "new",
            "line": 67,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "calculate_features",
            "line": 90,
            "return_type": "MicrostructureFeatureSet",
            "is_async": false
          },
          {
            "name": "calculate_kyle_lambda",
            "line": 178,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "kyle_lambda_avx512",
            "line": 194,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "kyle_lambda_scalar",
            "line": 251,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_amihud_illiquidity",
            "line": 273,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_roll_measure",
            "line": 301,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_effective_spread",
            "line": 329,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_realized_spread",
            "line": 335,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_price_impact",
            "line": 363,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_vpin",
            "line": 371,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_order_flow_imbalance",
            "line": 413,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_bid_ask_imbalance",
            "line": 434,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_liquidity_ratio",
            "line": 444,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_hasbrouck_lambda",
            "line": 456,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "decompose_spread",
            "line": 500,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "calculate_log_quote_slope",
            "line": 523,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_information_share",
            "line": 541,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_price_discovery_metric",
            "line": 556,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_twap_deviation",
            "line": 581,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_vwap_deviation",
            "line": 594,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_noise_variance",
            "line": 617,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_signal_to_noise_ratio",
            "line": 640,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "variance",
            "line": 653,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MicrostructureFeatureSet",
        "trait": null,
        "file": "crates/ml/src/features/microstructure.rs",
        "line": 706,
        "methods": [
          {
            "name": "to_feature_vector",
            "line": 707,
            "return_type": "Array1<f32>",
            "is_async": false
          },
          {
            "name": "feature_names",
            "line": 734,
            "return_type": "Vec<&'static str>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "IsotonicCalibrator",
        "trait": null,
        "file": "crates/ml/src/calibration/isotonic.rs",
        "line": 46,
        "methods": [
          {
            "name": "new",
            "line": 46,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "calibrate",
            "line": 59,
            "return_type": "Result<(), CalibrationError>",
            "is_async": false
          },
          {
            "name": "cross_validate_calibration",
            "line": 104,
            "return_type": "Result<IsotonicRegression, CalibrationError>",
            "is_async": false
          },
          {
            "name": "transform",
            "line": 160,
            "return_type": "f32",
            "is_async": false
          },
          {
            "name": "transform_batch",
            "line": 168,
            "return_type": "Result<Array1<f32>, CalibrationError>",
            "is_async": false
          },
          {
            "name": "calculate_brier_score",
            "line": 180,
            "return_type": "f32",
            "is_async": false
          },
          {
            "name": "calculate_calibration_error",
            "line": 189,
            "return_type": "f32",
            "is_async": false
          },
          {
            "name": "detect_regime",
            "line": 219,
            "return_type": "MarketRegime",
            "is_async": false
          }
        ]
      },
      {
        "struct": "IsotonicRegression",
        "trait": null,
        "file": "crates/ml/src/calibration/isotonic.rs",
        "line": 242,
        "methods": [
          {
            "name": "new",
            "line": 242,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "fit_with_regularization",
            "line": 251,
            "return_type": "Result<(), CalibrationError>",
            "is_async": false
          },
          {
            "name": "transform_single",
            "line": 310,
            "return_type": "f32",
            "is_async": false
          },
          {
            "name": "transform",
            "line": 349,
            "return_type": "Result<Array1<f32>, CalibrationError>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ReliabilityDiagram",
        "trait": null,
        "file": "crates/ml/src/calibration/isotonic.rs",
        "line": 373,
        "methods": [
          {
            "name": "new",
            "line": 373,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "compute",
            "line": 378,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "print_summary",
            "line": 409,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "AlignedVec",
        "trait": null,
        "file": "crates/ml/src/simd/mod.rs",
        "line": 37,
        "methods": [
          {
            "name": "new",
            "line": 38,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "as_slice",
            "line": 58,
            "return_type": "&[T]",
            "is_async": false
          },
          {
            "name": "as_mut_slice",
            "line": 66,
            "return_type": "&mut [T]",
            "is_async": false
          },
          {
            "name": "push",
            "line": 72,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "clear",
            "line": 82,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "resize",
            "line": 87,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "to_vec",
            "line": 101,
            "return_type": "Vec<T>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "InferenceEngine",
        "trait": null,
        "file": "crates/ml/src/inference/engine.rs",
        "line": 76,
        "methods": [
          {
            "name": "new",
            "line": 78,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "infer",
            "line": 122,
            "return_type": "Result<u64, InferenceError>",
            "is_async": false
          },
          {
            "name": "dispatch_critical",
            "line": 151,
            "return_type": "Result<(), InferenceError>",
            "is_async": false
          },
          {
            "name": "load_model",
            "line": 159,
            "return_type": "Result<(), InferenceError>",
            "is_async": false
          },
          {
            "name": "process_batch",
            "line": 166,
            "return_type": "Vec<InferenceResult>",
            "is_async": false
          },
          {
            "name": "metrics",
            "line": 207,
            "return_type": "EngineMetrics",
            "is_async": false
          }
        ]
      },
      {
        "struct": "InferenceWorker",
        "trait": null,
        "file": "crates/ml/src/inference/engine.rs",
        "line": 242,
        "methods": [
          {
            "name": "new",
            "line": 242,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "start",
            "line": 259,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "set_cpu_affinity",
            "line": 306,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "set_cpu_affinity",
            "line": 326,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "CachedModel",
        "trait": null,
        "file": "crates/ml/src/inference/engine.rs",
        "line": 346,
        "methods": [
          {
            "name": "from_data",
            "line": 346,
            "return_type": "Result<Self, InferenceError>",
            "is_async": false
          },
          {
            "name": "infer",
            "line": 359,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "apply_layer",
            "line": 372,
            "return_type": "Vec<f32>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "OverfittingDetector",
        "trait": null,
        "file": "crates/ml/src/training/convergence_monitor.rs",
        "line": 112,
        "methods": [
          {
            "name": "new",
            "line": 112,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "detect",
            "line": 122,
            "return_type": "(_bool, f64)",
            "is_async": false
          },
          {
            "name": "is_improving",
            "line": 163,
            "return_type": "bool",
            "is_async": false
          }
        ]
      },
      {
        "struct": "PlateauDetector",
        "trait": null,
        "file": "crates/ml/src/training/convergence_monitor.rs",
        "line": 202,
        "methods": [
          {
            "name": "new",
            "line": 202,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "detect",
            "line": 209,
            "return_type": "bool",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ConvergenceMonitor",
        "trait": null,
        "file": "crates/ml/src/training/convergence_monitor.rs",
        "line": 224,
        "methods": [
          {
            "name": "new",
            "line": 224,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "update",
            "line": 245,
            "return_type": "ConvergenceMetrics",
            "is_async": false
          },
          {
            "name": "calculate_convergence_score",
            "line": 352,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "generate_recommendation",
            "line": 370,
            "return_type": "String",
            "is_async": false
          },
          {
            "name": "get_lr_adjustment",
            "line": 395,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "should_stop",
            "line": 408,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "get_metrics",
            "line": 413,
            "return_type": "ConvergenceMetrics",
            "is_async": false
          },
          {
            "name": "update_gradient_variance",
            "line": 418,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "export_history",
            "line": 436,
            "return_type": "TrainingHistory",
            "is_async": false
          }
        ]
      },
      {
        "struct": "SearchSpace",
        "trait": null,
        "file": "crates/ml/src/training/hyperparameter.rs",
        "line": 45,
        "methods": [
          {
            "name": "new",
            "line": 45,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "add_continuous",
            "line": 50,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "add_integer",
            "line": 64,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "add_categorical",
            "line": 72,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "add_constraint",
            "line": 80,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "sample",
            "line": 88,
            "return_type": "HashMap<String, f64>",
            "is_async": false
          },
          {
            "name": "apply_constraints",
            "line": 114,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "GaussianProcess",
        "trait": null,
        "file": "crates/ml/src/training/hyperparameter.rs",
        "line": 214,
        "methods": [
          {
            "name": "new",
            "line": 214,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "add_observation",
            "line": 224,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "predict",
            "line": 230,
            "return_type": "(f64, f64)",
            "is_async": false
          },
          {
            "name": "kernel_function",
            "line": 264,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "AcquisitionFunction",
        "trait": null,
        "file": "crates/ml/src/training/hyperparameter.rs",
        "line": 315,
        "methods": [
          {
            "name": "evaluate",
            "line": 315,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "BayesianOptimizer",
        "trait": null,
        "file": "crates/ml/src/training/hyperparameter.rs",
        "line": 382,
        "methods": [
          {
            "name": "new",
            "line": 382,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "with_kernel",
            "line": 395,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "with_acquisition",
            "line": 400,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "suggest",
            "line": 408,
            "return_type": "HashMap<String, f64>",
            "is_async": false
          },
          {
            "name": "update",
            "line": 454,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "best_trial",
            "line": 468,
            "return_type": "Option<&Trial>",
            "is_async": false
          },
          {
            "name": "history",
            "line": 477,
            "return_type": "&[Trial]",
            "is_async": false
          }
        ]
      },
      {
        "struct": "GridSearchOptimizer",
        "trait": null,
        "file": "crates/ml/src/training/hyperparameter.rs",
        "line": 494,
        "methods": [
          {
            "name": "new",
            "line": 494,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "generate_grid",
            "line": 500,
            "return_type": "Vec<HashMap<String, f64>>",
            "is_async": false
          },
          {
            "name": "suggest",
            "line": 517,
            "return_type": "Option<HashMap<String, f64>>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "RandomSearchOptimizer",
        "trait": null,
        "file": "crates/ml/src/training/hyperparameter.rs",
        "line": 538,
        "methods": [
          {
            "name": "new",
            "line": 538,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "suggest",
            "line": 543,
            "return_type": "Option<HashMap<String, f64>>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "TimeSeriesSplit",
        "trait": null,
        "file": "crates/ml/src/training/cross_validation.rs",
        "line": 38,
        "methods": [
          {
            "name": "new",
            "line": 38,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "with_gap",
            "line": 45,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "with_test_size",
            "line": 50,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "with_max_train_size",
            "line": 55,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "PurgedKFold",
        "trait": null,
        "file": "crates/ml/src/training/cross_validation.rs",
        "line": 123,
        "methods": [
          {
            "name": "new",
            "line": 123,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "with_purge_gap",
            "line": 129,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "with_embargo",
            "line": 134,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "CombinatorialPurgedCV",
        "trait": null,
        "file": "crates/ml/src/training/cross_validation.rs",
        "line": 197,
        "methods": [
          {
            "name": "new",
            "line": 197,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "with_purge_gap",
            "line": 203,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "combinations",
            "line": 212,
            "return_type": "Vec<Vec<usize>>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "WalkForwardAnalysis",
        "trait": null,
        "file": "crates/ml/src/training/cross_validation.rs",
        "line": 305,
        "methods": [
          {
            "name": "new",
            "line": 305,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "with_step_size",
            "line": 311,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "with_expanding_window",
            "line": 317,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "CrossValidator",
        "trait": null,
        "file": "crates/ml/src/training/cross_validation.rs",
        "line": 367,
        "methods": [
          {
            "name": "new",
            "line": 367,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "with_metrics",
            "line": 373,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "sequential",
            "line": 378,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "validate",
            "line": 386,
            "return_type": "Result<CVResults>\n    where\n        F: Fn(&Array2<f64>, &Array2<f64>) -> Result<HashMap<String, f64>> + Sync,",
            "is_async": false
          },
          {
            "name": "validate_fold",
            "line": 461,
            "return_type": "Result<FoldResult>\n    where\n        F: Fn(&Array2<f64>, &Array2<f64>) -> Result<HashMap<String, f64>>,",
            "is_async": false
          }
        ]
      },
      {
        "struct": "CVResults",
        "trait": null,
        "file": "crates/ml/src/training/cross_validation.rs",
        "line": 520,
        "methods": [
          {
            "name": "summary",
            "line": 521,
            "return_type": "String",
            "is_async": false
          }
        ]
      },
      {
        "struct": "AdamOptimizer",
        "trait": null,
        "file": "crates/ml/src/training/optimizer.rs",
        "line": 47,
        "methods": [
          {
            "name": "new",
            "line": 47,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "with_weight_decay",
            "line": 57,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "SGDOptimizer",
        "trait": null,
        "file": "crates/ml/src/training/optimizer.rs",
        "line": 123,
        "methods": [
          {
            "name": "new",
            "line": 123,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "with_nesterov",
            "line": 130,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "RMSpropOptimizer",
        "trait": null,
        "file": "crates/ml/src/training/optimizer.rs",
        "line": 189,
        "methods": [
          {
            "name": "new",
            "line": 189,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "with_momentum",
            "line": 198,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "LRScheduler",
        "trait": null,
        "file": "crates/ml/src/training/optimizer.rs",
        "line": 265,
        "methods": [
          {
            "name": "get_multiplier",
            "line": 266,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "OptimizerFactory",
        "trait": null,
        "file": "crates/ml/src/training/optimizer.rs",
        "line": 305,
        "methods": [
          {
            "name": "create",
            "line": 306,
            "return_type": "Result<Box<dyn Optimizer>>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ModelStorage",
        "trait": null,
        "file": "crates/ml/src/training/storage.rs",
        "line": 57,
        "methods": [
          {
            "name": "new",
            "line": 57,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "with_database",
            "line": 64,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "with_encryption",
            "line": 69,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "save_model",
            "line": 77,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "load_model",
            "line": 127,
            "return_type": "Result<(Vec<u8>, ModelMetadata)>",
            "is_async": true
          },
          {
            "name": "list_models",
            "line": 168,
            "return_type": "Result<Vec<ModelMetadata>>",
            "is_async": true
          },
          {
            "name": "delete_model",
            "line": 193,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "archive_model",
            "line": 212,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "get_models_by_tag",
            "line": 228,
            "return_type": "Result<Vec<ModelMetadata>>",
            "is_async": true
          },
          {
            "name": "get_best_model",
            "line": 237,
            "return_type": "Result<Option<ModelMetadata>>",
            "is_async": true
          },
          {
            "name": "compress_data",
            "line": 266,
            "return_type": "Result<Vec<u8>>",
            "is_async": false
          },
          {
            "name": "decompress_data",
            "line": 276,
            "return_type": "Result<Vec<u8>>",
            "is_async": false
          },
          {
            "name": "encrypt_data",
            "line": 286,
            "return_type": "Result<Vec<u8>>",
            "is_async": false
          },
          {
            "name": "decrypt_data",
            "line": 292,
            "return_type": "Result<Vec<u8>>",
            "is_async": false
          },
          {
            "name": "save_to_database",
            "line": 298,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "delete_from_database",
            "line": 309,
            "return_type": "Result<()>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "CheckpointManager",
        "trait": null,
        "file": "crates/ml/src/training/storage.rs",
        "line": 330,
        "methods": [
          {
            "name": "new",
            "line": 330,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "save_checkpoint",
            "line": 339,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "load_best_checkpoint",
            "line": 374,
            "return_type": "Result<Option<(Vec<u8>, ModelMetadata)>>",
            "is_async": true
          },
          {
            "name": "cleanup_old_checkpoints",
            "line": 403,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "calculate_checksum",
            "line": 418,
            "return_type": "String",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MetricsCalculator",
        "trait": null,
        "file": "crates/ml/src/training/metrics.rs",
        "line": 276,
        "methods": [
          {
            "name": "new",
            "line": 276,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "regression_only",
            "line": 281,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "calculate_all",
            "line": 290,
            "return_type": "MetricsReport",
            "is_async": false
          },
          {
            "name": "calculate_var",
            "line": 347,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_cvar",
            "line": 356,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "DataLoader",
        "trait": null,
        "file": "crates/ml/src/training/mod.rs",
        "line": 195,
        "methods": [
          {
            "name": "new",
            "line": 196,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "load_data",
            "line": 205,
            "return_type": "Result<(Array2<f64>, Array2<f64>)>",
            "is_async": true
          },
          {
            "name": "create_batches",
            "line": 243,
            "return_type": "Vec<(ArrayView2<'a, f64>, ArrayView2<'a, f64>)>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "CrossValidator",
        "trait": null,
        "file": "crates/ml/src/training/mod.rs",
        "line": 285,
        "methods": [
          {
            "name": "new",
            "line": 285,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "time_series_split",
            "line": 290,
            "return_type": "Vec<(Vec<usize>, Vec<usize>)>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MetricsCalculator",
        "trait": null,
        "file": "crates/ml/src/training/mod.rs",
        "line": 320,
        "methods": [
          {
            "name": "calculate",
            "line": 321,
            "return_type": "HashMap<String, f64>",
            "is_async": false
          },
          {
            "name": "mae",
            "line": 342,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "mse",
            "line": 347,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "r2_score",
            "line": 352,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ModelStorage",
        "trait": null,
        "file": "crates/ml/src/training/mod.rs",
        "line": 373,
        "methods": [
          {
            "name": "new",
            "line": 373,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "save_checkpoint",
            "line": 378,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "load_best_checkpoint",
            "line": 389,
            "return_type": "Result<ModelCheckpoint>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "TrainingPipeline",
        "trait": null,
        "file": "crates/ml/src/training/mod.rs",
        "line": 409,
        "methods": [
          {
            "name": "new",
            "line": 410,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "train",
            "line": 453,
            "return_type": "Result<TrainingResult>",
            "is_async": true
          },
          {
            "name": "validate",
            "line": 649,
            "return_type": "Result<f64>",
            "is_async": true
          },
          {
            "name": "get_status",
            "line": 660,
            "return_type": "TrainingStatus",
            "is_async": true
          },
          {
            "name": "stop",
            "line": 665,
            "return_type": "Result<()>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "HyperparameterOptimizer",
        "trait": null,
        "file": "crates/ml/src/training/mod.rs",
        "line": 693,
        "methods": [
          {
            "name": "new",
            "line": 694,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "optimize",
            "line": 709,
            "return_type": "Result<(TrainingConfig, TrainingResult)>",
            "is_async": true
          },
          {
            "name": "sample_config",
            "line": 749,
            "return_type": "TrainingConfig",
            "is_async": false
          },
          {
            "name": "extract_score",
            "line": 776,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "FeaturePipeline",
        "trait": null,
        "file": "crates/ml/src/feature_engine/pipeline.rs",
        "line": 102,
        "methods": [
          {
            "name": "new",
            "line": 103,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "extract_features",
            "line": 120,
            "return_type": "Result<FeatureVector>",
            "is_async": false
          },
          {
            "name": "extract_parallel",
            "line": 147,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "extract_sequential",
            "line": 176,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "extract_price_features",
            "line": 216,
            "return_type": "Vec<(String, f64)>",
            "is_async": false
          },
          {
            "name": "extract_volume_features",
            "line": 248,
            "return_type": "Vec<(String, f64)>",
            "is_async": false
          },
          {
            "name": "extract_technical_features",
            "line": 279,
            "return_type": "Vec<(String, f64)>",
            "is_async": false
          },
          {
            "name": "extract_statistical_features",
            "line": 324,
            "return_type": "Vec<(String, f64)>",
            "is_async": false
          },
          {
            "name": "extract_microstructure_features",
            "line": 374,
            "return_type": "Vec<(String, f64)>",
            "is_async": false
          },
          {
            "name": "validate_features",
            "line": 406,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "update_stats",
            "line": 424,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "fit",
            "line": 436,
            "return_type": "Result<()>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "FeatureSelector",
        "trait": null,
        "file": "crates/ml/src/feature_engine/selector.rs",
        "line": 55,
        "methods": [
          {
            "name": "new",
            "line": 56,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "fit",
            "line": 70,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "select",
            "line": 109,
            "return_type": "Result<Vec<usize>>",
            "is_async": false
          },
          {
            "name": "fit_variance",
            "line": 118,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "fit_correlation",
            "line": 168,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "fit_k_best",
            "line": 209,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "fit_mutual_information",
            "line": 234,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "fit_l1_selection",
            "line": 263,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "calculate_correlations",
            "line": 288,
            "return_type": "Result<Vec<Vec<f64>>>",
            "is_async": false
          },
          {
            "name": "calculate_variances",
            "line": 329,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "calculate_entropy",
            "line": 353,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "get_importance_scores",
            "line": 386,
            "return_type": "Vec<f64>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "AlignedBuffer",
        "trait": null,
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 103,
        "methods": [
          {
            "name": "new",
            "line": 103,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "SimdAccelerator",
        "trait": null,
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 124,
        "methods": [
          {
            "name": "new",
            "line": 124,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "compute_sma_avx2",
            "line": 132,
            "return_type": "f32",
            "is_async": false
          },
          {
            "name": "compute_ema_simd",
            "line": 161,
            "return_type": "f32",
            "is_async": false
          },
          {
            "name": "hsum_ps_avx2",
            "line": 199,
            "return_type": "f32",
            "is_async": false
          }
        ]
      },
      {
        "struct": "CircuitBreaker",
        "trait": null,
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 230,
        "methods": [
          {
            "name": "new",
            "line": 230,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "trip",
            "line": 235,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "FeatureBounds",
        "trait": null,
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 265,
        "methods": [
          {
            "name": "new",
            "line": 265,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "validate",
            "line": 276,
            "return_type": "Result<f64, FeatureError>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "SMA",
        "trait": null,
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 322,
        "methods": [
          {
            "name": "new",
            "line": 323,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "EMA",
        "trait": null,
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 357,
        "methods": [
          {
            "name": "new",
            "line": 358,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "WMA",
        "trait": null,
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 389,
        "methods": [
          {
            "name": "new",
            "line": 390,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "VWMA",
        "trait": null,
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 424,
        "methods": [
          {
            "name": "new",
            "line": 425,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "RSI",
        "trait": null,
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 467,
        "methods": [
          {
            "name": "new",
            "line": 468,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "calculate_rsi_simd",
            "line": 473,
            "return_type": "f32",
            "is_async": false
          },
          {
            "name": "hsum_ps_avx2",
            "line": 512,
            "return_type": "f32",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MACD",
        "trait": null,
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 544,
        "methods": [
          {
            "name": "new",
            "line": 545,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ATR",
        "trait": null,
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 585,
        "methods": [
          {
            "name": "new",
            "line": 586,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "BollingerBands",
        "trait": null,
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 626,
        "methods": [
          {
            "name": "new",
            "line": 627,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "IndicatorEngine",
        "trait": null,
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 703,
        "methods": [
          {
            "name": "new",
            "line": 703,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "calculate_features",
            "line": 738,
            "return_type": "Result<FeatureVector>",
            "is_async": false
          },
          {
            "name": "generate_cache_key",
            "line": 781,
            "return_type": "FeatureKey",
            "is_async": false
          }
        ]
      },
      {
        "struct": "AdvancedFeatureEngine",
        "trait": null,
        "file": "crates/ml/src/feature_engine/advanced_features.rs",
        "line": 217,
        "methods": [
          {
            "name": "new",
            "line": 218,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "extract_features",
            "line": 327,
            "return_type": "Array1<f64>",
            "is_async": false
          },
          {
            "name": "extract_statistical",
            "line": 372,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "compute_moments_avx512",
            "line": 420,
            "return_type": "(f64, f64, f64, f64)",
            "is_async": false
          },
          {
            "name": "horizontal_sum_avx512",
            "line": 462,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "compute_moments_standard",
            "line": 474,
            "return_type": "(f64, f64, f64, f64)",
            "is_async": false
          },
          {
            "name": "autocorrelation",
            "line": 499,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "c3_statistic",
            "line": 521,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "complexity_invariant_distance",
            "line": 537,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "extract_frequency",
            "line": 552,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "extract_wavelets",
            "line": 582,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "wavelet_transform",
            "line": 607,
            "return_type": "Vec<Vec<f64>>",
            "is_async": false
          },
          {
            "name": "dwt_step",
            "line": 626,
            "return_type": "(Vec<f64>, Vec<f64>)",
            "is_async": false
          },
          {
            "name": "extract_microstructure",
            "line": 659,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "order_book_imbalance",
            "line": 688,
            "return_type": "Vec<f64>",
            "is_async": false
          },
          {
            "name": "estimate_kyle_lambda",
            "line": 705,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "amihud_illiquidity",
            "line": 714,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "extract_fractals",
            "line": 724,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "hurst_exponent",
            "line": 745,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "dfa_analysis",
            "line": 813,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "linear_fit",
            "line": 876,
            "return_type": "(f64, f64)",
            "is_async": false
          },
          {
            "name": "extract_information",
            "line": 890,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "shannon_entropy",
            "line": 917,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "sample_entropy",
            "line": 944,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "permutation_entropy",
            "line": 989,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "lempel_ziv_complexity",
            "line": 1019,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "select_features",
            "line": 1058,
            "return_type": "Array1<f64>",
            "is_async": false
          },
          {
            "name": "price_changes",
            "line": 1065,
            "return_type": "Vec<f64>",
            "is_async": false
          },
          {
            "name": "quantile",
            "line": 1071,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "median",
            "line": 1079,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "power_spectral_density",
            "line": 1083,
            "return_type": "Vec<f64>",
            "is_async": false
          },
          {
            "name": "spectral_entropy",
            "line": 1087,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "max_frequency",
            "line": 1102,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "mean_frequency",
            "line": 1110,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "median_frequency",
            "line": 1122,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "spectral_centroid",
            "line": 1137,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "spectral_rolloff",
            "line": 1142,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "wavelet_entropy",
            "line": 1157,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "OnlineFeatureAdapter",
        "trait": null,
        "file": "crates/ml/src/feature_engine/advanced_features.rs",
        "line": 1180,
        "methods": [
          {
            "name": "adapt_features",
            "line": 1181,
            "return_type": "Array1<f64>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "FeatureDriftDetector",
        "trait": null,
        "file": "crates/ml/src/feature_engine/advanced_features.rs",
        "line": 1196,
        "methods": [
          {
            "name": "new",
            "line": 1196,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "FFTConvolution",
        "trait": null,
        "file": "crates/ml/src/feature_engine/advanced_features.rs",
        "line": 1206,
        "methods": [
          {
            "name": "compute_spectrum",
            "line": 1206,
            "return_type": "Vec<Complex<f64>>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "SpectralFeatures",
        "trait": null,
        "file": "crates/ml/src/feature_engine/advanced_features.rs",
        "line": 1252,
        "methods": [
          {
            "name": "new",
            "line": 1252,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "WaveletDecomposer",
        "trait": null,
        "file": "crates/ml/src/feature_engine/advanced_features.rs",
        "line": 1262,
        "methods": [
          {
            "name": "new",
            "line": 1262,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Stochastic",
        "trait": null,
        "file": "crates/ml/src/feature_engine/indicators_extended.rs",
        "line": 18,
        "methods": [
          {
            "name": "new",
            "line": 19,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "WilliamsR",
        "trait": null,
        "file": "crates/ml/src/feature_engine/indicators_extended.rs",
        "line": 53,
        "methods": [
          {
            "name": "new",
            "line": 54,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "CCI",
        "trait": null,
        "file": "crates/ml/src/feature_engine/indicators_extended.rs",
        "line": 87,
        "methods": [
          {
            "name": "new",
            "line": 88,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MFI",
        "trait": null,
        "file": "crates/ml/src/feature_engine/indicators_extended.rs",
        "line": 131,
        "methods": [
          {
            "name": "new",
            "line": 132,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "HMA",
        "trait": null,
        "file": "crates/ml/src/feature_engine/indicators_extended.rs",
        "line": 181,
        "methods": [
          {
            "name": "new",
            "line": 182,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "KAMA",
        "trait": null,
        "file": "crates/ml/src/feature_engine/indicators_extended.rs",
        "line": 234,
        "methods": [
          {
            "name": "new",
            "line": 235,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ParabolicSAR",
        "trait": null,
        "file": "crates/ml/src/feature_engine/indicators_extended.rs",
        "line": 285,
        "methods": [
          {
            "name": "new",
            "line": 286,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "KeltnerChannel",
        "trait": null,
        "file": "crates/ml/src/feature_engine/indicators_extended.rs",
        "line": 358,
        "methods": [
          {
            "name": "new",
            "line": 359,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "DonchianChannel",
        "trait": null,
        "file": "crates/ml/src/feature_engine/indicators_extended.rs",
        "line": 388,
        "methods": [
          {
            "name": "new",
            "line": 389,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "StdDev",
        "trait": null,
        "file": "crates/ml/src/feature_engine/indicators_extended.rs",
        "line": 418,
        "methods": [
          {
            "name": "new",
            "line": 419,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "CMF",
        "trait": null,
        "file": "crates/ml/src/feature_engine/indicators_extended.rs",
        "line": 457,
        "methods": [
          {
            "name": "new",
            "line": 458,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "SupportResistance",
        "trait": null,
        "file": "crates/ml/src/feature_engine/indicators_extended.rs",
        "line": 569,
        "methods": [
          {
            "name": "new",
            "line": 570,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "TrendStrengthIndex",
        "trait": null,
        "file": "crates/ml/src/feature_engine/indicators_extended.rs",
        "line": 641,
        "methods": [
          {
            "name": "new",
            "line": 642,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MarketRegime",
        "trait": null,
        "file": "crates/ml/src/feature_engine/indicators_extended.rs",
        "line": 677,
        "methods": [
          {
            "name": "new",
            "line": 678,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "IchimokuCloud",
        "trait": null,
        "file": "crates/ml/src/feature_engine/ichimoku.rs",
        "line": 48,
        "methods": [
          {
            "name": "new",
            "line": 49,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "with_params",
            "line": 59,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "calculate_midpoint",
            "line": 69,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_full",
            "line": 94,
            "return_type": "Result<IchimokuResult>",
            "is_async": false
          },
          {
            "name": "calculate_trend_strength",
            "line": 167,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "generate_signal",
            "line": 217,
            "return_type": "IchimokuSignal",
            "is_async": false
          },
          {
            "name": "calculate_sr_levels",
            "line": 247,
            "return_type": "(Vec<f64>, Vec<f64>)",
            "is_async": false
          },
          {
            "name": "project_cloud",
            "line": 277,
            "return_type": "Vec<(f64, f64)>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "HarmonicPatternDetector",
        "trait": null,
        "file": "crates/ml/src/feature_engine/harmonic_patterns.rs",
        "line": 109,
        "methods": [
          {
            "name": "new",
            "line": 110,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "detect_patterns",
            "line": 121,
            "return_type": "Result<Vec<HarmonicPattern>>",
            "is_async": false
          },
          {
            "name": "find_swing_points",
            "line": 163,
            "return_type": "Vec<PricePoint>",
            "is_async": false
          },
          {
            "name": "create_pattern_points",
            "line": 229,
            "return_type": "Option<PatternPoints>",
            "is_async": false
          },
          {
            "name": "calculate_fibonacci_ratios",
            "line": 248,
            "return_type": "FibonacciRatios",
            "is_async": false
          },
          {
            "name": "get_all_pattern_types",
            "line": 308,
            "return_type": "Vec<HarmonicType>",
            "is_async": false
          },
          {
            "name": "validate_pattern",
            "line": 324,
            "return_type": "Option<HarmonicPattern>",
            "is_async": false
          },
          {
            "name": "get_required_ratios",
            "line": 417,
            "return_type": "RequiredRatios",
            "is_async": false
          },
          {
            "name": "calculate_prz",
            "line": 484,
            "return_type": "PotentialReversalZone",
            "is_async": false
          },
          {
            "name": "calculate_trade_setup",
            "line": 545,
            "return_type": "TradeSetup",
            "is_async": false
          },
          {
            "name": "get_active_patterns",
            "line": 588,
            "return_type": "&[HarmonicPattern]",
            "is_async": false
          },
          {
            "name": "is_in_prz",
            "line": 593,
            "return_type": "Option<&HarmonicPattern>",
            "is_async": false
          },
          {
            "name": "project_d_point",
            "line": 600,
            "return_type": "Option<f64>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ElliottWaveDetector",
        "trait": null,
        "file": "crates/ml/src/feature_engine/elliott_wave.rs",
        "line": 96,
        "methods": [
          {
            "name": "new",
            "line": 97,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "detect_patterns",
            "line": 108,
            "return_type": "Result<Vec<ElliottPattern>>",
            "is_async": false
          },
          {
            "name": "find_pivots",
            "line": 146,
            "return_type": "Vec<Pivot>",
            "is_async": false
          },
          {
            "name": "filter_significant_pivots",
            "line": 197,
            "return_type": "Vec<Pivot>",
            "is_async": false
          },
          {
            "name": "build_waves_from_pivots",
            "line": 220,
            "return_type": "Vec<Wave>",
            "is_async": false
          },
          {
            "name": "find_impulsive_pattern",
            "line": 266,
            "return_type": "Option<ElliottPattern>",
            "is_async": false
          },
          {
            "name": "find_corrective_pattern",
            "line": 357,
            "return_type": "Option<ElliottPattern>",
            "is_async": false
          },
          {
            "name": "find_complex_pattern",
            "line": 428,
            "return_type": "Option<ElliottPattern>",
            "is_async": false
          },
          {
            "name": "calculate_retracement",
            "line": 464,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_extension",
            "line": 473,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_pattern_confidence",
            "line": 482,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "determine_wave_degree",
            "line": 493,
            "return_type": "WaveDegree",
            "is_async": false
          },
          {
            "name": "calculate_impulsive_targets",
            "line": 509,
            "return_type": "(f64, f64)",
            "is_async": false
          },
          {
            "name": "calculate_corrective_targets",
            "line": 534,
            "return_type": "(f64, f64)",
            "is_async": false
          },
          {
            "name": "calculate_complex_targets",
            "line": 552,
            "return_type": "(f64, f64)",
            "is_async": false
          },
          {
            "name": "get_market_position",
            "line": 560,
            "return_type": "MarketPosition",
            "is_async": false
          }
        ]
      },
      {
        "struct": "FeatureScaler",
        "trait": null,
        "file": "crates/ml/src/feature_engine/scaler.rs",
        "line": 54,
        "methods": [
          {
            "name": "new",
            "line": 55,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "fit",
            "line": 71,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "transform",
            "line": 101,
            "return_type": "Result<Vec<f64>>",
            "is_async": false
          },
          {
            "name": "fit_standard",
            "line": 126,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "transform_standard",
            "line": 159,
            "return_type": "Result<Vec<f64>>",
            "is_async": false
          },
          {
            "name": "fit_minmax",
            "line": 175,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "transform_minmax",
            "line": 201,
            "return_type": "Result<Vec<f64>>",
            "is_async": false
          },
          {
            "name": "fit_robust",
            "line": 219,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "transform_robust",
            "line": 258,
            "return_type": "Result<Vec<f64>>",
            "is_async": false
          },
          {
            "name": "fit_maxabs",
            "line": 274,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "transform_maxabs",
            "line": 297,
            "return_type": "Result<Vec<f64>>",
            "is_async": false
          },
          {
            "name": "inverse_transform",
            "line": 313,
            "return_type": "Result<Vec<f64>>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "FeatureVector",
        "trait": null,
        "file": "crates/ml/src/feature_engine/mod.rs",
        "line": 59,
        "methods": [
          {
            "name": "new",
            "line": 60,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "add_feature",
            "line": 72,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_feature",
            "line": 78,
            "return_type": "Option<f64>",
            "is_async": false
          },
          {
            "name": "apply_scaling",
            "line": 86,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "select_features",
            "line": 92,
            "return_type": "Result<()>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "FeatureStats",
        "trait": null,
        "file": "crates/ml/src/feature_engine/mod.rs",
        "line": 206,
        "methods": [
          {
            "name": "validate",
            "line": 207,
            "return_type": "Result<()>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "AttentionLSTM",
        "trait": null,
        "file": "crates/ml/src/models/attention_lstm.rs",
        "line": 103,
        "methods": [
          {
            "name": "new",
            "line": 103,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "forward",
            "line": 157,
            "return_type": "Array2<f32>",
            "is_async": false
          },
          {
            "name": "lstm_step_avx512",
            "line": 229,
            "return_type": "(Array2<f32>, Array2<f32>)",
            "is_async": false
          },
          {
            "name": "lstm_step_scalar",
            "line": 338,
            "return_type": "(Array2<f32>, Array2<f32>)",
            "is_async": false
          },
          {
            "name": "lstm_cell_scalar",
            "line": 369,
            "return_type": "(f32, f32)",
            "is_async": false
          },
          {
            "name": "sigmoid_avx512",
            "line": 413,
            "return_type": "__m512",
            "is_async": false
          },
          {
            "name": "tanh_avx512",
            "line": 424,
            "return_type": "__m512",
            "is_async": false
          },
          {
            "name": "exp_approx_avx512",
            "line": 434,
            "return_type": "__m512",
            "is_async": false
          },
          {
            "name": "sigmoid",
            "line": 457,
            "return_type": "f32",
            "is_async": false
          },
          {
            "name": "tanh",
            "line": 459,
            "return_type": "f32",
            "is_async": false
          },
          {
            "name": "project_output",
            "line": 466,
            "return_type": "Array3<f32>",
            "is_async": false
          },
          {
            "name": "xavier_init",
            "line": 482,
            "return_type": "Array2<f32>",
            "is_async": false
          },
          {
            "name": "avg_inference_time_ns",
            "line": 491,
            "return_type": "u64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "LSTMLayer",
        "trait": null,
        "file": "crates/ml/src/models/attention_lstm.rs",
        "line": 501,
        "methods": [
          {
            "name": "new",
            "line": 501,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MultiHeadAttention",
        "trait": null,
        "file": "crates/ml/src/models/attention_lstm.rs",
        "line": 526,
        "methods": [
          {
            "name": "new",
            "line": 526,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "forward",
            "line": 565,
            "return_type": "Array3<f32>",
            "is_async": false
          },
          {
            "name": "project",
            "line": 599,
            "return_type": "Array3<f32>",
            "is_async": false
          },
          {
            "name": "reshape_for_attention",
            "line": 615,
            "return_type": "Array3<f32>",
            "is_async": false
          },
          {
            "name": "scaled_dot_product_attention",
            "line": 625,
            "return_type": "Array3<f32>",
            "is_async": false
          },
          {
            "name": "softmax",
            "line": 660,
            "return_type": "Array3<f32>",
            "is_async": false
          },
          {
            "name": "concat_heads",
            "line": 682,
            "return_type": "Array3<f32>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "LayerNorm",
        "trait": null,
        "file": "crates/ml/src/models/attention_lstm.rs",
        "line": 694,
        "methods": [
          {
            "name": "new",
            "line": 694,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "forward",
            "line": 700,
            "return_type": "Array2<f32>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "GRUCell",
        "trait": null,
        "file": "crates/ml/src/models/gru.rs",
        "line": 138,
        "methods": [
          {
            "name": "new",
            "line": 140,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "forward",
            "line": 227,
            "return_type": "Array1<f32>",
            "is_async": false
          },
          {
            "name": "backward",
            "line": 266,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "GRUModel",
        "trait": null,
        "file": "crates/ml/src/models/gru.rs",
        "line": 327,
        "methods": [
          {
            "name": "new",
            "line": 329,
            "return_type": "Result<Self, GRUError>",
            "is_async": false
          },
          {
            "name": "train",
            "line": 374,
            "return_type": "Result<TrainingResult, GRUError>",
            "is_async": false
          },
          {
            "name": "train_epoch",
            "line": 440,
            "return_type": "Result<f64, GRUError>",
            "is_async": false
          },
          {
            "name": "predict",
            "line": 448,
            "return_type": "Result<Array1<f64>, GRUError>",
            "is_async": false
          },
          {
            "name": "fit_scaler",
            "line": 480,
            "return_type": "Result<(), GRUError>",
            "is_async": false
          },
          {
            "name": "scale_input",
            "line": 500,
            "return_type": "Result<Array2<f32>, GRUError>",
            "is_async": false
          },
          {
            "name": "compute_loss",
            "line": 506,
            "return_type": "Result<f64, GRUError>",
            "is_async": false
          },
          {
            "name": "compute_accuracy",
            "line": 526,
            "return_type": "Result<f64, GRUError>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ARIMAModel",
        "trait": null,
        "file": "crates/ml/src/models/arima.rs",
        "line": 90,
        "methods": [
          {
            "name": "new",
            "line": 92,
            "return_type": "Result<Self, ARIMAError>",
            "is_async": false
          },
          {
            "name": "fit",
            "line": 118,
            "return_type": "Result<FitResult, ARIMAError>",
            "is_async": false
          },
          {
            "name": "predict",
            "line": 199,
            "return_type": "Result<Vec<f64>, ARIMAError>",
            "is_async": false
          },
          {
            "name": "difference_series",
            "line": 249,
            "return_type": "Result<Vec<f64>, ARIMAError>",
            "is_async": false
          },
          {
            "name": "calculate_residuals",
            "line": 264,
            "return_type": "Result<Vec<f64>, ARIMAError>",
            "is_async": false
          },
          {
            "name": "update_parameters",
            "line": 298,
            "return_type": "Result<(Array1<f64>, Array1<f64>, f64), ARIMAError>",
            "is_async": false
          },
          {
            "name": "calculate_likelihood",
            "line": 343,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "integrate_predictions",
            "line": 351,
            "return_type": "Result<Vec<f64>, ARIMAError>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ARIMAModel",
        "trait": null,
        "file": "crates/ml/src/models/arima.rs",
        "line": 396,
        "methods": [
          {
            "name": "ljung_box_test",
            "line": 397,
            "return_type": "Result<LjungBoxResult, ARIMAError>",
            "is_async": false
          },
          {
            "name": "adf_test",
            "line": 429,
            "return_type": "Result<ADFResult, ARIMAError>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "LSTMCell",
        "trait": null,
        "file": "crates/ml/src/models/lstm.rs",
        "line": 126,
        "methods": [
          {
            "name": "new",
            "line": 128,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "forward",
            "line": 180,
            "return_type": "(Array1<f32>, Array1<f32>)",
            "is_async": false
          },
          {
            "name": "backward",
            "line": 225,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "LSTMModel",
        "trait": null,
        "file": "crates/ml/src/models/lstm.rs",
        "line": 259,
        "methods": [
          {
            "name": "new",
            "line": 261,
            "return_type": "Result<Self, LSTMError>",
            "is_async": false
          },
          {
            "name": "train",
            "line": 310,
            "return_type": "Result<TrainingResult, LSTMError>",
            "is_async": false
          },
          {
            "name": "train_epoch",
            "line": 356,
            "return_type": "Result<f64, LSTMError>",
            "is_async": false
          },
          {
            "name": "predict",
            "line": 371,
            "return_type": "Result<Array1<f64>, LSTMError>",
            "is_async": false
          },
          {
            "name": "normalize_data",
            "line": 400,
            "return_type": "Result<(), LSTMError>",
            "is_async": false
          },
          {
            "name": "normalize_input",
            "line": 414,
            "return_type": "Result<Array2<f32>, LSTMError>",
            "is_async": false
          },
          {
            "name": "validate",
            "line": 425,
            "return_type": "Result<f64, LSTMError>",
            "is_async": false
          },
          {
            "name": "check_early_stopping",
            "line": 445,
            "return_type": "bool",
            "is_async": false
          }
        ]
      },
      {
        "struct": "GARCHModel",
        "trait": null,
        "file": "crates/ml/src/models/garch.rs",
        "line": 49,
        "methods": [
          {
            "name": "new",
            "line": 49,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "fit",
            "line": 70,
            "return_type": "Result<(), GARCHError>",
            "is_async": false
          },
          {
            "name": "calculate_variance_avx512",
            "line": 121,
            "return_type": "Result<(), GARCHError>",
            "is_async": false
          },
          {
            "name": "calculate_variance_scalar",
            "line": 170,
            "return_type": "Result<(), GARCHError>",
            "is_async": false
          },
          {
            "name": "optimize_mle_regularized",
            "line": 188,
            "return_type": "Result<(f32, f32, f32), GARCHError>",
            "is_async": false
          },
          {
            "name": "forecast",
            "line": 282,
            "return_type": "Vec<f32>",
            "is_async": false
          },
          {
            "name": "calculate_standardized_residuals",
            "line": 310,
            "return_type": "Result<(), GARCHError>",
            "is_async": false
          },
          {
            "name": "validate_model",
            "line": 325,
            "return_type": "Result<(), GARCHError>",
            "is_async": false
          },
          {
            "name": "ljung_box_test",
            "line": 352,
            "return_type": "Result<f64, GARCHError>",
            "is_async": false
          },
          {
            "name": "arch_test",
            "line": 371,
            "return_type": "Result<f64, GARCHError>",
            "is_async": false
          },
          {
            "name": "check_parameter_stability",
            "line": 378,
            "return_type": "Result<(), GARCHError>",
            "is_async": false
          },
          {
            "name": "autocorrelation",
            "line": 398,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_var",
            "line": 420,
            "return_type": "f32",
            "is_async": false
          },
          {
            "name": "find_quantile",
            "line": 437,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_expected_shortfall",
            "line": 460,
            "return_type": "f32",
            "is_async": false
          },
          {
            "name": "calculate_sample_variance",
            "line": 468,
            "return_type": "f32",
            "is_async": false
          }
        ]
      },
      {
        "struct": "EnsembleModel",
        "trait": null,
        "file": "crates/ml/src/models/ensemble.rs",
        "line": 152,
        "methods": [
          {
            "name": "new",
            "line": 154,
            "return_type": "Result<Self, EnsembleError>",
            "is_async": false
          },
          {
            "name": "add_arima",
            "line": 194,
            "return_type": "Result<(), EnsembleError>",
            "is_async": false
          },
          {
            "name": "add_lstm",
            "line": 212,
            "return_type": "Result<(), EnsembleError>",
            "is_async": false
          },
          {
            "name": "add_gru",
            "line": 221,
            "return_type": "Result<(), EnsembleError>",
            "is_async": false
          },
          {
            "name": "init_model_performance",
            "line": 227,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "predict",
            "line": 241,
            "return_type": "Result<EnsemblePrediction, EnsembleError>",
            "is_async": false
          },
          {
            "name": "average_predictions",
            "line": 348,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "weighted_average",
            "line": 356,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "majority_vote",
            "line": 378,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "stacking_predict",
            "line": 391,
            "return_type": "Result<f64, EnsembleError>",
            "is_async": false
          },
          {
            "name": "calculate_agreement",
            "line": 403,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "update_weights",
            "line": 422,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_metrics",
            "line": 468,
            "return_type": "EnsembleMetrics",
            "is_async": false
          }
        ]
      },
      {
        "struct": "DeepLSTM",
        "trait": null,
        "file": "crates/ml/src/models/deep_lstm.rs",
        "line": 146,
        "methods": [
          {
            "name": "new",
            "line": 147,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "forward",
            "line": 206,
            "return_type": "Array2<f64>",
            "is_async": false
          },
          {
            "name": "backward",
            "line": 273,
            "return_type": "Array2<f64>",
            "is_async": false
          },
          {
            "name": "update_weights",
            "line": 306,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "apply_dropout_static",
            "line": 312,
            "return_type": "Array2<f64>",
            "is_async": false
          },
          {
            "name": "train_batch",
            "line": 325,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "predict",
            "line": 350,
            "return_type": "Array1<f64>",
            "is_async": false
          },
          {
            "name": "compute_loss",
            "line": 368,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "compute_loss_gradient",
            "line": 375,
            "return_type": "Array2<f64>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "LSTMLayer",
        "trait": null,
        "file": "crates/ml/src/models/deep_lstm.rs",
        "line": 390,
        "methods": [
          {
            "name": "new",
            "line": 391,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "forward_avx512",
            "line": 435,
            "return_type": "Array2<f64>",
            "is_async": false
          },
          {
            "name": "forward_standard",
            "line": 499,
            "return_type": "Array2<f64>",
            "is_async": false
          },
          {
            "name": "backward",
            "line": 536,
            "return_type": "Array2<f64>",
            "is_async": false
          },
          {
            "name": "sigmoid",
            "line": 543,
            "return_type": "Array2<f64>",
            "is_async": false
          },
          {
            "name": "tanh",
            "line": 545,
            "return_type": "Array2<f64>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "LayerNorm",
        "trait": null,
        "file": "crates/ml/src/models/deep_lstm.rs",
        "line": 553,
        "methods": [
          {
            "name": "new",
            "line": 554,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "forward",
            "line": 566,
            "return_type": "Array2<f64>",
            "is_async": false
          },
          {
            "name": "backward",
            "line": 587,
            "return_type": "Array2<f64>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "GradientClipper",
        "trait": null,
        "file": "crates/ml/src/models/deep_lstm.rs",
        "line": 594,
        "methods": [
          {
            "name": "new",
            "line": 595,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "clip",
            "line": 605,
            "return_type": "Array2<f64>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "AdamW",
        "trait": null,
        "file": "crates/ml/src/models/deep_lstm.rs",
        "line": 637,
        "methods": [
          {
            "name": "new",
            "line": 638,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "step",
            "line": 652,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_current_lr",
            "line": 681,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "OptimizedXGBoost",
        "trait": null,
        "file": "crates/ml/src/models/xgboost_optimized.rs",
        "line": 228,
        "methods": [
          {
            "name": "new",
            "line": 229,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "train",
            "line": 281,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "build_tree",
            "line": 406,
            "return_type": "Result<DecisionTree, XGBoostError>",
            "is_async": false
          },
          {
            "name": "build_node",
            "line": 442,
            "return_type": "Result<TreeNode, XGBoostError>",
            "is_async": false
          },
          {
            "name": "find_best_split",
            "line": 554,
            "return_type": "Result<BestSplit, XGBoostError>",
            "is_async": false
          },
          {
            "name": "find_best_split_for_feature",
            "line": 602,
            "return_type": "BestSplit",
            "is_async": false
          },
          {
            "name": "calculate_split_gain",
            "line": 676,
            "return_type": "f32",
            "is_async": false
          },
          {
            "name": "calculate_gradients_hessians",
            "line": 695,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "calculate_gradients_avx512",
            "line": 716,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "calculate_sums_avx512",
            "line": 751,
            "return_type": "(f32, f32)",
            "is_async": false
          },
          {
            "name": "calculate_sums_scalar",
            "line": 774,
            "return_type": "(f32, f32)",
            "is_async": false
          },
          {
            "name": "split_samples",
            "line": 792,
            "return_type": "(Vec<usize>, Vec<usize>)",
            "is_async": false
          },
          {
            "name": "update_predictions",
            "line": 814,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "predict_single_tree",
            "line": 828,
            "return_type": "f32",
            "is_async": false
          },
          {
            "name": "traverse_tree",
            "line": 837,
            "return_type": "f32",
            "is_async": false
          },
          {
            "name": "predict",
            "line": 857,
            "return_type": "Result<Array1<f32>, XGBoostError>",
            "is_async": false
          },
          {
            "name": "subsample_data",
            "line": 882,
            "return_type": "(Vec<usize>, Vec<usize>)",
            "is_async": false
          },
          {
            "name": "is_improving",
            "line": 902,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "calculate_feature_importance",
            "line": 916,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "accumulate_importance",
            "line": 935,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "count_leaves",
            "line": 946,
            "return_type": "u32",
            "is_async": false
          },
          {
            "name": "calculate_average_depth",
            "line": 960,
            "return_type": "f32",
            "is_async": false
          },
          {
            "name": "calculate_tree_depth",
            "line": 973,
            "return_type": "u32",
            "is_async": false
          },
          {
            "name": "calculate_rmse",
            "line": 989,
            "return_type": "f32",
            "is_async": false
          },
          {
            "name": "calculate_mae",
            "line": 995,
            "return_type": "f32",
            "is_async": false
          },
          {
            "name": "calculate_r2",
            "line": 1001,
            "return_type": "f32",
            "is_async": false
          }
        ]
      },
      {
        "struct": "HyperparameterOptimizer",
        "trait": null,
        "file": "crates/ml/src/models/xgboost_optimized.rs",
        "line": 1015,
        "methods": [
          {
            "name": "new",
            "line": 1015,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "SurrogateModel",
        "trait": null,
        "file": "crates/ml/src/models/xgboost_optimized.rs",
        "line": 1034,
        "methods": [
          {
            "name": "new",
            "line": 1034,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "OptimizedEnsemble",
        "trait": null,
        "file": "crates/ml/src/models/ensemble_optimized.rs",
        "line": 249,
        "methods": [
          {
            "name": "new",
            "line": 250,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "predict",
            "line": 324,
            "return_type": "Array1<f64>",
            "is_async": false
          },
          {
            "name": "get_all_predictions",
            "line": 361,
            "return_type": "Array2<f64>",
            "is_async": false
          },
          {
            "name": "simple_average",
            "line": 387,
            "return_type": "Array1<f64>",
            "is_async": false
          },
          {
            "name": "weighted_average",
            "line": 392,
            "return_type": "Array1<f64>",
            "is_async": false
          },
          {
            "name": "bayesian_average",
            "line": 421,
            "return_type": "Array1<f64>",
            "is_async": false
          },
          {
            "name": "dynamic_weighted",
            "line": 438,
            "return_type": "Array1<f64>",
            "is_async": false
          },
          {
            "name": "stacking_ensemble",
            "line": 448,
            "return_type": "Array1<f64>",
            "is_async": false
          },
          {
            "name": "update_weights_online",
            "line": 479,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "adapt_to_drift",
            "line": 508,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "compute_confidence",
            "line": 523,
            "return_type": "Array1<f64>",
            "is_async": false
          },
          {
            "name": "compute_diversity",
            "line": 540,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "correlation",
            "line": 562,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "update_metrics",
            "line": 577,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "find_worst_performer",
            "line": 591,
            "return_type": "Option<String>",
            "is_async": false
          },
          {
            "name": "train",
            "line": 601,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "update_model_performance",
            "line": 617,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "optimize_weights",
            "line": 636,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "TransformerModel",
        "trait": null,
        "file": "crates/ml/src/models/ensemble_optimized.rs",
        "line": 655,
        "methods": [
          {
            "name": "new",
            "line": 655,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "predict",
            "line": 664,
            "return_type": "Array1<f64>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "TemporalCNN",
        "trait": null,
        "file": "crates/ml/src/models/ensemble_optimized.rs",
        "line": 673,
        "methods": [
          {
            "name": "new",
            "line": 673,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "predict",
            "line": 682,
            "return_type": "Array1<f64>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "StackedGRU",
        "trait": null,
        "file": "crates/ml/src/models/ensemble_optimized.rs",
        "line": 691,
        "methods": [
          {
            "name": "new",
            "line": 691,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "predict",
            "line": 697,
            "return_type": "Array1<f64>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "GradientBoostingModel",
        "trait": null,
        "file": "crates/ml/src/models/ensemble_optimized.rs",
        "line": 706,
        "methods": [
          {
            "name": "new",
            "line": 706,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "predict",
            "line": 714,
            "return_type": "Array1<f64>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ConceptDriftDetector",
        "trait": null,
        "file": "crates/ml/src/models/ensemble_optimized.rs",
        "line": 724,
        "methods": [
          {
            "name": "new",
            "line": 724,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "detect_drift",
            "line": 731,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "reset",
            "line": 742,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "PositionalEncoding",
        "trait": null,
        "file": "crates/ml/src/models/ensemble_optimized.rs",
        "line": 773,
        "methods": [
          {
            "name": "new",
            "line": 773,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "StackingEnsemble",
        "trait": null,
        "file": "crates/ml/src/models/stacking_ensemble.rs",
        "line": 92,
        "methods": [
          {
            "name": "new",
            "line": 92,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "fit",
            "line": 120,
            "return_type": "Result<(), ModelError>",
            "is_async": true
          },
          {
            "name": "fit_stacking",
            "line": 159,
            "return_type": "Result<(), ModelError>",
            "is_async": true
          },
          {
            "name": "fit_blending",
            "line": 222,
            "return_type": "Result<(), ModelError>",
            "is_async": true
          },
          {
            "name": "fit_voting",
            "line": 241,
            "return_type": "Result<(), ModelError>",
            "is_async": true
          },
          {
            "name": "fit_bayesian",
            "line": 251,
            "return_type": "Result<(), ModelError>",
            "is_async": true
          },
          {
            "name": "fit_dynamic",
            "line": 271,
            "return_type": "Result<(), ModelError>",
            "is_async": true
          },
          {
            "name": "predict",
            "line": 307,
            "return_type": "Result<Array1<f32>, ModelError>",
            "is_async": true
          },
          {
            "name": "predict_stacking",
            "line": 318,
            "return_type": "Result<Array1<f32>, ModelError>",
            "is_async": true
          },
          {
            "name": "predict_blending",
            "line": 349,
            "return_type": "Result<Array1<f32>, ModelError>",
            "is_async": true
          },
          {
            "name": "predict_voting",
            "line": 364,
            "return_type": "Result<Array1<f32>, ModelError>",
            "is_async": true
          },
          {
            "name": "predict_bayesian",
            "line": 389,
            "return_type": "Result<Array1<f32>, ModelError>",
            "is_async": true
          },
          {
            "name": "predict_dynamic",
            "line": 394,
            "return_type": "Result<Array1<f32>, ModelError>",
            "is_async": true
          },
          {
            "name": "get_cv_splits",
            "line": 399,
            "return_type": "Vec<(Vec<usize>, Vec<usize>)>",
            "is_async": false
          },
          {
            "name": "kfold_splits",
            "line": 415,
            "return_type": "Vec<(Vec<usize>, Vec<usize>)>",
            "is_async": false
          },
          {
            "name": "timeseries_splits",
            "line": 453,
            "return_type": "Vec<(Vec<usize>, Vec<usize>)>",
            "is_async": false
          },
          {
            "name": "purged_kfold_splits",
            "line": 476,
            "return_type": "Vec<(Vec<usize>, Vec<usize>)>",
            "is_async": false
          },
          {
            "name": "calculate_diversity",
            "line": 503,
            "return_type": "Result<f64, ModelError>",
            "is_async": false
          },
          {
            "name": "correlation",
            "line": 528,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "optimize_blending_weights",
            "line": 556,
            "return_type": "Result<Array1<f32>, ModelError>",
            "is_async": true
          },
          {
            "name": "calculate_rmse",
            "line": 612,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_model_score",
            "line": 622,
            "return_type": "Result<f32, ModelError>",
            "is_async": true
          },
          {
            "name": "softmax",
            "line": 628,
            "return_type": "Array1<f32>",
            "is_async": false
          },
          {
            "name": "aggregate_feature_importance",
            "line": 636,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_metrics",
            "line": 667,
            "return_type": "&EnsembleMetrics",
            "is_async": false
          },
          {
            "name": "get_feature_importance",
            "line": 672,
            "return_type": "Option<&Array1<f32>>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ModelStorage",
        "trait": null,
        "file": "crates/ml/src/models/registry.rs",
        "line": 40,
        "methods": [
          {
            "name": "new",
            "line": 40,
            "return_type": "std::io::Result<Self>",
            "is_async": false
          },
          {
            "name": "load_model",
            "line": 53,
            "return_type": "std::io::Result<Arc<Mmap>>",
            "is_async": false
          },
          {
            "name": "save_model",
            "line": 79,
            "return_type": "std::io::Result<()>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ModelVersion",
        "trait": null,
        "file": "crates/ml/src/models/registry.rs",
        "line": 116,
        "methods": [
          {
            "name": "new",
            "line": 116,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "to_string",
            "line": 123,
            "return_type": "String",
            "is_async": false
          }
        ]
      },
      {
        "struct": "DegradationDetector",
        "trait": null,
        "file": "crates/ml/src/models/registry.rs",
        "line": 269,
        "methods": [
          {
            "name": "new",
            "line": 269,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "check_degradation",
            "line": 279,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "get_metric_value",
            "line": 334,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "set_baseline",
            "line": 346,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "update_metrics",
            "line": 354,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ModelRegistry",
        "trait": null,
        "file": "crates/ml/src/models/registry.rs",
        "line": 376,
        "methods": [
          {
            "name": "new",
            "line": 376,
            "return_type": "std::io::Result<Self>",
            "is_async": false
          },
          {
            "name": "register_model",
            "line": 393,
            "return_type": "Result<Uuid, RegistryError>",
            "is_async": false
          },
          {
            "name": "deploy_model",
            "line": 422,
            "return_type": "Result<DeploymentResult, RegistryError>",
            "is_async": false
          },
          {
            "name": "deploy_immediate",
            "line": 441,
            "return_type": "Result<DeploymentResult, RegistryError>",
            "is_async": false
          },
          {
            "name": "deploy_canary",
            "line": 467,
            "return_type": "Result<DeploymentResult, RegistryError>",
            "is_async": false
          },
          {
            "name": "deploy_blue_green",
            "line": 501,
            "return_type": "Result<DeploymentResult, RegistryError>",
            "is_async": false
          },
          {
            "name": "deploy_shadow",
            "line": 522,
            "return_type": "Result<DeploymentResult, RegistryError>",
            "is_async": false
          },
          {
            "name": "get_model_for_inference",
            "line": 554,
            "return_type": "Option<Uuid>",
            "is_async": false
          },
          {
            "name": "select_ab_model",
            "line": 585,
            "return_type": "Uuid",
            "is_async": false
          },
          {
            "name": "record_performance",
            "line": 604,
            "return_type": "Result<(), RegistryError>",
            "is_async": true
          },
          {
            "name": "trigger_rollback",
            "line": 641,
            "return_type": "Result<(), RegistryError>",
            "is_async": true
          },
          {
            "name": "compare_models",
            "line": 685,
            "return_type": "Result<ComparisonResult, RegistryError>",
            "is_async": false
          },
          {
            "name": "calculate_average_performance",
            "line": 709,
            "return_type": "ModelMetrics",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ABTestConfig",
        "trait": null,
        "file": "crates/ml/src/models/registry.rs",
        "line": 777,
        "methods": [
          {
            "name": "calculate_significance",
            "line": 779,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "t_cdf",
            "line": 832,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "WalkForwardAnalysis",
        "trait": null,
        "file": "crates/ml/src/backtesting/walk_forward.rs",
        "line": 125,
        "methods": [
          {
            "name": "new",
            "line": 125,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "run",
            "line": 147,
            "return_type": "Result<WalkForwardResults>",
            "is_async": true
          },
          {
            "name": "get_window_indices",
            "line": 249,
            "return_type": "Result<(Vec<usize>, Vec<usize>)>",
            "is_async": false
          },
          {
            "name": "calculate_window_performance",
            "line": 277,
            "return_type": "Result<WindowPerformance>",
            "is_async": false
          },
          {
            "name": "calculate_returns",
            "line": 327,
            "return_type": "Vec<f64>",
            "is_async": false
          },
          {
            "name": "calculate_sharpe",
            "line": 344,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_max_drawdown",
            "line": 362,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_win_rate",
            "line": 388,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_profit_factor",
            "line": 398,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_final_results",
            "line": 410,
            "return_type": "Result<WalkForwardResults>",
            "is_async": false
          },
          {
            "name": "calculate_std",
            "line": 444,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "validate_results",
            "line": 459,
            "return_type": "Result<()>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "StatisticalValidator",
        "trait": null,
        "file": "crates/ml/src/backtesting/walk_forward.rs",
        "line": 500,
        "methods": [
          {
            "name": "t_test",
            "line": 501,
            "return_type": "Result<f64>",
            "is_async": false
          },
          {
            "name": "p_value",
            "line": 517,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "HotPathValidator",
        "trait": null,
        "file": "crates/infrastructure/src/hot_path_verification.rs",
        "line": 19,
        "methods": [
          {
            "name": "begin",
            "line": 20,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "validate",
            "line": 33,
            "return_type": "Result<ValidationReport, String>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "BenchmarkResults",
        "trait": null,
        "file": "crates/infrastructure/src/hot_path_verification.rs",
        "line": 191,
        "methods": [
          {
            "name": "meets_targets",
            "line": 191,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "report",
            "line": 194,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ComponentBreaker",
        "trait": null,
        "file": "crates/infrastructure/src/circuit_breaker_sophia.rs",
        "line": 171,
        "methods": [
          {
            "name": "new",
            "line": 171,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "current_state",
            "line": 194,
            "return_type": "CircuitState",
            "is_async": false
          },
          {
            "name": "should_trip",
            "line": 200,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "try_acquire",
            "line": 233,
            "return_type": "Result<CallGuard, CircuitError>",
            "is_async": false
          },
          {
            "name": "try_acquire_half_open",
            "line": 276,
            "return_type": "Result<CallGuard, CircuitError>",
            "is_async": false
          },
          {
            "name": "release_half_open_token",
            "line": 309,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "try_transition_to_half_open",
            "line": 336,
            "return_type": "Result<(), CircuitError>",
            "is_async": false
          },
          {
            "name": "record_transition",
            "line": 371,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "record_outcome",
            "line": 377,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "try_open_circuit",
            "line": 420,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "try_close_circuit",
            "line": 448,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "CallGuard",
        "trait": null,
        "file": "crates/infrastructure/src/circuit_breaker_sophia.rs",
        "line": 500,
        "methods": [
          {
            "name": "new",
            "line": 500,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "new_half_open",
            "line": 508,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "record",
            "line": 522,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "GlobalCircuitBreaker",
        "trait": null,
        "file": "crates/infrastructure/src/circuit_breaker_sophia.rs",
        "line": 562,
        "methods": [
          {
            "name": "new",
            "line": 562,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "component",
            "line": 602,
            "return_type": "Arc<ComponentBreaker>",
            "is_async": false
          },
          {
            "name": "derive_global_state",
            "line": 616,
            "return_type": "CircuitState",
            "is_async": false
          },
          {
            "name": "acquire",
            "line": 712,
            "return_type": "Result<CallGuard, CircuitError>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "CircuitBreaker",
        "trait": null,
        "file": "crates/infrastructure/src/position_reconciliation.rs",
        "line": 42,
        "methods": [
          {
            "name": "new",
            "line": 42,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "is_tripped",
            "line": 51,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "record_failure",
            "line": 55,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "PositionReconciliationEngine",
        "trait": null,
        "file": "crates/infrastructure/src/position_reconciliation.rs",
        "line": 487,
        "methods": [
          {
            "name": "new",
            "line": 488,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "reconcile_all",
            "line": 514,
            "return_type": "Result<ReconciliationReport>",
            "is_async": true
          },
          {
            "name": "query_all_exchanges",
            "line": 584,
            "return_type": "Result<HashMap<String, Vec<Position>>>",
            "is_async": true
          },
          {
            "name": "find_discrepancies",
            "line": 630,
            "return_type": "Result<Vec<Discrepancy>>",
            "is_async": true
          },
          {
            "name": "assess_risk",
            "line": 748,
            "return_type": "Result<RiskAssessment>",
            "is_async": true
          },
          {
            "name": "generate_recommendations",
            "line": 829,
            "return_type": "Result<Vec<RecommendedAction>>",
            "is_async": true
          },
          {
            "name": "calculate_total_exposure",
            "line": 890,
            "return_type": "Decimal",
            "is_async": false
          },
          {
            "name": "calculate_severity",
            "line": 898,
            "return_type": "Severity",
            "is_async": false
          },
          {
            "name": "determine_status",
            "line": 913,
            "return_type": "ReconciliationStatus",
            "is_async": false
          },
          {
            "name": "calculate_integrity_hash",
            "line": 930,
            "return_type": "String",
            "is_async": false
          },
          {
            "name": "execute_emergency_actions",
            "line": 955,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "sync_from_exchanges",
            "line": 991,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "get_last_report",
            "line": 1003,
            "return_type": "Option<ReconciliationReport>",
            "is_async": true
          },
          {
            "name": "subscribe",
            "line": 1008,
            "return_type": "broadcast::Receiver<ReconciliationEvent>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ReconciliationScheduler",
        "trait": null,
        "file": "crates/infrastructure/src/position_reconciliation.rs",
        "line": 1026,
        "methods": [
          {
            "name": "new",
            "line": 1026,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "start",
            "line": 1035,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "stop",
            "line": 1067,
            "return_type": "()",
            "is_async": true
          }
        ]
      },
      {
        "struct": "NetworkHealthMonitor",
        "trait": null,
        "file": "crates/infrastructure/src/network_partition_handler.rs",
        "line": 208,
        "methods": [
          {
            "name": "new",
            "line": 209,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "initialize_services",
            "line": 250,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "initialize_failover_strategies",
            "line": 373,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "start",
            "line": 422,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "perform_health_checks",
            "line": 466,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "check_service_health",
            "line": 539,
            "return_type": "Result<bool>",
            "is_async": true
          },
          {
            "name": "check_database_health",
            "line": 576,
            "return_type": "Result<bool>",
            "is_async": true
          },
          {
            "name": "check_redis_health",
            "line": 583,
            "return_type": "Result<bool>",
            "is_async": true
          },
          {
            "name": "check_exchange_health",
            "line": 589,
            "return_type": "Result<bool>",
            "is_async": true
          },
          {
            "name": "calculate_partition_status",
            "line": 595,
            "return_type": "Result<PartitionStatus>",
            "is_async": true
          },
          {
            "name": "determine_mode_change",
            "line": 668,
            "return_type": "Result<Option<ControlMode>>",
            "is_async": true
          },
          {
            "name": "get_status",
            "line": 678,
            "return_type": "PartitionStatus",
            "is_async": true
          },
          {
            "name": "get_service_health",
            "line": 683,
            "return_type": "Option<ServiceHealth>",
            "is_async": true
          },
          {
            "name": "get_all_services",
            "line": 688,
            "return_type": "Vec<ServiceHealth>",
            "is_async": true
          },
          {
            "name": "force_check",
            "line": 693,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "calculate_optimal_failover",
            "line": 706,
            "return_type": "Result<String>",
            "is_async": true
          },
          {
            "name": "shutdown",
            "line": 749,
            "return_type": "Result<()>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "LatencyTracker",
        "trait": null,
        "file": "crates/infrastructure/src/network_partition_handler.rs",
        "line": 769,
        "methods": [
          {
            "name": "new",
            "line": 769,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "record_check_latency",
            "line": 774,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_p99_latency",
            "line": 781,
            "return_type": "Duration",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ToxicitySignals",
        "trait": null,
        "file": "crates/infrastructure/src/circuit_breaker_integration.rs",
        "line": 56,
        "methods": [
          {
            "name": "toxicity_score",
            "line": 58,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "has_critical_breach",
            "line": 83,
            "return_type": "Option<ToxicityBreach>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "RiskCircuitBreakers",
        "trait": null,
        "file": "crates/infrastructure/src/circuit_breaker_integration.rs",
        "line": 178,
        "methods": [
          {
            "name": "new",
            "line": 178,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "any_open",
            "line": 223,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "all_breakers",
            "line": 233,
            "return_type": "Vec<Arc<ComponentBreaker>>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ToxicityMonitor",
        "trait": null,
        "file": "crates/infrastructure/src/circuit_breaker_integration.rs",
        "line": 312,
        "methods": [
          {
            "name": "new",
            "line": 312,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "update",
            "line": 332,
            "return_type": "Option<ToxicityBreach>",
            "is_async": false
          },
          {
            "name": "toxicity_level",
            "line": 359,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "is_toxic",
            "line": 364,
            "return_type": "bool",
            "is_async": false
          }
        ]
      },
      {
        "struct": "CircuitBreakerHub",
        "trait": null,
        "file": "crates/infrastructure/src/circuit_breaker_integration.rs",
        "line": 374,
        "methods": [
          {
            "name": "new",
            "line": 376,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "register_breaker",
            "line": 391,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "risk_calculation",
            "line": 398,
            "return_type": "Result<T, CircuitBreakerError>\n    where\n        F: FnOnce() -> Result<T, String>,",
            "is_async": true
          },
          {
            "name": "update_toxicity",
            "line": 454,
            "return_type": "Result<(), ToxicityGateTripped>",
            "is_async": true
          },
          {
            "name": "check_spread",
            "line": 491,
            "return_type": "Result<(), SpreadExplosionDetected>",
            "is_async": true
          },
          {
            "name": "handle_api_errors",
            "line": 509,
            "return_type": "Result<(), APIErrorCascade>",
            "is_async": true
          },
          {
            "name": "handle_breaker_trip",
            "line": 534,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "halt_trading",
            "line": 552,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "trigger_emergency",
            "line": 566,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "can_trade",
            "line": 572,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "reset_all",
            "line": 592,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "stats",
            "line": 606,
            "return_type": "CircuitBreakerStatsSnapshot",
            "is_async": false
          }
        ]
      },
      {
        "struct": "CircuitBreakerStats",
        "trait": null,
        "file": "crates/infrastructure/src/circuit_breaker_integration.rs",
        "line": 639,
        "methods": [
          {
            "name": "new",
            "line": 639,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "record_success",
            "line": 648,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "record_failure",
            "line": 656,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "record_rejection",
            "line": 663,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "snapshot",
            "line": 670,
            "return_type": "CircuitBreakerStatsSnapshot",
            "is_async": false
          }
        ]
      },
      {
        "struct": "CpuFeatures",
        "trait": null,
        "file": "crates/infrastructure/src/cpu_features.rs",
        "line": 99,
        "methods": [
          {
            "name": "detect",
            "line": 101,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "get_cpu_brand",
            "line": 184,
            "return_type": "String",
            "is_async": false
          },
          {
            "name": "get_cache_sizes",
            "line": 210,
            "return_type": "(usize, usize, usize)",
            "is_async": false
          },
          {
            "name": "can_use_avx512",
            "line": 223,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "can_use_avx2",
            "line": 231,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "optimal_simd_width",
            "line": 237,
            "return_type": "usize",
            "is_async": false
          },
          {
            "name": "parallel_f32_count",
            "line": 248,
            "return_type": "usize",
            "is_async": false
          },
          {
            "name": "parallel_f64_count",
            "line": 254,
            "return_type": "usize",
            "is_async": false
          }
        ]
      },
      {
        "struct": "SimdPerformanceMonitor",
        "trait": null,
        "file": "crates/infrastructure/src/cpu_features.rs",
        "line": 320,
        "methods": [
          {
            "name": "new",
            "line": 320,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "record",
            "line": 332,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "report",
            "line": 357,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "EmaCalculator",
        "trait": null,
        "file": "crates/infrastructure/src/simd_ops.rs",
        "line": 21,
        "methods": [
          {
            "name": "calculate",
            "line": 23,
            "return_type": "Vec<f32>",
            "is_async": false
          },
          {
            "name": "calculate_scalar",
            "line": 42,
            "return_type": "Vec<f32>",
            "is_async": false
          },
          {
            "name": "calculate_sse2",
            "line": 62,
            "return_type": "Vec<f32>",
            "is_async": false
          },
          {
            "name": "calculate_sse42",
            "line": 122,
            "return_type": "Vec<f32>",
            "is_async": false
          },
          {
            "name": "calculate_avx2",
            "line": 130,
            "return_type": "Vec<f32>",
            "is_async": false
          },
          {
            "name": "calculate_avx512",
            "line": 174,
            "return_type": "Vec<f32>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "SmaCalculator",
        "trait": null,
        "file": "crates/infrastructure/src/simd_ops.rs",
        "line": 199,
        "methods": [
          {
            "name": "calculate",
            "line": 200,
            "return_type": "Vec<f32>",
            "is_async": false
          },
          {
            "name": "calculate_scalar",
            "line": 218,
            "return_type": "Vec<f32>",
            "is_async": false
          },
          {
            "name": "calculate_sse2",
            "line": 240,
            "return_type": "Vec<f32>",
            "is_async": false
          },
          {
            "name": "hsum_sse2",
            "line": 276,
            "return_type": "f32",
            "is_async": false
          },
          {
            "name": "calculate_sse42",
            "line": 286,
            "return_type": "Vec<f32>",
            "is_async": false
          },
          {
            "name": "calculate_avx2",
            "line": 292,
            "return_type": "Vec<f32>",
            "is_async": false
          },
          {
            "name": "hsum_avx2",
            "line": 328,
            "return_type": "f32",
            "is_async": false
          },
          {
            "name": "calculate_avx512",
            "line": 337,
            "return_type": "Vec<f32>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "PortfolioRiskCalculator",
        "trait": null,
        "file": "crates/infrastructure/src/simd_ops.rs",
        "line": 379,
        "methods": [
          {
            "name": "calculate_risk",
            "line": 381,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_scalar",
            "line": 402,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_sse2",
            "line": 430,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "hsum_sse2_f64",
            "line": 482,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_sse42",
            "line": 489,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_avx2",
            "line": 499,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "hsum_avx2_f64",
            "line": 548,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_avx512",
            "line": 556,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "SimdBenchmark",
        "trait": null,
        "file": "crates/infrastructure/src/simd_avx512.rs",
        "line": 310,
        "methods": [
          {
            "name": "print",
            "line": 310,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "FakeClock",
        "trait": null,
        "file": "crates/infrastructure/src/circuit_breaker.rs",
        "line": 113,
        "methods": [
          {
            "name": "new",
            "line": 113,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "advance",
            "line": 117,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "CallGuard",
        "trait": null,
        "file": "crates/infrastructure/src/circuit_breaker.rs",
        "line": 171,
        "methods": [
          {
            "name": "new",
            "line": 171,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "record",
            "line": 183,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ComponentBreaker",
        "trait": null,
        "file": "crates/infrastructure/src/circuit_breaker.rs",
        "line": 235,
        "methods": [
          {
            "name": "new",
            "line": 235,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "current_state",
            "line": 249,
            "return_type": "CircuitState",
            "is_async": false
          },
          {
            "name": "reset",
            "line": 258,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "should_trip",
            "line": 265,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "try_acquire",
            "line": 285,
            "return_type": "Result<(), CircuitError>",
            "is_async": false
          },
          {
            "name": "try_acquire_half_open",
            "line": 309,
            "return_type": "Result<(), CircuitError>",
            "is_async": false
          },
          {
            "name": "release_half_open_token",
            "line": 331,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "transition_to_half_open",
            "line": 351,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "transition_to_open",
            "line": 359,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "transition_to_closed",
            "line": 364,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "record_transition",
            "line": 370,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "record_failure",
            "line": 376,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "record_outcome",
            "line": 382,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "GlobalCircuitBreaker",
        "trait": null,
        "file": "crates/infrastructure/src/circuit_breaker.rs",
        "line": 450,
        "methods": [
          {
            "name": "new",
            "line": 450,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "with_event_handler",
            "line": 458,
            "return_type": "Self \n    where\n        F: Fn(CircuitEvent) + Send + Sync + 'static",
            "is_async": false
          },
          {
            "name": "reload_config",
            "line": 470,
            "return_type": "Result<(), CircuitError>",
            "is_async": false
          },
          {
            "name": "acquire",
            "line": 499,
            "return_type": "Permit",
            "is_async": false
          },
          {
            "name": "update_global_state",
            "line": 558,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "component_state",
            "line": 626,
            "return_type": "Option<CircuitState>",
            "is_async": false
          },
          {
            "name": "metrics",
            "line": 632,
            "return_type": "CircuitMetrics",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ParallelTradingEngine",
        "trait": null,
        "file": "crates/infrastructure/src/rayon_enhanced.rs",
        "line": 40,
        "methods": [
          {
            "name": "new",
            "line": 41,
            "return_type": "Result<Self>",
            "is_async": false
          },
          {
            "name": "process_market_data",
            "line": 98,
            "return_type": "Vec<Signal>",
            "is_async": false
          },
          {
            "name": "generate_signal",
            "line": 135,
            "return_type": "Option<Signal>",
            "is_async": false
          },
          {
            "name": "get_instrument_shard",
            "line": 167,
            "return_type": "usize",
            "is_async": false
          },
          {
            "name": "process_with_sharding",
            "line": 172,
            "return_type": "Vec<Vec<Signal>>",
            "is_async": false
          },
          {
            "name": "check_risks_parallel",
            "line": 191,
            "return_type": "Vec<bool>",
            "is_async": false
          },
          {
            "name": "check_single_risk",
            "line": 200,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "run_ml_inference",
            "line": 210,
            "return_type": "Vec<f64>",
            "is_async": false
          },
          {
            "name": "simulate_inference",
            "line": 229,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "process_order_batch",
            "line": 237,
            "return_type": "Vec<Result<String>>",
            "is_async": false
          },
          {
            "name": "process_single_order",
            "line": 255,
            "return_type": "Result<String>",
            "is_async": false
          },
          {
            "name": "metrics",
            "line": 265,
            "return_type": "EngineMetrics",
            "is_async": false
          }
        ]
      },
      {
        "struct": "EngineMetrics",
        "trait": null,
        "file": "crates/infrastructure/src/rayon_enhanced.rs",
        "line": 288,
        "methods": [
          {
            "name": "new",
            "line": 288,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "record_batch_processing",
            "line": 297,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "record_ml_inference",
            "line": 306,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "record_orders_processed",
            "line": 311,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "update_peak_throughput",
            "line": 315,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "avg_latency_us",
            "line": 333,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "ml_avg_latency_us",
            "line": 343,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "InstrumentSharding",
        "trait": null,
        "file": "crates/infrastructure/src/rayon_enhanced.rs",
        "line": 361,
        "methods": [
          {
            "name": "new",
            "line": 361,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "get_shard",
            "line": 367,
            "return_type": "usize",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ParallelPipeline",
        "trait": null,
        "file": "crates/infrastructure/src/rayon_enhanced.rs",
        "line": 421,
        "methods": [
          {
            "name": "new",
            "line": 421,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "process_batch",
            "line": 429,
            "return_type": "Vec<T>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "SlippageModel",
        "trait": null,
        "file": "crates/infrastructure/src/panic_conditions.rs",
        "line": 114,
        "methods": [
          {
            "name": "expected_slippage",
            "line": 116,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "SlippageDetector",
        "trait": null,
        "file": "crates/infrastructure/src/panic_conditions.rs",
        "line": 153,
        "methods": [
          {
            "name": "new",
            "line": 153,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "record_execution",
            "line": 182,
            "return_type": "Result<SlippageAlert>",
            "is_async": false
          },
          {
            "name": "update_stats",
            "line": 254,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_stats",
            "line": 276,
            "return_type": "SlippageStats",
            "is_async": false
          }
        ]
      },
      {
        "struct": "QuoteStalenessMonitor",
        "trait": null,
        "file": "crates/infrastructure/src/panic_conditions.rs",
        "line": 304,
        "methods": [
          {
            "name": "new",
            "line": 304,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "update_quote",
            "line": 314,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "check_staleness",
            "line": 319,
            "return_type": "Vec<StalenessAlert>",
            "is_async": false
          },
          {
            "name": "is_stale",
            "line": 349,
            "return_type": "bool",
            "is_async": false
          }
        ]
      },
      {
        "struct": "SpreadMonitor",
        "trait": null,
        "file": "crates/infrastructure/src/panic_conditions.rs",
        "line": 393,
        "methods": [
          {
            "name": "new",
            "line": 393,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "update_spread",
            "line": 403,
            "return_type": "Option<SpreadAlert>",
            "is_async": false
          },
          {
            "name": "update_spread_stats",
            "line": 459,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "APICascadeDetector",
        "trait": null,
        "file": "crates/infrastructure/src/panic_conditions.rs",
        "line": 516,
        "methods": [
          {
            "name": "new",
            "line": 516,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "record_request",
            "line": 526,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "check_cascade",
            "line": 558,
            "return_type": "Option<CascadeAlert>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "PriceDivergenceMonitor",
        "trait": null,
        "file": "crates/infrastructure/src/panic_conditions.rs",
        "line": 632,
        "methods": [
          {
            "name": "new",
            "line": 632,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "update_price",
            "line": 641,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "check_divergence",
            "line": 653,
            "return_type": "Option<DivergenceAlert>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "PanicDetector",
        "trait": null,
        "file": "crates/infrastructure/src/panic_conditions.rs",
        "line": 764,
        "methods": [
          {
            "name": "new",
            "line": 765,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "monitor_conditions",
            "line": 791,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "record_execution",
            "line": 827,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "update_quote",
            "line": 847,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "update_spread",
            "line": 852,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "record_api_request",
            "line": 859,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "update_price",
            "line": 864,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "check_divergence",
            "line": 869,
            "return_type": "Option<DivergenceAlert>",
            "is_async": false
          },
          {
            "name": "calculate_toxicity",
            "line": 878,
            "return_type": "ToxicitySignals",
            "is_async": false
          },
          {
            "name": "trigger_panic",
            "line": 895,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "clear_panic",
            "line": 936,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "subscribe",
            "line": 944,
            "return_type": "broadcast::Receiver<PanicEvent>",
            "is_async": false
          },
          {
            "name": "is_panicking",
            "line": 949,
            "return_type": "bool",
            "is_async": false
          }
        ]
      },
      {
        "struct": "AlertSeverity",
        "trait": null,
        "file": "crates/infrastructure/src/alert_management.rs",
        "line": 39,
        "methods": [
          {
            "name": "sla_seconds",
            "line": 40,
            "return_type": "u64",
            "is_async": false
          },
          {
            "name": "color_code",
            "line": 51,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "requires_immediate_notification",
            "line": 62,
            "return_type": "bool",
            "is_async": false
          }
        ]
      },
      {
        "struct": "AlertCategory",
        "trait": null,
        "file": "crates/infrastructure/src/alert_management.rs",
        "line": 107,
        "methods": [
          {
            "name": "default_severity",
            "line": 108,
            "return_type": "AlertSeverity",
            "is_async": false
          },
          {
            "name": "requires_persistence",
            "line": 120,
            "return_type": "bool",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Alert",
        "trait": null,
        "file": "crates/infrastructure/src/alert_management.rs",
        "line": 154,
        "methods": [
          {
            "name": "builder",
            "line": 155,
            "return_type": "AlertBuilder",
            "is_async": false
          },
          {
            "name": "is_expired",
            "line": 160,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "priority_score",
            "line": 171,
            "return_type": "i64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "AlertBuilder",
        "trait": null,
        "file": "crates/infrastructure/src/alert_management.rs",
        "line": 201,
        "methods": [
          {
            "name": "new",
            "line": 201,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "severity",
            "line": 217,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "category",
            "line": 222,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "source",
            "line": 227,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "title",
            "line": 232,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "message",
            "line": 237,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "detail",
            "line": 242,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "affected_entity",
            "line": 247,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "suggested_action",
            "line": 252,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "auto_resolve",
            "line": 257,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "ttl",
            "line": 262,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "correlation_id",
            "line": 267,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "parent_alert",
            "line": 272,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "build",
            "line": 277,
            "return_type": "Alert",
            "is_async": false
          }
        ]
      },
      {
        "struct": "AlertCondition",
        "trait": null,
        "file": "crates/infrastructure/src/alert_management.rs",
        "line": 367,
        "methods": [
          {
            "name": "evaluate",
            "line": 368,
            "return_type": "bool",
            "is_async": false
          }
        ]
      },
      {
        "struct": "AlertManager",
        "trait": null,
        "file": "crates/infrastructure/src/alert_management.rs",
        "line": 477,
        "methods": [
          {
            "name": "new",
            "line": 477,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "raise_alert",
            "line": 497,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "resolve_alert",
            "line": 554,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "get_next_alert",
            "line": 569,
            "return_type": "Option<Alert>",
            "is_async": false
          },
          {
            "name": "add_rule",
            "line": 584,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "evaluate_rules",
            "line": 590,
            "return_type": "Vec<Alert>",
            "is_async": false
          },
          {
            "name": "get_alerts_by_severity",
            "line": 628,
            "return_type": "Vec<Alert>",
            "is_async": false
          },
          {
            "name": "get_alerts_by_category",
            "line": 637,
            "return_type": "Vec<Alert>",
            "is_async": false
          },
          {
            "name": "cleanup_expired",
            "line": 646,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_statistics",
            "line": 660,
            "return_type": "AlertStatistics",
            "is_async": false
          },
          {
            "name": "subscribe",
            "line": 681,
            "return_type": "broadcast::Receiver<Alert>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "AlertAggregator",
        "trait": null,
        "file": "crates/infrastructure/src/alert_management.rs",
        "line": 709,
        "methods": [
          {
            "name": "new",
            "line": 709,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "find_correlated",
            "line": 717,
            "return_type": "Vec<Alert>",
            "is_async": false
          },
          {
            "name": "is_correlated",
            "line": 731,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "group_alerts",
            "line": 758,
            "return_type": "Vec<Vec<Alert>>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "PoolRegistry",
        "trait": null,
        "file": "crates/infrastructure/src/object_pools.rs",
        "line": 177,
        "methods": [
          {
            "name": "new",
            "line": 177,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "global_stats",
            "line": 210,
            "return_type": "GlobalPoolStats",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ModePersistenceManager",
        "trait": null,
        "file": "crates/infrastructure/src/mode_persistence.rs",
        "line": 208,
        "methods": [
          {
            "name": "new",
            "line": 209,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "initialize_schema",
            "line": 239,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "save_mode_state",
            "line": 261,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "recover_mode_state",
            "line": 344,
            "return_type": "Result<ControlMode>",
            "is_async": true
          },
          {
            "name": "mark_clean_shutdown",
            "line": 443,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "load_last_state",
            "line": 459,
            "return_type": "Result<Option<PersistedModeState>>",
            "is_async": true
          },
          {
            "name": "build_recovery_info",
            "line": 497,
            "return_type": "Result<RecoveryInfo>",
            "is_async": true
          },
          {
            "name": "get_crash_count_24h",
            "line": 517,
            "return_type": "Result<u32>",
            "is_async": true
          },
          {
            "name": "get_last_crash_time",
            "line": 532,
            "return_type": "Result<Option<DateTime<Utc>>>",
            "is_async": true
          },
          {
            "name": "log_crash_recovery",
            "line": 548,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "downgrade_mode",
            "line": 572,
            "return_type": "ControlMode",
            "is_async": false
          },
          {
            "name": "parse_mode",
            "line": 581,
            "return_type": "Result<ControlMode>",
            "is_async": false
          },
          {
            "name": "calculate_checksum",
            "line": 592,
            "return_type": "String",
            "is_async": false
          },
          {
            "name": "verify_checksum",
            "line": 604,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "get_mode_history",
            "line": 610,
            "return_type": "Result<Vec<ModeTransition>>",
            "is_async": true
          },
          {
            "name": "subscribe",
            "line": 643,
            "return_type": "broadcast::Receiver<PersistedModeState>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "PartialStateRecovery",
        "trait": null,
        "file": "crates/infrastructure/src/mode_persistence.rs",
        "line": 659,
        "methods": [
          {
            "name": "new",
            "line": 659,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "recover_subsystem",
            "line": 664,
            "return_type": "Result<serde_json::Value>",
            "is_async": true
          },
          {
            "name": "get_subsystem_defaults",
            "line": 686,
            "return_type": "serde_json::Value",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Environment",
        "trait": null,
        "file": "crates/infrastructure/src/deployment_config.rs",
        "line": 44,
        "methods": [
          {
            "name": "from_str",
            "line": 45,
            "return_type": "Result<Self>",
            "is_async": false
          },
          {
            "name": "config_suffix",
            "line": 56,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "is_production_like",
            "line": 66,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "risk_limits",
            "line": 72,
            "return_type": "RiskLimits",
            "is_async": false
          }
        ]
      },
      {
        "struct": "EnvSecretProvider",
        "trait": null,
        "file": "crates/infrastructure/src/deployment_config.rs",
        "line": 134,
        "methods": [
          {
            "name": "new",
            "line": 134,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "K8sSecretProvider",
        "trait": null,
        "file": "crates/infrastructure/src/deployment_config.rs",
        "line": 179,
        "methods": [
          {
            "name": "new",
            "line": 179,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "VaultSecretProvider",
        "trait": null,
        "file": "crates/infrastructure/src/deployment_config.rs",
        "line": 228,
        "methods": [
          {
            "name": "new",
            "line": 228,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "read_secret",
            "line": 239,
            "return_type": "Result<HashMap<String, String>>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "DatabaseConfig",
        "trait": null,
        "file": "crates/infrastructure/src/deployment_config.rs",
        "line": 329,
        "methods": [
          {
            "name": "connection_string",
            "line": 329,
            "return_type": "String",
            "is_async": false
          }
        ]
      },
      {
        "struct": "RedisConfig",
        "trait": null,
        "file": "crates/infrastructure/src/deployment_config.rs",
        "line": 355,
        "methods": [
          {
            "name": "connection_string",
            "line": 355,
            "return_type": "String",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ConfigManager",
        "trait": null,
        "file": "crates/infrastructure/src/deployment_config.rs",
        "line": 432,
        "methods": [
          {
            "name": "new",
            "line": 433,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "load_config",
            "line": 453,
            "return_type": "Result<DeploymentConfig>",
            "is_async": true
          },
          {
            "name": "validate_config",
            "line": 490,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "get_config",
            "line": 540,
            "return_type": "DeploymentConfig",
            "is_async": false
          },
          {
            "name": "reload",
            "line": 545,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "subscribe",
            "line": 562,
            "return_type": "broadcast::Receiver<DeploymentConfig>",
            "is_async": false
          },
          {
            "name": "export_safe",
            "line": 567,
            "return_type": "serde_json::Value",
            "is_async": false
          }
        ]
      },
      {
        "struct": "K8sManifestGenerator",
        "trait": null,
        "file": "crates/infrastructure/src/deployment_config.rs",
        "line": 585,
        "methods": [
          {
            "name": "new",
            "line": 585,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "generate_configmap",
            "line": 590,
            "return_type": "String",
            "is_async": false
          },
          {
            "name": "generate_secret_template",
            "line": 626,
            "return_type": "String",
            "is_async": false
          },
          {
            "name": "generate_deployment",
            "line": 646,
            "return_type": "String",
            "is_async": false
          },
          {
            "name": "generate_service",
            "line": 731,
            "return_type": "String",
            "is_async": false
          }
        ]
      },
      {
        "struct": "DockerComposeGenerator",
        "trait": null,
        "file": "crates/infrastructure/src/deployment_config.rs",
        "line": 767,
        "methods": [
          {
            "name": "new",
            "line": 767,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "generate",
            "line": 772,
            "return_type": "String",
            "is_async": false
          }
        ]
      },
      {
        "struct": "EmergencyCoordinator",
        "trait": null,
        "file": "crates/infrastructure/src/emergency_coordinator.rs",
        "line": 104,
        "methods": [
          {
            "name": "new",
            "line": 104,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "register_component",
            "line": 127,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "subscribe_shutdown",
            "line": 133,
            "return_type": "broadcast::Receiver<EmergencyReason>",
            "is_async": false
          },
          {
            "name": "trigger_emergency",
            "line": 139,
            "return_type": "Result<(), String>",
            "is_async": true
          },
          {
            "name": "stop_new_operations",
            "line": 208,
            "return_type": "Result<(), String>",
            "is_async": true
          },
          {
            "name": "cancel_all_orders",
            "line": 215,
            "return_type": "Result<(), String>",
            "is_async": true
          },
          {
            "name": "emergency_liquidate_all",
            "line": 236,
            "return_type": "Result<(), String>",
            "is_async": true
          },
          {
            "name": "shutdown_all_components",
            "line": 257,
            "return_type": "Result<(), String>",
            "is_async": true
          },
          {
            "name": "health_check",
            "line": 278,
            "return_type": "HealthStatus",
            "is_async": true
          },
          {
            "name": "is_emergency_active",
            "line": 323,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "getstate",
            "line": 328,
            "return_type": "EmergencyState",
            "is_async": false
          },
          {
            "name": "reset",
            "line": 334,
            "return_type": "Result<(), String>",
            "is_async": true
          },
          {
            "name": "get_statistics",
            "line": 365,
            "return_type": "EmergencyStatistics",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ControlMode",
        "trait": null,
        "file": "crates/infrastructure/src/software_control_modes.rs",
        "line": 60,
        "methods": [
          {
            "name": "risk_multiplier",
            "line": 62,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "allows_trading",
            "line": 72,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "allows_ml",
            "line": 78,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "allows_closing",
            "line": 83,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "priority",
            "line": 88,
            "return_type": "u8",
            "is_async": false
          }
        ]
      },
      {
        "struct": "DefaultGuardConditions",
        "trait": null,
        "file": "crates/infrastructure/src/software_control_modes.rs",
        "line": 172,
        "methods": [
          {
            "name": "new",
            "line": 172,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "SystemContext",
        "trait": null,
        "file": "crates/infrastructure/src/software_control_modes.rs",
        "line": 260,
        "methods": [
          {
            "name": "from_system",
            "line": 261,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ControlModeManager",
        "trait": null,
        "file": "crates/infrastructure/src/software_control_modes.rs",
        "line": 336,
        "methods": [
          {
            "name": "new",
            "line": 338,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "current_mode",
            "line": 360,
            "return_type": "ControlMode",
            "is_async": false
          },
          {
            "name": "request_transition",
            "line": 366,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "execute_transition",
            "line": 416,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "apply_mode_configuration",
            "line": 452,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "activate_emergency",
            "line": 491,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "enable_override",
            "line": 520,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "get_capabilities",
            "line": 542,
            "return_type": "ModeCapabilities",
            "is_async": false
          },
          {
            "name": "calculate_max_position_size",
            "line": 554,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_max_daily_trades",
            "line": 559,
            "return_type": "usize",
            "is_async": false
          },
          {
            "name": "get_allowed_strategies",
            "line": 568,
            "return_type": "Vec<String>",
            "is_async": false
          },
          {
            "name": "get_history",
            "line": 586,
            "return_type": "Vec<ModeTransition>",
            "is_async": false
          },
          {
            "name": "subscribe",
            "line": 591,
            "return_type": "broadcast::Receiver<ControlModeEvent>",
            "is_async": false
          },
          {
            "name": "monitoring_level",
            "line": 596,
            "return_type": "MonitoringLevel",
            "is_async": false
          },
          {
            "name": "execution_allowed",
            "line": 606,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "strategy_complexity_allowed",
            "line": 619,
            "return_type": "StrategyComplexity",
            "is_async": false
          },
          {
            "name": "analysis_depth",
            "line": 629,
            "return_type": "AnalysisDepth",
            "is_async": false
          },
          {
            "name": "risk_limits",
            "line": 640,
            "return_type": "RiskLimits",
            "is_async": false
          },
          {
            "name": "exchange_operations_allowed",
            "line": 652,
            "return_type": "ExchangeOperations",
            "is_async": false
          },
          {
            "name": "data_collection_config",
            "line": 665,
            "return_type": "DataConfig",
            "is_async": false
          },
          {
            "name": "infrastructure_config",
            "line": 678,
            "return_type": "InfrastructureConfig",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Timeframe",
        "trait": null,
        "file": "crates/infrastructure/src/historical_charts.rs",
        "line": 39,
        "methods": [
          {
            "name": "duration_secs",
            "line": 40,
            "return_type": "u64",
            "is_async": false
          },
          {
            "name": "max_points",
            "line": 56,
            "return_type": "usize",
            "is_async": false
          },
          {
            "name": "aggregation_window",
            "line": 71,
            "return_type": "Duration",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Candle",
        "trait": null,
        "file": "crates/infrastructure/src/historical_charts.rs",
        "line": 97,
        "methods": [
          {
            "name": "from_tick",
            "line": 98,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "update",
            "line": 114,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "is_complete",
            "line": 134,
            "return_type": "bool",
            "is_async": false
          }
        ]
      },
      {
        "struct": "PerformanceMetrics",
        "trait": null,
        "file": "crates/infrastructure/src/historical_charts.rs",
        "line": 172,
        "methods": [
          {
            "name": "calculate",
            "line": 174,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ChartDataAggregator",
        "trait": null,
        "file": "crates/infrastructure/src/historical_charts.rs",
        "line": 442,
        "methods": [
          {
            "name": "new",
            "line": 442,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "process_tick",
            "line": 471,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "calculate_metrics",
            "line": 524,
            "return_type": "Option<PerformanceMetrics>",
            "is_async": false
          },
          {
            "name": "get_candles",
            "line": 557,
            "return_type": "Vec<Candle>",
            "is_async": false
          },
          {
            "name": "get_all_metrics",
            "line": 573,
            "return_type": "HashMap<Timeframe, PerformanceMetrics>",
            "is_async": false
          },
          {
            "name": "update_benchmark",
            "line": 587,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "TechnicalIndicators",
        "trait": null,
        "file": "crates/infrastructure/src/historical_charts.rs",
        "line": 616,
        "methods": [
          {
            "name": "sma",
            "line": 617,
            "return_type": "Vec<f64>",
            "is_async": false
          },
          {
            "name": "ema",
            "line": 635,
            "return_type": "Vec<f64>",
            "is_async": false
          },
          {
            "name": "bollinger_bands",
            "line": 658,
            "return_type": "(Vec<f64>, Vec<f64>, Vec<f64>)",
            "is_async": false
          },
          {
            "name": "rsi",
            "line": 681,
            "return_type": "Vec<f64>",
            "is_async": false
          },
          {
            "name": "macd",
            "line": 722,
            "return_type": "(Vec<f64>, Vec<f64>, Vec<f64>)",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ChartRenderer",
        "trait": null,
        "file": "crates/infrastructure/src/historical_charts.rs",
        "line": 758,
        "methods": [
          {
            "name": "new",
            "line": 758,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "prepare_chart_data",
            "line": 763,
            "return_type": "ChartData",
            "is_async": false
          },
          {
            "name": "get_performance_comparison",
            "line": 801,
            "return_type": "HashMap<Timeframe, PerformanceMetrics>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "RuntimeStats",
        "trait": null,
        "file": "crates/infrastructure/src/runtime_optimization.rs",
        "line": 42,
        "methods": [
          {
            "name": "new",
            "line": 42,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "record_spawn",
            "line": 49,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "record_completion",
            "line": 53,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "record_blocking",
            "line": 57,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "record_failure",
            "line": 61,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "OptimizedRuntime",
        "trait": null,
        "file": "crates/infrastructure/src/runtime_optimization.rs",
        "line": 69,
        "methods": [
          {
            "name": "new",
            "line": 71,
            "return_type": "Result<Self>",
            "is_async": false
          },
          {
            "name": "handle",
            "line": 100,
            "return_type": "tokio::runtime::Handle",
            "is_async": false
          },
          {
            "name": "spawn_zero_alloc",
            "line": 105,
            "return_type": "tokio::task::JoinHandle<T>\n    where\n        F: std::future::Future<Output = T> + Send + 'static,\n        T: Send + 'static,",
            "is_async": false
          },
          {
            "name": "spawn_blocking",
            "line": 121,
            "return_type": "tokio::task::JoinHandle<T>\n    where\n        F: FnOnce() -> T + Send + 'static,\n        T: Send + 'static,",
            "is_async": false
          },
          {
            "name": "block_on",
            "line": 131,
            "return_type": "F::Output",
            "is_async": false
          },
          {
            "name": "shutdown",
            "line": 136,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "stats",
            "line": 155,
            "return_type": "&Arc<RuntimeStats>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ZeroAllocTask",
        "trait": null,
        "file": "crates/infrastructure/src/runtime_optimization.rs",
        "line": 176,
        "methods": [
          {
            "name": "new",
            "line": 177,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "execute",
            "line": 185,
            "return_type": "Option<T>\n    where\n        F: FnOnce() -> Fut,\n        Fut: std::future::Future<Output = T>,",
            "is_async": true
          }
        ]
      },
      {
        "struct": "HotPathVerifier",
        "trait": null,
        "file": "crates/infrastructure/src/runtime_optimization.rs",
        "line": 211,
        "methods": [
          {
            "name": "start",
            "line": 212,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "verify",
            "line": 221,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "get_allocation_count",
            "line": 238,
            "return_type": "usize",
            "is_async": false
          }
        ]
      },
      {
        "struct": "OneshotPool",
        "trait": null,
        "file": "crates/infrastructure/src/runtime_optimization.rs",
        "line": 260,
        "methods": [
          {
            "name": "new",
            "line": 260,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "acquire",
            "line": 268,
            "return_type": "Option<(oneshot::Sender<T>, oneshot::Receiver<T>)>",
            "is_async": false
          },
          {
            "name": "release",
            "line": 272,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "InstrumentSharding",
        "trait": null,
        "file": "crates/infrastructure/src/parallelization.rs",
        "line": 51,
        "methods": [
          {
            "name": "new",
            "line": 51,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "get_shard",
            "line": 60,
            "return_type": "usize",
            "is_async": false
          },
          {
            "name": "process_parallel",
            "line": 68,
            "return_type": "Vec<T>\n    where\n        F: Fn(&str) -> T + Sync + Send,\n        T: Send,",
            "is_async": false
          }
        ]
      },
      {
        "struct": "LockFreeStats",
        "trait": null,
        "file": "crates/infrastructure/src/parallelization.rs",
        "line": 111,
        "methods": [
          {
            "name": "new",
            "line": 111,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "record_op",
            "line": 121,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "record_error",
            "line": 127,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "update_peak_throughput",
            "line": 132,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "avg_latency_ns",
            "line": 148,
            "return_type": "u64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "CpuAffinityManager",
        "trait": null,
        "file": "crates/infrastructure/src/parallelization.rs",
        "line": 164,
        "methods": [
          {
            "name": "new",
            "line": 164,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "initialize_rayon",
            "line": 169,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "pin_thread_to_core",
            "line": 190,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "pin_to_core",
            "line": 215,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "pin_to_core",
            "line": 220,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "pin_main_thread",
            "line": 225,
            "return_type": "Result<()>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ParallelProcessor",
        "trait": null,
        "file": "crates/infrastructure/src/parallelization.rs",
        "line": 245,
        "methods": [
          {
            "name": "new",
            "line": 245,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "process_batch",
            "line": 254,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "stats",
            "line": 289,
            "return_type": "&Arc<LockFreeStats>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ControlModeManager",
        "trait": null,
        "file": "crates/infrastructure/src/external_control.rs",
        "line": 46,
        "methods": [
          {
            "name": "new",
            "line": 46,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "current_mode",
            "line": 51,
            "return_type": "ControlMode",
            "is_async": false
          },
          {
            "name": "transition_to_mode",
            "line": 56,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "activate_emergency",
            "line": 75,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "get_capabilities",
            "line": 83,
            "return_type": "ModeCapabilities",
            "is_async": false
          }
        ]
      },
      {
        "struct": "UserRole",
        "trait": null,
        "file": "crates/infrastructure/src/external_control.rs",
        "line": 152,
        "methods": [
          {
            "name": "default_permissions",
            "line": 153,
            "return_type": "Vec<Permission>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "RateLimiter",
        "trait": null,
        "file": "crates/infrastructure/src/external_control.rs",
        "line": 206,
        "methods": [
          {
            "name": "new",
            "line": 206,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "check_rate_limit",
            "line": 216,
            "return_type": "bool",
            "is_async": true
          }
        ]
      },
      {
        "struct": "ExternalControlServer",
        "trait": null,
        "file": "crates/infrastructure/src/external_control.rs",
        "line": 328,
        "methods": [
          {
            "name": "new",
            "line": 328,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "build_router",
            "line": 359,
            "return_type": "Router",
            "is_async": false
          },
          {
            "name": "health_check",
            "line": 394,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "liveness_check",
            "line": 409,
            "return_type": "StatusCode",
            "is_async": true
          },
          {
            "name": "readiness_check",
            "line": 414,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "login",
            "line": 425,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "refresh_token",
            "line": 467,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "get_current_mode",
            "line": 506,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "change_mode",
            "line": 528,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "activate_emergency",
            "line": 581,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "get_mode_history",
            "line": 610,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "get_capabilities",
            "line": 622,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "get_metrics_summary",
            "line": 637,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "websocket_handler",
            "line": 654,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "handle_websocket",
            "line": 662,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "broadcast_mode_change",
            "line": 701,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "auth_middleware",
            "line": 712,
            "return_type": "()",
            "is_async": true
          }
        ]
      },
      {
        "struct": "IntoResponse",
        "trait": null,
        "file": "crates/infrastructure/src/external_control.rs",
        "line": 658,
        "methods": []
      },
      {
        "struct": "MonitoringIntegration",
        "trait": null,
        "file": "crates/infrastructure/src/external_control.rs",
        "line": 806,
        "methods": [
          {
            "name": "new",
            "line": 806,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "push_mode_change",
            "line": 814,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "send_grafana_alert",
            "line": 829,
            "return_type": "()",
            "is_async": true
          }
        ]
      },
      {
        "struct": "InfrastructureCircuitBreakers",
        "trait": null,
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 84,
        "methods": [
          {
            "name": "new",
            "line": 84,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "check_health",
            "line": 118,
            "return_type": "Result<(), InfrastructureFailure>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "DataLayerCircuitBreakers",
        "trait": null,
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 184,
        "methods": [
          {
            "name": "new",
            "line": 184,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "process_tick",
            "line": 204,
            "return_type": "Result<(), DataPipelineError>",
            "is_async": true
          },
          {
            "name": "calculate_quality",
            "line": 230,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "detect_volume_anomaly",
            "line": 254,
            "return_type": "Option<VolumeAnomaly>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ExchangeLayerCircuitBreakers",
        "trait": null,
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 333,
        "methods": [
          {
            "name": "submit_order",
            "line": 334,
            "return_type": "Result<OrderId, ExchangeError>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "RiskLayerCircuitBreakers",
        "trait": null,
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 419,
        "methods": [
          {
            "name": "calculate_var",
            "line": 420,
            "return_type": "Result<f64, RiskCalculationError>",
            "is_async": true
          },
          {
            "name": "calculate_portfolio_heat",
            "line": 444,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "var_calculation_impl",
            "line": 463,
            "return_type": "Result<f64, String>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "AnalysisLayerCircuitBreakers",
        "trait": null,
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 524,
        "methods": [
          {
            "name": "ml_inference",
            "line": 525,
            "return_type": "Result<Prediction, AnalysisError>",
            "is_async": true
          },
          {
            "name": "run_inference_impl",
            "line": 555,
            "return_type": "Result<Prediction, AnalysisError>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "StrategyLayerCircuitBreakers",
        "trait": null,
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 609,
        "methods": [
          {
            "name": "execute_strategy",
            "line": 610,
            "return_type": "Result<StrategySignal, StrategyError>",
            "is_async": true
          },
          {
            "name": "is_strategy_appropriate",
            "line": 636,
            "return_type": "bool",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ExecutionLayerCircuitBreakers",
        "trait": null,
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 690,
        "methods": [
          {
            "name": "execute_order",
            "line": 691,
            "return_type": "Result<Fill, ExecutionError>",
            "is_async": true
          },
          {
            "name": "execute_with_algo",
            "line": 714,
            "return_type": "Result<Fill, ExecutionError>",
            "is_async": true
          },
          {
            "name": "calculate_slippage",
            "line": 729,
            "return_type": "SlippagePoint",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MonitoringLayerCircuitBreakers",
        "trait": null,
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 786,
        "methods": [
          {
            "name": "process_event",
            "line": 787,
            "return_type": "Result<(), MonitoringError>",
            "is_async": true
          },
          {
            "name": "trigger_proactive_mitigation",
            "line": 810,
            "return_type": "Result<(), MonitoringError>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "GameTheoryOptimizer",
        "trait": null,
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 869,
        "methods": [
          {
            "name": "new",
            "line": 869,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "optimize_threshold",
            "line": 884,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "BayesianThresholdOptimizer",
        "trait": null,
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 941,
        "methods": [
          {
            "name": "new",
            "line": 941,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "update",
            "line": 951,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_threshold",
            "line": 971,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "CircuitBreakerAutoTuner",
        "trait": null,
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 1008,
        "methods": [
          {
            "name": "new",
            "line": 1008,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "auto_tune",
            "line": 1043,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "apply_adjustments",
            "line": 1067,
            "return_type": "()",
            "is_async": true
          }
        ]
      },
      {
        "struct": "AuditEventType",
        "trait": null,
        "file": "crates/infrastructure/src/audit_system.rs",
        "line": 86,
        "methods": [
          {
            "name": "requires_immediate_notification",
            "line": 87,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "severity",
            "line": 100,
            "return_type": "AuditSeverity",
            "is_async": false
          }
        ]
      },
      {
        "struct": "AuditEvent",
        "trait": null,
        "file": "crates/infrastructure/src/audit_system.rs",
        "line": 177,
        "methods": [
          {
            "name": "new",
            "line": 178,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "calculate_hash",
            "line": 209,
            "return_type": "String",
            "is_async": false
          },
          {
            "name": "verify_hash",
            "line": 237,
            "return_type": "bool",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MerkleTree",
        "trait": null,
        "file": "crates/infrastructure/src/audit_system.rs",
        "line": 262,
        "methods": [
          {
            "name": "from_hashes",
            "line": 263,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "build_tree",
            "line": 281,
            "return_type": "MerkleNode",
            "is_async": false
          },
          {
            "name": "hash_pair",
            "line": 306,
            "return_type": "String",
            "is_async": false
          },
          {
            "name": "root_hash",
            "line": 314,
            "return_type": "Option<String>",
            "is_async": false
          },
          {
            "name": "generate_proof",
            "line": 319,
            "return_type": "Vec<String>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "AuditLog",
        "trait": null,
        "file": "crates/infrastructure/src/audit_system.rs",
        "line": 381,
        "methods": [
          {
            "name": "new",
            "line": 382,
            "return_type": "Result<Self>",
            "is_async": false
          },
          {
            "name": "genesis_hash",
            "line": 418,
            "return_type": "String",
            "is_async": false
          },
          {
            "name": "append",
            "line": 425,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "verify_integrity",
            "line": 494,
            "return_type": "Result<bool>",
            "is_async": false
          },
          {
            "name": "get_events_by_type",
            "line": 522,
            "return_type": "Vec<AuditEvent>",
            "is_async": false
          },
          {
            "name": "get_events_in_range",
            "line": 532,
            "return_type": "Vec<AuditEvent>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ComplianceReporter",
        "trait": null,
        "file": "crates/infrastructure/src/audit_system.rs",
        "line": 566,
        "methods": [
          {
            "name": "new",
            "line": 566,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "generate_report",
            "line": 575,
            "return_type": "Result<PathBuf>",
            "is_async": false
          },
          {
            "name": "generate_trading_report",
            "line": 604,
            "return_type": "Result<serde_json::Value>",
            "is_async": false
          },
          {
            "name": "generate_risk_report",
            "line": 633,
            "return_type": "Result<serde_json::Value>",
            "is_async": false
          },
          {
            "name": "generate_order_audit",
            "line": 661,
            "return_type": "Result<serde_json::Value>",
            "is_async": false
          },
          {
            "name": "generate_best_execution_report",
            "line": 682,
            "return_type": "Result<serde_json::Value>",
            "is_async": false
          },
          {
            "name": "generate_market_abuse_report",
            "line": 697,
            "return_type": "Result<serde_json::Value>",
            "is_async": false
          },
          {
            "name": "generate_incident_report",
            "line": 716,
            "return_type": "Result<serde_json::Value>",
            "is_async": false
          },
          {
            "name": "generate_compliance_summary",
            "line": 736,
            "return_type": "Result<serde_json::Value>",
            "is_async": false
          },
          {
            "name": "generate_custom_report",
            "line": 752,
            "return_type": "Result<serde_json::Value>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "InterventionDetector",
        "trait": null,
        "file": "crates/infrastructure/src/audit_system.rs",
        "line": 775,
        "methods": [
          {
            "name": "new",
            "line": 775,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "check_interventions",
            "line": 784,
            "return_type": "Vec<InterventionAlert>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "InterventionSeverity",
        "trait": null,
        "file": "crates/infrastructure/src/audit_system.rs",
        "line": 841,
        "methods": [
          {
            "name": "from_count",
            "line": 841,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ForensicAnalyzer",
        "trait": null,
        "file": "crates/infrastructure/src/audit_system.rs",
        "line": 862,
        "methods": [
          {
            "name": "new",
            "line": 862,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "analyze_incident",
            "line": 867,
            "return_type": "Result<IncidentAnalysis>",
            "is_async": false
          },
          {
            "name": "build_timeline",
            "line": 923,
            "return_type": "Vec<TimelineEntry>",
            "is_async": false
          },
          {
            "name": "verify_state_at",
            "line": 963,
            "return_type": "Result<SystemState>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "AuditManager",
        "trait": null,
        "file": "crates/infrastructure/src/audit_system.rs",
        "line": 1048,
        "methods": [
          {
            "name": "new",
            "line": 1048,
            "return_type": "Result<Self>",
            "is_async": false
          },
          {
            "name": "log_event",
            "line": 1075,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "generate_report",
            "line": 1089,
            "return_type": "Result<PathBuf>",
            "is_async": false
          },
          {
            "name": "check_interventions",
            "line": 1099,
            "return_type": "Vec<InterventionAlert>",
            "is_async": false
          },
          {
            "name": "analyze_incident",
            "line": 1104,
            "return_type": "Result<IncidentAnalysis>",
            "is_async": false
          },
          {
            "name": "verify_state_at",
            "line": 1109,
            "return_type": "Result<SystemState>",
            "is_async": false
          },
          {
            "name": "verify_integrity",
            "line": 1114,
            "return_type": "Result<bool>",
            "is_async": false
          },
          {
            "name": "get_statistics",
            "line": 1119,
            "return_type": "AuditStatistics",
            "is_async": false
          },
          {
            "name": "shutdown",
            "line": 1131,
            "return_type": "Result<()>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "RetryPolicy",
        "trait": null,
        "file": "crates/infrastructure/src/retry_logic.rs",
        "line": 100,
        "methods": [
          {
            "name": "for_exchange_api",
            "line": 101,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "for_critical_operations",
            "line": 116,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "calculate_backoff",
            "line": 131,
            "return_type": "Duration",
            "is_async": false
          }
        ]
      },
      {
        "struct": "CircuitBreaker",
        "trait": null,
        "file": "crates/infrastructure/src/retry_logic.rs",
        "line": 167,
        "methods": [
          {
            "name": "new",
            "line": 167,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "can_proceed",
            "line": 179,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "record_success",
            "line": 203,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "record_failure",
            "line": 227,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "RetryExecutor",
        "trait": null,
        "file": "crates/infrastructure/src/retry_logic.rs",
        "line": 260,
        "methods": [
          {
            "name": "new",
            "line": 260,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "execute",
            "line": 279,
            "return_type": "Result<T, RetryError<E>>\n    where\n        F: Fn() -> Fut,\n        Fut: Future<Output = Result<T, E>>,\n        E: RetryableError,",
            "is_async": true
          },
          {
            "name": "get_stats",
            "line": 368,
            "return_type": "RetryStats",
            "is_async": false
          }
        ]
      },
      {
        "struct": "PerfManifest",
        "trait": null,
        "file": "crates/infrastructure/src/perf_manifest.rs",
        "line": 56,
        "methods": [
          {
            "name": "generate",
            "line": 58,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "detect_cpu_info",
            "line": 103,
            "return_type": "(String, f64)",
            "is_async": false
          },
          {
            "name": "parse_frequency_from_brand",
            "line": 130,
            "return_type": "Option<f64>",
            "is_async": false
          },
          {
            "name": "measure_frequency",
            "line": 142,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "detect_avx512",
            "line": 165,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "detect_cache_sizes",
            "line": 173,
            "return_type": "CacheInfo",
            "is_async": false
          },
          {
            "name": "detect_numa_nodes",
            "line": 218,
            "return_type": "u32",
            "is_async": false
          },
          {
            "name": "benchmark_all_stages",
            "line": 240,
            "return_type": "HashMap<String, LatencyPercentiles>",
            "is_async": false
          },
          {
            "name": "benchmark_feature_extraction",
            "line": 266,
            "return_type": "Vec<u64>",
            "is_async": false
          },
          {
            "name": "benchmark_lstm_inference",
            "line": 302,
            "return_type": "Vec<u64>",
            "is_async": false
          },
          {
            "name": "benchmark_ensemble_voting",
            "line": 331,
            "return_type": "Vec<u64>",
            "is_async": false
          },
          {
            "name": "benchmark_risk_validation",
            "line": 365,
            "return_type": "Vec<u64>",
            "is_async": false
          },
          {
            "name": "benchmark_order_generation",
            "line": 391,
            "return_type": "Vec<u64>",
            "is_async": false
          },
          {
            "name": "benchmark_garch",
            "line": 417,
            "return_type": "Vec<u64>",
            "is_async": false
          },
          {
            "name": "benchmark_attention",
            "line": 443,
            "return_type": "Vec<u64>",
            "is_async": false
          },
          {
            "name": "benchmark_calibration",
            "line": 470,
            "return_type": "Vec<u64>",
            "is_async": false
          },
          {
            "name": "calculate_percentiles",
            "line": 489,
            "return_type": "LatencyPercentiles",
            "is_async": false
          },
          {
            "name": "validate_metrics_consistency",
            "line": 505,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "export_to_prometheus",
            "line": 545,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "write_to_file",
            "line": 574,
            "return_type": "std::io::Result<()>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "SharpeMonitor",
        "trait": null,
        "file": "crates/infrastructure/src/statistical_circuit_breakers.rs",
        "line": 128,
        "methods": [
          {
            "name": "new",
            "line": 128,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "add_return",
            "line": 149,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "calculate_sharpe",
            "line": 173,
            "return_type": "Result<Decimal>",
            "is_async": false
          },
          {
            "name": "is_degraded",
            "line": 208,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "degradation_percentage",
            "line": 218,
            "return_type": "Decimal",
            "is_async": false
          },
          {
            "name": "detect_trend",
            "line": 228,
            "return_type": "SharpeTrend",
            "is_async": false
          }
        ]
      },
      {
        "struct": "RegimeDetector",
        "trait": null,
        "file": "crates/infrastructure/src/statistical_circuit_breakers.rs",
        "line": 318,
        "methods": [
          {
            "name": "new",
            "line": 318,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "add_observation",
            "line": 351,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "update_state_probabilities",
            "line": 380,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "gaussian_pdf",
            "line": 416,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "identify_regime",
            "line": 424,
            "return_type": "MarketRegime",
            "is_async": false
          },
          {
            "name": "regime_change_probability",
            "line": 448,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "is_unstable",
            "line": 461,
            "return_type": "bool",
            "is_async": false
          }
        ]
      },
      {
        "struct": "GARCHDetector",
        "trait": null,
        "file": "crates/infrastructure/src/statistical_circuit_breakers.rs",
        "line": 517,
        "methods": [
          {
            "name": "new",
            "line": 517,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "add_return",
            "line": 543,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "is_clustering",
            "line": 578,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "volatility_ratio",
            "line": 583,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_var",
            "line": 592,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "is_highly_persistent",
            "line": 608,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "volatility_regime",
            "line": 613,
            "return_type": "VolatilityRegime",
            "is_async": false
          }
        ]
      },
      {
        "struct": "StatisticalCircuitBreaker",
        "trait": null,
        "file": "crates/infrastructure/src/statistical_circuit_breakers.rs",
        "line": 718,
        "methods": [
          {
            "name": "new",
            "line": 718,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "process_data",
            "line": 756,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "check_anomalies",
            "line": 774,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "update_state",
            "line": 842,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "get_state",
            "line": 898,
            "return_type": "StatisticalState",
            "is_async": false
          },
          {
            "name": "get_status",
            "line": 904,
            "return_type": "StatisticalStatus",
            "is_async": false
          },
          {
            "name": "reset",
            "line": 930,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "StatisticalBreakerIntegration",
        "trait": null,
        "file": "crates/infrastructure/src/statistical_circuit_breakers.rs",
        "line": 961,
        "methods": [
          {
            "name": "new",
            "line": 961,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "should_allow_trading",
            "line": 969,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "get_risk_multiplier",
            "line": 979,
            "return_type": "Decimal",
            "is_async": false
          },
          {
            "name": "process_market_update",
            "line": 989,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "set_enabled",
            "line": 995,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "DashboardAggregator",
        "trait": null,
        "file": "crates/infrastructure/src/monitoring_dashboards.rs",
        "line": 256,
        "methods": [
          {
            "name": "new",
            "line": 256,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "update_pnl",
            "line": 314,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "update_position",
            "line": 320,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "remove_position",
            "line": 329,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "update_risk_metrics",
            "line": 334,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "update_system_health",
            "line": 340,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "add_performance_point",
            "line": 359,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "add_alert",
            "line": 372,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_full_snapshot",
            "line": 378,
            "return_type": "DashboardMessage",
            "is_async": false
          },
          {
            "name": "get_cpu_usage",
            "line": 390,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "get_memory_usage_mb",
            "line": 393,
            "return_type": "u64",
            "is_async": false
          },
          {
            "name": "get_memory_usage_pct",
            "line": 398,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "get_disk_usage_pct",
            "line": 403,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "DashboardWebSocketServer",
        "trait": null,
        "file": "crates/infrastructure/src/monitoring_dashboards.rs",
        "line": 435,
        "methods": [
          {
            "name": "new",
            "line": 435,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "start",
            "line": 448,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "handle_client",
            "line": 478,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "start_broadcaster",
            "line": 532,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "stop",
            "line": 580,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "client_count",
            "line": 588,
            "return_type": "u64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "DashboardManager",
        "trait": null,
        "file": "crates/infrastructure/src/monitoring_dashboards.rs",
        "line": 617,
        "methods": [
          {
            "name": "new",
            "line": 617,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "set_safety_systems",
            "line": 633,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "start",
            "line": 647,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "start_safety_monitoring",
            "line": 670,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "stop",
            "line": 732,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "aggregator",
            "line": 739,
            "return_type": "Arc<DashboardAggregator>",
            "is_async": false
          },
          {
            "name": "is_running",
            "line": 744,
            "return_type": "bool",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ExtendedDashboardManager",
        "trait": null,
        "file": "crates/infrastructure/src/monitoring_dashboards.rs",
        "line": 923,
        "methods": [
          {
            "name": "new",
            "line": 923,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "process_market_tick",
            "line": 938,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_chart_data",
            "line": 986,
            "return_type": "crate::historical_charts::ChartData",
            "is_async": false
          },
          {
            "name": "get_active_alerts",
            "line": 991,
            "return_type": "Vec<SystemAlert>",
            "is_async": false
          },
          {
            "name": "get_performance_comparison",
            "line": 1005,
            "return_type": "HashMap<Timeframe, crate::historical_charts::PerformanceMetrics>",
            "is_async": false
          },
          {
            "name": "cleanup",
            "line": 1010,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Exchange",
        "trait": null,
        "file": "crates/infrastructure/src/exchange_specific_safety.rs",
        "line": 48,
        "methods": [
          {
            "name": "name",
            "line": 49,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "reliability_score",
            "line": 64,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "liquidity_score",
            "line": 79,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ExchangeRiskLimits",
        "trait": null,
        "file": "crates/infrastructure/src/exchange_specific_safety.rs",
        "line": 197,
        "methods": [
          {
            "name": "default_for_exchange",
            "line": 198,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "conservative_defaults",
            "line": 244,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ExchangeMonitor",
        "trait": null,
        "file": "crates/infrastructure/src/exchange_specific_safety.rs",
        "line": 350,
        "methods": [
          {
            "name": "new",
            "line": 350,
            "return_type": "Result<Self>",
            "is_async": false
          },
          {
            "name": "can_place_order",
            "line": 426,
            "return_type": "Result<bool>",
            "is_async": false
          },
          {
            "name": "record_order_placed",
            "line": 488,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "record_order_filled",
            "line": 504,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "record_failure",
            "line": 519,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "calculate_failure_severity",
            "line": 547,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "update_health_status",
            "line": 565,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "health_check",
            "line": 598,
            "return_type": "Result<ExchangeHealthStatus>",
            "is_async": true
          },
          {
            "name": "get_risk_adjusted_size",
            "line": 633,
            "return_type": "Decimal",
            "is_async": false
          }
        ]
      },
      {
        "struct": "RateLimiter",
        "trait": null,
        "file": "crates/infrastructure/src/exchange_specific_safety.rs",
        "line": 682,
        "methods": [
          {
            "name": "new",
            "line": 682,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "can_make_request",
            "line": 696,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "record_request",
            "line": 702,
            "return_type": "Result<()>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ExchangeSafetyCoordinator",
        "trait": null,
        "file": "crates/infrastructure/src/exchange_specific_safety.rs",
        "line": 784,
        "methods": [
          {
            "name": "new",
            "line": 784,
            "return_type": "Result<Self>",
            "is_async": false
          },
          {
            "name": "select_exchange",
            "line": 815,
            "return_type": "Result<Option<Exchange>>",
            "is_async": false
          },
          {
            "name": "attempt_failover",
            "line": 854,
            "return_type": "Result<Option<Exchange>>",
            "is_async": false
          },
          {
            "name": "update_exposure",
            "line": 891,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "health_check_all",
            "line": 916,
            "return_type": "Result<HashMap<Exchange, ExchangeHealthStatus>>",
            "is_async": true
          },
          {
            "name": "get_safety_status",
            "line": 938,
            "return_type": "ExchangeSafetyStatus",
            "is_async": false
          }
        ]
      },
      {
        "struct": "HardwareKillSwitch",
        "trait": null,
        "file": "crates/infrastructure/src/hardware_kill_switch.rs",
        "line": 169,
        "methods": [
          {
            "name": "new",
            "line": 171,
            "return_type": "Result<Self>",
            "is_async": false
          },
          {
            "name": "setup_interrupts",
            "line": 215,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "start_watchdog",
            "line": 263,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "activate_emergency_stop",
            "line": 303,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "reset_emergency_stop",
            "line": 362,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "is_emergency_active",
            "line": 432,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "current_state",
            "line": 437,
            "return_type": "KillSwitchState",
            "is_async": false
          },
          {
            "name": "activation_count",
            "line": 442,
            "return_type": "u64",
            "is_async": false
          },
          {
            "name": "set_warning",
            "line": 447,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "test_system",
            "line": 461,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "add_audit_entry",
            "line": 485,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "export_audit_log",
            "line": 501,
            "return_type": "Vec<String>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "HardwareKillSwitch",
        "trait": null,
        "file": "crates/infrastructure/src/hardware_kill_switch.rs",
        "line": 518,
        "methods": [
          {
            "name": "is_trading_allowed",
            "line": 521,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "monitoring_check",
            "line": 527,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "strategy_allowed",
            "line": 532,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "analysis_allowed",
            "line": 537,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "risk_checks_allowed",
            "line": 542,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "exchange_operations_allowed",
            "line": 547,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "data_collection_allowed",
            "line": 552,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "infrastructure_operations_allowed",
            "line": 557,
            "return_type": "bool",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MockGPIO",
        "trait": null,
        "file": "crates/infrastructure/src/hardware_kill_switch.rs",
        "line": 575,
        "methods": [
          {
            "name": "new",
            "line": 576,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "BatchProducer",
        "trait": null,
        "file": "crates/infrastructure/src/stream_processing/producer.rs",
        "line": 37,
        "methods": [
          {
            "name": "new",
            "line": 38,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "send",
            "line": 56,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "flush",
            "line": 69,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "flush_internal",
            "line": 78,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "start_auto_flush",
            "line": 125,
            "return_type": "JoinHandle<()>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "PriorityProducer",
        "trait": null,
        "file": "crates/infrastructure/src/stream_processing/producer.rs",
        "line": 150,
        "methods": [
          {
            "name": "new",
            "line": 151,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "send_immediate",
            "line": 171,
            "return_type": "Result<()>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "StreamCircuitBreaker",
        "trait": null,
        "file": "crates/infrastructure/src/stream_processing/circuit_wrapper.rs",
        "line": 15,
        "methods": [
          {
            "name": "new",
            "line": 16,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "is_open",
            "line": 47,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "record_success",
            "line": 53,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "record_error",
            "line": 58,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "try_acquire",
            "line": 63,
            "return_type": "bool",
            "is_async": false
          }
        ]
      },
      {
        "struct": "StreamConsumer",
        "trait": null,
        "file": "crates/infrastructure/src/stream_processing/consumer.rs",
        "line": 85,
        "methods": [
          {
            "name": "new",
            "line": 86,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "register_handler",
            "line": 110,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "start_consuming",
            "line": 121,
            "return_type": "Result<JoinHandle<()>>",
            "is_async": true
          },
          {
            "name": "consume_batch",
            "line": 168,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "create_consumer_group",
            "line": 255,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "claim_pending",
            "line": 267,
            "return_type": "Result<u64>",
            "is_async": true
          },
          {
            "name": "stop",
            "line": 296,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "get_lag",
            "line": 303,
            "return_type": "Result<u64>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "SymbolRoute",
        "trait": null,
        "file": "crates/infrastructure/src/stream_processing/router.rs",
        "line": 39,
        "methods": [
          {
            "name": "new",
            "line": 39,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "RiskRoute",
        "trait": null,
        "file": "crates/infrastructure/src/stream_processing/router.rs",
        "line": 70,
        "methods": [
          {
            "name": "new",
            "line": 70,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ConfidenceRoute",
        "trait": null,
        "file": "crates/infrastructure/src/stream_processing/router.rs",
        "line": 113,
        "methods": [
          {
            "name": "new",
            "line": 113,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MessageRouter",
        "trait": null,
        "file": "crates/infrastructure/src/stream_processing/router.rs",
        "line": 157,
        "methods": [
          {
            "name": "new",
            "line": 158,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "add_rule",
            "line": 168,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "register_producer",
            "line": 177,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "route",
            "line": 183,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "route_batch",
            "line": 223,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "get_destination",
            "line": 246,
            "return_type": "String",
            "is_async": true
          }
        ]
      },
      {
        "struct": "LoadBalancedRouter",
        "trait": null,
        "file": "crates/infrastructure/src/stream_processing/router.rs",
        "line": 270,
        "methods": [
          {
            "name": "new",
            "line": 271,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "route",
            "line": 279,
            "return_type": "Result<()>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "FanoutRouter",
        "trait": null,
        "file": "crates/infrastructure/src/stream_processing/router.rs",
        "line": 298,
        "methods": [
          {
            "name": "new",
            "line": 299,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "broadcast",
            "line": 307,
            "return_type": "Result<()>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "ProcessingPipeline",
        "trait": null,
        "file": "crates/infrastructure/src/stream_processing/processor.rs",
        "line": 55,
        "methods": [
          {
            "name": "new",
            "line": 56,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "add_stage",
            "line": 74,
            "return_type": "&Self",
            "is_async": true
          },
          {
            "name": "process",
            "line": 81,
            "return_type": "Result<StreamMessage>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "FeatureExtractionStage",
        "trait": null,
        "file": "crates/infrastructure/src/stream_processing/processor.rs",
        "line": 142,
        "methods": [
          {
            "name": "new",
            "line": 142,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MLInferenceStage",
        "trait": null,
        "file": "crates/infrastructure/src/stream_processing/processor.rs",
        "line": 199,
        "methods": [
          {
            "name": "new",
            "line": 199,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "SignalGenerationStage",
        "trait": null,
        "file": "crates/infrastructure/src/stream_processing/processor.rs",
        "line": 243,
        "methods": [
          {
            "name": "new",
            "line": 243,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "RiskValidationStage",
        "trait": null,
        "file": "crates/infrastructure/src/stream_processing/processor.rs",
        "line": 293,
        "methods": [
          {
            "name": "new",
            "line": 293,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "PersistenceStage",
        "trait": null,
        "file": "crates/infrastructure/src/stream_processing/processor.rs",
        "line": 352,
        "methods": [
          {
            "name": "new",
            "line": 352,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "PipelineBuilder",
        "trait": null,
        "file": "crates/infrastructure/src/stream_processing/processor.rs",
        "line": 397,
        "methods": [
          {
            "name": "new",
            "line": 397,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "with_feature_extraction",
            "line": 401,
            "return_type": "Self",
            "is_async": true
          },
          {
            "name": "with_ml_inference",
            "line": 408,
            "return_type": "Self",
            "is_async": true
          },
          {
            "name": "with_signal_generation",
            "line": 415,
            "return_type": "Self",
            "is_async": true
          },
          {
            "name": "with_risk_validation",
            "line": 422,
            "return_type": "Self",
            "is_async": true
          },
          {
            "name": "with_persistence",
            "line": 429,
            "return_type": "Self",
            "is_async": true
          },
          {
            "name": "build",
            "line": 436,
            "return_type": "ProcessingPipeline",
            "is_async": false
          }
        ]
      },
      {
        "struct": "StreamProcessor",
        "trait": null,
        "file": "crates/infrastructure/src/stream_processing/mod.rs",
        "line": 206,
        "methods": [
          {
            "name": "new",
            "line": 207,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "start",
            "line": 245,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "stop",
            "line": 287,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "create_consumer_groups",
            "line": 309,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "spawn_market_consumer",
            "line": 333,
            "return_type": "JoinHandle<()>",
            "is_async": false
          },
          {
            "name": "spawn_feature_processor",
            "line": 401,
            "return_type": "JoinHandle<()>",
            "is_async": false
          },
          {
            "name": "spawn_signal_processor",
            "line": 443,
            "return_type": "JoinHandle<()>",
            "is_async": false
          },
          {
            "name": "spawn_risk_monitor",
            "line": 488,
            "return_type": "JoinHandle<()>",
            "is_async": false
          },
          {
            "name": "spawn_metrics_collector",
            "line": 532,
            "return_type": "JoinHandle<()>",
            "is_async": false
          },
          {
            "name": "publish",
            "line": 560,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "subscribe_signals",
            "line": 581,
            "return_type": "broadcast::Receiver<StreamMessage>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "SpscRing",
        "trait": null,
        "file": "crates/infrastructure/src/memory/rings.rs",
        "line": 18,
        "methods": [
          {
            "name": "new",
            "line": 18,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "push",
            "line": 27,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "pop",
            "line": 37,
            "return_type": "Option<T>",
            "is_async": false
          },
          {
            "name": "len",
            "line": 47,
            "return_type": "usize",
            "is_async": false
          },
          {
            "name": "is_empty",
            "line": 53,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "is_full",
            "line": 59,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "capacity",
            "line": 64,
            "return_type": "usize",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MpmcRing",
        "trait": null,
        "file": "crates/infrastructure/src/memory/rings.rs",
        "line": 77,
        "methods": [
          {
            "name": "new",
            "line": 77,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "push",
            "line": 86,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "pop",
            "line": 96,
            "return_type": "Option<T>",
            "is_async": false
          },
          {
            "name": "len",
            "line": 106,
            "return_type": "usize",
            "is_async": false
          },
          {
            "name": "is_empty",
            "line": 112,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "capacity",
            "line": 117,
            "return_type": "usize",
            "is_async": false
          }
        ]
      },
      {
        "struct": "UnboundedQueue",
        "trait": null,
        "file": "crates/infrastructure/src/memory/rings.rs",
        "line": 134,
        "methods": [
          {
            "name": "new",
            "line": 134,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "push",
            "line": 141,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "pop",
            "line": 147,
            "return_type": "Option<T>",
            "is_async": false
          },
          {
            "name": "len_approx",
            "line": 153,
            "return_type": "usize",
            "is_async": false
          },
          {
            "name": "is_empty",
            "line": 158,
            "return_type": "bool",
            "is_async": false
          }
        ]
      },
      {
        "struct": "TickRing",
        "trait": null,
        "file": "crates/infrastructure/src/memory/rings.rs",
        "line": 176,
        "methods": [
          {
            "name": "new",
            "line": 177,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "push_tick",
            "line": 186,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "pop_tick",
            "line": 199,
            "return_type": "Option<super::pools::Tick>",
            "is_async": false
          },
          {
            "name": "dropped_count",
            "line": 204,
            "return_type": "usize",
            "is_async": false
          },
          {
            "name": "depth",
            "line": 209,
            "return_type": "usize",
            "is_async": false
          }
        ]
      },
      {
        "struct": "OrderQueue",
        "trait": null,
        "file": "crates/infrastructure/src/memory/rings.rs",
        "line": 227,
        "methods": [
          {
            "name": "new",
            "line": 228,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "submit",
            "line": 237,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "take",
            "line": 247,
            "return_type": "Option<super::pools::Order>",
            "is_async": false
          },
          {
            "name": "rejected_count",
            "line": 252,
            "return_type": "usize",
            "is_async": false
          },
          {
            "name": "depth",
            "line": 257,
            "return_type": "usize",
            "is_async": false
          },
          {
            "name": "pressure",
            "line": 262,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MemoryMetrics",
        "trait": null,
        "file": "crates/infrastructure/src/memory/metrics.rs",
        "line": 42,
        "methods": [
          {
            "name": "new",
            "line": 42,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "record_allocation",
            "line": 70,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "record_pool_hit",
            "line": 82,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "record_pool_miss",
            "line": 92,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "record_tls_hit",
            "line": 102,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "record_tls_miss",
            "line": 108,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "record_ring_push",
            "line": 114,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "record_ring_pop",
            "line": 119,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "record_ring_drop",
            "line": 124,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "update_pool_pressure",
            "line": 129,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "export_prometheus_metrics",
            "line": 139,
            "return_type": "String",
            "is_async": false
          }
        ]
      },
      {
        "struct": "GenericPool",
        "trait": null,
        "file": "crates/infrastructure/src/memory/pools_upgraded.rs",
        "line": 79,
        "methods": [
          {
            "name": "new",
            "line": 81,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "GenericPool",
        "trait": null,
        "file": "crates/infrastructure/src/memory/pools_upgraded.rs",
        "line": 217,
        "methods": [
          {
            "name": "calculate_hit_rate",
            "line": 217,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "PoolManager",
        "trait": null,
        "file": "crates/infrastructure/src/memory/pools_upgraded.rs",
        "line": 343,
        "methods": [
          {
            "name": "new",
            "line": 343,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "orders",
            "line": 399,
            "return_type": "&Arc<GenericPool<Order>>",
            "is_async": false
          },
          {
            "name": "signals",
            "line": 400,
            "return_type": "&Arc<GenericPool<Signal>>",
            "is_async": false
          },
          {
            "name": "ticks",
            "line": 401,
            "return_type": "&Arc<GenericPool<Tick>>",
            "is_async": false
          },
          {
            "name": "fills",
            "line": 402,
            "return_type": "&Arc<GenericPool<Fill>>",
            "is_async": false
          },
          {
            "name": "events",
            "line": 403,
            "return_type": "&Arc<GenericPool<Event>>",
            "is_async": false
          },
          {
            "name": "collect_stats",
            "line": 406,
            "return_type": "Vec<PoolStats>",
            "is_async": false
          },
          {
            "name": "total_memory_mb",
            "line": 417,
            "return_type": "usize",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ThreadRegistry",
        "trait": null,
        "file": "crates/infrastructure/src/memory/safe_pools.rs",
        "line": 63,
        "methods": [
          {
            "name": "new",
            "line": 63,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "register_thread",
            "line": 72,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "unregister_thread",
            "line": 89,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "start_cleanup_thread",
            "line": 105,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "cleanup_terminated_threads",
            "line": 132,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MemoryStats",
        "trait": null,
        "file": "crates/infrastructure/src/memory/safe_pools.rs",
        "line": 180,
        "methods": [
          {
            "name": "new",
            "line": 180,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "record_allocation",
            "line": 188,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "record_deallocation",
            "line": 204,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "load",
            "line": 209,
            "return_type": "MemoryStatsSnapshot",
            "is_async": false
          }
        ]
      },
      {
        "struct": "SafeObjectPool",
        "trait": null,
        "file": "crates/infrastructure/src/memory/safe_pools.rs",
        "line": 291,
        "methods": [
          {
            "name": "new",
            "line": 292,
            "return_type": "Arc<Self>",
            "is_async": false
          },
          {
            "name": "acquire",
            "line": 339,
            "return_type": "Box<T>",
            "is_async": false
          },
          {
            "name": "release",
            "line": 386,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "add_to_garbage",
            "line": 420,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "cleanup_local_cache",
            "line": 428,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "prewarm",
            "line": 444,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "reclaim",
            "line": 465,
            "return_type": "usize",
            "is_async": false
          },
          {
            "name": "stats",
            "line": 489,
            "return_type": "PoolStats",
            "is_async": false
          },
          {
            "name": "shutdown",
            "line": 511,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Order",
        "trait": null,
        "file": "crates/infrastructure/src/memory/safe_pools.rs",
        "line": 652,
        "methods": [
          {
            "name": "symbol",
            "line": 653,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "set_symbol",
            "line": 658,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "OrderPool",
        "trait": null,
        "file": "crates/infrastructure/src/memory/pools.rs",
        "line": 95,
        "methods": [
          {
            "name": "new",
            "line": 96,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "acquire",
            "line": 127,
            "return_type": "Box<Order>",
            "is_async": false
          },
          {
            "name": "release",
            "line": 165,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "SignalPool",
        "trait": null,
        "file": "crates/infrastructure/src/memory/pools.rs",
        "line": 199,
        "methods": [
          {
            "name": "new",
            "line": 200,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "acquire",
            "line": 229,
            "return_type": "Box<Signal>",
            "is_async": false
          },
          {
            "name": "release",
            "line": 262,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "TickPool",
        "trait": null,
        "file": "crates/infrastructure/src/memory/pools.rs",
        "line": 291,
        "methods": [
          {
            "name": "new",
            "line": 292,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "acquire",
            "line": 321,
            "return_type": "Box<Tick>",
            "is_async": false
          },
          {
            "name": "release",
            "line": 353,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MemoryStats",
        "trait": null,
        "file": "crates/infrastructure/src/memory/mod.rs",
        "line": 99,
        "methods": [
          {
            "name": "current",
            "line": 99,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "TrackingAllocator",
        "trait": null,
        "file": "crates/infrastructure/src/memory/zero_alloc_tests.rs",
        "line": 21,
        "methods": [
          {
            "name": "new",
            "line": 21,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "reset",
            "line": 27,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "allocation_count",
            "line": 32,
            "return_type": "usize",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ObjectPool",
        "trait": null,
        "file": "crates/infrastructure/src/zero_copy/mod.rs",
        "line": 40,
        "methods": [
          {
            "name": "new",
            "line": 40,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "acquire",
            "line": 60,
            "return_type": "PoolGuard<T>",
            "is_async": false
          },
          {
            "name": "stats",
            "line": 78,
            "return_type": "PoolStats",
            "is_async": false
          },
          {
            "name": "calculate_hit_rate",
            "line": 87,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Arena",
        "trait": null,
        "file": "crates/infrastructure/src/zero_copy/mod.rs",
        "line": 151,
        "methods": [
          {
            "name": "new",
            "line": 152,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "alloc",
            "line": 165,
            "return_type": "&mut T",
            "is_async": false
          },
          {
            "name": "reset",
            "line": 187,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "LockFreeMetrics",
        "trait": null,
        "file": "crates/infrastructure/src/zero_copy/mod.rs",
        "line": 220,
        "methods": [
          {
            "name": "new",
            "line": 220,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "record",
            "line": 228,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "increment",
            "line": 238,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get",
            "line": 247,
            "return_type": "Option<f64>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ZeroCopyPipeline",
        "trait": null,
        "file": "crates/infrastructure/src/zero_copy/mod.rs",
        "line": 267,
        "methods": [
          {
            "name": "new",
            "line": 268,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "process_inplace",
            "line": 286,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "normalize_inplace",
            "line": 296,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "transform_inplace",
            "line": 322,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "scale_inplace",
            "line": 331,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "RingBuffer",
        "trait": null,
        "file": "crates/infrastructure/src/zero_copy/mod.rs",
        "line": 357,
        "methods": [
          {
            "name": "new",
            "line": 358,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "push",
            "line": 376,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "pop",
            "line": 395,
            "return_type": "Option<T>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ZeroCopyMatrix",
        "trait": null,
        "file": "crates/infrastructure/src/zero_copy/mod.rs",
        "line": 429,
        "methods": [
          {
            "name": "gemm_inplace",
            "line": 430,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "gemm_blocked_inplace",
            "line": 454,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "gemm_avx512_inplace",
            "line": 488,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MemoryPoolManager",
        "trait": null,
        "file": "crates/infrastructure/src/zero_copy/mod.rs",
        "line": 524,
        "methods": [
          {
            "name": "new",
            "line": 525,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "acquire_matrix",
            "line": 566,
            "return_type": "PoolGuard<Vec<f64>>",
            "is_async": false
          },
          {
            "name": "acquire_vector",
            "line": 572,
            "return_type": "PoolGuard<Vec<f64>>",
            "is_async": false
          },
          {
            "name": "acquire_batch",
            "line": 578,
            "return_type": "PoolGuard<Vec<Vec<f64>>>",
            "is_async": false
          },
          {
            "name": "stats",
            "line": 584,
            "return_type": "PoolManagerStats",
            "is_async": false
          }
        ]
      },
      {
        "struct": "FastOrderProcessor",
        "trait": null,
        "file": "crates/trading_engine/src/fast_order_processor.rs",
        "line": 45,
        "methods": [
          {
            "name": "new",
            "line": 45,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "process_signal_fast",
            "line": 60,
            "return_type": "Result<u64>",
            "is_async": false
          },
          {
            "name": "signal_to_order_fast",
            "line": 122,
            "return_type": "Result<u64>",
            "is_async": false
          },
          {
            "name": "check_risk_fast",
            "line": 177,
            "return_type": "Result<bool>",
            "is_async": false
          },
          {
            "name": "submit_order_fast",
            "line": 204,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "process_market_data_fast",
            "line": 228,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "stats",
            "line": 272,
            "return_type": "ProcessorStats",
            "is_async": false
          },
          {
            "name": "shutdown",
            "line": 282,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ProcessorStats",
        "trait": null,
        "file": "crates/trading_engine/src/fast_order_processor.rs",
        "line": 297,
        "methods": [
          {
            "name": "print_summary",
            "line": 297,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MarketImpactModel",
        "trait": null,
        "file": "crates/trading_engine/src/fees_slippage.rs",
        "line": 39,
        "methods": [
          {
            "name": "calculate_impact",
            "line": 46,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "adverse_selection_cost",
            "line": 63,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "QueueModel",
        "trait": null,
        "file": "crates/trading_engine/src/fees_slippage.rs",
        "line": 90,
        "methods": [
          {
            "name": "fill_probability",
            "line": 91,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "expected_fill_time",
            "line": 112,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "LOBSimulator",
        "trait": null,
        "file": "crates/trading_engine/src/fees_slippage.rs",
        "line": 147,
        "methods": [
          {
            "name": "simulate_order",
            "line": 148,
            "return_type": "ExecutionResult",
            "is_async": false
          },
          {
            "name": "simulate_market_order",
            "line": 157,
            "return_type": "ExecutionResult",
            "is_async": false
          },
          {
            "name": "simulate_limit_order",
            "line": 223,
            "return_type": "ExecutionResult",
            "is_async": false
          },
          {
            "name": "simulate_post_only",
            "line": 273,
            "return_type": "ExecutionResult",
            "is_async": false
          },
          {
            "name": "calculate_spread",
            "line": 303,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_midpoint",
            "line": 308,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "get_best_prices",
            "line": 313,
            "return_type": "(f64, f64)",
            "is_async": false
          },
          {
            "name": "total_book_depth",
            "line": 319,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "estimate_queue_position",
            "line": 325,
            "return_type": "usize",
            "is_async": false
          },
          {
            "name": "calculate_net_edge",
            "line": 354,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "FeeOptimizationEngine",
        "trait": null,
        "file": "crates/trading_engine/src/fee_optimization.rs",
        "line": 197,
        "methods": [
          {
            "name": "new",
            "line": 197,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "initialize_exchanges",
            "line": 209,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "update_statistics",
            "line": 296,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "calculate_fee",
            "line": 304,
            "return_type": "Result<FeeCalculation, String>",
            "is_async": false
          },
          {
            "name": "get_tier_fee",
            "line": 417,
            "return_type": "i32",
            "is_async": false
          },
          {
            "name": "get_vip_fee",
            "line": 440,
            "return_type": "Option<i32>",
            "is_async": false
          },
          {
            "name": "find_optimal_exchange",
            "line": 455,
            "return_type": "Result<OptimalRoute, String>",
            "is_async": false
          },
          {
            "name": "get_cached_route",
            "line": 588,
            "return_type": "Option<OptimalRoute>",
            "is_async": false
          },
          {
            "name": "get_tier_recommendations",
            "line": 601,
            "return_type": "Vec<TierRecommendation>",
            "is_async": false
          },
          {
            "name": "estimate_monthly_savings",
            "line": 640,
            "return_type": "Decimal",
            "is_async": false
          },
          {
            "name": "get_statistics",
            "line": 645,
            "return_type": "FeeStatistics",
            "is_async": false
          },
          {
            "name": "find_best_exchange",
            "line": 670,
            "return_type": "Option<String>",
            "is_async": false
          },
          {
            "name": "find_worst_exchange",
            "line": 687,
            "return_type": "Option<String>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "LiquidationEngine",
        "trait": null,
        "file": "crates/trading_engine/src/liquidation_engine.rs",
        "line": 229,
        "methods": [
          {
            "name": "new",
            "line": 229,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "liquidate_position",
            "line": 250,
            "return_type": "Result<String, String>",
            "is_async": true
          },
          {
            "name": "emergency_liquidate_all",
            "line": 288,
            "return_type": "Result<(), String>",
            "is_async": true
          },
          {
            "name": "determine_strategy",
            "line": 309,
            "return_type": "LiquidationStrategy",
            "is_async": false
          },
          {
            "name": "create_liquidation_order",
            "line": 349,
            "return_type": "Result<LiquidationOrder, String>",
            "is_async": false
          },
          {
            "name": "create_order_slices",
            "line": 395,
            "return_type": "Result<Vec<OrderSlice>, String>",
            "is_async": false
          },
          {
            "name": "execute_liquidation",
            "line": 480,
            "return_type": "Result<(), String>",
            "is_async": true
          },
          {
            "name": "update_market_conditions",
            "line": 567,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_statistics",
            "line": 572,
            "return_type": "LiquidationStatistics",
            "is_async": false
          },
          {
            "name": "subscribe_events",
            "line": 584,
            "return_type": "broadcast::Receiver<LiquidationEvent>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Uuid",
        "trait": null,
        "file": "crates/trading_engine/src/liquidation_engine.rs",
        "line": 608,
        "methods": [
          {
            "name": "new_v4",
            "line": 608,
            "return_type": "String",
            "is_async": false
          }
        ]
      },
      {
        "struct": "OCOManager",
        "trait": null,
        "file": "crates/trading_engine/src/orders/oco.rs",
        "line": 186,
        "methods": [
          {
            "name": "new",
            "line": 186,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "create_oco_group",
            "line": 202,
            "return_type": "Result<Uuid, OCOError>",
            "is_async": true
          },
          {
            "name": "submit_standard_oco",
            "line": 272,
            "return_type": "Result<(), OCOError>",
            "is_async": true
          },
          {
            "name": "submit_bracket_order",
            "line": 301,
            "return_type": "Result<(), OCOError>",
            "is_async": true
          },
          {
            "name": "submit_oto_order",
            "line": 315,
            "return_type": "Result<(), OCOError>",
            "is_async": true
          },
          {
            "name": "submit_multileg_order",
            "line": 329,
            "return_type": "Result<(), OCOError>",
            "is_async": true
          },
          {
            "name": "handle_order_fill",
            "line": 346,
            "return_type": "Result<(), OCOError>",
            "is_async": true
          },
          {
            "name": "cancel_linked_order",
            "line": 424,
            "return_type": "Result<(), OCOError>",
            "is_async": true
          },
          {
            "name": "activate_bracket_orders",
            "line": 433,
            "return_type": "Result<(), OCOError>",
            "is_async": true
          },
          {
            "name": "cancel_oco_group",
            "line": 464,
            "return_type": "Result<(), OCOError>",
            "is_async": true
          },
          {
            "name": "get_active_groups",
            "line": 494,
            "return_type": "Vec<OCOGroup>",
            "is_async": false
          },
          {
            "name": "get_metrics",
            "line": 508,
            "return_type": "OCOMetrics",
            "is_async": false
          }
        ]
      },
      {
        "struct": "SagaContext",
        "trait": null,
        "file": "crates/trading_engine/src/transactions/saga.rs",
        "line": 103,
        "methods": [
          {
            "name": "new",
            "line": 103,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "set",
            "line": 114,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "record_execution",
            "line": 133,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Saga",
        "trait": null,
        "file": "crates/trading_engine/src/transactions/saga.rs",
        "line": 164,
        "methods": [
          {
            "name": "new",
            "line": 164,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "add_step",
            "line": 177,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "execute",
            "line": 183,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "compensate",
            "line": 286,
            "return_type": "Result<()>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "SagaOrchestrator",
        "trait": null,
        "file": "crates/trading_engine/src/transactions/saga.rs",
        "line": 356,
        "methods": [
          {
            "name": "new",
            "line": 356,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "start_saga",
            "line": 387,
            "return_type": "Result<Uuid>",
            "is_async": true
          },
          {
            "name": "get_saga_status",
            "line": 436,
            "return_type": "Option<SagaState>",
            "is_async": false
          },
          {
            "name": "cancel_saga",
            "line": 442,
            "return_type": "Result<()>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "ExchangeConnection",
        "trait": null,
        "file": "crates/trading_engine/src/transactions/compensator.rs",
        "line": 421,
        "methods": [
          {
            "name": "new",
            "line": 421,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "get_order_status",
            "line": 422,
            "return_type": "Result<OrderStatus>",
            "is_async": true
          },
          {
            "name": "cancel_order",
            "line": 425,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "place_market_order",
            "line": 429,
            "return_type": "Result<Uuid>",
            "is_async": true
          },
          {
            "name": "get_balance",
            "line": 433,
            "return_type": "Result<Decimal>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "PositionManager",
        "trait": null,
        "file": "crates/trading_engine/src/transactions/compensator.rs",
        "line": 442,
        "methods": [
          {
            "name": "new",
            "line": 442,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "update_position",
            "line": 443,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "get_position",
            "line": 446,
            "return_type": "Result<Position>",
            "is_async": true
          },
          {
            "name": "close_position",
            "line": 455,
            "return_type": "Result<()>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "AccountManager",
        "trait": null,
        "file": "crates/trading_engine/src/transactions/compensator.rs",
        "line": 471,
        "methods": [
          {
            "name": "new",
            "line": 471,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "update_balance",
            "line": 472,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "get_balance",
            "line": 475,
            "return_type": "Result<Decimal>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "FeeManager",
        "trait": null,
        "file": "crates/trading_engine/src/transactions/compensator.rs",
        "line": 484,
        "methods": [
          {
            "name": "new",
            "line": 484,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "refund_fee",
            "line": 485,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "is_refundable",
            "line": 488,
            "return_type": "Result<bool>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "MarginManager",
        "trait": null,
        "file": "crates/trading_engine/src/transactions/compensator.rs",
        "line": 497,
        "methods": [
          {
            "name": "new",
            "line": 497,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "release_margin",
            "line": 498,
            "return_type": "Result<()>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "Transaction",
        "trait": null,
        "file": "crates/trading_engine/src/transactions/mod.rs",
        "line": 131,
        "methods": [
          {
            "name": "new",
            "line": 132,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "with_idempotency_key",
            "line": 153,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "update_status",
            "line": 159,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "needs_retry",
            "line": 168,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "is_terminal",
            "line": 174,
            "return_type": "bool",
            "is_async": false
          }
        ]
      },
      {
        "struct": "TransactionManager",
        "trait": null,
        "file": "crates/trading_engine/src/transactions/mod.rs",
        "line": 222,
        "methods": [
          {
            "name": "new",
            "line": 223,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "begin_transaction",
            "line": 268,
            "return_type": "Result<Uuid>",
            "is_async": true
          },
          {
            "name": "commit_transaction",
            "line": 305,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "rollback_transaction",
            "line": 332,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "trigger_compensation",
            "line": 360,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "execute_with_retry",
            "line": 394,
            "return_type": "Result<T>\n    where\n        F: Fn() -> Result<T> + Send + Sync + 'static,\n        T: Send + 'static,",
            "is_async": true
          },
          {
            "name": "get_transaction",
            "line": 419,
            "return_type": "Option<Transaction>",
            "is_async": false
          },
          {
            "name": "get_metrics",
            "line": 424,
            "return_type": "TransactionMetrics",
            "is_async": false
          },
          {
            "name": "recover",
            "line": 438,
            "return_type": "Result<()>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "RetryPolicy",
        "trait": null,
        "file": "crates/trading_engine/src/transactions/retry.rs",
        "line": 72,
        "methods": [
          {
            "name": "calculate_delay",
            "line": 73,
            "return_type": "Duration",
            "is_async": false
          },
          {
            "name": "is_retryable",
            "line": 90,
            "return_type": "bool",
            "is_async": false
          }
        ]
      },
      {
        "struct": "CircuitBreaker",
        "trait": null,
        "file": "crates/trading_engine/src/transactions/retry.rs",
        "line": 166,
        "methods": [
          {
            "name": "new",
            "line": 166,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "should_allow",
            "line": 180,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "record_success",
            "line": 215,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "record_failure",
            "line": 240,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "transition_to",
            "line": 265,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "state",
            "line": 288,
            "return_type": "CircuitState",
            "is_async": false
          },
          {
            "name": "metrics",
            "line": 293,
            "return_type": "CircuitBreakerMetrics",
            "is_async": false
          }
        ]
      },
      {
        "struct": "RetryManager",
        "trait": null,
        "file": "crates/trading_engine/src/transactions/retry.rs",
        "line": 333,
        "methods": [
          {
            "name": "new",
            "line": 333,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "add_policy",
            "line": 364,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_circuit_breaker",
            "line": 369,
            "return_type": "Arc<CircuitBreaker>",
            "is_async": false
          },
          {
            "name": "execute_with_retry",
            "line": 378,
            "return_type": "Result<T>\n    where\n        F: Fn() -> Result<T> + Send + Sync,\n        T: Send,",
            "is_async": true
          },
          {
            "name": "execute_with_retry_and_policy",
            "line": 390,
            "return_type": "Result<T>\n    where\n        F: Fn() -> Result<T> + Send + Sync,\n        T: Send,",
            "is_async": true
          },
          {
            "name": "schedule_retry",
            "line": 482,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "metrics",
            "line": 495,
            "return_type": "RetryMetrics",
            "is_async": false
          }
        ]
      },
      {
        "struct": "EntryHeader",
        "trait": null,
        "file": "crates/trading_engine/src/transactions/wal.rs",
        "line": 44,
        "methods": [
          {
            "name": "new",
            "line": 46,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "validate",
            "line": 60,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "to_bytes",
            "line": 64,
            "return_type": "[u8; Self::SIZE]",
            "is_async": false
          },
          {
            "name": "from_bytes",
            "line": 76,
            "return_type": "Result<Self>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Segment",
        "trait": null,
        "file": "crates/trading_engine/src/transactions/wal.rs",
        "line": 112,
        "methods": [
          {
            "name": "create",
            "line": 113,
            "return_type": "Result<Self>",
            "is_async": false
          },
          {
            "name": "open_for_recovery",
            "line": 138,
            "return_type": "Result<Self>",
            "is_async": false
          },
          {
            "name": "append",
            "line": 199,
            "return_type": "Result<u64>",
            "is_async": false
          },
          {
            "name": "sync",
            "line": 225,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "read_at",
            "line": 232,
            "return_type": "Result<(EntryHeader, Vec<u8>)>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "WriteAheadLog",
        "trait": null,
        "file": "crates/trading_engine/src/transactions/wal.rs",
        "line": 285,
        "methods": [
          {
            "name": "new",
            "line": 286,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "append",
            "line": 354,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "switch_segment",
            "line": 418,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "recover",
            "line": 438,
            "return_type": "Result<Vec<Vec<u8>>>",
            "is_async": true
          },
          {
            "name": "checkpoint",
            "line": 477,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "metrics",
            "line": 495,
            "return_type": "WalMetrics",
            "is_async": false
          }
        ]
      },
      {
        "struct": "TieredFeeSchedule",
        "trait": null,
        "file": "crates/trading_engine/src/costs/comprehensive_costs.rs",
        "line": 62,
        "methods": [
          {
            "name": "get_fees",
            "line": 63,
            "return_type": "(Decimal, Decimal)",
            "is_async": false
          }
        ]
      },
      {
        "struct": "FundingRateCalculator",
        "trait": null,
        "file": "crates/trading_engine/src/costs/comprehensive_costs.rs",
        "line": 105,
        "methods": [
          {
            "name": "calculate_funding_cost",
            "line": 106,
            "return_type": "Result<Decimal>",
            "is_async": false
          },
          {
            "name": "estimate_average_funding",
            "line": 126,
            "return_type": "Decimal",
            "is_async": false
          }
        ]
      },
      {
        "struct": "SlippageModel",
        "trait": null,
        "file": "crates/trading_engine/src/costs/comprehensive_costs.rs",
        "line": 158,
        "methods": [
          {
            "name": "calculate_slippage",
            "line": 160,
            "return_type": "Decimal",
            "is_async": false
          },
          {
            "name": "estimate_by_order_type",
            "line": 189,
            "return_type": "Decimal",
            "is_async": false
          }
        ]
      },
      {
        "struct": "SpreadCostEstimator",
        "trait": null,
        "file": "crates/trading_engine/src/costs/comprehensive_costs.rs",
        "line": 252,
        "methods": [
          {
            "name": "calculate_spread_cost",
            "line": 253,
            "return_type": "Result<Decimal>",
            "is_async": false
          },
          {
            "name": "is_spread_abnormal",
            "line": 275,
            "return_type": "bool",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ComprehensiveCostModel",
        "trait": null,
        "file": "crates/trading_engine/src/costs/comprehensive_costs.rs",
        "line": 322,
        "methods": [
          {
            "name": "new",
            "line": 323,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "add_binance_fees",
            "line": 354,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "add_coinbase_fees",
            "line": 391,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "calculate_total_cost",
            "line": 422,
            "return_type": "Result<TradeCost>",
            "is_async": false
          },
          {
            "name": "calculate_exchange_fee",
            "line": 487,
            "return_type": "Result<Decimal>",
            "is_async": false
          },
          {
            "name": "generate_monthly_report",
            "line": 510,
            "return_type": "MonthlyCostReport",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MicrostructureCalculator",
        "trait": null,
        "file": "crates/feature_store/src/market_microstructure.rs",
        "line": 77,
        "methods": [
          {
            "name": "new",
            "line": 77,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "calculate_features",
            "line": 93,
            "return_type": "Result<Vec<FeatureUpdate>>",
            "is_async": true
          },
          {
            "name": "calculate_pin",
            "line": 144,
            "return_type": "Result<FeatureUpdate>",
            "is_async": true
          },
          {
            "name": "calculate_vpin",
            "line": 236,
            "return_type": "Result<FeatureUpdate>",
            "is_async": true
          },
          {
            "name": "calculate_amihud",
            "line": 299,
            "return_type": "Result<FeatureUpdate>",
            "is_async": true
          },
          {
            "name": "calculate_roll_spread",
            "line": 334,
            "return_type": "Result<FeatureUpdate>",
            "is_async": true
          },
          {
            "name": "calculate_corwin_schultz",
            "line": 391,
            "return_type": "Result<Vec<FeatureUpdate>>",
            "is_async": true
          },
          {
            "name": "calculate_hasbrouck_info",
            "line": 475,
            "return_type": "Result<FeatureUpdate>",
            "is_async": true
          },
          {
            "name": "calculate_order_flow",
            "line": 549,
            "return_type": "Result<Vec<FeatureUpdate>>",
            "is_async": true
          },
          {
            "name": "calculate_tick_rule",
            "line": 639,
            "return_type": "Result<Vec<FeatureUpdate>>",
            "is_async": true
          },
          {
            "name": "add_trade",
            "line": 703,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "add_quote",
            "line": 719,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "add_order_flow",
            "line": 734,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "VolumeBucket",
        "trait": null,
        "file": "crates/feature_store/src/market_microstructure.rs",
        "line": 790,
        "methods": [
          {
            "name": "new",
            "line": 790,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "add_trade",
            "line": 797,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "PriceBar",
        "trait": null,
        "file": "crates/feature_store/src/market_microstructure.rs",
        "line": 820,
        "methods": [
          {
            "name": "new",
            "line": 820,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "update",
            "line": 828,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "GameTheoryCalculator",
        "trait": null,
        "file": "crates/feature_store/src/game_theory.rs",
        "line": 67,
        "methods": [
          {
            "name": "new",
            "line": 67,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "calculate_features",
            "line": 81,
            "return_type": "Result<Vec<FeatureUpdate>>",
            "is_async": true
          },
          {
            "name": "calculate_nash_equilibrium",
            "line": 117,
            "return_type": "Result<Vec<FeatureUpdate>>",
            "is_async": true
          },
          {
            "name": "calculate_kyle_lambda",
            "line": 171,
            "return_type": "Result<FeatureUpdate>",
            "is_async": true
          },
          {
            "name": "calculate_glosten_milgrom",
            "line": 245,
            "return_type": "Result<FeatureUpdate>",
            "is_async": true
          },
          {
            "name": "calculate_prisoner_dilemma",
            "line": 316,
            "return_type": "Result<Vec<FeatureUpdate>>",
            "is_async": true
          },
          {
            "name": "calculate_stackelberg",
            "line": 369,
            "return_type": "Result<Vec<FeatureUpdate>>",
            "is_async": true
          },
          {
            "name": "update_order_book",
            "line": 434,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "update_trade",
            "line": 450,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_recent_states",
            "line": 474,
            "return_type": "Vec<OrderBookState>",
            "is_async": false
          },
          {
            "name": "construct_payoff_matrix",
            "line": 485,
            "return_type": "Result<DMatrix<f64>>",
            "is_async": false
          },
          {
            "name": "lemke_howson_algorithm",
            "line": 515,
            "return_type": "Result<NashEquilibrium>",
            "is_async": false
          },
          {
            "name": "estimate_value_uncertainty",
            "line": 547,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "PlayerHistory",
        "trait": null,
        "file": "crates/feature_store/src/game_theory.rs",
        "line": 598,
        "methods": [
          {
            "name": "new",
            "line": 598,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "add_trade",
            "line": 606,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "aggression_score",
            "line": 617,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "FeatureVector",
        "trait": null,
        "file": "crates/feature_store/src/online_store.rs",
        "line": 60,
        "methods": [
          {
            "name": "to_arrow_batch",
            "line": 61,
            "return_type": "Result<RecordBatch>",
            "is_async": false
          },
          {
            "name": "create_arrow_schema",
            "line": 73,
            "return_type": "Result<arrow::datatypes::Schema>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "OnlineStore",
        "trait": null,
        "file": "crates/feature_store/src/online_store.rs",
        "line": 108,
        "methods": [
          {
            "name": "new",
            "line": 109,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "get_features",
            "line": 163,
            "return_type": "Result<Vec<FeatureVector>>",
            "is_async": true
          },
          {
            "name": "batch_get_features",
            "line": 208,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "set_features",
            "line": 264,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "initialize_feature",
            "line": 292,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "get_from_cache",
            "line": 306,
            "return_type": "Option<FeatureVector>",
            "is_async": false
          },
          {
            "name": "update_cache",
            "line": 312,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "invalidate_cache",
            "line": 318,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "fetch_from_redis",
            "line": 324,
            "return_type": "Result<FeatureVector>",
            "is_async": true
          },
          {
            "name": "build_key",
            "line": 356,
            "return_type": "String",
            "is_async": false
          },
          {
            "name": "serialize_value",
            "line": 361,
            "return_type": "Result<Vec<u8>>",
            "is_async": false
          },
          {
            "name": "deserialize_value",
            "line": 372,
            "return_type": "Result<f64>",
            "is_async": false
          },
          {
            "name": "record_latency",
            "line": 390,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "get_stats",
            "line": 400,
            "return_type": "OnlineStoreStats",
            "is_async": true
          },
          {
            "name": "close",
            "line": 425,
            "return_type": "Result<()>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "PointInTimeCorrectness",
        "trait": null,
        "file": "crates/feature_store/src/point_in_time.rs",
        "line": 47,
        "methods": [
          {
            "name": "new",
            "line": 47,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "with_config",
            "line": 49,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "get_features_at_time",
            "line": 74,
            "return_type": "Result<Vec<FeatureVector>>",
            "is_async": true
          },
          {
            "name": "temporal_join",
            "line": 116,
            "return_type": "Result<Vec<EnrichedEvent>>",
            "is_async": true
          },
          {
            "name": "validate_no_leakage",
            "line": 143,
            "return_type": "Result<ValidationResult>",
            "is_async": true
          },
          {
            "name": "create_training_dataset",
            "line": 181,
            "return_type": "Result<TrainingDataset>",
            "is_async": true
          },
          {
            "name": "fetch_with_constraints",
            "line": 231,
            "return_type": "Result<Option<FeatureVector>>",
            "is_async": true
          },
          {
            "name": "get_from_cache",
            "line": 294,
            "return_type": "Option<FeatureVector>",
            "is_async": true
          },
          {
            "name": "update_cache",
            "line": 315,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "validate_temporal_ordering",
            "line": 344,
            "return_type": "Result<()>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "TemporalJoin",
        "trait": null,
        "file": "crates/feature_store/src/point_in_time.rs",
        "line": 362,
        "methods": [
          {
            "name": "new",
            "line": 362,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "join",
            "line": 369,
            "return_type": "Result<Vec<EnrichedEvent>>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "FeatureMonitor",
        "trait": null,
        "file": "crates/feature_store/src/monitoring.rs",
        "line": 82,
        "methods": [
          {
            "name": "new",
            "line": 83,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "start_collection",
            "line": 133,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "stop",
            "line": 184,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "record_serving_latency",
            "line": 192,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "record_offline_latency",
            "line": 205,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "record_request",
            "line": 218,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "record_cache",
            "line": 237,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "get_online_latency_p99",
            "line": 257,
            "return_type": "Result<f64>",
            "is_async": true
          },
          {
            "name": "get_offline_latency_p99",
            "line": 263,
            "return_type": "Result<f64>",
            "is_async": true
          },
          {
            "name": "get_freshness_p99",
            "line": 276,
            "return_type": "Result<f64>",
            "is_async": true
          },
          {
            "name": "get_storage_usage",
            "line": 282,
            "return_type": "Result<f64>",
            "is_async": true
          },
          {
            "name": "start_prometheus_server",
            "line": 288,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "check_alerts",
            "line": 314,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "FeatureRegistry",
        "trait": null,
        "file": "crates/feature_store/src/feature_registry.rs",
        "line": 44,
        "methods": [
          {
            "name": "new",
            "line": 45,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "initialize_schema",
            "line": 70,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "load_definitions",
            "line": 221,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "register",
            "line": 265,
            "return_type": "Result<String>",
            "is_async": true
          },
          {
            "name": "update_feature",
            "line": 334,
            "return_type": "Result<u32>",
            "is_async": true
          },
          {
            "name": "get_lineage",
            "line": 393,
            "return_type": "Result<crate::FeatureLineage>",
            "is_async": true
          },
          {
            "name": "validate_update",
            "line": 451,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "get_feature_count",
            "line": 472,
            "return_type": "Result<usize>",
            "is_async": true
          },
          {
            "name": "track_usage",
            "line": 477,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "get_top_features",
            "line": 504,
            "return_type": "Result<Vec<FeatureUsage>>",
            "is_async": true
          },
          {
            "name": "validate_no_cycles",
            "line": 533,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "has_cycle_dfs",
            "line": 551,
            "return_type": "Result<bool>",
            "is_async": true
          },
          {
            "name": "deprecate_feature",
            "line": 583,
            "return_type": "Result<()>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "FeatureDefinition",
        "trait": null,
        "file": "crates/feature_store/src/feature_registry.rs",
        "line": 630,
        "methods": [
          {
            "name": "validate",
            "line": 631,
            "return_type": "Result<()>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "FeatureStore",
        "trait": null,
        "file": "crates/feature_store/src/lib.rs",
        "line": 90,
        "methods": [
          {
            "name": "new",
            "line": 91,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "get_online_features",
            "line": 173,
            "return_type": "Result<Vec<FeatureVector>>",
            "is_async": true
          },
          {
            "name": "get_historical_features",
            "line": 205,
            "return_type": "Result<Vec<FeatureVector>>",
            "is_async": true
          },
          {
            "name": "register_feature",
            "line": 232,
            "return_type": "Result<String>",
            "is_async": true
          },
          {
            "name": "update_features",
            "line": 254,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "start_ab_test",
            "line": 277,
            "return_type": "Result<String>",
            "is_async": true
          },
          {
            "name": "get_ab_results",
            "line": 288,
            "return_type": "Result<ExperimentResults>",
            "is_async": true
          },
          {
            "name": "get_lineage",
            "line": 296,
            "return_type": "Result<FeatureLineage>",
            "is_async": true
          },
          {
            "name": "get_health_metrics",
            "line": 304,
            "return_type": "Result<HealthMetrics>",
            "is_async": true
          },
          {
            "name": "handle_drift_alert",
            "line": 317,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "shutdown",
            "line": 335,
            "return_type": "Result<()>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "DriftDetector",
        "trait": null,
        "file": "crates/feature_store/src/drift_detection.rs",
        "line": 70,
        "methods": [
          {
            "name": "new",
            "line": 71,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "start_monitoring",
            "line": 99,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "stop",
            "line": 172,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "add_feature",
            "line": 180,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "check_update",
            "line": 190,
            "return_type": "Result<Option<DriftAlert>>",
            "is_async": true
          },
          {
            "name": "get_active_alerts",
            "line": 229,
            "return_type": "Result<usize>",
            "is_async": true
          },
          {
            "name": "compute_baseline",
            "line": 234,
            "return_type": "Result<BaselineDistribution>",
            "is_async": true
          },
          {
            "name": "load_baselines",
            "line": 265,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "get_monitored_features",
            "line": 272,
            "return_type": "Result<Vec<String>>",
            "is_async": true
          },
          {
            "name": "check_feature_drift",
            "line": 282,
            "return_type": "Result<Option<DriftAlert>>",
            "is_async": true
          },
          {
            "name": "calculate_psi",
            "line": 388,
            "return_type": "Result<f64>",
            "is_async": false
          },
          {
            "name": "calculate_kl_divergence",
            "line": 432,
            "return_type": "Result<f64>",
            "is_async": false
          },
          {
            "name": "calculate_wasserstein",
            "line": 455,
            "return_type": "Result<f64>",
            "is_async": false
          },
          {
            "name": "calculate_chi_square",
            "line": 469,
            "return_type": "Result<f64>",
            "is_async": false
          },
          {
            "name": "get_recommended_action",
            "line": 508,
            "return_type": "String",
            "is_async": false
          }
        ]
      },
      {
        "struct": "FeaturePipeline",
        "trait": null,
        "file": "crates/feature_store/src/feature_pipeline.rs",
        "line": 62,
        "methods": [
          {
            "name": "new",
            "line": 63,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "start_streaming",
            "line": 100,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "stop",
            "line": 121,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "process_updates",
            "line": 134,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "apply_transformations",
            "line": 176,
            "return_type": "Result<Vec<FeatureUpdate>>",
            "is_async": true
          },
          {
            "name": "register_default_transformers",
            "line": 202,
            "return_type": "Result<()>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "StreamingEngine",
        "trait": null,
        "file": "crates/feature_store/src/feature_pipeline.rs",
        "line": 255,
        "methods": [
          {
            "name": "new",
            "line": 256,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "start",
            "line": 274,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "flush_batch",
            "line": 320,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "stop",
            "line": 345,
            "return_type": "Result<()>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "BatchProcessor",
        "trait": null,
        "file": "crates/feature_store/src/feature_pipeline.rs",
        "line": 362,
        "methods": [
          {
            "name": "new",
            "line": 362,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "start",
            "line": 368,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "stop",
            "line": 391,
            "return_type": "Result<()>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "MovingAverageTransformer",
        "trait": null,
        "file": "crates/feature_store/src/feature_pipeline.rs",
        "line": 414,
        "methods": [
          {
            "name": "new",
            "line": 414,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "EMATransformer",
        "trait": null,
        "file": "crates/feature_store/src/feature_pipeline.rs",
        "line": 456,
        "methods": [
          {
            "name": "new",
            "line": 456,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ZScoreTransformer",
        "trait": null,
        "file": "crates/feature_store/src/feature_pipeline.rs",
        "line": 492,
        "methods": [
          {
            "name": "new",
            "line": 492,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "LogTransformer",
        "trait": null,
        "file": "crates/feature_store/src/feature_pipeline.rs",
        "line": 532,
        "methods": [
          {
            "name": "new",
            "line": 532,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "LagTransformer",
        "trait": null,
        "file": "crates/feature_store/src/feature_pipeline.rs",
        "line": 567,
        "methods": [
          {
            "name": "new",
            "line": 567,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "FeatureRegistry",
        "trait": null,
        "file": "crates/feature_store/src/feature_pipeline.rs",
        "line": 605,
        "methods": [
          {
            "name": "get_feature_definition",
            "line": 606,
            "return_type": "Result<crate::feature_registry::FeatureDefinition>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "OfflineStore",
        "trait": null,
        "file": "crates/feature_store/src/offline_store.rs",
        "line": 54,
        "methods": [
          {
            "name": "new",
            "line": 55,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "initialize_schema",
            "line": 89,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "get_features_at_time",
            "line": 231,
            "return_type": "Result<Vec<FeatureVector>>",
            "is_async": true
          },
          {
            "name": "write_features",
            "line": 280,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "get_feature_statistics",
            "line": 318,
            "return_type": "Result<FeatureStatistics>",
            "is_async": true
          },
          {
            "name": "export_to_parquet",
            "line": 362,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "initialize_feature",
            "line": 434,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "close",
            "line": 440,
            "return_type": "Result<()>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "BinaryCopyInWriter",
        "trait": null,
        "file": "crates/feature_store/src/offline_store.rs",
        "line": 485,
        "methods": [
          {
            "name": "new",
            "line": 485,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "write",
            "line": 487,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "finish",
            "line": 492,
            "return_type": "Result<()>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "ABTestManager",
        "trait": null,
        "file": "crates/feature_store/src/ab_testing.rs",
        "line": 56,
        "methods": [
          {
            "name": "new",
            "line": 57,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "create_experiment",
            "line": 80,
            "return_type": "Result<String>",
            "is_async": true
          },
          {
            "name": "get_treatment_features",
            "line": 132,
            "return_type": "Result<Vec<String>>",
            "is_async": true
          },
          {
            "name": "record_observation",
            "line": 164,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "get_results",
            "line": 195,
            "return_type": "Result<ExperimentResults>",
            "is_async": true
          },
          {
            "name": "get_active_count",
            "line": 208,
            "return_type": "Result<usize>",
            "is_async": true
          },
          {
            "name": "stop_experiment",
            "line": 217,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "calculate_sample_size",
            "line": 236,
            "return_type": "Result<usize>",
            "is_async": false
          },
          {
            "name": "calculate_statistics",
            "line": 258,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "calculate_confidence_interval",
            "line": 317,
            "return_type": "Result<(f64, f64)>",
            "is_async": false
          },
          {
            "name": "calculate_t_statistic",
            "line": 334,
            "return_type": "Result<f64>",
            "is_async": false
          },
          {
            "name": "check_auto_stop",
            "line": 355,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "load_experiments",
            "line": 386,
            "return_type": "Result<()>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "Experiment",
        "trait": null,
        "file": "crates/feature_store/src/ab_testing.rs",
        "line": 430,
        "methods": [
          {
            "name": "validate",
            "line": 431,
            "return_type": "Result<()>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ExperimentResults",
        "trait": null,
        "file": "crates/feature_store/src/ab_testing.rs",
        "line": 506,
        "methods": [
          {
            "name": "new",
            "line": 506,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "GroupStats",
        "trait": null,
        "file": "crates/feature_store/src/ab_testing.rs",
        "line": 532,
        "methods": [
          {
            "name": "new",
            "line": 532,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "EventBuffer",
        "trait": null,
        "file": "crates/data_ingestion/src/sinks/parquet_writer.rs",
        "line": 122,
        "methods": [
          {
            "name": "new",
            "line": 122,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "add",
            "line": 129,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "should_flush",
            "line": 142,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "clear",
            "line": 147,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ParquetMetrics",
        "trait": null,
        "file": "crates/data_ingestion/src/sinks/parquet_writer.rs",
        "line": 179,
        "methods": [
          {
            "name": "new",
            "line": 179,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ParquetWriter",
        "trait": null,
        "file": "crates/data_ingestion/src/sinks/parquet_writer.rs",
        "line": 207,
        "methods": [
          {
            "name": "new",
            "line": 208,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "write",
            "line": 296,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "flush",
            "line": 327,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "flush_partition",
            "line": 341,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "events_to_record_batch",
            "line": 387,
            "return_type": "Result<RecordBatch>",
            "is_async": false
          },
          {
            "name": "get_or_create_writer",
            "line": 482,
            "return_type": "Result<Arc<Mutex<PartitionWriter>>>",
            "is_async": true
          },
          {
            "name": "build_writer_properties",
            "line": 528,
            "return_type": "WriterProperties",
            "is_async": false
          },
          {
            "name": "get_partition_key",
            "line": 582,
            "return_type": "String",
            "is_async": false
          },
          {
            "name": "get_file_path",
            "line": 625,
            "return_type": "PathBuf",
            "is_async": false
          },
          {
            "name": "flush_task",
            "line": 632,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "archive_task",
            "line": 645,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "archive_old_files",
            "line": 658,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "query_recent",
            "line": 727,
            "return_type": "Result<Vec<MarketEvent>>",
            "is_async": true
          },
          {
            "name": "metrics",
            "line": 741,
            "return_type": "ParquetMetrics",
            "is_async": false
          },
          {
            "name": "shutdown",
            "line": 755,
            "return_type": "Result<()>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "WriteBuffer",
        "trait": null,
        "file": "crates/data_ingestion/src/sinks/clickhouse_sink.rs",
        "line": 117,
        "methods": [
          {
            "name": "new",
            "line": 117,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "add",
            "line": 123,
            "return_type": "usize",
            "is_async": false
          },
          {
            "name": "should_flush",
            "line": 139,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "take",
            "line": 153,
            "return_type": "Vec<MarketEventRow>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ClickHouseSink",
        "trait": null,
        "file": "crates/data_ingestion/src/sinks/clickhouse_sink.rs",
        "line": 193,
        "methods": [
          {
            "name": "new",
            "line": 193,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "create_table",
            "line": 256,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "create_materialized_views",
            "line": 320,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "write",
            "line": 398,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "convert_to_row",
            "line": 431,
            "return_type": "Result<MarketEventRow>",
            "is_async": false
          },
          {
            "name": "flush_batch",
            "line": 566,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "start_background_flusher",
            "line": 626,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "flush_batch_static",
            "line": 694,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "check_circuit_breaker",
            "line": 741,
            "return_type": "bool",
            "is_async": true
          },
          {
            "name": "open_circuit_breaker",
            "line": 756,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "flush",
            "line": 766,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "start_metrics_reporter",
            "line": 773,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "query_recent_trades",
            "line": 818,
            "return_type": "Result<Vec<MarketEventRow>>",
            "is_async": true
          },
          {
            "name": "get_orderbook_snapshot",
            "line": 851,
            "return_type": "Result<Option<MarketEventRow>>",
            "is_async": true
          },
          {
            "name": "calculate_vwap",
            "line": 881,
            "return_type": "Result<f64>",
            "is_async": true
          },
          {
            "name": "shutdown",
            "line": 913,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "update_latency",
            "line": 929,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "CandleInterval",
        "trait": null,
        "file": "crates/data_ingestion/src/aggregators/timescale_aggregator.rs",
        "line": 122,
        "methods": [
          {
            "name": "to_interval_string",
            "line": 123,
            "return_type": "&'static str",
            "is_async": false
          },
          {
            "name": "to_seconds",
            "line": 141,
            "return_type": "i64",
            "is_async": false
          },
          {
            "name": "table_suffix",
            "line": 159,
            "return_type": "&'static str",
            "is_async": false
          }
        ]
      },
      {
        "struct": "EventBatch",
        "trait": null,
        "file": "crates/data_ingestion/src/aggregators/timescale_aggregator.rs",
        "line": 228,
        "methods": [
          {
            "name": "new",
            "line": 228,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "add",
            "line": 233,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "should_flush",
            "line": 237,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "clear",
            "line": 242,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "AggregatorMetrics",
        "trait": null,
        "file": "crates/data_ingestion/src/aggregators/timescale_aggregator.rs",
        "line": 263,
        "methods": [
          {
            "name": "new",
            "line": 263,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "CandleCache",
        "trait": null,
        "file": "crates/data_ingestion/src/aggregators/timescale_aggregator.rs",
        "line": 284,
        "methods": [
          {
            "name": "new",
            "line": 284,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "get",
            "line": 289,
            "return_type": "Option<Vec<Candle>>",
            "is_async": true
          },
          {
            "name": "insert",
            "line": 303,
            "return_type": "()",
            "is_async": true
          }
        ]
      },
      {
        "struct": "TimescaleAggregator",
        "trait": null,
        "file": "crates/data_ingestion/src/aggregators/timescale_aggregator.rs",
        "line": 335,
        "methods": [
          {
            "name": "new",
            "line": 336,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "initialize_schema",
            "line": 403,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "create_candle_table",
            "line": 538,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "create_continuous_aggregate",
            "line": 603,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "setup_compression_policies",
            "line": 657,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "setup_retention_policies",
            "line": 694,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "process_event",
            "line": 731,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "flush_batch",
            "line": 754,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "get_candles",
            "line": 811,
            "return_type": "Result<Vec<Candle>>",
            "is_async": true
          },
          {
            "name": "get_volume_profile",
            "line": 875,
            "return_type": "Result<Vec<VolumeLevel>>",
            "is_async": true
          },
          {
            "name": "get_order_flow",
            "line": 949,
            "return_type": "Result<Vec<OrderFlowMetrics>>",
            "is_async": true
          },
          {
            "name": "flush_task",
            "line": 999,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "aggregation_task",
            "line": 1012,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "aggregate_candles",
            "line": 1027,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "compression_task",
            "line": 1085,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "run_compression",
            "line": 1098,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "metrics",
            "line": 1121,
            "return_type": "AggregatorMetrics",
            "is_async": false
          },
          {
            "name": "shutdown",
            "line": 1135,
            "return_type": "Result<()>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "HypertableManager",
        "trait": null,
        "file": "crates/data_ingestion/src/timescale/hypertable.rs",
        "line": 28,
        "methods": [
          {
            "name": "new",
            "line": 28,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "ensure_hypertable",
            "line": 33,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "add_compression_policy",
            "line": 87,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "add_retention_policy",
            "line": 100,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "get_chunk_stats",
            "line": 113,
            "return_type": "Result<ChunkStats>",
            "is_async": true
          },
          {
            "name": "optimize_chunks",
            "line": 140,
            "return_type": "Result<()>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "PerformanceMonitor",
        "trait": null,
        "file": "crates/data_ingestion/src/timescale/monitoring.rs",
        "line": 48,
        "methods": [
          {
            "name": "new",
            "line": 48,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "record_query",
            "line": 57,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "record_batch_insert",
            "line": 80,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "get_current_stats",
            "line": 104,
            "return_type": "IngestionStats",
            "is_async": true
          },
          {
            "name": "run_benchmark",
            "line": 137,
            "return_type": "Result<BenchmarkResults>",
            "is_async": true
          },
          {
            "name": "get_query_summary",
            "line": 218,
            "return_type": "QuerySummary",
            "is_async": true
          },
          {
            "name": "default_stats",
            "line": 242,
            "return_type": "IngestionStats",
            "is_async": false
          }
        ]
      },
      {
        "struct": "AggregateLevel",
        "trait": null,
        "file": "crates/data_ingestion/src/timescale/aggregates.rs",
        "line": 23,
        "methods": [
          {
            "name": "view_name",
            "line": 23,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "interval",
            "line": 33,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "source_view",
            "line": 45,
            "return_type": "Option<&str>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "AggregateManager",
        "trait": null,
        "file": "crates/data_ingestion/src/timescale/aggregates.rs",
        "line": 66,
        "methods": [
          {
            "name": "new",
            "line": 66,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "verify_aggregates",
            "line": 76,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "ensure_aggregate",
            "line": 101,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "generate_aggregate_sql",
            "line": 131,
            "return_type": "String",
            "is_async": false
          },
          {
            "name": "add_refresh_policy",
            "line": 193,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "refresh_aggregate",
            "line": 226,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "refresh_aggregate_window",
            "line": 239,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "get_aggregate_freshness",
            "line": 263,
            "return_type": "Result<Vec<AggregateFreshness>>",
            "is_async": true
          },
          {
            "name": "optimize_aggregate_compression",
            "line": 291,
            "return_type": "Result<()>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "CompressionManager",
        "trait": null,
        "file": "crates/data_ingestion/src/timescale/compression.rs",
        "line": 26,
        "methods": [
          {
            "name": "new",
            "line": 26,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "configure_compression",
            "line": 34,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "run_compression",
            "line": 67,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "get_compression_stats",
            "line": 111,
            "return_type": "Result<Vec<CompressionStats>>",
            "is_async": true
          },
          {
            "name": "decompress_range",
            "line": 151,
            "return_type": "Result<()>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "TradeSide",
        "trait": null,
        "file": "crates/data_ingestion/src/timescale/mod.rs",
        "line": 150,
        "methods": [
          {
            "name": "to_char",
            "line": 150,
            "return_type": "char",
            "is_async": false
          }
        ]
      },
      {
        "struct": "TimescaleClient",
        "trait": null,
        "file": "crates/data_ingestion/src/timescale/mod.rs",
        "line": 203,
        "methods": [
          {
            "name": "new",
            "line": 204,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "verify_schema",
            "line": 268,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "start_background_tasks",
            "line": 308,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "insert_tick",
            "line": 389,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "insert_orderbook",
            "line": 402,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "insert_execution",
            "line": 415,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "flush_all_buffers",
            "line": 428,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "flush_tick_buffer",
            "line": 439,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "flush_orderbook_buffer",
            "line": 518,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "flush_execution_buffer",
            "line": 564,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "query_recent_ticks",
            "line": 610,
            "return_type": "Result<Vec<MarketTick>>",
            "is_async": true
          },
          {
            "name": "query_ohlcv",
            "line": 672,
            "return_type": "Result<Vec<OHLCVData>>",
            "is_async": true
          },
          {
            "name": "get_performance_metrics",
            "line": 722,
            "return_type": "Result<PerformanceMetrics>",
            "is_async": true
          },
          {
            "name": "shutdown",
            "line": 741,
            "return_type": "Result<()>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "ReplicationManager",
        "trait": null,
        "file": "crates/data_ingestion/src/timescale/replication.rs",
        "line": 35,
        "methods": [
          {
            "name": "new",
            "line": 35,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "configure_replication",
            "line": 43,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "create_replication_slot",
            "line": 81,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "get_replication_lag",
            "line": 94,
            "return_type": "Result<Vec<StandbyLag>>",
            "is_async": true
          },
          {
            "name": "create_backup_point",
            "line": 135,
            "return_type": "Result<String>",
            "is_async": true
          },
          {
            "name": "backup_tables",
            "line": 157,
            "return_type": "Result<BackupInfo>",
            "is_async": true
          },
          {
            "name": "check_standby_sync",
            "line": 194,
            "return_type": "Result<bool>",
            "is_async": true
          },
          {
            "name": "promote_standby",
            "line": 214,
            "return_type": "Result<()>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "GarchModel",
        "trait": null,
        "file": "crates/data_ingestion/src/event_driven/adaptive_sampler.rs",
        "line": 141,
        "methods": [
          {
            "name": "new",
            "line": 141,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "update",
            "line": 150,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "forecast",
            "line": 160,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "AdaptiveSampler",
        "trait": null,
        "file": "crates/data_ingestion/src/event_driven/adaptive_sampler.rs",
        "line": 199,
        "methods": [
          {
            "name": "new",
            "line": 199,
            "return_type": "Result<Self>",
            "is_async": false
          },
          {
            "name": "add_price_sample",
            "line": 220,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "update_volatility",
            "line": 257,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "calculate_realized_volatility",
            "line": 320,
            "return_type": "Result<f64>",
            "is_async": false
          },
          {
            "name": "update_regime",
            "line": 335,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "update_sampling_rate",
            "line": 364,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "calculate_confidence",
            "line": 415,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "should_sample",
            "line": 429,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "detect_burst",
            "line": 446,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "get_current_rate",
            "line": 470,
            "return_type": "SamplingRate",
            "is_async": false
          },
          {
            "name": "get_volatility",
            "line": 475,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "get_regime",
            "line": 480,
            "return_type": "VolatilityRegime",
            "is_async": false
          },
          {
            "name": "forecast_volatility",
            "line": 485,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "get_optimal_rate",
            "line": 494,
            "return_type": "u64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "RateLimiter",
        "trait": null,
        "file": "crates/data_ingestion/src/event_driven/processor.rs",
        "line": 220,
        "methods": [
          {
            "name": "new",
            "line": 220,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "try_acquire",
            "line": 228,
            "return_type": "bool",
            "is_async": false
          }
        ]
      },
      {
        "struct": "EventProcessor",
        "trait": null,
        "file": "crates/data_ingestion/src/event_driven/processor.rs",
        "line": 249,
        "methods": [
          {
            "name": "new",
            "line": 249,
            "return_type": "Result<Self>",
            "is_async": false
          },
          {
            "name": "submit_event",
            "line": 289,
            "return_type": "Result<u64>",
            "is_async": false
          },
          {
            "name": "start",
            "line": 344,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "spawn_worker",
            "line": 361,
            "return_type": "Result<Worker>",
            "is_async": true
          },
          {
            "name": "worker_loop",
            "line": 393,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "process_batch",
            "line": 451,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "spawn_monitor",
            "line": 498,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "register_handler",
            "line": 552,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "queue_depth",
            "line": 564,
            "return_type": "usize",
            "is_async": false
          },
          {
            "name": "get_stats",
            "line": 570,
            "return_type": "ProcessingStats",
            "is_async": false
          },
          {
            "name": "shutdown",
            "line": 602,
            "return_type": "Result<()>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "MultiLevelAggregator",
        "trait": null,
        "file": "crates/data_ingestion/src/event_driven/bucketed_aggregator.rs",
        "line": 139,
        "methods": [
          {
            "name": "new",
            "line": 139,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "add_event",
            "line": 145,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_windows",
            "line": 150,
            "return_type": "Option<Vec<AggregateWindow>>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "LevelAggregator",
        "trait": null,
        "file": "crates/data_ingestion/src/event_driven/bucketed_aggregator.rs",
        "line": 166,
        "methods": [
          {
            "name": "new",
            "line": 166,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "add_event",
            "line": 172,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_window_start",
            "line": 207,
            "return_type": "DateTime<Utc>",
            "is_async": false
          },
          {
            "name": "get_completed_windows",
            "line": 213,
            "return_type": "Vec<AggregateWindow>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "WindowBuilder",
        "trait": null,
        "file": "crates/data_ingestion/src/event_driven/bucketed_aggregator.rs",
        "line": 257,
        "methods": [
          {
            "name": "new",
            "line": 257,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "add_trade",
            "line": 282,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "add_spread",
            "line": 330,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "complete",
            "line": 338,
            "return_type": "Option<AggregateWindow>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "BucketedAggregator",
        "trait": null,
        "file": "crates/data_ingestion/src/event_driven/bucketed_aggregator.rs",
        "line": 446,
        "methods": [
          {
            "name": "new",
            "line": 446,
            "return_type": "Result<Self>",
            "is_async": false
          },
          {
            "name": "process_trade",
            "line": 461,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "get_windows",
            "line": 491,
            "return_type": "Vec<AggregateWindow>",
            "is_async": false
          },
          {
            "name": "get_latest_window",
            "line": 512,
            "return_type": "Option<AggregateWindow>",
            "is_async": false
          },
          {
            "name": "get_stats",
            "line": 517,
            "return_type": "BucketStats",
            "is_async": false
          },
          {
            "name": "calculate_features",
            "line": 539,
            "return_type": "MicrostructureFeatures",
            "is_async": false
          }
        ]
      },
      {
        "struct": "RedpandaProducer",
        "trait": null,
        "file": "crates/data_ingestion/src/producers/redpanda_producer.rs",
        "line": 156,
        "methods": [
          {
            "name": "new",
            "line": 156,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "send",
            "line": 232,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "send_immediate",
            "line": 252,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "start_batch_processor",
            "line": 305,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "send_batch",
            "line": 354,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "serialize_zero_copy",
            "line": 404,
            "return_type": "Result<Bytes>",
            "is_async": false
          },
          {
            "name": "serialize_event",
            "line": 410,
            "return_type": "Result<Vec<u8>>",
            "is_async": false
          },
          {
            "name": "get_topic_partition",
            "line": 419,
            "return_type": "(String, i32)",
            "is_async": false
          },
          {
            "name": "get_event_topic",
            "line": 452,
            "return_type": "String",
            "is_async": false
          },
          {
            "name": "get_event_key",
            "line": 465,
            "return_type": "String",
            "is_async": false
          },
          {
            "name": "get_event_key_static",
            "line": 469,
            "return_type": "String",
            "is_async": false
          },
          {
            "name": "get_event_type",
            "line": 478,
            "return_type": "String",
            "is_async": false
          },
          {
            "name": "get_timestamp",
            "line": 487,
            "return_type": "u64",
            "is_async": false
          },
          {
            "name": "check_circuit_breaker",
            "line": 499,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "open_circuit_breaker",
            "line": 514,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "flush",
            "line": 524,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "flush_batch",
            "line": 528,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "start_metrics_reporter",
            "line": 556,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "shutdown",
            "line": 597,
            "return_type": "Result<()>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "Counter",
        "trait": null,
        "file": "crates/data_ingestion/src/monitoring/mod.rs",
        "line": 18,
        "methods": [
          {
            "name": "new",
            "line": 18,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Histogram",
        "trait": null,
        "file": "crates/data_ingestion/src/monitoring/mod.rs",
        "line": 45,
        "methods": [
          {
            "name": "new",
            "line": 45,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "percentile",
            "line": 49,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ProducerMetrics",
        "trait": null,
        "file": "crates/data_ingestion/src/monitoring/mod.rs",
        "line": 103,
        "methods": [
          {
            "name": "new",
            "line": 103,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "record_queuing_latency",
            "line": 109,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "update_throughput",
            "line": 113,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ConsumerMetrics",
        "trait": null,
        "file": "crates/data_ingestion/src/monitoring/mod.rs",
        "line": 127,
        "methods": [
          {
            "name": "new",
            "line": 127,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ClickHouseMetrics",
        "trait": null,
        "file": "crates/data_ingestion/src/monitoring/mod.rs",
        "line": 157,
        "methods": [
          {
            "name": "new",
            "line": 157,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "record_write",
            "line": 159,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "record_error",
            "line": 165,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "update_buffer_size",
            "line": 169,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "CompatibilityLevel",
        "trait": null,
        "file": "crates/data_ingestion/src/schema/mod.rs",
        "line": 108,
        "methods": [
          {
            "name": "to_string",
            "line": 108,
            "return_type": "&'static str",
            "is_async": false
          }
        ]
      },
      {
        "struct": "RegistryMetrics",
        "trait": null,
        "file": "crates/data_ingestion/src/schema/mod.rs",
        "line": 207,
        "methods": [
          {
            "name": "new",
            "line": 207,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "SchemaRegistry",
        "trait": null,
        "file": "crates/data_ingestion/src/schema/mod.rs",
        "line": 276,
        "methods": [
          {
            "name": "new",
            "line": 277,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "test_connectivity",
            "line": 322,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "register_schema",
            "line": 335,
            "return_type": "Result<SchemaInfo>",
            "is_async": true
          },
          {
            "name": "get_latest_schema",
            "line": 402,
            "return_type": "Result<SchemaInfo>",
            "is_async": true
          },
          {
            "name": "get_schema_by_id",
            "line": 439,
            "return_type": "Result<SchemaInfo>",
            "is_async": true
          },
          {
            "name": "get_schema_version",
            "line": 486,
            "return_type": "Result<SchemaInfo>",
            "is_async": true
          },
          {
            "name": "delete_subject",
            "line": 509,
            "return_type": "Result<Vec<i32>>",
            "is_async": true
          },
          {
            "name": "set_compatibility",
            "line": 532,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "check_compatibility",
            "line": 550,
            "return_type": "Result<bool>",
            "is_async": true
          },
          {
            "name": "validate_schema",
            "line": 588,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "analyze_schema_changes",
            "line": 611,
            "return_type": "Result<Vec<SchemaChange>>",
            "is_async": false
          },
          {
            "name": "track_schema_evolution",
            "line": 665,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "create_contract",
            "line": 688,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "get_contract",
            "line": 703,
            "return_type": "Result<DataContract>",
            "is_async": true
          },
          {
            "name": "validate_contract",
            "line": 711,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "cache_schema",
            "line": 733,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "get_from_cache",
            "line": 755,
            "return_type": "Option<Arc<CacheEntry>>",
            "is_async": true
          },
          {
            "name": "clear_subject_cache",
            "line": 775,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "make_request",
            "line": 793,
            "return_type": "Result<reqwest::Response>",
            "is_async": true
          },
          {
            "name": "parse_schema_response",
            "line": 849,
            "return_type": "Result<SchemaInfo>",
            "is_async": false
          },
          {
            "name": "parse_references",
            "line": 867,
            "return_type": "Vec<SchemaReference>",
            "is_async": false
          },
          {
            "name": "cleanup_task",
            "line": 884,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "metrics",
            "line": 904,
            "return_type": "RegistryMetrics",
            "is_async": false
          },
          {
            "name": "shutdown",
            "line": 918,
            "return_type": "Result<()>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "QualityScorer",
        "trait": null,
        "file": "crates/data_ingestion/src/data_quality/quality_scorer.rs",
        "line": 53,
        "methods": [
          {
            "name": "new",
            "line": 53,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "calculate_score",
            "line": 55,
            "return_type": "Result<QualityScore>",
            "is_async": true
          },
          {
            "name": "generate_recommendations",
            "line": 90,
            "return_type": "Vec<String>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "QualityMonitor",
        "trait": null,
        "file": "crates/data_ingestion/src/data_quality/monitoring.rs",
        "line": 56,
        "methods": [
          {
            "name": "new",
            "line": 56,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "start_monitoring",
            "line": 66,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "monitoring_loop",
            "line": 81,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "alert_processing_loop",
            "line": 101,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "analyze_metrics",
            "line": 125,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "cleanup_old_metrics",
            "line": 150,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "distribute_alert",
            "line": 163,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "record_validation",
            "line": 186,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "send_alert",
            "line": 199,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "stop",
            "line": 204,
            "return_type": "Result<()>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "RateLimiter",
        "trait": null,
        "file": "crates/data_ingestion/src/data_quality/monitoring.rs",
        "line": 232,
        "methods": [
          {
            "name": "new",
            "line": 232,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "should_allow",
            "line": 237,
            "return_type": "bool",
            "is_async": false
          }
        ]
      },
      {
        "struct": "AlertSeverity",
        "trait": null,
        "file": "crates/data_ingestion/src/data_quality/monitoring.rs",
        "line": 289,
        "methods": [
          {
            "name": "from_issue",
            "line": 289,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "KalmanGapDetector",
        "trait": null,
        "file": "crates/data_ingestion/src/data_quality/kalman_filter.rs",
        "line": 91,
        "methods": [
          {
            "name": "new",
            "line": 92,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "detect_gaps",
            "line": 104,
            "return_type": "Result<Option<GapEvent>>",
            "is_async": true
          },
          {
            "name": "initialize_state",
            "line": 162,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "kalman_update",
            "line": 220,
            "return_type": "Result<f64>",
            "is_async": true
          },
          {
            "name": "update_process_noise",
            "line": 283,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "create_process_noise_matrix",
            "line": 305,
            "return_type": "DMatrix<f64>",
            "is_async": false
          },
          {
            "name": "update_innovation_stats",
            "line": 314,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "estimate_missing_points",
            "line": 327,
            "return_type": "usize",
            "is_async": false
          },
          {
            "name": "calculate_gap_severity",
            "line": 336,
            "return_type": "GapSeverity",
            "is_async": false
          },
          {
            "name": "interpolate_gap",
            "line": 347,
            "return_type": "Result<Vec<InterpolatedPoint>>",
            "is_async": true
          },
          {
            "name": "get_gap_statistics",
            "line": 387,
            "return_type": "Result<GapStatistics>",
            "is_async": true
          },
          {
            "name": "count_by_severity",
            "line": 418,
            "return_type": "HashMap<GapSeverity, usize>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "InnovationStats",
        "trait": null,
        "file": "crates/data_ingestion/src/data_quality/kalman_filter.rs",
        "line": 438,
        "methods": [
          {
            "name": "update",
            "line": 438,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ChangeDetector",
        "trait": null,
        "file": "crates/data_ingestion/src/data_quality/change_detection.rs",
        "line": 43,
        "methods": [
          {
            "name": "new",
            "line": 43,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "detect",
            "line": 48,
            "return_type": "Result<Option<ChangePoint>>",
            "is_async": true
          },
          {
            "name": "detect_cusum",
            "line": 60,
            "return_type": "Result<Option<ChangePoint>>",
            "is_async": false
          },
          {
            "name": "detect_pelt",
            "line": 87,
            "return_type": "Result<Option<ChangePoint>>",
            "is_async": false
          },
          {
            "name": "detect_bayesian",
            "line": 127,
            "return_type": "Result<Option<ChangePoint>>",
            "is_async": false
          },
          {
            "name": "segment_cost",
            "line": 161,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "student_t_pdf",
            "line": 169,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "CrossSourceReconciler",
        "trait": null,
        "file": "crates/data_ingestion/src/data_quality/reconciliation.rs",
        "line": 116,
        "methods": [
          {
            "name": "new",
            "line": 117,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "initialize_sources",
            "line": 136,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "reconcile",
            "line": 169,
            "return_type": "Result<ReconciliationResult>",
            "is_async": true
          },
          {
            "name": "force_reconcile",
            "line": 260,
            "return_type": "Result<ReconciliationResult>",
            "is_async": true
          },
          {
            "name": "collect_source_data",
            "line": 277,
            "return_type": "Result<Vec<SourceData>>",
            "is_async": true
          },
          {
            "name": "group_by_timestamp",
            "line": 316,
            "return_type": "Result<HashMap<i64, Vec<SourceData>>>",
            "is_async": false
          },
          {
            "name": "find_consensus",
            "line": 330,
            "return_type": "Result<ConsensusData>",
            "is_async": true
          },
          {
            "name": "detect_outliers",
            "line": 363,
            "return_type": "Result<Vec<String>>",
            "is_async": false
          },
          {
            "name": "update_source_metrics",
            "line": 387,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "calculate_completeness",
            "line": 411,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "get_statistics",
            "line": 420,
            "return_type": "ReconciliationStatistics",
            "is_async": true
          }
        ]
      },
      {
        "struct": "BenfordValidator",
        "trait": null,
        "file": "crates/data_ingestion/src/data_quality/benford.rs",
        "line": 57,
        "methods": [
          {
            "name": "new",
            "line": 58,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "validate",
            "line": 95,
            "return_type": "Result<Option<BenfordAnomaly>>",
            "is_async": true
          },
          {
            "name": "extract_digits",
            "line": 155,
            "return_type": "Result<DigitData>",
            "is_async": false
          },
          {
            "name": "test_first_digit",
            "line": 193,
            "return_type": "Result<TestResult>",
            "is_async": false
          },
          {
            "name": "test_second_digit",
            "line": 238,
            "return_type": "Result<TestResult>",
            "is_async": false
          },
          {
            "name": "test_mantissa",
            "line": 283,
            "return_type": "Result<f64>",
            "is_async": false
          },
          {
            "name": "calculate_confidence",
            "line": 324,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "DataQualityManager",
        "trait": null,
        "file": "crates/data_ingestion/src/data_quality/mod.rs",
        "line": 108,
        "methods": [
          {
            "name": "new",
            "line": 109,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "validate_data",
            "line": 165,
            "return_type": "Result<ValidationResult>",
            "is_async": true
          },
          {
            "name": "validate_historical",
            "line": 283,
            "return_type": "Result<BatchValidationResult>",
            "is_async": true
          },
          {
            "name": "trigger_backfill",
            "line": 327,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "calculate_timeliness",
            "line": 344,
            "return_type": "Result<f64>",
            "is_async": true
          },
          {
            "name": "generate_alerts",
            "line": 357,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "get_quality_status",
            "line": 394,
            "return_type": "Result<QualityStatus>",
            "is_async": true
          },
          {
            "name": "force_reconciliation",
            "line": 421,
            "return_type": "Result<ReconciliationResult>",
            "is_async": true
          },
          {
            "name": "get_statistics",
            "line": 427,
            "return_type": "Result<ValidationStatistics>",
            "is_async": true
          },
          {
            "name": "shutdown",
            "line": 448,
            "return_type": "Result<()>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "IssueSeverity",
        "trait": null,
        "file": "crates/data_ingestion/src/data_quality/mod.rs",
        "line": 511,
        "methods": [
          {
            "name": "from_benford",
            "line": 511,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "from_gap",
            "line": 518,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "from_change_point",
            "line": 528,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "BackfillPriority",
        "trait": null,
        "file": "crates/data_ingestion/src/data_quality/backfill.rs",
        "line": 68,
        "methods": [
          {
            "name": "score",
            "line": 68,
            "return_type": "i32",
            "is_async": false
          }
        ]
      },
      {
        "struct": "BackfillRequest",
        "trait": null,
        "file": "crates/data_ingestion/src/data_quality/backfill.rs",
        "line": 90,
        "methods": [
          {
            "name": "calculate_priority",
            "line": 91,
            "return_type": "i32",
            "is_async": false
          }
        ]
      },
      {
        "struct": "BackfillSystem",
        "trait": null,
        "file": "crates/data_ingestion/src/data_quality/backfill.rs",
        "line": 248,
        "methods": [
          {
            "name": "new",
            "line": 249,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "initialize_data_sources",
            "line": 292,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "request_backfill",
            "line": 315,
            "return_type": "Result<String>",
            "is_async": true
          },
          {
            "name": "queue_processor",
            "line": 357,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "job_processor",
            "line": 383,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "process_with_retries",
            "line": 445,
            "return_type": "Result<usize>",
            "is_async": true
          },
          {
            "name": "fetch_from_sources",
            "line": 489,
            "return_type": "Result<Vec<DataPoint>>",
            "is_async": true
          },
          {
            "name": "store_backfilled_data",
            "line": 529,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "estimate_request_cost",
            "line": 536,
            "return_type": "Result<f64>",
            "is_async": true
          },
          {
            "name": "get_statistics",
            "line": 548,
            "return_type": "BackfillStatistics",
            "is_async": true
          },
          {
            "name": "shutdown",
            "line": 576,
            "return_type": "Result<()>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "IntradayPattern",
        "trait": null,
        "file": "crates/data_ingestion/src/replay/slippage_model.rs",
        "line": 151,
        "methods": [
          {
            "name": "new",
            "line": 151,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "get_multiplier",
            "line": 165,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "VolatilityTracker",
        "trait": null,
        "file": "crates/data_ingestion/src/replay/slippage_model.rs",
        "line": 199,
        "methods": [
          {
            "name": "new",
            "line": 199,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "update",
            "line": 208,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_volatility",
            "line": 227,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "SlippageModel",
        "trait": null,
        "file": "crates/data_ingestion/src/replay/slippage_model.rs",
        "line": 236,
        "methods": [
          {
            "name": "new",
            "line": 236,
            "return_type": "Result<Self>",
            "is_async": false
          },
          {
            "name": "calculate_slippage",
            "line": 248,
            "return_type": "Result<ExecutionCost>",
            "is_async": false
          },
          {
            "name": "get_arrival_price",
            "line": 325,
            "return_type": "Result<Price>",
            "is_async": false
          },
          {
            "name": "calculate_spread_cost",
            "line": 333,
            "return_type": "Result<f64>",
            "is_async": false
          },
          {
            "name": "calculate_market_impact",
            "line": 350,
            "return_type": "Result<f64>",
            "is_async": false
          },
          {
            "name": "calculate_kyle_lambda",
            "line": 373,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "split_impact",
            "line": 385,
            "return_type": "(f64, f64)",
            "is_async": false
          },
          {
            "name": "calculate_timing_cost",
            "line": 392,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_opportunity_cost",
            "line": 402,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_adverse_selection",
            "line": 408,
            "return_type": "Result<f64>",
            "is_async": false
          },
          {
            "name": "estimate_market_volume",
            "line": 441,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "update_volatility",
            "line": 452,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "simulate_execution_path",
            "line": 461,
            "return_type": "Result<Vec<ExecutionCost>>",
            "is_async": false
          },
          {
            "name": "calculate_implementation_shortfall",
            "line": 500,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_optimal_schedule",
            "line": 523,
            "return_type": "Vec<(u64, Quantity)>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "AdvancedSlippageModels",
        "trait": null,
        "file": "crates/data_ingestion/src/replay/slippage_model.rs",
        "line": 565,
        "methods": [
          {
            "name": "obizhaev_wang_impact",
            "line": 566,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "hasbrouck_impact",
            "line": 578,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "gatheral_impact",
            "line": 589,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "StatsCollector",
        "trait": null,
        "file": "crates/data_ingestion/src/replay/playback_engine.rs",
        "line": 244,
        "methods": [
          {
            "name": "new",
            "line": 244,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "record_event",
            "line": 254,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "record_microburst",
            "line": 258,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "record_slippage",
            "line": 262,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "record_fee",
            "line": 266,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "record_latency",
            "line": 270,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_stats",
            "line": 278,
            "return_type": "SimulationStats",
            "is_async": false
          }
        ]
      },
      {
        "struct": "PlaybackEngine",
        "trait": null,
        "file": "crates/data_ingestion/src/replay/playback_engine.rs",
        "line": 316,
        "methods": [
          {
            "name": "new",
            "line": 316,
            "return_type": "Result<Self>",
            "is_async": false
          },
          {
            "name": "load_data",
            "line": 339,
            "return_type": "Result<EventSequence>",
            "is_async": true
          },
          {
            "name": "start_playback",
            "line": 386,
            "return_type": "Result<ReplayResult>",
            "is_async": true
          },
          {
            "name": "process_event",
            "line": 499,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "process_strategy_signal",
            "line": 547,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "set_speed",
            "line": 587,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "pause",
            "line": 592,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "resume",
            "line": 597,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_stats",
            "line": 602,
            "return_type": "SimulationStats",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ExchangeFees",
        "trait": null,
        "file": "crates/data_ingestion/src/replay/fee_calculator.rs",
        "line": 112,
        "methods": [
          {
            "name": "new",
            "line": 112,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "create_binance_fees",
            "line": 120,
            "return_type": "FeeStructure",
            "is_async": false
          },
          {
            "name": "create_coinbase_fees",
            "line": 215,
            "return_type": "FeeStructure",
            "is_async": false
          },
          {
            "name": "create_kraken_fees",
            "line": 284,
            "return_type": "FeeStructure",
            "is_async": false
          },
          {
            "name": "create_okx_fees",
            "line": 360,
            "return_type": "FeeStructure",
            "is_async": false
          },
          {
            "name": "create_bybit_fees",
            "line": 420,
            "return_type": "FeeStructure",
            "is_async": false
          }
        ]
      },
      {
        "struct": "VolumeTracker",
        "trait": null,
        "file": "crates/data_ingestion/src/replay/fee_calculator.rs",
        "line": 497,
        "methods": [
          {
            "name": "new",
            "line": 497,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "update_volume",
            "line": 512,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "FeeCalculator",
        "trait": null,
        "file": "crates/data_ingestion/src/replay/fee_calculator.rs",
        "line": 548,
        "methods": [
          {
            "name": "new",
            "line": 548,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "calculate_fee",
            "line": 557,
            "return_type": "Result<(Decimal, MakerTakerFees)>",
            "is_async": false
          },
          {
            "name": "get_fee_structure",
            "line": 622,
            "return_type": "Result<FeeStructure>",
            "is_async": false
          },
          {
            "name": "get_user_tier",
            "line": 653,
            "return_type": "Result<TierLevel>",
            "is_async": false
          },
          {
            "name": "update_user_volume",
            "line": 672,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "calculate_batch_fees",
            "line": 706,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "estimate_order_fee",
            "line": 729,
            "return_type": "Result<(Decimal, Decimal)>",
            "is_async": false
          },
          {
            "name": "set_custom_fees",
            "line": 770,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "LOBSimulator",
        "trait": null,
        "file": "crates/data_ingestion/src/replay/lob_simulator.rs",
        "line": 227,
        "methods": [
          {
            "name": "new",
            "line": 227,
            "return_type": "Result<Self>",
            "is_async": false
          },
          {
            "name": "initialize_book",
            "line": 250,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "process_update",
            "line": 279,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "apply_add_order",
            "line": 356,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "apply_modify_order",
            "line": 410,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "apply_cancel_order",
            "line": 448,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "apply_trade",
            "line": 493,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "apply_snapshot",
            "line": 535,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "clear_book",
            "line": 564,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "update_book_stats",
            "line": 579,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "calculate_micro_price",
            "line": 627,
            "return_type": "Option<Price>",
            "is_async": false
          },
          {
            "name": "validate_sequence",
            "line": 653,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "check_crossed_book",
            "line": 670,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "should_snapshot",
            "line": 679,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "generate_snapshot",
            "line": 686,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "calculate_checksum",
            "line": 709,
            "return_type": "u32",
            "is_async": false
          },
          {
            "name": "get_book",
            "line": 730,
            "return_type": "Option<OrderBook>",
            "is_async": false
          },
          {
            "name": "get_book_depth",
            "line": 735,
            "return_type": "Option<(Vec<OrderBookLevel>, Vec<OrderBookLevel>)>",
            "is_async": false
          },
          {
            "name": "estimate_queue_position",
            "line": 745,
            "return_type": "Option<f64>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "StatisticsTracker",
        "trait": null,
        "file": "crates/data_ingestion/src/replay/microburst_detector.rs",
        "line": 209,
        "methods": [
          {
            "name": "new",
            "line": 209,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "add_volume",
            "line": 217,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "add_price",
            "line": 224,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "add_latency",
            "line": 231,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "add_message_rate",
            "line": 238,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "calculate_z_score",
            "line": 245,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_mad",
            "line": 261,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MicroburstDetector",
        "trait": null,
        "file": "crates/data_ingestion/src/replay/microburst_detector.rs",
        "line": 320,
        "methods": [
          {
            "name": "new",
            "line": 320,
            "return_type": "Result<Self>",
            "is_async": false
          },
          {
            "name": "process_market_data",
            "line": 336,
            "return_type": "Result<Option<MicroburstEvent>>",
            "is_async": false
          },
          {
            "name": "detect_volume_spike",
            "line": 407,
            "return_type": "Result<Option<MicroburstEvent>>",
            "is_async": false
          },
          {
            "name": "detect_price_jump",
            "line": 449,
            "return_type": "Result<Option<MicroburstEvent>>",
            "is_async": false
          },
          {
            "name": "detect_latency_spike",
            "line": 488,
            "return_type": "Result<Option<MicroburstEvent>>",
            "is_async": false
          },
          {
            "name": "detect_quote_stuffing",
            "line": 526,
            "return_type": "Result<Option<MicroburstEvent>>",
            "is_async": false
          },
          {
            "name": "detect_liquidation_cascade",
            "line": 566,
            "return_type": "Result<Option<MicroburstEvent>>",
            "is_async": false
          },
          {
            "name": "detect_stuffing_pattern",
            "line": 625,
            "return_type": "StuffingPattern",
            "is_async": false
          },
          {
            "name": "calculate_severity",
            "line": 652,
            "return_type": "EventSeverity",
            "is_async": false
          },
          {
            "name": "calculate_severity_from_price_move",
            "line": 665,
            "return_type": "EventSeverity",
            "is_async": false
          },
          {
            "name": "create_microburst_event",
            "line": 678,
            "return_type": "MicroburstEvent",
            "is_async": false
          },
          {
            "name": "calculate_market_impact",
            "line": 705,
            "return_type": "MarketImpact",
            "is_async": false
          },
          {
            "name": "store_event",
            "line": 733,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_recent_events",
            "line": 742,
            "return_type": "Vec<MicroburstEvent>",
            "is_async": false
          },
          {
            "name": "simulate_microburst",
            "line": 748,
            "return_type": "Vec<OrderBookUpdate>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MarketImpactCalculator",
        "trait": null,
        "file": "crates/data_ingestion/src/replay/market_impact.rs",
        "line": 117,
        "methods": [
          {
            "name": "new",
            "line": 117,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "add_order_flow_sample",
            "line": 127,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "calibrate_kyle_lambda",
            "line": 152,
            "return_type": "Result<KyleLambda>",
            "is_async": false
          },
          {
            "name": "calibrate_almgren_chriss",
            "line": 216,
            "return_type": "Result<AlmgrenChriss>",
            "is_async": false
          },
          {
            "name": "calibrate_obizhaev_wang",
            "line": 273,
            "return_type": "Result<ObizhaevWang>",
            "is_async": false
          },
          {
            "name": "calculate_kyle_impact",
            "line": 325,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_almgren_chriss_impact",
            "line": 342,
            "return_type": "(f64, f64)",
            "is_async": false
          },
          {
            "name": "calculate_obizhaev_wang_impact",
            "line": 365,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_sqrt_impact",
            "line": 384,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_log_impact",
            "line": 397,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_power_impact",
            "line": 408,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_consensus_impact",
            "line": 418,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "estimate_pretrade_impact",
            "line": 438,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "estimate_posttrade_impact",
            "line": 452,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_total_cost",
            "line": 463,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ImpactSurface",
        "trait": null,
        "file": "crates/data_ingestion/src/replay/market_impact.rs",
        "line": 509,
        "methods": [
          {
            "name": "generate",
            "line": 509,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "HistoricalDataLoader",
        "trait": null,
        "file": "crates/data_ingestion/src/replay/historical_loader.rs",
        "line": 230,
        "methods": [
          {
            "name": "new",
            "line": 230,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "load_lobster",
            "line": 240,
            "return_type": "Result<Vec<TickData>>",
            "is_async": true
          },
          {
            "name": "load_tardis",
            "line": 373,
            "return_type": "Result<Vec<TickData>>",
            "is_async": true
          },
          {
            "name": "load_custom_csv",
            "line": 452,
            "return_type": "Result<Vec<TickData>>",
            "is_async": true
          },
          {
            "name": "load_custom_parquet",
            "line": 514,
            "return_type": "Result<Vec<TickData>>",
            "is_async": true
          },
          {
            "name": "normalize_data",
            "line": 578,
            "return_type": "Vec<TickData>",
            "is_async": false
          },
          {
            "name": "filter_by_time",
            "line": 584,
            "return_type": "Vec<TickData>",
            "is_async": false
          },
          {
            "name": "resample",
            "line": 596,
            "return_type": "Vec<TickData>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "VecIterator",
        "trait": null,
        "file": "crates/data_ingestion/src/replay/historical_loader.rs",
        "line": 736,
        "methods": [
          {
            "name": "new",
            "line": 736,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "AdaptiveBackpressure",
        "trait": null,
        "file": "crates/data_ingestion/src/consumers/redpanda_consumer.rs",
        "line": 131,
        "methods": [
          {
            "name": "new",
            "line": 131,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "should_pause",
            "line": 154,
            "return_type": "bool",
            "is_async": true
          },
          {
            "name": "should_resume",
            "line": 179,
            "return_type": "bool",
            "is_async": true
          },
          {
            "name": "adjust_concurrency",
            "line": 208,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "calculate_gradient",
            "line": 258,
            "return_type": "f64",
            "is_async": true
          },
          {
            "name": "update_metrics",
            "line": 276,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "update_memory",
            "line": 291,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "update_lag",
            "line": 295,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_concurrency_limit",
            "line": 299,
            "return_type": "usize",
            "is_async": false
          }
        ]
      },
      {
        "struct": "RedpandaConsumer",
        "trait": null,
        "file": "crates/data_ingestion/src/consumers/redpanda_consumer.rs",
        "line": 334,
        "methods": [
          {
            "name": "new",
            "line": 334,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "consume",
            "line": 398,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "process_batch",
            "line": 466,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "deserialize_event",
            "line": 547,
            "return_type": "Result<MarketEvent>",
            "is_async": false
          },
          {
            "name": "calculate_event_age",
            "line": 556,
            "return_type": "Duration",
            "is_async": false
          },
          {
            "name": "maybe_commit_offsets",
            "line": 573,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "get_lag",
            "line": 596,
            "return_type": "Result<i64>",
            "is_async": true
          },
          {
            "name": "shutdown",
            "line": 625,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "commit_all_offsets",
            "line": 639,
            "return_type": "Result<()>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "LoadGenerator",
        "trait": null,
        "file": "crates/data_ingestion/tests/integration_test.rs",
        "line": 142,
        "methods": [
          {
            "name": "new",
            "line": 142,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "generate_event",
            "line": 174,
            "return_type": "MarketEvent",
            "is_async": false
          },
          {
            "name": "run",
            "line": 223,
            "return_type": "Result<()>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "GeometricBrownianMotion",
        "trait": null,
        "file": "crates/data_ingestion/tests/integration_test.rs",
        "line": 273,
        "methods": [
          {
            "name": "new",
            "line": 273,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "OrnsteinUhlenbeck",
        "trait": null,
        "file": "crates/data_ingestion/tests/integration_test.rs",
        "line": 304,
        "methods": [
          {
            "name": "new",
            "line": 304,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "JumpDiffusion",
        "trait": null,
        "file": "crates/data_ingestion/tests/integration_test.rs",
        "line": 337,
        "methods": [
          {
            "name": "new",
            "line": 337,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "TestMetrics",
        "trait": null,
        "file": "crates/data_ingestion/tests/integration_test.rs",
        "line": 389,
        "methods": [
          {
            "name": "new",
            "line": 389,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "record_producer_latency",
            "line": 413,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "record_consumer_latency",
            "line": 419,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "record_end_to_end_latency",
            "line": 425,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_throughput",
            "line": 431,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "print_summary",
            "line": 440,
            "return_type": "()",
            "is_async": true
          }
        ]
      },
      {
        "struct": "DataIntegrityValidator",
        "trait": null,
        "file": "crates/data_ingestion/tests/integration_test.rs",
        "line": 503,
        "methods": [
          {
            "name": "new",
            "line": 503,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "validate_event",
            "line": 509,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "print_report",
            "line": 552,
            "return_type": "()",
            "is_async": true
          }
        ]
      },
      {
        "struct": "ChaosMonkey",
        "trait": null,
        "file": "crates/data_ingestion/tests/integration_test.rs",
        "line": 584,
        "methods": [
          {
            "name": "new",
            "line": 584,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "run_chaos_scenarios",
            "line": 591,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "inject_delay",
            "line": 619,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "should_drop_packet",
            "line": 626,
            "return_type": "bool",
            "is_async": false
          }
        ]
      },
      {
        "struct": "NetworkCondition",
        "trait": null,
        "file": "benches/network_jitter_bench.rs",
        "line": 21,
        "methods": [
          {
            "name": "perfect",
            "line": 21,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "good",
            "line": 29,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "average",
            "line": 39,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "poor",
            "line": 49,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "exchange_outage",
            "line": 59,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "simulate_delay",
            "line": 72,
            "return_type": "Duration",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MonotonicSequencer",
        "trait": null,
        "file": "infrastructure/src/event_ordering.rs",
        "line": 28,
        "methods": [
          {
            "name": "new",
            "line": 28,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "next_sequence",
            "line": 38,
            "return_type": "EventSequence",
            "is_async": false
          },
          {
            "name": "next_partition_sequence",
            "line": 59,
            "return_type": "EventSequence",
            "is_async": false
          },
          {
            "name": "ensure_monotonic_timestamp",
            "line": 75,
            "return_type": "u64",
            "is_async": false
          },
          {
            "name": "get_monotonic_timestamp",
            "line": 90,
            "return_type": "u64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "EventSequence",
        "trait": null,
        "file": "infrastructure/src/event_ordering.rs",
        "line": 115,
        "methods": [
          {
            "name": "to_id",
            "line": 116,
            "return_type": "u128",
            "is_async": false
          }
        ]
      },
      {
        "struct": "EventOrderingBuffer",
        "trait": null,
        "file": "infrastructure/src/event_ordering.rs",
        "line": 142,
        "methods": [
          {
            "name": "new",
            "line": 142,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "add_event",
            "line": 154,
            "return_type": "Vec<(EventSequence, T)>",
            "is_async": false
          },
          {
            "name": "try_deliver_sequential",
            "line": 167,
            "return_type": "Vec<(EventSequence, T)>",
            "is_async": false
          },
          {
            "name": "force_delivery",
            "line": 201,
            "return_type": "Vec<(EventSequence, T)>",
            "is_async": false
          },
          {
            "name": "check_timeouts",
            "line": 220,
            "return_type": "Vec<(EventSequence, T)>",
            "is_async": false
          },
          {
            "name": "metrics",
            "line": 243,
            "return_type": "OrderingMetrics",
            "is_async": false
          }
        ]
      },
      {
        "struct": "VectorClock",
        "trait": null,
        "file": "infrastructure/src/event_ordering.rs",
        "line": 266,
        "methods": [
          {
            "name": "new",
            "line": 266,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "tick",
            "line": 277,
            "return_type": "VectorTimestamp",
            "is_async": false
          },
          {
            "name": "update",
            "line": 288,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "current",
            "line": 302,
            "return_type": "VectorTimestamp",
            "is_async": false
          }
        ]
      },
      {
        "struct": "VectorTimestamp",
        "trait": null,
        "file": "infrastructure/src/event_ordering.rs",
        "line": 315,
        "methods": [
          {
            "name": "happens_before",
            "line": 316,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "concurrent_with",
            "line": 337,
            "return_type": "bool",
            "is_async": false
          }
        ]
      },
      {
        "struct": "LamportClock",
        "trait": null,
        "file": "infrastructure/src/event_ordering.rs",
        "line": 348,
        "methods": [
          {
            "name": "new",
            "line": 348,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "tick",
            "line": 355,
            "return_type": "u64",
            "is_async": false
          },
          {
            "name": "update",
            "line": 360,
            "return_type": "u64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "BackpressureManager",
        "trait": null,
        "file": "infrastructure/src/backpressure.rs",
        "line": 75,
        "methods": [
          {
            "name": "new",
            "line": 75,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "should_accept",
            "line": 97,
            "return_type": "BackpressureResult",
            "is_async": true
          },
          {
            "name": "update_depth",
            "line": 114,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "fill_ratio",
            "line": 119,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "check_drop_newest",
            "line": 122,
            "return_type": "BackpressureResult",
            "is_async": false
          },
          {
            "name": "check_drop_oldest",
            "line": 130,
            "return_type": "BackpressureResult",
            "is_async": false
          },
          {
            "name": "check_block_producer",
            "line": 139,
            "return_type": "BackpressureResult",
            "is_async": true
          },
          {
            "name": "check_reject",
            "line": 159,
            "return_type": "BackpressureResult",
            "is_async": false
          },
          {
            "name": "check_adaptive_rate",
            "line": 168,
            "return_type": "BackpressureResult",
            "is_async": false
          },
          {
            "name": "check_circuit_breaker",
            "line": 192,
            "return_type": "BackpressureResult",
            "is_async": false
          },
          {
            "name": "check_token_bucket",
            "line": 216,
            "return_type": "BackpressureResult",
            "is_async": false
          },
          {
            "name": "try_acquire_token",
            "line": 252,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "metrics",
            "line": 267,
            "return_type": "BackpressureMetrics",
            "is_async": false
          }
        ]
      },
      {
        "struct": "AdaptiveBackpressure",
        "trait": null,
        "file": "infrastructure/src/backpressure.rs",
        "line": 325,
        "methods": [
          {
            "name": "new",
            "line": 325,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "update_global_pressure",
            "line": 340,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_global_action",
            "line": 351,
            "return_type": "GlobalAction",
            "is_async": false
          }
        ]
      },
      {
        "struct": "BoundedIdempotencyManager",
        "trait": null,
        "file": "adapters/outbound/exchanges/bounded_idempotency.rs",
        "line": 52,
        "methods": [
          {
            "name": "new",
            "line": 52,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "check_duplicate",
            "line": 66,
            "return_type": "Option<OrderResponse>",
            "is_async": false
          },
          {
            "name": "store",
            "line": 99,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "evict_lru",
            "line": 129,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "update_lru",
            "line": 142,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "hash_request",
            "line": 148,
            "return_type": "String",
            "is_async": false
          },
          {
            "name": "cleanup_expired",
            "line": 163,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "metrics",
            "line": 181,
            "return_type": "IdempotencyMetrics",
            "is_async": false
          },
          {
            "name": "calculate_hit_rate",
            "line": 188,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "TimeWheel",
        "trait": null,
        "file": "adapters/outbound/exchanges/bounded_idempotency.rs",
        "line": 204,
        "methods": [
          {
            "name": "new",
            "line": 204,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "add",
            "line": 216,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "tick",
            "line": 222,
            "return_type": "Vec<String>",
            "is_async": false
          },
          {
            "name": "calculate_bucket",
            "line": 248,
            "return_type": "usize",
            "is_async": false
          }
        ]
      },
      {
        "struct": "StpManager",
        "trait": null,
        "file": "adapters/outbound/exchanges/bounded_idempotency.rs",
        "line": 291,
        "methods": [
          {
            "name": "new",
            "line": 291,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "check_self_trade",
            "line": 300,
            "return_type": "StpResult",
            "is_async": false
          },
          {
            "name": "would_self_trade",
            "line": 324,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "are_accounts_linked",
            "line": 330,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "get_policy",
            "line": 336,
            "return_type": "StpPolicy",
            "is_async": false
          }
        ]
      },
      {
        "struct": "SymbolActor",
        "trait": null,
        "file": "adapters/outbound/exchanges/symbol_actor.rs",
        "line": 66,
        "methods": [
          {
            "name": "new",
            "line": 67,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "run",
            "line": 82,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "process_place_order",
            "line": 144,
            "return_type": "Result<String>",
            "is_async": true
          },
          {
            "name": "process_cancel_order",
            "line": 160,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "process_modify_order",
            "line": 170,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "process_get_status",
            "line": 185,
            "return_type": "Result<OrderStatus>",
            "is_async": true
          },
          {
            "name": "simulate_order_placement",
            "line": 195,
            "return_type": "Result<String>",
            "is_async": true
          },
          {
            "name": "simulate_order_cancellation",
            "line": 201,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "simulate_order_modification",
            "line": 207,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "simulate_get_status",
            "line": 218,
            "return_type": "Result<OrderStatus>",
            "is_async": true
          },
          {
            "name": "get_stats",
            "line": 223,
            "return_type": "ActorStats",
            "is_async": true
          }
        ]
      },
      {
        "struct": "SymbolActorManager",
        "trait": null,
        "file": "adapters/outbound/exchanges/symbol_actor.rs",
        "line": 238,
        "methods": [
          {
            "name": "new",
            "line": 239,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "get_or_create_actor",
            "line": 249,
            "return_type": "Result<mpsc::Sender<SymbolMessage>>",
            "is_async": true
          },
          {
            "name": "place_order",
            "line": 290,
            "return_type": "Result<String>",
            "is_async": true
          },
          {
            "name": "cancel_order",
            "line": 311,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "modify_order",
            "line": 331,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "get_order_status",
            "line": 355,
            "return_type": "Result<OrderStatus>",
            "is_async": true
          },
          {
            "name": "shutdown",
            "line": 375,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "get_all_stats",
            "line": 404,
            "return_type": "HashMap<Symbol, ActorStats>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "IdempotencyManager",
        "trait": null,
        "file": "adapters/outbound/exchanges/idempotency_manager.rs",
        "line": 37,
        "methods": [
          {
            "name": "new",
            "line": 38,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "default",
            "line": 48,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "get",
            "line": 53,
            "return_type": "Option<String>",
            "is_async": true
          },
          {
            "name": "insert",
            "line": 76,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "validate_retry",
            "line": 107,
            "return_type": "Result<bool>",
            "is_async": true
          },
          {
            "name": "remove",
            "line": 126,
            "return_type": "Option<IdempotencyEntry>",
            "is_async": true
          },
          {
            "name": "maybe_cleanup",
            "line": 131,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "force_cleanup",
            "line": 154,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "cleanup_expired",
            "line": 163,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "stats",
            "line": 181,
            "return_type": "IdempotencyStats",
            "is_async": false
          },
          {
            "name": "clear",
            "line": 202,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "RateLimiter",
        "trait": null,
        "file": "adapters/outbound/exchanges/binance_real.rs",
        "line": 60,
        "methods": [
          {
            "name": "new",
            "line": 60,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "can_request",
            "line": 69,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "can_place_order",
            "line": 96,
            "return_type": "Result<()>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "BinanceRealAdapter",
        "trait": null,
        "file": "adapters/outbound/exchanges/binance_real.rs",
        "line": 201,
        "methods": [
          {
            "name": "new",
            "line": 202,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "load_exchange_info",
            "line": 233,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "sign",
            "line": 257,
            "return_type": "String",
            "is_async": false
          },
          {
            "name": "connect_websocket",
            "line": 266,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "validate_order",
            "line": 322,
            "return_type": "Result<()>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ExchangeSimulator",
        "trait": null,
        "file": "adapters/outbound/exchanges/exchange_simulator.rs",
        "line": 155,
        "methods": [
          {
            "name": "new",
            "line": 156,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "with_config",
            "line": 206,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "with_market_profile",
            "line": 221,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "simulate_latency",
            "line": 231,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "simulate_failure",
            "line": 254,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "check_rate_limit",
            "line": 284,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "simulate_fill",
            "line": 305,
            "return_type": "Result<Vec<(Quantity, Price)>>",
            "is_async": true
          },
          {
            "name": "place_order_idempotent",
            "line": 429,
            "return_type": "Result<String>",
            "is_async": true
          },
          {
            "name": "place_order_internal",
            "line": 466,
            "return_type": "Result<String>",
            "is_async": true
          },
          {
            "name": "generate_order_id",
            "line": 555,
            "return_type": "String",
            "is_async": false
          },
          {
            "name": "validate_order",
            "line": 560,
            "return_type": "Result<()>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ExchangeFactory",
        "trait": null,
        "file": "adapters/outbound/exchanges/mod.rs",
        "line": 23,
        "methods": [
          {
            "name": "create",
            "line": 24,
            "return_type": "Result<Arc<dyn ExchangeAdapter>>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "BinanceAdapter",
        "trait": null,
        "file": "adapters/outbound/exchanges/exchange_adapter_trait.rs",
        "line": 129,
        "methods": [
          {
            "name": "new",
            "line": 129,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "KrakenAdapter",
        "trait": null,
        "file": "adapters/outbound/exchanges/exchange_adapter_trait.rs",
        "line": 358,
        "methods": [
          {
            "name": "new",
            "line": 358,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ExchangeAdapterFactory",
        "trait": null,
        "file": "adapters/outbound/exchanges/exchange_adapter_trait.rs",
        "line": 389,
        "methods": [
          {
            "name": "create",
            "line": 390,
            "return_type": "Result<Box<dyn ExchangeAdapter>>",
            "is_async": false
          },
          {
            "name": "supported_exchanges",
            "line": 400,
            "return_type": "Vec<&'static str>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "PostgresOrderRepository",
        "trait": null,
        "file": "adapters/outbound/persistence/postgres_order_repository.rs",
        "line": 25,
        "methods": [
          {
            "name": "new",
            "line": 25,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "to_dto",
            "line": 33,
            "return_type": "OrderDto",
            "is_async": false
          },
          {
            "name": "from_dto",
            "line": 53,
            "return_type": "Result<Order>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "TransactionManager",
        "trait": null,
        "file": "adapters/outbound/persistence/transaction_manager.rs",
        "line": 84,
        "methods": [
          {
            "name": "new",
            "line": 84,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "execute",
            "line": 97,
            "return_type": "Result<R>\n    where\n        F: Fn(Transaction<'_, Postgres>) -> futures::future::BoxFuture<'_, Result<R>> + Send + Sync,\n        R: Send,",
            "is_async": true
          },
          {
            "name": "try_execute",
            "line": 136,
            "return_type": "Result<R>\n    where\n        F: Fn(Transaction<'_, Postgres>) -> futures::future::BoxFuture<'_, Result<R>> + Send + Sync,\n        R: Send,",
            "is_async": true
          },
          {
            "name": "execute_batch",
            "line": 197,
            "return_type": "Result<Vec<()>>\n    where\n        F: Fn(Transaction<'_, Postgres>) -> futures::future::BoxFuture<'_, Result<()>> + Send + Sync,",
            "is_async": true
          },
          {
            "name": "with_savepoint",
            "line": 216,
            "return_type": "Result<R>\n    where\n        F: FnOnce(&mut Transaction<'_, Postgres>) -> futures::future::BoxFuture<'_, Result<R>>,\n        R: Send,",
            "is_async": true
          },
          {
            "name": "is_retryable_error",
            "line": 248,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "update_metrics",
            "line": 261,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "record_success",
            "line": 278,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "record_failure",
            "line": 282,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "get_metrics",
            "line": 298,
            "return_type": "TransactionMetrics",
            "is_async": true
          }
        ]
      },
      {
        "struct": "DeadlockDetector",
        "trait": null,
        "file": "adapters/outbound/persistence/transaction_manager.rs",
        "line": 304,
        "methods": [
          {
            "name": "new",
            "line": 304,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "register_transaction",
            "line": 311,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "unregister_transaction",
            "line": 320,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "detect_deadlock",
            "line": 331,
            "return_type": "Option<Vec<String>>",
            "is_async": true
          },
          {
            "name": "has_cycle",
            "line": 345,
            "return_type": "bool",
            "is_async": false
          }
        ]
      },
      {
        "struct": "DistributedTransactionCoordinator",
        "trait": null,
        "file": "adapters/outbound/persistence/transaction_manager.rs",
        "line": 389,
        "methods": [
          {
            "name": "new",
            "line": 389,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "execute",
            "line": 397,
            "return_type": "Result<()>\n    where\n        F: Future<Output = Result<()>>,",
            "is_async": true
          }
        ]
      },
      {
        "struct": "DatabaseConfig",
        "trait": null,
        "file": "adapters/outbound/persistence/postgres_connection.rs",
        "line": 44,
        "methods": [
          {
            "name": "build_options",
            "line": 45,
            "return_type": "PgConnectOptions",
            "is_async": false
          },
          {
            "name": "from_env",
            "line": 55,
            "return_type": "Result<Self>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "DatabaseConnectionPool",
        "trait": null,
        "file": "adapters/outbound/persistence/postgres_connection.rs",
        "line": 87,
        "methods": [
          {
            "name": "new",
            "line": 88,
            "return_type": "Result<Self>",
            "is_async": true
          },
          {
            "name": "pool",
            "line": 111,
            "return_type": "Arc<PgPool>",
            "is_async": false
          },
          {
            "name": "test_connection",
            "line": 116,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "run_migrations",
            "line": 126,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "stats",
            "line": 138,
            "return_type": "PoolStats",
            "is_async": false
          },
          {
            "name": "shutdown",
            "line": 147,
            "return_type": "()",
            "is_async": true
          }
        ]
      },
      {
        "struct": "DatabaseHealthCheck",
        "trait": null,
        "file": "adapters/outbound/persistence/postgres_connection.rs",
        "line": 167,
        "methods": [
          {
            "name": "new",
            "line": 167,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "is_healthy",
            "line": 172,
            "return_type": "bool",
            "is_async": true
          },
          {
            "name": "health_status",
            "line": 186,
            "return_type": "HealthStatus",
            "is_async": true
          }
        ]
      },
      {
        "struct": "PostgresUnitOfWork",
        "trait": null,
        "file": "adapters/outbound/persistence/postgres_connection.rs",
        "line": 228,
        "methods": [
          {
            "name": "new",
            "line": 228,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "begin",
            "line": 236,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "commit",
            "line": 259,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "rollback",
            "line": 272,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "transaction",
            "line": 285,
            "return_type": "Result<&mut sqlx::Transaction<'static, sqlx::Postgres>>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "RepositoryFactory",
        "trait": null,
        "file": "adapters/outbound/persistence/postgres_connection.rs",
        "line": 297,
        "methods": [
          {
            "name": "new",
            "line": 297,
            "return_type": "Self",
            "is_async": false
          },
          {
            "name": "create_order_repository",
            "line": 302,
            "return_type": "crate::postgres_order_repository::PostgresOrderRepository",
            "is_async": false
          }
        ]
      },
      {
        "struct": "IntoResponse",
        "trait": null,
        "file": "adapters/inbound/rest/api_server.rs",
        "line": 181,
        "methods": []
      },
      {
        "struct": "IntoResponse",
        "trait": null,
        "file": "adapters/inbound/rest/api_server.rs",
        "line": 189,
        "methods": []
      },
      {
        "struct": "PlaceOrderRequest",
        "trait": null,
        "file": "adapters/inbound/rest/api_server.rs",
        "line": 300,
        "methods": [
          {
            "name": "validate",
            "line": 300,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "to_domain_order",
            "line": 311,
            "return_type": "Result<Order>",
            "is_async": false
          }
        ]
      }
    ],
    "enums": [
      {
        "name": "STPPolicy",
        "file": "domain/services/stp_policy.rs",
        "line": 21,
        "variants": [
          "Cancel",
          "the",
          "incoming",
          "new",
          "order",
          "most",
          "conservative",
          "Quinn",
          "Safest",
          "option",
          "preserves",
          "existing",
          "orders",
          "CancelNew",
          "Cancel",
          "the",
          "resting",
          "order",
          "that",
          "would",
          "match",
          "Casey",
          "Useful",
          "when",
          "new",
          "order",
          "has",
          "updated",
          "pricing",
          "CancelResting",
          "Cancel",
          "both",
          "the",
          "new",
          "and",
          "resting",
          "orders",
          "Sam",
          "Nuclear",
          "option",
          "use",
          "carefully",
          "CancelBoth",
          "Decrement",
          "and",
          "cancel",
          "reduce",
          "quantities",
          "Morgan",
          "Smart",
          "option",
          "for",
          "partial",
          "prevention",
          "DecrementBoth",
          "Minimum",
          "quantity",
          "to",
          "keep",
          "min_qty",
          "f64"
        ],
        "visibility": "pub"
      },
      {
        "name": "STPAction",
        "file": "domain/services/stp_policy.rs",
        "line": 319,
        "variants": [
          "Allow",
          "order",
          "to",
          "proceed",
          "Allow",
          "Cancel",
          "the",
          "new",
          "incoming",
          "order",
          "CancelNew",
          "reason",
          "String"
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderEvent",
        "file": "domain/events/order_event.rs",
        "line": 13,
        "variants": [
          "Order",
          "has",
          "been",
          "submitted",
          "for",
          "execution",
          "Submitted",
          "order_id",
          "OrderId",
          "symbol",
          "Symbol",
          "side",
          "OrderSide",
          "quantity",
          "Quantity",
          "price",
          "Option",
          "Price",
          "timestamp",
          "DateTime",
          "Utc"
        ],
        "visibility": "pub"
      },
      {
        "name": "VenueError",
        "file": "domain/errors/error_taxonomy.rs",
        "line": 14,
        "variants": [
          "Network",
          "and",
          "connectivity",
          "errors",
          "Network",
          "Authentication",
          "and",
          "authorization",
          "errors",
          "Auth",
          "Order",
          "related",
          "errors",
          "Order",
          "Market",
          "data",
          "errors",
          "MarketData",
          "Rate",
          "limiting",
          "errors",
          "RateLimit",
          "Account",
          "and",
          "balance",
          "errors",
          "Account",
          "System",
          "and",
          "maintenance",
          "errors",
          "System",
          "Compliance",
          "and",
          "regulatory",
          "errors",
          "Compliance"
        ],
        "visibility": "pub"
      },
      {
        "name": "NetworkError",
        "file": "domain/errors/error_taxonomy.rs",
        "line": 42,
        "variants": [
          "Connection",
          "timeout",
          "ConnectionTimeout",
          "endpoint",
          "String",
          "timeout",
          "Duration"
        ],
        "visibility": "pub"
      },
      {
        "name": "AuthError",
        "file": "domain/errors/error_taxonomy.rs",
        "line": 79,
        "variants": [
          "Invalid",
          "API",
          "key",
          "InvalidApiKey",
          "Invalid",
          "signature",
          "InvalidSignature",
          "expected_algorithm",
          "String"
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderError",
        "file": "domain/errors/error_taxonomy.rs",
        "line": 113,
        "variants": [
          "Order",
          "not",
          "found",
          "OrderNotFound",
          "order_id",
          "String"
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketDataError",
        "file": "domain/errors/error_taxonomy.rs",
        "line": 202,
        "variants": [
          "Symbol",
          "not",
          "found",
          "SymbolNotFound",
          "symbol",
          "String"
        ],
        "visibility": "pub"
      },
      {
        "name": "RateLimitError",
        "file": "domain/errors/error_taxonomy.rs",
        "line": 241,
        "variants": [
          "Request",
          "rate",
          "exceeded",
          "RequestRateExceeded",
          "limit",
          "usize",
          "window",
          "Duration",
          "retry_after",
          "Duration"
        ],
        "visibility": "pub"
      },
      {
        "name": "AccountError",
        "file": "domain/errors/error_taxonomy.rs",
        "line": 272,
        "variants": [
          "Insufficient",
          "balance",
          "InsufficientBalance",
          "required",
          "String",
          "available",
          "String",
          "currency",
          "String"
        ],
        "visibility": "pub"
      },
      {
        "name": "SystemError",
        "file": "domain/errors/error_taxonomy.rs",
        "line": 318,
        "variants": [
          "Exchange",
          "under",
          "maintenance",
          "Maintenance",
          "expected_duration",
          "Option",
          "Duration",
          "message",
          "String"
        ],
        "visibility": "pub"
      },
      {
        "name": "ComplianceError",
        "file": "domain/errors/error_taxonomy.rs",
        "line": 356,
        "variants": [
          "KYC",
          "required",
          "KycRequired",
          "level",
          "String",
          "documents_needed",
          "Vec",
          "String"
        ],
        "visibility": "pub"
      },
      {
        "name": "RecoveryStrategy",
        "file": "domain/errors/error_taxonomy.rs",
        "line": 390,
        "variants": [
          "Retry",
          "immediately",
          "RetryImmediately",
          "Retry",
          "with",
          "backoff",
          "RetryWithBackoff",
          "initial_delay",
          "Duration",
          "max_delay",
          "Duration",
          "max_attempts",
          "usize"
        ],
        "visibility": "pub"
      },
      {
        "name": "Severity",
        "file": "domain/errors/error_taxonomy.rs",
        "line": 423,
        "variants": [
          "Low",
          "Medium",
          "High",
          "Critical"
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderType",
        "file": "domain/entities/order.rs",
        "line": 39,
        "variants": [
          "Market",
          "Limit",
          "StopMarket",
          "StopLimit",
          "OCO",
          "One",
          "Cancels",
          "Other",
          "ReduceOnly",
          "Can",
          "only",
          "reduce",
          "position",
          "PostOnly",
          "Maker",
          "only"
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderSide",
        "file": "domain/entities/order.rs",
        "line": 51,
        "variants": [
          "Buy",
          "Sell"
        ],
        "visibility": "pub"
      },
      {
        "name": "TimeInForce",
        "file": "domain/entities/order.rs",
        "line": 58,
        "variants": [
          "GTC",
          "Good",
          "Till",
          "Canceled",
          "IOC",
          "Immediate",
          "or",
          "Cancel",
          "FOK",
          "Fill",
          "or",
          "Kill",
          "GTX",
          "Good",
          "Till",
          "Crossing"
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderStatus",
        "file": "domain/entities/order.rs",
        "line": 67,
        "variants": [
          "Draft",
          "Not",
          "yet",
          "submitted",
          "Pending",
          "Submitted",
          "awaiting",
          "confirmation",
          "Open",
          "Active",
          "on",
          "exchange",
          "PartiallyFilled",
          "Partially",
          "executed",
          "Filled",
          "Fully",
          "executed",
          "Cancelled",
          "Cancelled",
          "by",
          "user",
          "Rejected",
          "Rejected",
          "by",
          "exchange",
          "Expired",
          "Time",
          "limit",
          "expired"
        ],
        "visibility": "pub"
      },
      {
        "name": "OcoPriority",
        "file": "domain/entities/oco_order.rs",
        "line": 14,
        "variants": [
          "Limit",
          "order",
          "takes",
          "precedence",
          "LimitFirst",
          "Stop",
          "order",
          "takes",
          "precedence",
          "StopFirst",
          "First",
          "triggered",
          "based",
          "on",
          "timestamp",
          "wins",
          "Timestamp"
        ],
        "visibility": "pub"
      },
      {
        "name": "OcoState",
        "file": "domain/entities/oco_order.rs",
        "line": 52,
        "variants": [
          "Both",
          "legs",
          "are",
          "pending",
          "Pending",
          "Limit",
          "leg",
          "is",
          "active",
          "stop",
          "is",
          "waiting",
          "LimitActive",
          "Stop",
          "leg",
          "is",
          "active",
          "limit",
          "is",
          "waiting",
          "StopActive",
          "One",
          "leg",
          "triggered",
          "other",
          "cancelled",
          "Triggered",
          "winning_leg",
          "OcoLeg"
        ],
        "visibility": "pub"
      },
      {
        "name": "OcoLeg",
        "file": "domain/entities/oco_order.rs",
        "line": 69,
        "variants": [
          "Limit",
          "Stop"
        ],
        "visibility": "pub"
      },
      {
        "name": "ExchangeErrorCode",
        "file": "domain/value_objects/validation_filters.rs",
        "line": 355,
        "variants": [
          "FilterFailure",
          "code",
          "i32"
        ],
        "visibility": "pub"
      },
      {
        "name": "Currency",
        "file": "domain/value_objects/decimal_money.rs",
        "line": 22,
        "variants": [
          "USD",
          "BTC",
          "ETH",
          "USDT",
          "USDC"
        ],
        "visibility": "pub"
      },
      {
        "name": "MoneyError",
        "file": "domain/value_objects/decimal_money.rs",
        "line": 339,
        "variants": [
          "CurrencyMismatch",
          "InsufficientBalance",
          "ParseError",
          "InvalidAmount"
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketImpactModel",
        "file": "domain/value_objects/market_impact.rs",
        "line": 11,
        "variants": [
          "Linear",
          "impact",
          "impact",
          "coefficient",
          "volume",
          "Simple",
          "but",
          "underestimates",
          "large",
          "orders",
          "by",
          "20",
          "30",
          "Linear",
          "coefficient",
          "f64"
        ],
        "visibility": "pub"
      },
      {
        "name": "MacroRegime",
        "file": "crates/data_intelligence/src/macro_economy_enhanced.rs",
        "line": 186,
        "variants": [
          "RiskOn",
          "Low",
          "vol",
          "positive",
          "growth",
          "easy",
          "money",
          "RiskOff",
          "Flight",
          "to",
          "safety",
          "high",
          "vol",
          "Goldilocks",
          "Perfect",
          "growth",
          "inflation",
          "balance",
          "Stagflation",
          "High",
          "inflation",
          "low",
          "growth",
          "Deflation",
          "Falling",
          "prices",
          "recession",
          "risk",
          "PolicyTightening",
          "Central",
          "banks",
          "hawkish",
          "PolicyEasing",
          "Central",
          "banks",
          "dovish"
        ],
        "visibility": "pub"
      },
      {
        "name": "TradingDirection",
        "file": "crates/data_intelligence/src/macro_economy_enhanced.rs",
        "line": 969,
        "variants": [
          "Long",
          "Short",
          "Neutral"
        ],
        "visibility": "pub"
      },
      {
        "name": "OptionsFlowError",
        "file": "crates/data_intelligence/src/options_flow.rs",
        "line": 21,
        "variants": [
          "error",
          "API",
          "error",
          "0"
        ],
        "visibility": "pub"
      },
      {
        "name": "OptionType",
        "file": "crates/data_intelligence/src/options_flow.rs",
        "line": 92,
        "variants": [
          "Call",
          "Put"
        ],
        "visibility": "pub"
      },
      {
        "name": "OptionsExchange",
        "file": "crates/data_intelligence/src/options_flow.rs",
        "line": 98,
        "variants": [
          "Deribit",
          "CME",
          "Binance",
          "OKX",
          "Bybit"
        ],
        "visibility": "pub"
      },
      {
        "name": "TradeType",
        "file": "crates/data_intelligence/src/options_flow.rs",
        "line": 120,
        "variants": [
          "Buy",
          "Sell",
          "Spread",
          "Roll"
        ],
        "visibility": "pub"
      },
      {
        "name": "Side",
        "file": "crates/data_intelligence/src/options_flow.rs",
        "line": 128,
        "variants": [
          "Bid",
          "Ask"
        ],
        "visibility": "pub"
      },
      {
        "name": "FlowSentiment",
        "file": "crates/data_intelligence/src/options_flow.rs",
        "line": 134,
        "variants": [
          "Bullish",
          "Bearish",
          "Neutral",
          "Mixed"
        ],
        "visibility": "pub"
      },
      {
        "name": "OptionsEvent",
        "file": "crates/data_intelligence/src/options_flow.rs",
        "line": 500,
        "variants": [
          "UnusualActivity",
          "LargeBlockTrade",
          "GexUpdate",
          "VolSurfaceUpdate",
          "MaxPainShift",
          "old",
          "Decimal",
          "new",
          "Decimal"
        ],
        "visibility": "pub"
      },
      {
        "name": "WebSocketError",
        "file": "crates/data_intelligence/src/websocket_aggregator.rs",
        "line": 19,
        "variants": [
          "error",
          "Connection",
          "failed",
          "0"
        ],
        "visibility": "pub"
      },
      {
        "name": "EventType",
        "file": "crates/data_intelligence/src/websocket_aggregator.rs",
        "line": 78,
        "variants": [
          "Trade",
          "OrderBook",
          "Ticker",
          "Liquidation",
          "FundingRate"
        ],
        "visibility": "pub"
      },
      {
        "name": "MacroError",
        "file": "crates/data_intelligence/src/macro_correlator.rs",
        "line": 14,
        "variants": [
          "error",
          "Data",
          "fetch",
          "error",
          "0"
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketState",
        "file": "crates/data_intelligence/src/xai_enhanced_prompts.rs",
        "line": 482,
        "variants": [
          "HighVolatility",
          "LowLiquidity",
          "TrendingStrong",
          "RangeBound",
          "RegimeChange",
          "HighOptionsVolume",
          "Normal"
        ],
        "visibility": "pub"
      },
      {
        "name": "ReasoningEffort",
        "file": "crates/data_intelligence/src/xai_enhanced_prompts.rs",
        "line": 523,
        "variants": [
          "Low",
          "Minimal",
          "thinking",
          "for",
          "speed",
          "High",
          "Maximum",
          "thinking",
          "for",
          "complex",
          "problems"
        ],
        "visibility": "pub"
      },
      {
        "name": "ResponseFormat",
        "file": "crates/data_intelligence/src/xai_enhanced_prompts.rs",
        "line": 529,
        "variants": [
          "Text",
          "Json"
        ],
        "visibility": "pub"
      },
      {
        "name": "NewsError",
        "file": "crates/data_intelligence/src/news_sentiment.rs",
        "line": 15,
        "variants": [
          "error",
          "API",
          "error",
          "0"
        ],
        "visibility": "pub"
      },
      {
        "name": "DexAnalyticsError",
        "file": "crates/data_intelligence/src/dex_analytics.rs",
        "line": 20,
        "variants": [
          "error",
          "GraphQL",
          "query",
          "failed",
          "0"
        ],
        "visibility": "pub"
      },
      {
        "name": "DexProtocol",
        "file": "crates/data_intelligence/src/dex_analytics.rs",
        "line": 64,
        "variants": [
          "UniswapV2",
          "UniswapV3",
          "SushiSwap",
          "Curve",
          "Balancer",
          "PancakeSwap",
          "QuickSwap",
          "TraderJoe",
          "SpookySwap",
          "SpiritSwap"
        ],
        "visibility": "pub"
      },
      {
        "name": "LiquidityEventType",
        "file": "crates/data_intelligence/src/dex_analytics.rs",
        "line": 165,
        "variants": [
          "Add",
          "Remove"
        ],
        "visibility": "pub"
      },
      {
        "name": "MevType",
        "file": "crates/data_intelligence/src/dex_analytics.rs",
        "line": 183,
        "variants": [
          "Sandwich",
          "Arbitrage",
          "Liquidation",
          "JustInTime"
        ],
        "visibility": "pub"
      },
      {
        "name": "DexEvent",
        "file": "crates/data_intelligence/src/dex_analytics.rs",
        "line": 340,
        "variants": [
          "NewSwap",
          "LiquidityChange",
          "ArbitrageDetected",
          "MevDetected",
          "PoolUpdate"
        ],
        "visibility": "pub"
      },
      {
        "name": "StablecoinError",
        "file": "crates/data_intelligence/src/stablecoin_tracker.rs",
        "line": 20,
        "variants": [
          "error",
          "API",
          "error",
          "0"
        ],
        "visibility": "pub"
      },
      {
        "name": "Stablecoin",
        "file": "crates/data_intelligence/src/stablecoin_tracker.rs",
        "line": 72,
        "variants": [
          "USDT",
          "USDC",
          "BUSD",
          "DAI",
          "FRAX",
          "TUSD",
          "USDD",
          "GUSD",
          "USDP"
        ],
        "visibility": "pub"
      },
      {
        "name": "MintBurnType",
        "file": "crates/data_intelligence/src/stablecoin_tracker.rs",
        "line": 139,
        "variants": [
          "Mint",
          "Burn",
          "ChainTransfer",
          "Between",
          "chains"
        ],
        "visibility": "pub"
      },
      {
        "name": "DemandSignal",
        "file": "crates/data_intelligence/src/stablecoin_tracker.rs",
        "line": 154,
        "variants": [
          "StrongBuy",
          "Large",
          "mints",
          "Buy",
          "Moderate",
          "mints",
          "Neutral",
          "Balanced",
          "Sell",
          "Moderate",
          "burns",
          "StrongSell",
          "Large",
          "burns"
        ],
        "visibility": "pub"
      },
      {
        "name": "PricePressure",
        "file": "crates/data_intelligence/src/stablecoin_tracker.rs",
        "line": 163,
        "variants": [
          "Bullish",
          "Mints",
          "exceed",
          "burns",
          "Neutral",
          "Balanced",
          "Bearish",
          "Burns",
          "exceed",
          "mints"
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketCondition",
        "file": "crates/data_intelligence/src/stablecoin_tracker.rs",
        "line": 363,
        "variants": [
          "Expansion",
          "Growing",
          "demand",
          "Normal",
          "Balanced",
          "Contraction",
          "Shrinking",
          "demand",
          "Stagnant",
          "Low",
          "activity"
        ],
        "visibility": "pub"
      },
      {
        "name": "DemandTrend",
        "file": "crates/data_intelligence/src/stablecoin_tracker.rs",
        "line": 549,
        "variants": [
          "StronglyIncreasing",
          "Increasing",
          "Stable",
          "Decreasing",
          "StronglyDecreasing",
          "Insufficient"
        ],
        "visibility": "pub"
      },
      {
        "name": "SeasonalityPattern",
        "file": "crates/data_intelligence/src/stablecoin_tracker.rs",
        "line": 559,
        "variants": [
          "Daily",
          "Weekly",
          "Monthly",
          "None"
        ],
        "visibility": "pub"
      },
      {
        "name": "StablecoinEvent",
        "file": "crates/data_intelligence/src/stablecoin_tracker.rs",
        "line": 606,
        "variants": [
          "LargeMint",
          "LargeBurn",
          "LiquidityCrisis",
          "stablecoin",
          "Stablecoin",
          "probability",
          "f64"
        ],
        "visibility": "pub"
      },
      {
        "name": "OnChainError",
        "file": "crates/data_intelligence/src/onchain_analytics.rs",
        "line": 15,
        "variants": [
          "error",
          "Node",
          "connection",
          "error",
          "0"
        ],
        "visibility": "pub"
      },
      {
        "name": "DataError",
        "file": "crates/data_intelligence/src/lib.rs",
        "line": 30,
        "variants": [
          "error",
          "Data",
          "source",
          "unavailable",
          "0"
        ],
        "visibility": "pub"
      },
      {
        "name": "TradeSide",
        "file": "crates/data_intelligence/src/lib.rs",
        "line": 308,
        "variants": [
          "Buy",
          "Sell"
        ],
        "visibility": "pub"
      },
      {
        "name": "EventType",
        "file": "crates/data_intelligence/src/lib.rs",
        "line": 425,
        "variants": [
          "Regulatory",
          "Hack",
          "Partnership",
          "ProductLaunch",
          "MarketManipulation",
          "MacroEvent"
        ],
        "visibility": "pub"
      },
      {
        "name": "QuantizationError",
        "file": "crates/data_intelligence/src/data_quantizer.rs",
        "line": 11,
        "variants": [
          "error",
          "Invalid",
          "quantization",
          "level",
          "0"
        ],
        "visibility": "pub"
      },
      {
        "name": "QuantizationMethod",
        "file": "crates/data_intelligence/src/data_quantizer.rs",
        "line": 29,
        "variants": [
          "Uniform",
          "Quantile",
          "KMeans",
          "Adaptive"
        ],
        "visibility": "pub"
      },
      {
        "name": "CompressionType",
        "file": "crates/data_intelligence/src/cache_layer.rs",
        "line": 104,
        "variants": [
          "None",
          "Lz4",
          "Zstd"
        ],
        "visibility": "private"
      },
      {
        "name": "DataType",
        "file": "crates/data_intelligence/src/cache_layer.rs",
        "line": 111,
        "variants": [
          "MarketData",
          "OrderBook",
          "Sentiment",
          "News",
          "MacroData",
          "OnChainData",
          "Technical"
        ],
        "visibility": "private"
      },
      {
        "name": "WhaleAlertError",
        "file": "crates/data_intelligence/src/whale_alert.rs",
        "line": 20,
        "variants": [
          "error",
          "API",
          "rate",
          "limit",
          "exceeded",
          "0"
        ],
        "visibility": "pub"
      },
      {
        "name": "OwnerType",
        "file": "crates/data_intelligence/src/whale_alert.rs",
        "line": 88,
        "variants": [
          "Exchange",
          "Unknown",
          "DeFi",
          "Miner",
          "OTC",
          "ColdWallet",
          "HotWallet"
        ],
        "visibility": "pub"
      },
      {
        "name": "TransactionType",
        "file": "crates/data_intelligence/src/whale_alert.rs",
        "line": 99,
        "variants": [
          "Transfer",
          "Mint",
          "Burn",
          "ExchangeInflow",
          "ExchangeOutflow",
          "Unknown"
        ],
        "visibility": "pub"
      },
      {
        "name": "WhalePatternType",
        "file": "crates/data_intelligence/src/whale_alert.rs",
        "line": 119,
        "variants": [
          "Accumulation",
          "Whale",
          "is",
          "accumulating",
          "Distribution",
          "Whale",
          "is",
          "distributing",
          "Rotation",
          "Moving",
          "between",
          "assets",
          "Liquidation",
          "Forced",
          "selling",
          "MarketMaking",
          "Providing",
          "liquidity",
          "Arbitrage",
          "Cross",
          "exchange",
          "movements",
          "CascadeTrigger",
          "Potential",
          "liquidation",
          "cascade"
        ],
        "visibility": "pub"
      },
      {
        "name": "WhaleEvent",
        "file": "crates/data_intelligence/src/whale_alert.rs",
        "line": 411,
        "variants": [
          "NewTransaction",
          "BehaviorDetected",
          "CascadeWarning",
          "probability",
          "f64",
          "affected_assets",
          "Vec",
          "String"
        ],
        "visibility": "pub"
      },
      {
        "name": "ValidationError",
        "file": "crates/data_intelligence/src/historical_validator.rs",
        "line": 12,
        "variants": [
          "error",
          "Data",
          "anomaly",
          "detected",
          "0"
        ],
        "visibility": "pub"
      },
      {
        "name": "ParseError",
        "file": "crates/websocket/src/zero_copy.rs",
        "line": 11,
        "variants": [
          "error",
          "InvalidUtf8",
          "error",
          "JSON",
          "parsing",
          "failed",
          "0"
        ],
        "visibility": "pub"
      },
      {
        "name": "OpCode",
        "file": "crates/websocket/src/zero_copy.rs",
        "line": 33,
        "variants": [
          "Continuation",
          "0x0",
          "Text",
          "0x1",
          "Binary",
          "0x2",
          "Close",
          "0x8",
          "Ping",
          "0x9",
          "Pong",
          "0xA"
        ],
        "visibility": "pub"
      },
      {
        "name": "WebSocketError",
        "file": "crates/websocket/src/client.rs",
        "line": 29,
        "variants": [
          "error",
          "Connection",
          "failed",
          "0"
        ],
        "visibility": "pub"
      },
      {
        "name": "LoadBalancingStrategy",
        "file": "crates/websocket/src/manager.rs",
        "line": 267,
        "variants": [
          "RoundRobin",
          "LeastConnections",
          "Random"
        ],
        "visibility": "pub"
      },
      {
        "name": "ReliableWebSocketError",
        "file": "crates/websocket/src/reliable_client.rs",
        "line": 33,
        "variants": [
          "error",
          "Connection",
          "failed",
          "after",
          "attempts"
        ],
        "visibility": "pub"
      },
      {
        "name": "ConnectionState",
        "file": "crates/websocket/src/reliable_client.rs",
        "line": 150,
        "variants": [
          "Disconnected",
          "Connecting",
          "Connected",
          "Reconnecting",
          "attempt",
          "u32",
          "next_retry",
          "DateTime",
          "Utc"
        ],
        "visibility": "pub"
      },
      {
        "name": "Message",
        "file": "crates/websocket/src/message.rs",
        "line": 11,
        "variants": [
          "Subscribe",
          "Unsubscribe",
          "MarketData",
          "OrderUpdate",
          "AccountUpdate",
          "Error",
          "Ping",
          "Pong"
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketDataType",
        "file": "crates/websocket/src/message.rs",
        "line": 44,
        "variants": [
          "Trade",
          "OrderBook",
          "Ticker",
          "Candle"
        ],
        "visibility": "pub"
      },
      {
        "name": "TradeSide",
        "file": "crates/websocket/src/message.rs",
        "line": 62,
        "variants": [
          "Buy",
          "Sell"
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderStatus",
        "file": "crates/websocket/src/message.rs",
        "line": 121,
        "variants": [
          "New",
          "PartiallyFilled",
          "Filled",
          "Cancelled",
          "Rejected",
          "Expired"
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderSide",
        "file": "crates/websocket/src/message.rs",
        "line": 132,
        "variants": [
          "Buy",
          "Sell"
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderType",
        "file": "crates/websocket/src/message.rs",
        "line": 139,
        "variants": [
          "Market",
          "Limit",
          "StopLoss",
          "TakeProfit"
        ],
        "visibility": "pub"
      },
      {
        "name": "AccountEventType",
        "file": "crates/websocket/src/message.rs",
        "line": 155,
        "variants": [
          "BalanceUpdate",
          "PositionUpdate",
          "MarginCall"
        ],
        "visibility": "pub"
      },
      {
        "name": "MessageType",
        "file": "crates/websocket/src/message.rs",
        "line": 191,
        "variants": [
          "Subscribe",
          "Unsubscribe",
          "MarketData",
          "OrderUpdate",
          "AccountUpdate",
          "Error",
          "Ping",
          "Pong"
        ],
        "visibility": "pub"
      },
      {
        "name": "RateLimitError",
        "file": "crates/exchanges/src/rate_limiter.rs",
        "line": 13,
        "variants": [
          "error",
          "Rate",
          "limit",
          "exceeded",
          "current"
        ],
        "visibility": "pub"
      },
      {
        "name": "HealthStatus",
        "file": "crates/risk/src/master_orchestration_system.rs",
        "line": 221,
        "variants": [
          "Healthy",
          "Degraded",
          "Critical",
          "Failed"
        ],
        "visibility": "private"
      },
      {
        "name": "AlertSeverity",
        "file": "crates/risk/src/master_orchestration_system.rs",
        "line": 237,
        "variants": [
          "Info",
          "Warning",
          "Error",
          "Critical"
        ],
        "visibility": "private"
      },
      {
        "name": "ObjectiveFunction",
        "file": "crates/risk/src/xgboost_model.rs",
        "line": 39,
        "variants": [
          "Regression",
          "Squared",
          "loss",
          "Binary",
          "Logistic",
          "loss",
          "MultiClass",
          "Softmax",
          "for",
          "n",
          "classes",
          "Huber",
          "Robust",
          "loss",
          "with",
          "delta",
          "parameter"
        ],
        "visibility": "pub"
      },
      {
        "name": "TreeNode",
        "file": "crates/risk/src/xgboost_model.rs",
        "line": 56,
        "variants": [
          "Leaf",
          "value",
          "f64",
          "n_samples",
          "usize"
        ],
        "visibility": "pub"
      },
      {
        "name": "NormalizationType",
        "file": "crates/risk/src/ml_feedback.rs",
        "line": 504,
        "variants": [
          "StandardScaler",
          "x",
          "mean",
          "std",
          "MinMaxScaler",
          "x",
          "min",
          "max",
          "min",
          "RobustScaler",
          "Using",
          "median",
          "and",
          "IQR"
        ],
        "visibility": "private"
      },
      {
        "name": "OptimizationTrigger",
        "file": "crates/risk/src/hyperparameter_integration.rs",
        "line": 98,
        "variants": [
          "Scheduled",
          "RegimeChange",
          "PerformanceDegradation",
          "ManualTrigger"
        ],
        "visibility": "private"
      },
      {
        "name": "ManipulationType",
        "file": "crates/risk/src/manipulation_detection.rs",
        "line": 19,
        "variants": [
          "Spoofing",
          "Large",
          "orders",
          "away",
          "from",
          "mid",
          "quickly",
          "cancelled",
          "Layering",
          "Multiple",
          "orders",
          "to",
          "create",
          "false",
          "depth",
          "WashTrading",
          "Self",
          "dealing",
          "to",
          "create",
          "false",
          "volume",
          "Ramping",
          "Aggressive",
          "buying",
          "to",
          "push",
          "price",
          "up",
          "BearRaid",
          "Coordinated",
          "selling",
          "to",
          "crash",
          "price",
          "QuoteStuffing",
          "Flood",
          "of",
          "orders",
          "to",
          "slow",
          "system",
          "MomentumIgnition",
          "Trigger",
          "algorithmic",
          "buying",
          "selling",
          "Painting",
          "End",
          "of",
          "day",
          "price",
          "manipulation",
          "FrontRunning",
          "Trading",
          "ahead",
          "of",
          "known",
          "large",
          "orders",
          "Cornering",
          "Control",
          "supply",
          "to",
          "manipulate",
          "price"
        ],
        "visibility": "pub"
      },
      {
        "name": "AlertLevel",
        "file": "crates/risk/src/manipulation_detection.rs",
        "line": 123,
        "variants": [
          "None",
          "Low",
          "Monitoring",
          "Medium",
          "Increased",
          "scrutiny",
          "High",
          "Trading",
          "restrictions",
          "Critical",
          "Immediate",
          "action",
          "required"
        ],
        "visibility": "pub"
      },
      {
        "name": "PriceModel",
        "file": "crates/risk/src/monte_carlo.rs",
        "line": 59,
        "variants": [
          "GeometricBrownianMotion",
          "drift",
          "f64",
          "volatility",
          "f64"
        ],
        "visibility": "pub"
      },
      {
        "name": "VolatilityModel",
        "file": "crates/risk/src/monte_carlo.rs",
        "line": 91,
        "variants": [
          "Constant",
          "GARCH",
          "alpha",
          "f64",
          "beta",
          "f64",
          "omega",
          "f64"
        ],
        "visibility": "pub"
      },
      {
        "name": "JumpSizeDistribution",
        "file": "crates/risk/src/monte_carlo.rs",
        "line": 119,
        "variants": [
          "Normal",
          "mean",
          "f64",
          "std",
          "f64"
        ],
        "visibility": "pub"
      },
      {
        "name": "StressScenario",
        "file": "crates/risk/src/monte_carlo.rs",
        "line": 958,
        "variants": [
          "FlashCrash",
          "magnitude",
          "f64",
          "duration",
          "usize"
        ],
        "visibility": "pub"
      },
      {
        "name": "AssetClass",
        "file": "crates/risk/src/cross_asset_correlations.rs",
        "line": 29,
        "variants": [
          "Crypto",
          "BTC",
          "ETH",
          "SOL",
          "BNB",
          "MATIC",
          "Equities",
          "SP500",
          "NASDAQ",
          "DJI",
          "RUSSELL2000",
          "VIX",
          "Fixed",
          "Income",
          "US10Y",
          "US2Y",
          "TIPS",
          "HYG",
          "High",
          "Yield",
          "Bonds",
          "Commodities",
          "GOLD",
          "SILVER",
          "OIL",
          "NATGAS",
          "Currencies",
          "DXY",
          "Dollar",
          "Index",
          "EUR",
          "JPY",
          "GBP",
          "Alternative",
          "REIT",
          "COMMODITY_INDEX"
        ],
        "visibility": "pub"
      },
      {
        "name": "ContagionSeverity",
        "file": "crates/risk/src/cross_asset_correlations.rs",
        "line": 424,
        "variants": [
          "Low",
          "20",
          "correlation",
          "increase",
          "Medium",
          "20",
          "40",
          "increase",
          "High",
          "40",
          "60",
          "increase",
          "Extreme",
          "60",
          "increase",
          "crisis"
        ],
        "visibility": "pub"
      },
      {
        "name": "TradeAction",
        "file": "crates/risk/src/simd_decision_engine.rs",
        "line": 373,
        "variants": [
          "Buy",
          "Sell",
          "Hold"
        ],
        "visibility": "pub"
      },
      {
        "name": "ExecutionStrategy",
        "file": "crates/risk/src/profit_extractor.rs",
        "line": 1010,
        "variants": [
          "Aggressive",
          "Passive",
          "TWAP",
          "VWAP",
          "Smart"
        ],
        "visibility": "private"
      },
      {
        "name": "ExitSignal",
        "file": "crates/risk/src/profit_extractor.rs",
        "line": 1126,
        "variants": [
          "Hold",
          "TakeProfit",
          "StopLoss",
          "TrailingStop",
          "BreakevenStop",
          "TimeExit"
        ],
        "visibility": "private"
      },
      {
        "name": "ExecutionAlgorithm",
        "file": "crates/risk/src/trading_types_complete.rs",
        "line": 57,
        "variants": [
          "Time",
          "based",
          "algorithms",
          "TWAP",
          "Time",
          "Weighted",
          "Average",
          "Price",
          "VWAP",
          "Volume",
          "Weighted",
          "Average",
          "Price",
          "POV",
          "Percentage",
          "of",
          "Volume",
          "Liquidity",
          "seeking",
          "algorithms",
          "Iceberg",
          "Hidden",
          "order",
          "size",
          "Sniper",
          "Aggressive",
          "taking",
          "Passive",
          "Post",
          "only",
          "orders",
          "Adaptive",
          "algorithms",
          "IS",
          "Implementation",
          "Shortfall",
          "AC",
          "Adaptive",
          "Curve",
          "Adaptive",
          "ML",
          "based",
          "adaptive",
          "execution",
          "AdaptiveLiquidity",
          "Adapts",
          "to",
          "book",
          "depth",
          "Guerrilla",
          "Opportunistic",
          "execution",
          "Market",
          "making",
          "PegToMid",
          "Peg",
          "to",
          "mid",
          "price",
          "PegToBest",
          "Peg",
          "to",
          "best",
          "bid",
          "ask",
          "Spread",
          "Capture",
          "spread",
          "Smart",
          "routing",
          "SOR",
          "Smart",
          "Order",
          "Router",
          "SmartOrderRouting",
          "Best",
          "execution",
          "across",
          "venues",
          "DarkPool",
          "Dark",
          "pool",
          "seeking",
          "Aggressive",
          "Take",
          "liquidity",
          "aggressively",
          "SweepToFill",
          "Sweep",
          "multiple",
          "levels"
        ],
        "visibility": "pub"
      },
      {
        "name": "TradeSide",
        "file": "crates/risk/src/trading_types_complete.rs",
        "line": 229,
        "variants": [
          "Buy",
          "Sell"
        ],
        "visibility": "pub"
      },
      {
        "name": "TimeInForce",
        "file": "crates/risk/src/trading_types_complete.rs",
        "line": 278,
        "variants": [
          "GTC",
          "Good",
          "Till",
          "Cancelled",
          "IOC",
          "Immediate",
          "or",
          "Cancel",
          "FOK",
          "Fill",
          "or",
          "Kill",
          "GTX",
          "Good",
          "Till",
          "Crossing",
          "Day",
          "Day",
          "order",
          "GTD",
          "Good",
          "Till",
          "Date"
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketRegime",
        "file": "crates/risk/src/trading_types_complete.rs",
        "line": 289,
        "variants": [
          "Trending",
          "RangeB",
          "Volatile",
          "Quiet",
          "Breakout",
          "Breakdown",
          "Unknown"
        ],
        "visibility": "pub"
      },
      {
        "name": "SignalAction",
        "file": "crates/risk/src/trading_types_complete.rs",
        "line": 303,
        "variants": [
          "Buy",
          "Sell",
          "Hold",
          "ClosePosition",
          "ReducePosition",
          "IncreasePosition",
          "Advanced",
          "actions",
          "ScaleIn",
          "Gradually",
          "enter",
          "ScaleOut",
          "Gradually",
          "exit",
          "Hedge",
          "Hedge",
          "existing",
          "position",
          "Arbitrage",
          "Arbitrage",
          "opportunity",
          "MarketMake",
          "Provide",
          "liquidity"
        ],
        "visibility": "pub"
      },
      {
        "name": "AssetClass",
        "file": "crates/risk/src/trading_types_complete.rs",
        "line": 347,
        "variants": [
          "Crypto",
          "CryptoAlt",
          "Altcoins",
          "CryptoDefi",
          "DeFi",
          "tokens",
          "CryptoStable",
          "Stablecoins",
          "Forex",
          "Equity",
          "Commodity",
          "Index",
          "Option",
          "Future"
        ],
        "visibility": "pub"
      },
      {
        "name": "OptimizationStrategy",
        "file": "crates/risk/src/trading_types_complete.rs",
        "line": 408,
        "variants": [
          "GridSearch",
          "RandomSearch",
          "BayesianOptimization",
          "GeneticAlgorithm",
          "ParticleSwarm",
          "SimulatedAnnealing",
          "TPE",
          "Tree",
          "structured",
          "Parzen",
          "Estimator"
        ],
        "visibility": "pub"
      },
      {
        "name": "OptimizationDirection",
        "file": "crates/risk/src/trading_types_complete.rs",
        "line": 420,
        "variants": [
          "Maximize",
          "Minimize"
        ],
        "visibility": "pub"
      },
      {
        "name": "ParameterType",
        "file": "crates/risk/src/hyperparameter_optimization.rs",
        "line": 263,
        "variants": [
          "Float",
          "min",
          "f64",
          "max",
          "f64",
          "log_scale",
          "bool"
        ],
        "visibility": "pub"
      },
      {
        "name": "OptimizationDirection",
        "file": "crates/risk/src/hyperparameter_optimization.rs",
        "line": 295,
        "variants": [
          "Maximize",
          "For",
          "profit",
          "Sharpe",
          "ratio",
          "Minimize",
          "For",
          "risk",
          "drawdown"
        ],
        "visibility": "pub"
      },
      {
        "name": "TrialState",
        "file": "crates/risk/src/hyperparameter_optimization.rs",
        "line": 316,
        "variants": [
          "Running",
          "Complete",
          "Pruned",
          "Failed"
        ],
        "visibility": "pub"
      },
      {
        "name": "ParameterValue",
        "file": "crates/risk/src/hyperparameter_optimization.rs",
        "line": 324,
        "variants": [
          "Float",
          "Integer",
          "Categorical",
          "Boolean",
          "String",
          "Added",
          "for",
          "compatibility"
        ],
        "visibility": "pub"
      },
      {
        "name": "Strategy",
        "file": "crates/risk/src/game_theory_advanced.rs",
        "line": 50,
        "variants": [
          "Aggressive",
          "High",
          "frequency",
          "large",
          "positions",
          "Conservative",
          "Low",
          "frequency",
          "small",
          "positions",
          "Momentum",
          "Follow",
          "trends",
          "Contrarian",
          "Fade",
          "moves",
          "MarketMaking",
          "Provide",
          "liquidity",
          "Arbitrage",
          "Exploit",
          "inefficiencies",
          "Predatory",
          "Hunt",
          "stops",
          "squeeze",
          "shorts"
        ],
        "visibility": "pub"
      },
      {
        "name": "VPINStrategy",
        "file": "crates/risk/src/vpin_validation.rs",
        "line": 461,
        "variants": [
          "Normal",
          "VPIN",
          "0",
          "2",
          "Cautious",
          "0",
          "2",
          "VPIN",
          "0",
          "3",
          "Defensive",
          "0",
          "3",
          "VPIN",
          "0",
          "4",
          "ExitOnly",
          "VPIN",
          "0",
          "4"
        ],
        "visibility": "pub"
      },
      {
        "name": "HistoricalRegime",
        "file": "crates/risk/src/historical_regime_calibration.rs",
        "line": 26,
        "variants": [
          "StrongBull",
          "Euphoria",
          "phase",
          "be",
          "cautious",
          "Bull",
          "Normal",
          "uptrend",
          "Sideways",
          "Range",
          "bound",
          "mean",
          "reversion",
          "Bear",
          "Downtrend",
          "elevated",
          "vol",
          "Crisis",
          "Extreme",
          "stress",
          "correlations",
          "1",
          "Recovery",
          "Post",
          "crisis",
          "normalization"
        ],
        "visibility": "pub"
      },
      {
        "name": "ExecutionStrategy",
        "file": "crates/risk/src/funding_rates.rs",
        "line": 105,
        "variants": [
          "Immediate",
          "Execute",
          "immediately",
          "WaitForBetterRate",
          "Wait",
          "for",
          "target",
          "rate",
          "ScaleIn",
          "Scale",
          "in",
          "over",
          "time",
          "DeltaNeutral",
          "Maintain",
          "delta",
          "neutrality",
          "CrossExchange",
          "Cross",
          "exchange",
          "arbitrage"
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketRegime",
        "file": "crates/risk/src/auto_tuning.rs",
        "line": 13,
        "variants": [
          "Bull",
          "Trending",
          "up",
          "low",
          "volatility",
          "Bear",
          "Trending",
          "down",
          "high",
          "volatility",
          "Sideways",
          "Range",
          "bound",
          "medium",
          "volatility",
          "Crisis",
          "Extreme",
          "volatility",
          "correlation",
          "breakdown"
        ],
        "visibility": "pub"
      },
      {
        "name": "ExecutionAlgorithm",
        "file": "crates/risk/src/optimal_execution.rs",
        "line": 76,
        "variants": [
          "TWAP",
          "Time",
          "Weighted",
          "Average",
          "Price",
          "VWAP",
          "Volume",
          "Weighted",
          "Average",
          "Price",
          "POV",
          "Percentage",
          "of",
          "Volume",
          "IS",
          "Implementation",
          "Shortfall",
          "Almgren",
          "Chriss",
          "Adaptive",
          "ML",
          "based",
          "adaptive",
          "execution",
          "Iceberg",
          "Hidden",
          "liquidity",
          "seeking",
          "Sniper",
          "Aggressive",
          "liquidity",
          "taking"
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderType",
        "file": "crates/risk/src/optimal_execution.rs",
        "line": 762,
        "variants": [
          "Market",
          "Limit",
          "Stop",
          "StopLimit"
        ],
        "visibility": "pub"
      },
      {
        "name": "Side",
        "file": "crates/risk/src/unified_types.rs",
        "line": 227,
        "variants": [
          "Long",
          "Short"
        ],
        "visibility": "pub"
      },
      {
        "name": "SignalAction",
        "file": "crates/risk/src/unified_types.rs",
        "line": 252,
        "variants": [
          "Buy",
          "Sell",
          "Hold",
          "ClosePosition",
          "ReducePosition",
          "IncreasePosition"
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderType",
        "file": "crates/risk/src/unified_types.rs",
        "line": 278,
        "variants": [
          "Market",
          "Limit",
          "StopMarket",
          "StopLimit",
          "TakeProfit",
          "TakeProfitLimit"
        ],
        "visibility": "pub"
      },
      {
        "name": "TimeInForce",
        "file": "crates/risk/src/unified_types.rs",
        "line": 288,
        "variants": [
          "GTC",
          "Good",
          "Till",
          "Cancel",
          "IOC",
          "Immediate",
          "or",
          "Cancel",
          "FOK",
          "Fill",
          "or",
          "Kill",
          "GTX",
          "Good",
          "Till",
          "Crossing"
        ],
        "visibility": "pub"
      },
      {
        "name": "FeatureCategory",
        "file": "crates/risk/src/feature_importance.rs",
        "line": 19,
        "variants": [
          "Price",
          "Price",
          "based",
          "features",
          "Volume",
          "Volume",
          "based",
          "features",
          "Technical",
          "Technical",
          "indicators",
          "Microstructure",
          "Order",
          "book",
          "features",
          "Sentiment",
          "Market",
          "sentiment",
          "Macro",
          "Macroeconomic",
          "factors",
          "Risk",
          "Risk",
          "metrics",
          "Custom",
          "User",
          "defined",
          "features"
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketRegime",
        "file": "crates/risk/src/isotonic.rs",
        "line": 34,
        "variants": [
          "Normal",
          "Volatile",
          "Crisis",
          "Trending",
          "RangeBound"
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderState",
        "file": "crates/order_management/src/state_machine.rs",
        "line": 19,
        "variants": [
          "Order",
          "created",
          "but",
          "not",
          "yet",
          "submitted",
          "Created",
          "0",
          "Order",
          "validated",
          "and",
          "ready",
          "for",
          "submission",
          "Validated",
          "1",
          "Order",
          "submitted",
          "to",
          "exchange",
          "Submitted",
          "2",
          "Order",
          "acknowledged",
          "by",
          "exchange",
          "Acknowledged",
          "3",
          "Order",
          "partially",
          "filled",
          "PartiallyFilled",
          "4",
          "Order",
          "completely",
          "filled",
          "Filled",
          "5",
          "Order",
          "cancelled",
          "Cancelled",
          "6",
          "Order",
          "rejected",
          "by",
          "exchange",
          "Rejected",
          "7",
          "Order",
          "expired",
          "Expired",
          "8",
          "Order",
          "failed",
          "due",
          "to",
          "error",
          "Failed",
          "9"
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderEvent",
        "file": "crates/order_management/src/state_machine.rs",
        "line": 293,
        "variants": [
          "Validate",
          "Submit",
          "Acknowledge",
          "PartialFill",
          "quantity",
          "rust_decimal",
          "Decimal",
          "price",
          "rust_decimal",
          "Decimal"
        ],
        "visibility": "pub"
      },
      {
        "name": "StateTransitionError",
        "file": "crates/order_management/src/state_machine.rs",
        "line": 306,
        "variants": [
          "error",
          "Invalid",
          "transition",
          "from",
          "from"
        ],
        "visibility": "pub"
      },
      {
        "name": "RoutingStrategy",
        "file": "crates/order_management/src/router.rs",
        "line": 126,
        "variants": [
          "Route",
          "to",
          "exchange",
          "with",
          "best",
          "price",
          "BestPrice",
          "Route",
          "to",
          "exchange",
          "with",
          "lowest",
          "fees",
          "LowestFee",
          "Route",
          "to",
          "exchange",
          "with",
          "lowest",
          "latency",
          "FastestExecution",
          "Route",
          "based",
          "on",
          "weighted",
          "score",
          "SmartRoute",
          "Always",
          "use",
          "primary",
          "exchange",
          "PrimaryOnly",
          "Round",
          "robin",
          "between",
          "active",
          "exchanges",
          "RoundRobin"
        ],
        "visibility": "pub"
      },
      {
        "name": "RoutingError",
        "file": "crates/order_management/src/router.rs",
        "line": 339,
        "variants": [
          "error",
          "NoAvailableRoute",
          "error",
          "NoPrimaryExchange",
          "error",
          "Exchange",
          "not",
          "found",
          "0"
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderManagerError",
        "file": "crates/order_management/src/manager.rs",
        "line": 434,
        "variants": [
          "error",
          "Order",
          "not",
          "found",
          "0"
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderSide",
        "file": "crates/order_management/src/order.rs",
        "line": 36,
        "variants": [
          "Buy",
          "Sell"
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderType",
        "file": "crates/order_management/src/order.rs",
        "line": 53,
        "variants": [
          "Market",
          "Limit",
          "StopLoss",
          "StopLimit",
          "TakeProfit",
          "TakeProfitLimit"
        ],
        "visibility": "pub"
      },
      {
        "name": "TimeInForce",
        "file": "crates/order_management/src/order.rs",
        "line": 80,
        "variants": [
          "Good",
          "Till",
          "Cancelled",
          "GTC",
          "Immediate",
          "Or",
          "Cancel",
          "IOC",
          "Fill",
          "Or",
          "Kill",
          "FOK",
          "Good",
          "Till",
          "Date",
          "GTD",
          "Post",
          "Only",
          "maker",
          "only",
          "PostOnly"
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderValidationError",
        "file": "crates/order_management/src/order.rs",
        "line": 280,
        "variants": [
          "error",
          "Invalid",
          "quantity",
          "0"
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderSide",
        "file": "crates/types/src/trading.rs",
        "line": 4,
        "variants": [
          "Buy",
          "Sell"
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderType",
        "file": "crates/types/src/trading.rs",
        "line": 10,
        "variants": [
          "Market",
          "Limit",
          "StopLoss",
          "TakeProfit"
        ],
        "visibility": "pub"
      },
      {
        "name": "TripCondition",
        "file": "crates/risk_engine/src/emergency.rs",
        "line": 14,
        "variants": [
          "Daily",
          "loss",
          "exceeded",
          "DailyLossExceeded",
          "loss",
          "Decimal",
          "limit",
          "Decimal"
        ],
        "visibility": "pub"
      },
      {
        "name": "RecoveryAction",
        "file": "crates/risk_engine/src/emergency.rs",
        "line": 311,
        "variants": [
          "CloseAllPositions",
          "CancelAllOrders",
          "ReduceExposure",
          "target_pct",
          "Decimal"
        ],
        "visibility": "pub"
      },
      {
        "name": "RiskCheckResult",
        "file": "crates/risk_engine/src/checks.rs",
        "line": 20,
        "variants": [
          "Order",
          "approved",
          "Approved",
          "checks_passed",
          "Vec",
          "String",
          "warnings",
          "Vec",
          "String"
        ],
        "visibility": "pub"
      },
      {
        "name": "PreTradeCheck",
        "file": "crates/risk_engine/src/checks.rs",
        "line": 48,
        "variants": [
          "PositionSize",
          "StopLoss",
          "MaxExposure",
          "Correlation",
          "DailyLoss",
          "Leverage",
          "Liquidity",
          "All"
        ],
        "visibility": "pub"
      },
      {
        "name": "RiskCheckError",
        "file": "crates/risk_engine/src/checks.rs",
        "line": 306,
        "variants": [
          "error",
          "Position",
          "size",
          "exceeds",
          "limit",
          "0"
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderEventType",
        "file": "crates/risk_engine/src/market_maker_detection.rs",
        "line": 51,
        "variants": [
          "NewOrder",
          "Cancellation",
          "Modification",
          "Fill"
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderSide",
        "file": "crates/risk_engine/src/market_maker_detection.rs",
        "line": 59,
        "variants": [
          "Buy",
          "Sell"
        ],
        "visibility": "pub"
      },
      {
        "name": "ParticipantType",
        "file": "crates/risk_engine/src/market_maker_detection.rs",
        "line": 66,
        "variants": [
          "MarketMaker",
          "Professional",
          "liquidity",
          "provider",
          "InstitutionalTrader",
          "Large",
          "directional",
          "trader",
          "RetailTrader",
          "Small",
          "individual",
          "trader",
          "ArbitrageBot",
          "Cross",
          "exchange",
          "arbitrageur",
          "MomentumTrader",
          "Trend",
          "follower",
          "NoiseTrader",
          "Random",
          "uninformed",
          "Unknown"
        ],
        "visibility": "pub"
      },
      {
        "name": "ScenarioSeverity",
        "file": "crates/risk_engine/src/stress_testing.rs",
        "line": 72,
        "variants": [
          "Mild",
          "1",
          "sigma",
          "event",
          "Moderate",
          "3",
          "sigma",
          "event",
          "Severe",
          "5",
          "sigma",
          "event",
          "Extreme",
          "10",
          "sigma",
          "event",
          "black",
          "swan"
        ],
        "visibility": "pub"
      },
      {
        "name": "ShockType",
        "file": "crates/risk_engine/src/stress_testing.rs",
        "line": 87,
        "variants": [
          "PriceShock",
          "VolumeShock",
          "VolatilityShock",
          "CorrelationShock",
          "LiquidityShock",
          "FundingShock"
        ],
        "visibility": "pub"
      },
      {
        "name": "AlertSeverity",
        "file": "crates/risk_engine/src/monitor.rs",
        "line": 203,
        "variants": [
          "Info",
          "Warning",
          "Critical",
          "Emergency"
        ],
        "visibility": "pub"
      },
      {
        "name": "ArbitrageType",
        "file": "crates/risk_engine/src/latency_arbitrage_detection.rs",
        "line": 42,
        "variants": [
          "FrontRunning",
          "Someone",
          "trades",
          "ahead",
          "of",
          "us",
          "BackRunning",
          "Someone",
          "trades",
          "immediately",
          "after",
          "us",
          "Sandwiching",
          "We",
          "re",
          "caught",
          "between",
          "two",
          "trades",
          "QuoteFading",
          "Quotes",
          "disappear",
          "when",
          "we",
          "try",
          "to",
          "hit",
          "them",
          "LatencyShading",
          "Prices",
          "systematically",
          "worse",
          "by",
          "the",
          "time",
          "we",
          "execute",
          "PhantomLiquidity",
          "Liquidity",
          "vanishes",
          "when",
          "accessed"
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderSide",
        "file": "crates/risk_engine/src/latency_arbitrage_detection.rs",
        "line": 52,
        "variants": [
          "Buy",
          "Sell"
        ],
        "visibility": "pub"
      },
      {
        "name": "DistributionType",
        "file": "crates/analysis/src/historical_calibration.rs",
        "line": 58,
        "variants": [
          "Normal",
          "StudentT",
          "df",
          "f64"
        ],
        "visibility": "pub"
      },
      {
        "name": "NormalizationMethod",
        "file": "crates/ml/src/data_normalization.rs",
        "line": 17,
        "variants": [
          "Standard",
          "normalization",
          "vulnerable",
          "to",
          "outliers",
          "StandardScaler",
          "Robust",
          "normalization",
          "using",
          "median",
          "and",
          "IQR",
          "RobustScaler",
          "quantile_range",
          "f64",
          "f64",
          "Default",
          "0",
          "25",
          "0",
          "75"
        ],
        "visibility": "pub"
      },
      {
        "name": "QuantileOutput",
        "file": "crates/ml/src/data_normalization.rs",
        "line": 42,
        "variants": [
          "Uniform",
          "Normal"
        ],
        "visibility": "pub"
      },
      {
        "name": "OrthogonalizationMethod",
        "file": "crates/ml/src/signal_processing.rs",
        "line": 39,
        "variants": [
          "GramSchmidt",
          "PCA",
          "ICA",
          "QRDecomposition"
        ],
        "visibility": "pub"
      },
      {
        "name": "TradeSide",
        "file": "crates/ml/src/features/microstructure.rs",
        "line": 26,
        "variants": [
          "Buy",
          "Buyer",
          "aggressor",
          "at",
          "ask",
          "Sell",
          "Seller",
          "aggressor",
          "at",
          "bid",
          "Unknown"
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketRegime",
        "file": "crates/ml/src/calibration/isotonic.rs",
        "line": 12,
        "variants": [
          "Trending",
          "Strong",
          "directional",
          "movement",
          "RangeBound",
          "Sideways",
          "consolidation",
          "Crisis",
          "High",
          "volatility",
          "panic",
          "Breakout",
          "Price",
          "discovery",
          "phase"
        ],
        "visibility": "pub"
      },
      {
        "name": "CalibrationError",
        "file": "crates/ml/src/calibration/isotonic.rs",
        "line": 430,
        "variants": [
          "error",
          "DimensionMismatch",
          "error",
          "Insufficient",
          "data",
          "required",
          "required"
        ],
        "visibility": "pub"
      },
      {
        "name": "Priority",
        "file": "crates/ml/src/inference/engine.rs",
        "line": 29,
        "variants": [
          "Critical",
          "0",
          "10ns",
          "target",
          "High",
          "1",
          "50ns",
          "target",
          "Normal",
          "2",
          "100ns",
          "target",
          "Low",
          "3",
          "Best",
          "effort"
        ],
        "visibility": "pub"
      },
      {
        "name": "ModelType",
        "file": "crates/ml/src/inference/engine.rs",
        "line": 411,
        "variants": [
          "Linear",
          "Neural",
          "ARIMA",
          "Custom"
        ],
        "visibility": "pub"
      },
      {
        "name": "InferenceError",
        "file": "crates/ml/src/inference/engine.rs",
        "line": 429,
        "variants": [
          "error",
          "CircuitOpen",
          "error",
          "QueueFull",
          "error",
          "ModelNotFound",
          "error",
          "InvalidModelData"
        ],
        "visibility": "pub"
      },
      {
        "name": "ParameterType",
        "file": "crates/ml/src/training/hyperparameter.rs",
        "line": 19,
        "variants": [
          "Continuous",
          "min",
          "f64",
          "max",
          "f64",
          "log_scale",
          "bool"
        ],
        "visibility": "pub"
      },
      {
        "name": "Constraint",
        "file": "crates/ml/src/training/hyperparameter.rs",
        "line": 32,
        "variants": [
          "LessThan",
          "GreaterThan",
          "Sum",
          "params",
          "Vec",
          "String",
          "max",
          "f64"
        ],
        "visibility": "pub"
      },
      {
        "name": "KernelType",
        "file": "crates/ml/src/training/hyperparameter.rs",
        "line": 208,
        "variants": [
          "RBF",
          "length_scale",
          "f64"
        ],
        "visibility": "pub"
      },
      {
        "name": "AcquisitionFunction",
        "file": "crates/ml/src/training/hyperparameter.rs",
        "line": 308,
        "variants": [
          "UCB",
          "beta",
          "f64"
        ],
        "visibility": "pub"
      },
      {
        "name": "LRScheduler",
        "file": "crates/ml/src/training/optimizer.rs",
        "line": 257,
        "variants": [
          "Constant",
          "StepDecay",
          "step_size",
          "usize",
          "gamma",
          "f64"
        ],
        "visibility": "pub"
      },
      {
        "name": "ModelStatus",
        "file": "crates/ml/src/training/storage.rs",
        "line": 36,
        "variants": [
          "Training",
          "Validating",
          "Ready",
          "Deployed",
          "Archived",
          "Failed"
        ],
        "visibility": "pub"
      },
      {
        "name": "OptimizerType",
        "file": "crates/ml/src/training/mod.rs",
        "line": 98,
        "variants": [
          "SGD",
          "Adam",
          "AdaGrad",
          "RMSprop",
          "AdamW"
        ],
        "visibility": "pub"
      },
      {
        "name": "LossFunction",
        "file": "crates/ml/src/training/mod.rs",
        "line": 108,
        "variants": [
          "MSE",
          "MAE",
          "Huber",
          "CrossEntropy",
          "BinaryCrossEntropy",
          "QuantileLoss"
        ],
        "visibility": "pub"
      },
      {
        "name": "MetricType",
        "file": "crates/ml/src/training/mod.rs",
        "line": 119,
        "variants": [
          "MAE",
          "MSE",
          "RMSE",
          "R2",
          "Accuracy",
          "Precision",
          "Recall",
          "F1Score",
          "AUC",
          "SharpeRatio"
        ],
        "visibility": "pub"
      },
      {
        "name": "ParameterRange",
        "file": "crates/ml/src/training/mod.rs",
        "line": 687,
        "variants": [
          "Float",
          "min",
          "f64",
          "max",
          "f64",
          "log_scale",
          "bool"
        ],
        "visibility": "pub"
      },
      {
        "name": "SelectionMethod",
        "file": "crates/ml/src/feature_engine/selector.rs",
        "line": 13,
        "variants": [
          "Variance",
          "threshold",
          "remove",
          "low",
          "variance",
          "features",
          "VarianceThreshold",
          "Correlation",
          "threshold",
          "remove",
          "highly",
          "correlated",
          "features",
          "CorrelationThreshold",
          "Select",
          "K",
          "best",
          "features",
          "by",
          "score",
          "SelectKBest",
          "Mutual",
          "information",
          "based",
          "selection",
          "MutualInformation",
          "threshold",
          "f64"
        ],
        "visibility": "pub"
      },
      {
        "name": "IndicatorError",
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 70,
        "variants": [
          "error",
          "InsufficientData",
          "error",
          "InvalidParameter",
          "error",
          "Calculation",
          "error",
          "0"
        ],
        "visibility": "pub"
      },
      {
        "name": "FeatureError",
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 80,
        "variants": [
          "error",
          "Out",
          "of",
          "bounds",
          "feature"
        ],
        "visibility": "pub"
      },
      {
        "name": "SelectionMethod",
        "file": "crates/ml/src/feature_engine/advanced_features.rs",
        "line": 173,
        "variants": [
          "VarianceThreshold",
          "MutualInformation",
          "k",
          "usize"
        ],
        "visibility": "pub"
      },
      {
        "name": "FFTAggregation",
        "file": "crates/ml/src/feature_engine/advanced_features.rs",
        "line": 1233,
        "variants": [
          "MaxFreq",
          "MeanFreq",
          "MedianFreq",
          "SpectralCentroid",
          "SpectralRolloff"
        ],
        "visibility": "private"
      },
      {
        "name": "WaveletType",
        "file": "crates/ml/src/feature_engine/advanced_features.rs",
        "line": 1242,
        "variants": [
          "Haar",
          "Daubechies4",
          "Symlet8"
        ],
        "visibility": "private"
      },
      {
        "name": "IchimokuSignal",
        "file": "crates/ml/src/feature_engine/ichimoku.rs",
        "line": 40,
        "variants": [
          "StrongBullish",
          "Price",
          "above",
          "cloud",
          "Tenkan",
          "Kijun",
          "cloud",
          "green",
          "Bullish",
          "Price",
          "above",
          "cloud",
          "Neutral",
          "Price",
          "in",
          "cloud",
          "Bearish",
          "Price",
          "below",
          "cloud",
          "StrongBearish",
          "Price",
          "below",
          "cloud",
          "Tenkan",
          "Kijun",
          "cloud",
          "red"
        ],
        "visibility": "pub"
      },
      {
        "name": "HarmonicType",
        "file": "crates/ml/src/feature_engine/harmonic_patterns.rs",
        "line": 85,
        "variants": [
          "Classic",
          "Patterns",
          "Gartley",
          "Original",
          "pattern",
          "from",
          "1935",
          "Butterfly",
          "Discovered",
          "by",
          "Bryce",
          "Gilmore",
          "Bat",
          "Scott",
          "Carney",
          "pattern",
          "Crab",
          "Deep",
          "retracement",
          "pattern",
          "Advanced",
          "Patterns",
          "Shark",
          "Extreme",
          "harmonic",
          "moves",
          "Cypher",
          "Darren",
          "Oglesbee",
          "pattern",
          "ThreeDrivers",
          "Symmetrical",
          "pattern",
          "ABCD",
          "Basic",
          "harmonic",
          "pattern",
          "Rare",
          "Patterns",
          "DeepCrab",
          "Extended",
          "crab",
          "pattern",
          "AltBat",
          "Alternative",
          "bat",
          "ratios",
          "NenStar",
          "Complex",
          "5",
          "point",
          "pattern",
          "Special",
          "Patterns",
          "WhiteSwann",
          "Black",
          "swan",
          "reversal",
          "SeaPony",
          "Smaller",
          "timeframe",
          "pattern",
          "Leonardo",
          "Based",
          "on",
          "Fibonacci",
          "sequence"
        ],
        "visibility": "pub"
      },
      {
        "name": "WaveType",
        "file": "crates/ml/src/feature_engine/elliott_wave.rs",
        "line": 35,
        "variants": [
          "Impulsive",
          "waves",
          "motive",
          "Wave1",
          "Wave2",
          "Wave3",
          "Wave4",
          "Wave5",
          "Corrective",
          "waves",
          "WaveA",
          "WaveB",
          "WaveC",
          "Extended",
          "waves",
          "ExtendedWave3",
          "ExtendedWave5",
          "Complex",
          "corrections",
          "WaveW",
          "WaveX",
          "WaveY",
          "WaveZ"
        ],
        "visibility": "pub"
      },
      {
        "name": "PatternType",
        "file": "crates/ml/src/feature_engine/elliott_wave.rs",
        "line": 70,
        "variants": [
          "ImpulsiveFive",
          "1",
          "2",
          "3",
          "4",
          "5",
          "DiagonalLeading",
          "Leading",
          "diagonal",
          "in",
          "wave",
          "1",
          "A",
          "DiagonalEnding",
          "Ending",
          "diagonal",
          "in",
          "wave",
          "5",
          "C",
          "ZigZag",
          "A",
          "B",
          "C",
          "sharp",
          "correction",
          "Flat",
          "A",
          "B",
          "C",
          "sideways",
          "correction",
          "Triangle",
          "A",
          "B",
          "C",
          "D",
          "E",
          "triangle",
          "DoubleZigZag",
          "W",
          "X",
          "Y",
          "TripleZigZag",
          "W",
          "X",
          "Y",
          "X",
          "Z",
          "DoubleThree",
          "Complex",
          "correction",
          "TripleThree",
          "More",
          "complex",
          "correction"
        ],
        "visibility": "pub"
      },
      {
        "name": "WaveDegree",
        "file": "crates/ml/src/feature_engine/elliott_wave.rs",
        "line": 84,
        "variants": [
          "GrandSupercycle",
          "Multi",
          "century",
          "Supercycle",
          "Multi",
          "decade",
          "40",
          "70",
          "years",
          "Cycle",
          "Years",
          "to",
          "decades",
          "Primary",
          "Months",
          "to",
          "years",
          "Intermediate",
          "Weeks",
          "to",
          "months",
          "Minor",
          "Days",
          "to",
          "weeks",
          "Minute",
          "Hours",
          "to",
          "days",
          "Minuette",
          "Minutes",
          "to",
          "hours",
          "SubMinuette",
          "Seconds",
          "to",
          "minutes"
        ],
        "visibility": "pub"
      },
      {
        "name": "PivotType",
        "file": "crates/ml/src/feature_engine/elliott_wave.rs",
        "line": 592,
        "variants": [
          "High",
          "Low"
        ],
        "visibility": "private"
      },
      {
        "name": "MarketPosition",
        "file": "crates/ml/src/feature_engine/elliott_wave.rs",
        "line": 598,
        "variants": [
          "EarlyTrend",
          "Wave",
          "1",
          "or",
          "2",
          "StrongTrend",
          "Wave",
          "3",
          "LateTrend",
          "Wave",
          "4",
          "EndOfTrend",
          "Wave",
          "5",
          "Correction",
          "A",
          "B",
          "C",
          "Complex",
          "Complex",
          "correction",
          "Undefined",
          "No",
          "clear",
          "pattern"
        ],
        "visibility": "pub"
      },
      {
        "name": "ScalingMethod",
        "file": "crates/ml/src/feature_engine/scaler.rs",
        "line": 13,
        "variants": [
          "Standardization",
          "x",
          "mean",
          "std",
          "StandardScaler",
          "Min",
          "Max",
          "scaling",
          "x",
          "min",
          "max",
          "min",
          "MinMaxScaler",
          "min",
          "f64",
          "max",
          "f64"
        ],
        "visibility": "pub"
      },
      {
        "name": "FeatureCategory",
        "file": "crates/ml/src/feature_engine/mod.rs",
        "line": 173,
        "variants": [
          "Price",
          "Volume",
          "Technical",
          "Statistical",
          "Microstructure",
          "Sentiment",
          "Risk",
          "Custom"
        ],
        "visibility": "pub"
      },
      {
        "name": "GRUError",
        "file": "crates/ml/src/models/gru.rs",
        "line": 573,
        "variants": [
          "error",
          "Invalid",
          "configuration",
          "0"
        ],
        "visibility": "pub"
      },
      {
        "name": "ARIMAError",
        "file": "crates/ml/src/models/arima.rs",
        "line": 365,
        "variants": [
          "error",
          "Invalid",
          "ARIMA",
          "order",
          "0"
        ],
        "visibility": "pub"
      },
      {
        "name": "LSTMError",
        "file": "crates/ml/src/models/lstm.rs",
        "line": 481,
        "variants": [
          "error",
          "Invalid",
          "configuration",
          "0"
        ],
        "visibility": "pub"
      },
      {
        "name": "GARCHError",
        "file": "crates/ml/src/models/garch.rs",
        "line": 480,
        "variants": [
          "error",
          "InsufficientData",
          "error",
          "NonStationary",
          "error",
          "InvalidParameters",
          "error",
          "Optimization",
          "failed",
          "0"
        ],
        "visibility": "pub"
      },
      {
        "name": "EnsembleStrategy",
        "file": "crates/ml/src/models/ensemble.rs",
        "line": 59,
        "variants": [
          "Simple",
          "average",
          "of",
          "predictions",
          "Average",
          "Weighted",
          "average",
          "based",
          "on",
          "performance",
          "WeightedAverage",
          "Majority",
          "voting",
          "classification",
          "MajorityVote",
          "Stacking",
          "with",
          "meta",
          "learner",
          "Stacking",
          "meta_model",
          "String"
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketRegime",
        "file": "crates/ml/src/models/ensemble.rs",
        "line": 493,
        "variants": [
          "Trending",
          "Ranging",
          "Volatile",
          "Calm"
        ],
        "visibility": "pub"
      },
      {
        "name": "EnsembleError",
        "file": "crates/ml/src/models/ensemble.rs",
        "line": 514,
        "variants": [
          "error",
          "NoModels",
          "error",
          "Invalid",
          "weights",
          "sum",
          "0"
        ],
        "visibility": "pub"
      },
      {
        "name": "GrowPolicy",
        "file": "crates/ml/src/models/xgboost_optimized.rs",
        "line": 89,
        "variants": [
          "DepthWise",
          "LossGuide"
        ],
        "visibility": "pub"
      },
      {
        "name": "XGBoostError",
        "file": "crates/ml/src/models/xgboost_optimized.rs",
        "line": 1080,
        "variants": [
          "error",
          "ModelNotTrained",
          "error",
          "Invalid",
          "parameters",
          "0"
        ],
        "visibility": "pub"
      },
      {
        "name": "VotingStrategy",
        "file": "crates/ml/src/models/ensemble_optimized.rs",
        "line": 87,
        "variants": [
          "Simple",
          "average",
          "of",
          "predictions",
          "SimpleAverage",
          "Weighted",
          "average",
          "based",
          "on",
          "performance",
          "WeightedAverage",
          "Bayesian",
          "Model",
          "Averaging",
          "Quinn",
          "BayesianAverage",
          "prior_weights",
          "Array1",
          "f64",
          "posterior_weights",
          "Array1",
          "f64",
          "evidence",
          "Array1",
          "f64"
        ],
        "visibility": "pub"
      },
      {
        "name": "OptimizationStrategy",
        "file": "crates/ml/src/models/ensemble_optimized.rs",
        "line": 123,
        "variants": [
          "Gradient",
          "based",
          "optimization",
          "GradientDescent",
          "learning_rate",
          "f64"
        ],
        "visibility": "pub"
      },
      {
        "name": "AcquisitionFunction",
        "file": "crates/ml/src/models/ensemble_optimized.rs",
        "line": 761,
        "variants": [
          "ExpectedImprovement",
          "UpperConfidenceBound",
          "ProbabilityOfImprovement"
        ],
        "visibility": "pub"
      },
      {
        "name": "BlendMode",
        "file": "crates/ml/src/models/stacking_ensemble.rs",
        "line": 65,
        "variants": [
          "Stacking",
          "Train",
          "meta",
          "learner",
          "on",
          "OOF",
          "predictions",
          "Blending",
          "Simple",
          "weighted",
          "average",
          "Voting",
          "Majority",
          "voting",
          "for",
          "classification",
          "BayesianAverage",
          "Bayesian",
          "model",
          "averaging",
          "DynamicWeighted",
          "Weights",
          "based",
          "on",
          "recent",
          "performance"
        ],
        "visibility": "pub"
      },
      {
        "name": "CrossValidationStrategy",
        "file": "crates/ml/src/models/stacking_ensemble.rs",
        "line": 74,
        "variants": [
          "KFold",
          "n_splits",
          "usize",
          "shuffle",
          "bool"
        ],
        "visibility": "pub"
      },
      {
        "name": "ModelError",
        "file": "crates/ml/src/models/stacking_ensemble.rs",
        "line": 680,
        "variants": [
          "error",
          "NotFitted",
          "error",
          "InvalidShape",
          "error",
          "Training",
          "failed",
          "0"
        ],
        "visibility": "pub"
      },
      {
        "name": "ModelType",
        "file": "crates/ml/src/models/registry.rs",
        "line": 135,
        "variants": [
          "ARIMA",
          "LSTM",
          "GRU",
          "Transformer",
          "Ensemble",
          "RandomForest",
          "XGBoost",
          "Custom"
        ],
        "visibility": "pub"
      },
      {
        "name": "ModelStatus",
        "file": "crates/ml/src/models/registry.rs",
        "line": 147,
        "variants": [
          "Training",
          "Validating",
          "Staging",
          "Production",
          "Shadow",
          "Running",
          "in",
          "parallel",
          "for",
          "comparison",
          "Deprecated",
          "Failed"
        ],
        "visibility": "pub"
      },
      {
        "name": "DeploymentStrategy",
        "file": "crates/ml/src/models/registry.rs",
        "line": 733,
        "variants": [
          "Immediate",
          "Canary",
          "initial_percentage",
          "f32",
          "ramp_duration",
          "std",
          "time",
          "Duration"
        ],
        "visibility": "pub"
      },
      {
        "name": "RegistryError",
        "file": "crates/ml/src/models/registry.rs",
        "line": 865,
        "variants": [
          "error",
          "Model",
          "not",
          "found",
          "0"
        ],
        "visibility": "pub"
      },
      {
        "name": "CircuitState",
        "file": "crates/infrastructure/src/circuit_breaker_sophia.rs",
        "line": 28,
        "variants": [
          "Closed",
          "0",
          "Normal",
          "operation",
          "Open",
          "1",
          "Circuit",
          "tripped",
          "rejecting",
          "calls",
          "HalfOpen",
          "2",
          "Testing",
          "if",
          "service",
          "recovered"
        ],
        "visibility": "pub"
      },
      {
        "name": "CircuitError",
        "file": "crates/infrastructure/src/circuit_breaker_sophia.rs",
        "line": 126,
        "variants": [
          "error",
          "Open",
          "error",
          "HalfOpenExhausted",
          "error",
          "MinCallsNotMet"
        ],
        "visibility": "pub"
      },
      {
        "name": "CircuitEvent",
        "file": "crates/infrastructure/src/circuit_breaker_sophia.rs",
        "line": 139,
        "variants": [
          "StateChanged",
          "component",
          "String",
          "from",
          "CircuitState",
          "to",
          "CircuitState"
        ],
        "visibility": "pub"
      },
      {
        "name": "Outcome",
        "file": "crates/infrastructure/src/circuit_breaker_sophia.rs",
        "line": 482,
        "variants": [
          "Success",
          "Failure"
        ],
        "visibility": "pub"
      },
      {
        "name": "PositionSide",
        "file": "crates/infrastructure/src/position_reconciliation.rs",
        "line": 128,
        "variants": [
          "Long",
          "Short"
        ],
        "visibility": "pub"
      },
      {
        "name": "PositionStatus",
        "file": "crates/infrastructure/src/position_reconciliation.rs",
        "line": 134,
        "variants": [
          "Open",
          "Closing",
          "Closed",
          "Liquidated",
          "Unknown"
        ],
        "visibility": "pub"
      },
      {
        "name": "Discrepancy",
        "file": "crates/infrastructure/src/position_reconciliation.rs",
        "line": 202,
        "variants": [
          "Position",
          "exists",
          "on",
          "exchange",
          "but",
          "not",
          "internally",
          "MissingInternal",
          "exchange",
          "String",
          "position",
          "Position",
          "severity",
          "Severity"
        ],
        "visibility": "pub"
      },
      {
        "name": "Severity",
        "file": "crates/infrastructure/src/position_reconciliation.rs",
        "line": 256,
        "variants": [
          "Critical",
          "Requires",
          "immediate",
          "action",
          "High",
          "Significant",
          "risk",
          "Medium",
          "Notable",
          "discrepancy",
          "Low",
          "Minor",
          "issue"
        ],
        "visibility": "pub"
      },
      {
        "name": "ReconciliationStatus",
        "file": "crates/infrastructure/src/position_reconciliation.rs",
        "line": 264,
        "variants": [
          "All",
          "positions",
          "match",
          "perfectly",
          "FullyReconciled",
          "Minor",
          "discrepancies",
          "within",
          "tolerance",
          "PartiallyReconciled",
          "Critical",
          "discrepancies",
          "found",
          "Failed",
          "Could",
          "not",
          "complete",
          "reconciliation",
          "Error"
        ],
        "visibility": "pub"
      },
      {
        "name": "RiskLevel",
        "file": "crates/infrastructure/src/position_reconciliation.rs",
        "line": 301,
        "variants": [
          "Extreme",
          "Force",
          "Emergency",
          "mode",
          "High",
          "Downgrade",
          "to",
          "Manual",
          "Medium",
          "Limit",
          "trading",
          "Low",
          "Normal",
          "operation"
        ],
        "visibility": "pub"
      },
      {
        "name": "RecommendedAction",
        "file": "crates/infrastructure/src/position_reconciliation.rs",
        "line": 310,
        "variants": [
          "Force",
          "emergency",
          "mode",
          "ForceEmergency",
          "Close",
          "specific",
          "position",
          "ClosePosition",
          "exchange",
          "String",
          "symbol",
          "String",
          "reason",
          "String"
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderSide",
        "file": "crates/infrastructure/src/position_reconciliation.rs",
        "line": 380,
        "variants": [
          "Buy",
          "Sell"
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderType",
        "file": "crates/infrastructure/src/position_reconciliation.rs",
        "line": 386,
        "variants": [
          "Market",
          "Limit",
          "Stop",
          "StopLimit"
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderStatus",
        "file": "crates/infrastructure/src/position_reconciliation.rs",
        "line": 394,
        "variants": [
          "Pending",
          "Open",
          "PartiallyFilled",
          "Filled",
          "Cancelled"
        ],
        "visibility": "pub"
      },
      {
        "name": "ReconciliationEvent",
        "file": "crates/infrastructure/src/position_reconciliation.rs",
        "line": 479,
        "variants": [
          "Started",
          "Completed",
          "DiscrepancyFound",
          "ActionTaken",
          "Failed"
        ],
        "visibility": "pub"
      },
      {
        "name": "NetworkHealth",
        "file": "crates/infrastructure/src/network_partition_handler.rs",
        "line": 37,
        "variants": [
          "All",
          "external",
          "services",
          "reachable",
          "Healthy",
          "Some",
          "non",
          "critical",
          "services",
          "unreachable",
          "Degraded",
          "Critical",
          "services",
          "unreachable",
          "Critical",
          "Complete",
          "isolation",
          "cannot",
          "trade",
          "Isolated",
          "Recovery",
          "in",
          "progress",
          "Recovering"
        ],
        "visibility": "pub"
      },
      {
        "name": "ServiceCriticality",
        "file": "crates/infrastructure/src/network_partition_handler.rs",
        "line": 57,
        "variants": [
          "Cannot",
          "operate",
          "without",
          "this",
          "PostgreSQL",
          "Critical",
          "Trading",
          "severely",
          "impacted",
          "Primary",
          "exchanges",
          "Essential",
          "Performance",
          "degraded",
          "Redis",
          "secondary",
          "exchanges",
          "Important",
          "Nice",
          "to",
          "have",
          "Monitoring",
          "analytics",
          "Optional"
        ],
        "visibility": "pub"
      },
      {
        "name": "ServiceType",
        "file": "crates/infrastructure/src/network_partition_handler.rs",
        "line": 109,
        "variants": [
          "Database",
          "Cache",
          "Exchange",
          "MessageQueue",
          "Monitoring",
          "Analytics"
        ],
        "visibility": "pub"
      },
      {
        "name": "NetworkEvent",
        "file": "crates/infrastructure/src/network_partition_handler.rs",
        "line": 803,
        "variants": [
          "Health",
          "state",
          "changed",
          "HealthChanged",
          "old",
          "NetworkHealth",
          "new",
          "NetworkHealth",
          "timestamp",
          "SystemTime"
        ],
        "visibility": "pub"
      },
      {
        "name": "ToxicityBreach",
        "file": "crates/infrastructure/src/circuit_breaker_integration.rs",
        "line": 116,
        "variants": [
          "OrderFlowImbalance",
          "VPINToxicity",
          "SpreadExplosion",
          "QuoteStaleness",
          "APIErrorCascade",
          "PriceDivergence",
          "LatencySpike",
          "MemoryPressure"
        ],
        "visibility": "pub"
      },
      {
        "name": "RiskCalculationType",
        "file": "crates/infrastructure/src/circuit_breaker_integration.rs",
        "line": 696,
        "variants": [
          "VaR",
          "Kelly",
          "Correlation",
          "MonteCarlo",
          "Position",
          "StopLoss"
        ],
        "visibility": "pub"
      },
      {
        "name": "CircuitBreakerEvent",
        "file": "crates/infrastructure/src/circuit_breaker_integration.rs",
        "line": 706,
        "variants": [
          "BreakerOpened",
          "BreakerClosed",
          "ToxicityDetected",
          "SpreadExplosion",
          "APIErrorCascade",
          "EmergencyTriggered"
        ],
        "visibility": "pub"
      },
      {
        "name": "CircuitBreakerError",
        "file": "crates/infrastructure/src/circuit_breaker_integration.rs",
        "line": 716,
        "variants": [
          "error",
          "Circuit",
          "open",
          "for",
          "0"
        ],
        "visibility": "pub"
      },
      {
        "name": "APIErrorCascade",
        "file": "crates/infrastructure/src/circuit_breaker_integration.rs",
        "line": 736,
        "variants": [
          "error",
          "TradingHalted",
          "error",
          "EmergencyTriggered"
        ],
        "visibility": "pub"
      },
      {
        "name": "SimdStrategy",
        "file": "crates/infrastructure/src/cpu_features.rs",
        "line": 86,
        "variants": [
          "Scalar",
          "fallback",
          "works",
          "on",
          "ALL",
          "CPUs",
          "Scalar",
          "SSE2",
          "100",
          "coverage",
          "2x",
          "speedup",
          "Sse2",
          "SSE4",
          "2",
          "99",
          "1",
          "coverage",
          "3",
          "4x",
          "speedup",
          "Sse42",
          "AVX2",
          "89",
          "2",
          "coverage",
          "8x",
          "speedup",
          "Avx2",
          "AVX512",
          "8",
          "73",
          "coverage",
          "16x",
          "speedup",
          "Avx512"
        ],
        "visibility": "pub"
      },
      {
        "name": "CircuitState",
        "file": "crates/infrastructure/src/circuit_breaker.rs",
        "line": 16,
        "variants": [
          "Closed",
          "0",
          "Normal",
          "operation",
          "Open",
          "1",
          "Circuit",
          "tripped",
          "rejecting",
          "calls",
          "HalfOpen",
          "2",
          "Testing",
          "if",
          "service",
          "recovered"
        ],
        "visibility": "pub"
      },
      {
        "name": "CircuitError",
        "file": "crates/infrastructure/src/circuit_breaker.rs",
        "line": 135,
        "variants": [
          "error",
          "Open",
          "error",
          "HalfOpenExhausted",
          "error",
          "GlobalOpen",
          "error",
          "Component",
          "not",
          "found",
          "0"
        ],
        "visibility": "pub"
      },
      {
        "name": "Outcome",
        "file": "crates/infrastructure/src/circuit_breaker.rs",
        "line": 157,
        "variants": [
          "Success",
          "Failure"
        ],
        "visibility": "pub"
      },
      {
        "name": "Permit",
        "file": "crates/infrastructure/src/circuit_breaker.rs",
        "line": 205,
        "variants": [
          "Allowed",
          "Rejected"
        ],
        "visibility": "pub"
      },
      {
        "name": "CircuitEvent",
        "file": "crates/infrastructure/src/circuit_breaker.rs",
        "line": 444,
        "variants": [
          "StateChange",
          "component",
          "String",
          "from",
          "CircuitState",
          "to",
          "CircuitState"
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderSide",
        "file": "crates/infrastructure/src/panic_conditions.rs",
        "line": 139,
        "variants": [
          "Buy",
          "Sell"
        ],
        "visibility": "pub"
      },
      {
        "name": "PanicEvent",
        "file": "crates/infrastructure/src/panic_conditions.rs",
        "line": 746,
        "variants": [
          "SlippageDetected",
          "StalenessDetected",
          "SpreadBlowout",
          "APICascade",
          "PriceDivergence",
          "PanicTriggered",
          "PanicCleared"
        ],
        "visibility": "pub"
      },
      {
        "name": "AlertSeverity",
        "file": "crates/infrastructure/src/panic_conditions.rs",
        "line": 960,
        "variants": [
          "None",
          "Low",
          "Medium",
          "High",
          "Critical"
        ],
        "visibility": "pub"
      },
      {
        "name": "AlertSeverity",
        "file": "crates/infrastructure/src/alert_management.rs",
        "line": 31,
        "variants": [
          "Critical",
          "4",
          "Immediate",
          "action",
          "required",
          "1",
          "minute",
          "SLA",
          "High",
          "3",
          "Urgent",
          "action",
          "required",
          "5",
          "minutes",
          "SLA",
          "Medium",
          "2",
          "Action",
          "required",
          "30",
          "minutes",
          "SLA",
          "Low",
          "1",
          "Informational",
          "4",
          "hours",
          "SLA",
          "Info",
          "0",
          "No",
          "action",
          "required",
          "logging",
          "only"
        ],
        "visibility": "pub"
      },
      {
        "name": "AlertCategory",
        "file": "crates/infrastructure/src/alert_management.rs",
        "line": 75,
        "variants": [
          "Risk",
          "Management",
          "RiskLimit",
          "Position",
          "exposure",
          "limits",
          "MarginCall",
          "Margin",
          "requirements",
          "Liquidation",
          "Forced",
          "liquidation",
          "risk",
          "Drawdown",
          "Maximum",
          "drawdown",
          "breach",
          "Market",
          "Conditions",
          "Volatility",
          "Abnormal",
          "volatility",
          "Liquidity",
          "Low",
          "liquidity",
          "warning",
          "Slippage",
          "Excessive",
          "slippage",
          "Spread",
          "Wide",
          "spreads",
          "System",
          "Health",
          "Performance",
          "Latency",
          "throughput",
          "issues",
          "Memory",
          "Memory",
          "pressure",
          "Connection",
          "Network",
          "exchange",
          "connectivity",
          "DataQuality",
          "Data",
          "feed",
          "issues",
          "Trading",
          "Operations",
          "OrderExecution",
          "Order",
          "failures",
          "PositionMismatch",
          "Position",
          "reconciliation",
          "PnL",
          "P",
          "L",
          "anomalies",
          "Strategy",
          "Strategy",
          "performance",
          "Compliance",
          "Audit",
          "Compliance",
          "Regulatory",
          "violations",
          "Audit",
          "Audit",
          "trail",
          "issues",
          "Security",
          "Security",
          "breaches",
          "Manual",
          "Manual",
          "intervention",
          "required"
        ],
        "visibility": "pub"
      },
      {
        "name": "AlertCondition",
        "file": "crates/infrastructure/src/alert_management.rs",
        "line": 323,
        "variants": [
          "Threshold",
          "metric",
          "String",
          "operator",
          "ComparisonOperator",
          "value",
          "f64",
          "duration_seconds",
          "Option",
          "u64"
        ],
        "visibility": "pub"
      },
      {
        "name": "ComparisonOperator",
        "file": "crates/infrastructure/src/alert_management.rs",
        "line": 351,
        "variants": [
          "GreaterThan",
          "LessThan",
          "GreaterOrEqual",
          "LessOrEqual",
          "Equal",
          "NotEqual"
        ],
        "visibility": "pub"
      },
      {
        "name": "LogicalOperator",
        "file": "crates/infrastructure/src/alert_management.rs",
        "line": 361,
        "variants": [
          "And",
          "Or",
          "Not"
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderSide",
        "file": "crates/infrastructure/src/object_pools.rs",
        "line": 31,
        "variants": [
          "default",
          "Buy",
          "Sell"
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderType",
        "file": "crates/infrastructure/src/object_pools.rs",
        "line": 38,
        "variants": [
          "default",
          "Market",
          "Limit",
          "StopLoss",
          "TakeProfit",
          "PostOnly"
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderStatus",
        "file": "crates/infrastructure/src/object_pools.rs",
        "line": 48,
        "variants": [
          "default",
          "Pending",
          "Submitted",
          "PartiallyFilled",
          "Filled",
          "Cancelled",
          "Rejected"
        ],
        "visibility": "pub"
      },
      {
        "name": "SignalType",
        "file": "crates/infrastructure/src/object_pools.rs",
        "line": 70,
        "variants": [
          "default",
          "Long",
          "Short",
          "Neutral",
          "ClosePosition"
        ],
        "visibility": "pub"
      },
      {
        "name": "Environment",
        "file": "crates/infrastructure/src/deployment_config.rs",
        "line": 30,
        "variants": [
          "Local",
          "development",
          "environment",
          "Development",
          "Testing",
          "QA",
          "environment",
          "Testing",
          "Staging",
          "environment",
          "production",
          "like",
          "Staging",
          "Production",
          "environment",
          "Production"
        ],
        "visibility": "pub"
      },
      {
        "name": "EmergencyReason",
        "file": "crates/infrastructure/src/emergency_coordinator.rs",
        "line": 38,
        "variants": [
          "ManualTrigger",
          "User",
          "initiated",
          "MaxDrawdownExceeded",
          "Portfolio",
          "drawdown",
          "limit",
          "hit",
          "SystemFailure",
          "Critical",
          "component",
          "failure",
          "ExchangeDisconnection",
          "Lost",
          "connection",
          "to",
          "all",
          "exchanges",
          "DataFeedLoss",
          "Lost",
          "market",
          "data",
          "RiskLimitBreach",
          "Major",
          "risk",
          "limit",
          "violated",
          "CircuitBreakerCascade",
          "Multiple",
          "circuit",
          "breakers",
          "tripped",
          "UnauthorizedAccess",
          "Security",
          "breach",
          "detected",
          "MemoryExhaustion",
          "System",
          "running",
          "out",
          "of",
          "memory",
          "LatencySpike",
          "Extreme",
          "latency",
          "detected"
        ],
        "visibility": "pub"
      },
      {
        "name": "EmergencyState",
        "file": "crates/infrastructure/src/emergency_coordinator.rs",
        "line": 53,
        "variants": [
          "Normal",
          "System",
          "operating",
          "normally",
          "Warning",
          "Warning",
          "conditions",
          "detected",
          "Emergency",
          "Emergency",
          "shutdown",
          "initiated",
          "Liquidating",
          "Liquidating",
          "all",
          "positions",
          "Halted",
          "System",
          "fully",
          "halted"
        ],
        "visibility": "pub"
      },
      {
        "name": "ControlMode",
        "file": "crates/infrastructure/src/software_control_modes.rs",
        "line": 33,
        "variants": [
          "Manual",
          "mode",
          "Human",
          "operator",
          "has",
          "full",
          "control",
          "No",
          "automated",
          "trading",
          "All",
          "actions",
          "require",
          "explicit",
          "approval",
          "Used",
          "for",
          "system",
          "setup",
          "and",
          "debugging",
          "Manual",
          "Semi",
          "Automatic",
          "mode",
          "Human",
          "supervised",
          "automation",
          "Automated",
          "analysis",
          "and",
          "signal",
          "generation",
          "Manual",
          "approval",
          "required",
          "for",
          "order",
          "execution",
          "Risk",
          "limits",
          "strictly",
          "enforced",
          "SemiAuto",
          "Full",
          "Automatic",
          "mode",
          "Autonomous",
          "trading",
          "Complete",
          "automation",
          "with",
          "all",
          "features",
          "ML",
          "models",
          "active",
          "Dynamic",
          "parameter",
          "adjustment",
          "Maximum",
          "profit",
          "extraction",
          "FullAuto",
          "Emergency",
          "mode",
          "Risk",
          "mitigation",
          "only",
          "No",
          "new",
          "positions",
          "Close",
          "existing",
          "positions",
          "safely",
          "Preserve",
          "capital",
          "Emergency"
        ],
        "visibility": "pub"
      },
      {
        "name": "ControlModeEvent",
        "file": "crates/infrastructure/src/software_control_modes.rs",
        "line": 329,
        "variants": [
          "ModeChanged",
          "TransitionDenied",
          "EmergencyActivated",
          "SystemHealthChanged"
        ],
        "visibility": "pub"
      },
      {
        "name": "MonitoringLevel",
        "file": "crates/infrastructure/src/software_control_modes.rs",
        "line": 715,
        "variants": [
          "Basic",
          "Enhanced",
          "Full",
          "Critical"
        ],
        "visibility": "pub"
      },
      {
        "name": "StrategyComplexity",
        "file": "crates/infrastructure/src/software_control_modes.rs",
        "line": 723,
        "variants": [
          "None",
          "Simple",
          "Moderate",
          "Advanced"
        ],
        "visibility": "pub"
      },
      {
        "name": "AnalysisDepth",
        "file": "crates/infrastructure/src/software_control_modes.rs",
        "line": 731,
        "variants": [
          "Minimal",
          "Basic",
          "Standard",
          "Deep"
        ],
        "visibility": "pub"
      },
      {
        "name": "StoragePriority",
        "file": "crates/infrastructure/src/software_control_modes.rs",
        "line": 764,
        "variants": [
          "Normal",
          "Critical"
        ],
        "visibility": "pub"
      },
      {
        "name": "Timeframe",
        "file": "crates/infrastructure/src/historical_charts.rs",
        "line": 27,
        "variants": [
          "M1",
          "1",
          "minute",
          "Scalping",
          "M5",
          "5",
          "minutes",
          "Short",
          "term",
          "M15",
          "15",
          "minutes",
          "Intraday",
          "M30",
          "30",
          "minutes",
          "Intraday",
          "H1",
          "1",
          "hour",
          "Swing",
          "H4",
          "4",
          "hours",
          "Swing",
          "D1",
          "1",
          "day",
          "Position",
          "W1",
          "1",
          "week",
          "Long",
          "term",
          "MN1",
          "1",
          "month",
          "Strategic"
        ],
        "visibility": "pub"
      },
      {
        "name": "UserRole",
        "file": "crates/infrastructure/src/external_control.rs",
        "line": 127,
        "variants": [
          "Read",
          "only",
          "access",
          "Observer",
          "Can",
          "change",
          "modes",
          "except",
          "Emergency",
          "Operator",
          "Full",
          "control",
          "including",
          "Emergency",
          "Admin",
          "System",
          "level",
          "access",
          "internal",
          "only",
          "System"
        ],
        "visibility": "pub"
      },
      {
        "name": "Permission",
        "file": "crates/infrastructure/src/external_control.rs",
        "line": 143,
        "variants": [
          "ReadMode",
          "ChangeMode",
          "EmergencyControl",
          "ViewHistory",
          "ViewMetrics",
          "ConfigureSystem"
        ],
        "visibility": "pub"
      },
      {
        "name": "ExchangeCircuitState",
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 309,
        "variants": [
          "Healthy",
          "Degraded",
          "since",
          "Instant",
          "errors",
          "u32"
        ],
        "visibility": "private"
      },
      {
        "name": "TradingAction",
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 1129,
        "variants": [
          "Buy",
          "Sell",
          "Hold"
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketRegime",
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 1143,
        "variants": [
          "Normal",
          "Trending",
          "RangeBound",
          "Volatile",
          "Crisis"
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderType",
        "file": "crates/infrastructure/src/circuit_breaker_layer_integration.rs",
        "line": 1161,
        "variants": [
          "Market",
          "Limit",
          "Stop"
        ],
        "visibility": "pub"
      },
      {
        "name": "AuditEventType",
        "file": "crates/infrastructure/src/audit_system.rs",
        "line": 36,
        "variants": [
          "Trading",
          "Events",
          "OrderPlaced",
          "OrderModified",
          "OrderCancelled",
          "OrderExecuted",
          "OrderRejected",
          "Position",
          "Events",
          "PositionOpened",
          "PositionClosed",
          "PositionModified",
          "StopLossTriggered",
          "TakeProfitTriggered",
          "Liquidation",
          "Risk",
          "Events",
          "RiskLimitBreached",
          "MarginCall",
          "DrawdownAlert",
          "EmergencyStop",
          "CircuitBreakerTrip",
          "System",
          "Events",
          "SystemStart",
          "SystemStop",
          "ConfigChange",
          "StrategySwitch",
          "ManualIntervention",
          "Market",
          "Events",
          "DataFeedLoss",
          "DataFeedRestore",
          "ExchangeDisconnect",
          "ExchangeReconnect",
          "AnomalyDetected",
          "Compliance",
          "Events",
          "ComplianceViolation",
          "AuditQuery",
          "ReportGenerated",
          "DataExport",
          "Security",
          "Events",
          "AuthenticationFailure",
          "UnauthorizedAccess",
          "SuspiciousActivity",
          "IntegrityViolation"
        ],
        "visibility": "pub"
      },
      {
        "name": "AuditSeverity",
        "file": "crates/infrastructure/src/audit_system.rs",
        "line": 121,
        "variants": [
          "Info",
          "0",
          "Low",
          "1",
          "Medium",
          "2",
          "High",
          "3",
          "Critical",
          "4"
        ],
        "visibility": "pub"
      },
      {
        "name": "ReportType",
        "file": "crates/infrastructure/src/audit_system.rs",
        "line": 549,
        "variants": [
          "DailyTrading",
          "RiskExposure",
          "OrderAudit",
          "BestExecution",
          "MarketAbuse",
          "SystemIncident",
          "ComplianceSummary",
          "Custom"
        ],
        "visibility": "pub"
      },
      {
        "name": "InterventionSeverity",
        "file": "crates/infrastructure/src/audit_system.rs",
        "line": 834,
        "variants": [
          "Low",
          "Single",
          "intervention",
          "Medium",
          "2",
          "3",
          "interventions",
          "High",
          "4",
          "5",
          "interventions",
          "Critical",
          "5",
          "interventions"
        ],
        "visibility": "pub"
      },
      {
        "name": "RetryError",
        "file": "crates/infrastructure/src/retry_logic.rs",
        "line": 22,
        "variants": [
          "error",
          "Maximum",
          "retries",
          "max"
        ],
        "visibility": "pub"
      },
      {
        "name": "CircuitState",
        "file": "crates/infrastructure/src/retry_logic.rs",
        "line": 151,
        "variants": [
          "Closed",
          "Normal",
          "operation",
          "Open",
          "Failing",
          "reject",
          "requests",
          "HalfOpen",
          "Testing",
          "if",
          "recovered"
        ],
        "visibility": "private"
      },
      {
        "name": "TestError",
        "file": "crates/infrastructure/src/retry_logic.rs",
        "line": 447,
        "variants": [
          "error",
          "Transient",
          "error",
          "Permanent",
          "error",
          "RateLimit"
        ],
        "visibility": "private"
      },
      {
        "name": "OrderSide",
        "file": "crates/infrastructure/src/perf_manifest.rs",
        "line": 596,
        "variants": [
          "Buy",
          "Sell"
        ],
        "visibility": "private"
      },
      {
        "name": "OrderType",
        "file": "crates/infrastructure/src/perf_manifest.rs",
        "line": 599,
        "variants": [
          "Limit",
          "Market"
        ],
        "visibility": "private"
      },
      {
        "name": "StatisticalAnomaly",
        "file": "crates/infrastructure/src/statistical_circuit_breakers.rs",
        "line": 34,
        "variants": [
          "Sharpe",
          "ratio",
          "degradation",
          "below",
          "threshold",
          "SharpeDegradation",
          "Market",
          "regime",
          "change",
          "detected",
          "RegimeChange",
          "Abnormal",
          "volatility",
          "clustering",
          "VolatilityClustering",
          "Serial",
          "correlation",
          "breakdown",
          "CorrelationBreakdown",
          "Distribution",
          "tail",
          "risk",
          "increase",
          "TailRiskIncrease",
          "Liquidity",
          "evaporation",
          "LiquidityEvaporation",
          "Microstructure",
          "breakdown",
          "MicrostructureAnomaly",
          "Cross",
          "asset",
          "correlation",
          "spike",
          "CorrelationSpike"
        ],
        "visibility": "pub"
      },
      {
        "name": "StatisticalState",
        "file": "crates/infrastructure/src/statistical_circuit_breakers.rs",
        "line": 62,
        "variants": [
          "Normal",
          "market",
          "conditions",
          "Normal",
          "Warning",
          "anomalies",
          "detected",
          "but",
          "within",
          "tolerance",
          "Warning",
          "Critical",
          "significant",
          "anomalies",
          "consider",
          "reducing",
          "exposure",
          "Critical",
          "Tripped",
          "statistical",
          "evidence",
          "of",
          "market",
          "breakdown",
          "Tripped"
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketRegime",
        "file": "crates/infrastructure/src/statistical_circuit_breakers.rs",
        "line": 79,
        "variants": [
          "Low",
          "volatility",
          "trending",
          "market",
          "Trending",
          "Medium",
          "volatility",
          "mean",
          "reverting",
          "MeanReverting",
          "High",
          "volatility",
          "crisis",
          "stress",
          "Crisis",
          "Transitioning",
          "between",
          "regimes",
          "Transition"
        ],
        "visibility": "pub"
      },
      {
        "name": "SharpeTrend",
        "file": "crates/infrastructure/src/statistical_circuit_breakers.rs",
        "line": 276,
        "variants": [
          "Improving",
          "Stable",
          "Degrading",
          "Insufficient"
        ],
        "visibility": "pub"
      },
      {
        "name": "VolatilityRegime",
        "file": "crates/infrastructure/src/statistical_circuit_breakers.rs",
        "line": 632,
        "variants": [
          "VeryLow",
          "Low",
          "Normal",
          "High",
          "Extreme"
        ],
        "visibility": "pub"
      },
      {
        "name": "PositionSide",
        "file": "crates/infrastructure/src/monitoring_dashboards.rs",
        "line": 76,
        "variants": [
          "Long",
          "Short"
        ],
        "visibility": "pub"
      },
      {
        "name": "ConnectionStatus",
        "file": "crates/infrastructure/src/monitoring_dashboards.rs",
        "line": 120,
        "variants": [
          "Connected",
          "Disconnected",
          "Reconnecting",
          "Error"
        ],
        "visibility": "pub"
      },
      {
        "name": "BreakerStatus",
        "file": "crates/infrastructure/src/monitoring_dashboards.rs",
        "line": 128,
        "variants": [
          "Closed",
          "Open",
          "HalfOpen"
        ],
        "visibility": "pub"
      },
      {
        "name": "AlertLevel",
        "file": "crates/infrastructure/src/monitoring_dashboards.rs",
        "line": 164,
        "variants": [
          "Info",
          "Warning",
          "Error",
          "Critical"
        ],
        "visibility": "pub"
      },
      {
        "name": "AlertCategory",
        "file": "crates/infrastructure/src/monitoring_dashboards.rs",
        "line": 172,
        "variants": [
          "Risk",
          "System",
          "Trading",
          "Market",
          "Compliance"
        ],
        "visibility": "pub"
      },
      {
        "name": "DashboardMessage",
        "file": "crates/infrastructure/src/monitoring_dashboards.rs",
        "line": 188,
        "variants": [
          "P",
          "L",
          "update",
          "PnLUpdate",
          "Position",
          "update",
          "PositionUpdate",
          "Risk",
          "metrics",
          "update",
          "RiskUpdate",
          "System",
          "health",
          "update",
          "HealthUpdate",
          "Performance",
          "history",
          "update",
          "PerformanceUpdate",
          "New",
          "alert",
          "AlertNew",
          "Alert",
          "update",
          "AlertUpdate",
          "Heartbeat",
          "Heartbeat",
          "timestamp",
          "u64"
        ],
        "visibility": "pub"
      },
      {
        "name": "Exchange",
        "file": "crates/infrastructure/src/exchange_specific_safety.rs",
        "line": 36,
        "variants": [
          "Binance",
          "BinanceUS",
          "Kraken",
          "Coinbase",
          "OKX",
          "Bybit",
          "Bitfinex",
          "Gemini",
          "FTX",
          "Kept",
          "for",
          "historical",
          "data"
        ],
        "visibility": "pub"
      },
      {
        "name": "ExchangeFailureMode",
        "file": "crates/infrastructure/src/exchange_specific_safety.rs",
        "line": 101,
        "variants": [
          "API",
          "rate",
          "limit",
          "exceeded",
          "RateLimitExceeded",
          "Order",
          "rejected",
          "due",
          "to",
          "exchange",
          "rules",
          "OrderRejection",
          "Websocket",
          "disconnection",
          "WebsocketDisconnect",
          "Maintenance",
          "mode",
          "MaintenanceMode",
          "Degraded",
          "performance",
          "DegradedPerformance",
          "Account",
          "restrictions",
          "compliance",
          "AccountRestricted",
          "Insufficient",
          "balance",
          "InsufficientBalance",
          "Market",
          "halted",
          "MarketHalted",
          "Abnormal",
          "spread",
          "AbnormalSpread",
          "Order",
          "book",
          "imbalance",
          "OrderBookImbalance",
          "Withdrawal",
          "suspended",
          "WithdrawalSuspended",
          "IP",
          "banned",
          "IPBanned"
        ],
        "visibility": "pub"
      },
      {
        "name": "ExchangeHealthStatus",
        "file": "crates/infrastructure/src/exchange_specific_safety.rs",
        "line": 141,
        "variants": [
          "Fully",
          "operational",
          "Healthy",
          "Minor",
          "issues",
          "but",
          "tradeable",
          "Degraded",
          "Major",
          "issues",
          "reduce",
          "exposure",
          "Impaired",
          "Do",
          "not",
          "trade",
          "Failed"
        ],
        "visibility": "pub"
      },
      {
        "name": "StopCategory",
        "file": "crates/infrastructure/src/hardware_kill_switch.rs",
        "line": 37,
        "variants": [
          "Category",
          "0",
          "Immediate",
          "power",
          "removal",
          "uncontrolled",
          "stop",
          "Category0",
          "Category",
          "1",
          "Controlled",
          "stop",
          "then",
          "power",
          "removal",
          "Category1"
        ],
        "visibility": "pub"
      },
      {
        "name": "KillSwitchState",
        "file": "crates/infrastructure/src/hardware_kill_switch.rs",
        "line": 46,
        "variants": [
          "Normal",
          "operation",
          "all",
          "systems",
          "go",
          "Normal",
          "Warning",
          "state",
          "approaching",
          "limits",
          "Warning",
          "Emergency",
          "stop",
          "activated",
          "EmergencyStopped",
          "Resetting",
          "after",
          "emergency",
          "stop",
          "Resetting",
          "Tamper",
          "detected",
          "security",
          "breach",
          "TamperDetected"
        ],
        "visibility": "pub"
      },
      {
        "name": "PinMode",
        "file": "crates/infrastructure/src/hardware_kill_switch.rs",
        "line": 73,
        "variants": [
          "Input",
          "Output",
          "InputPullUp",
          "InputPullDown"
        ],
        "visibility": "pub"
      },
      {
        "name": "InterruptEdge",
        "file": "crates/infrastructure/src/hardware_kill_switch.rs",
        "line": 81,
        "variants": [
          "Rising",
          "Falling",
          "Both"
        ],
        "visibility": "pub"
      },
      {
        "name": "EmergencyEvent",
        "file": "crates/infrastructure/src/hardware_kill_switch.rs",
        "line": 122,
        "variants": [
          "Emergency",
          "stop",
          "activated",
          "Activated",
          "timestamp",
          "Instant",
          "source",
          "ActivationSource"
        ],
        "visibility": "pub"
      },
      {
        "name": "ActivationSource",
        "file": "crates/infrastructure/src/hardware_kill_switch.rs",
        "line": 145,
        "variants": [
          "PhysicalButton",
          "Software",
          "Watchdog",
          "RemoteCommand"
        ],
        "visibility": "pub"
      },
      {
        "name": "TamperSeverity",
        "file": "crates/infrastructure/src/hardware_kill_switch.rs",
        "line": 153,
        "variants": [
          "Low",
          "Medium",
          "High",
          "Critical"
        ],
        "visibility": "pub"
      },
      {
        "name": "StreamMessage",
        "file": "crates/infrastructure/src/stream_processing/mod.rs",
        "line": 63,
        "variants": [
          "Market",
          "data",
          "Casey",
          "MarketTick",
          "timestamp",
          "u64",
          "symbol",
          "String",
          "bid",
          "f64",
          "ask",
          "f64",
          "volume",
          "f64"
        ],
        "visibility": "pub"
      },
      {
        "name": "SignalAction",
        "file": "crates/infrastructure/src/stream_processing/mod.rs",
        "line": 110,
        "variants": [
          "Buy",
          "Sell",
          "Hold",
          "ClosePosition"
        ],
        "visibility": "pub"
      },
      {
        "name": "RiskEventType",
        "file": "crates/infrastructure/src/stream_processing/mod.rs",
        "line": 119,
        "variants": [
          "PositionLimitExceeded",
          "DrawdownThreshold",
          "CorrelationBreach",
          "VaRLimit",
          "CircuitBreakerTripped"
        ],
        "visibility": "pub"
      },
      {
        "name": "RiskSeverity",
        "file": "crates/infrastructure/src/stream_processing/mod.rs",
        "line": 129,
        "variants": [
          "Low",
          "Medium",
          "High",
          "Critical"
        ],
        "visibility": "pub"
      },
      {
        "name": "PoolType",
        "file": "crates/infrastructure/src/memory/metrics.rs",
        "line": 245,
        "variants": [
          "Order",
          "Signal",
          "Tick"
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderSide",
        "file": "crates/infrastructure/src/memory/pools_upgraded.rs",
        "line": 312,
        "variants": [
          "default",
          "Buy",
          "Sell"
        ],
        "visibility": "pub"
      },
      {
        "name": "EventType",
        "file": "crates/infrastructure/src/memory/pools_upgraded.rs",
        "line": 319,
        "variants": [
          "default",
          "OrderPlaced",
          "OrderFilled",
          "OrderCancelled",
          "SignalGenerated",
          "RiskAlert"
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderSide",
        "file": "crates/infrastructure/src/memory/safe_pools.rs",
        "line": 666,
        "variants": [
          "Buy",
          "Sell"
        ],
        "visibility": "pub"
      },
      {
        "name": "SignalType",
        "file": "crates/infrastructure/src/memory/safe_pools.rs",
        "line": 698,
        "variants": [
          "Buy",
          "Sell",
          "Hold"
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderSide",
        "file": "crates/infrastructure/src/memory/pools.rs",
        "line": 56,
        "variants": [
          "Buy",
          "Sell"
        ],
        "visibility": "pub"
      },
      {
        "name": "SignalType",
        "file": "crates/infrastructure/src/memory/pools.rs",
        "line": 72,
        "variants": [
          "Buy",
          "Sell",
          "Hold"
        ],
        "visibility": "pub"
      },
      {
        "name": "TradingTier",
        "file": "crates/trading_engine/src/fees_slippage.rs",
        "line": 18,
        "variants": [
          "Tier1",
          "volume_30d",
          "Decimal"
        ],
        "visibility": "pub"
      },
      {
        "name": "Side",
        "file": "crates/trading_engine/src/fees_slippage.rs",
        "line": 387,
        "variants": [
          "Buy",
          "Sell"
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderType",
        "file": "crates/trading_engine/src/fees_slippage.rs",
        "line": 393,
        "variants": [
          "Market",
          "Limit",
          "PostOnly"
        ],
        "visibility": "pub"
      },
      {
        "name": "SpecialProgram",
        "file": "crates/trading_engine/src/fee_optimization.rs",
        "line": 55,
        "variants": [
          "MarketMakerProgram",
          "requirements",
          "MarketMakerRequirements",
          "maker_rebate_bps",
          "i32",
          "taker_fee_bps",
          "i32"
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderType",
        "file": "crates/trading_engine/src/fee_optimization.rs",
        "line": 117,
        "variants": [
          "Maker",
          "Taker"
        ],
        "visibility": "pub"
      },
      {
        "name": "OptimizationStrategy",
        "file": "crates/trading_engine/src/fee_optimization.rs",
        "line": 124,
        "variants": [
          "MinimizeFees",
          "Absolute",
          "lowest",
          "fees",
          "MaximizeRebates",
          "Focus",
          "on",
          "rebates",
          "BalanceSpeedAndCost",
          "Balance",
          "execution",
          "speed",
          "vs",
          "cost",
          "QualifyForNextTier",
          "Trade",
          "to",
          "reach",
          "better",
          "tier",
          "MaintainMarketMaker",
          "Maintain",
          "MM",
          "status"
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderUrgency",
        "file": "crates/trading_engine/src/fee_optimization.rs",
        "line": 706,
        "variants": [
          "Immediate",
          "Must",
          "execute",
          "now",
          "Normal",
          "Standard",
          "execution",
          "Patient",
          "Can",
          "wait",
          "for",
          "better",
          "price"
        ],
        "visibility": "pub"
      },
      {
        "name": "PositionSide",
        "file": "crates/trading_engine/src/liquidation_engine.rs",
        "line": 37,
        "variants": [
          "Long",
          "Short"
        ],
        "visibility": "pub"
      },
      {
        "name": "LiquidationUrgency",
        "file": "crates/trading_engine/src/liquidation_engine.rs",
        "line": 44,
        "variants": [
          "Normal",
          "Orderly",
          "unwinding",
          "Elevated",
          "Faster",
          "execution",
          "needed",
          "Critical",
          "Risk",
          "limits",
          "breached",
          "Emergency",
          "Immediate",
          "liquidation",
          "required"
        ],
        "visibility": "pub"
      },
      {
        "name": "LiquidationStrategy",
        "file": "crates/trading_engine/src/liquidation_engine.rs",
        "line": 53,
        "variants": [
          "Market",
          "Immediate",
          "market",
          "orders",
          "TWAP",
          "Time",
          "weighted",
          "average",
          "price",
          "VWAP",
          "Volume",
          "weighted",
          "average",
          "price",
          "Iceberg",
          "Hidden",
          "quantity",
          "orders",
          "Adaptive",
          "Adjust",
          "based",
          "on",
          "market",
          "conditions",
          "MinimalImpact",
          "Minimize",
          "market",
          "impact"
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderSide",
        "file": "crates/trading_engine/src/liquidation_engine.rs",
        "line": 79,
        "variants": [
          "Buy",
          "Sell"
        ],
        "visibility": "pub"
      },
      {
        "name": "SliceStatus",
        "file": "crates/trading_engine/src/liquidation_engine.rs",
        "line": 97,
        "variants": [
          "Pending",
          "Executing",
          "PartiallyFilled",
          "Filled",
          "Failed"
        ],
        "visibility": "pub"
      },
      {
        "name": "LiquidationStatus",
        "file": "crates/trading_engine/src/liquidation_engine.rs",
        "line": 106,
        "variants": [
          "Planning",
          "Executing",
          "PartiallyComplete",
          "Complete",
          "Failed"
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderType",
        "file": "crates/trading_engine/src/liquidation_engine.rs",
        "line": 168,
        "variants": [
          "Market",
          "Limit",
          "StopLoss"
        ],
        "visibility": "pub"
      },
      {
        "name": "TimeInForce",
        "file": "crates/trading_engine/src/liquidation_engine.rs",
        "line": 175,
        "variants": [
          "IOC",
          "Immediate",
          "or",
          "cancel",
          "FOK",
          "Fill",
          "or",
          "kill",
          "GTC",
          "Good",
          "till",
          "canceled"
        ],
        "visibility": "pub"
      },
      {
        "name": "LiquidationEvent",
        "file": "crates/trading_engine/src/liquidation_engine.rs",
        "line": 183,
        "variants": [
          "Started",
          "position_id",
          "String",
          "urgency",
          "LiquidationUrgency"
        ],
        "visibility": "pub"
      },
      {
        "name": "OCOLinkType",
        "file": "crates/trading_engine/src/orders/oco.rs",
        "line": 28,
        "variants": [
          "Standard",
          "OCO",
          "either",
          "order",
          "fills",
          "other",
          "cancels",
          "Standard",
          "Bracket",
          "entry",
          "order",
          "with",
          "stop",
          "loss",
          "and",
          "take",
          "profit",
          "Bracket",
          "entry_filled",
          "bool",
          "stop_activated",
          "bool",
          "target_activated",
          "bool"
        ],
        "visibility": "pub"
      },
      {
        "name": "OCOStatus",
        "file": "crates/trading_engine/src/orders/oco.rs",
        "line": 49,
        "variants": [
          "Active",
          "PartiallyFilled",
          "Filled",
          "Cancelled",
          "Rejected",
          "Expired"
        ],
        "visibility": "pub"
      },
      {
        "name": "TimeInForce",
        "file": "crates/trading_engine/src/orders/oco.rs",
        "line": 70,
        "variants": [
          "GTC",
          "Good",
          "Till",
          "Cancelled",
          "IOC",
          "Immediate",
          "or",
          "Cancel",
          "FOK",
          "Fill",
          "or",
          "Kill",
          "GTD",
          "Good",
          "Till",
          "Date",
          "GTT",
          "Good",
          "Till",
          "Time"
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderSide",
        "file": "crates/trading_engine/src/orders/oco.rs",
        "line": 96,
        "variants": [
          "Buy",
          "Sell"
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderType",
        "file": "crates/trading_engine/src/orders/oco.rs",
        "line": 102,
        "variants": [
          "Market",
          "Limit",
          "Stop",
          "StopLimit",
          "TrailingStop",
          "trail_amount",
          "f64"
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderStatus",
        "file": "crates/trading_engine/src/orders/oco.rs",
        "line": 112,
        "variants": [
          "Pending",
          "New",
          "PartiallyFilled",
          "Filled",
          "Cancelled",
          "Rejected",
          "Expired"
        ],
        "visibility": "pub"
      },
      {
        "name": "OCOError",
        "file": "crates/trading_engine/src/orders/oco.rs",
        "line": 528,
        "variants": [
          "error",
          "Risk",
          "validation",
          "failed",
          "0"
        ],
        "visibility": "pub"
      },
      {
        "name": "RiskError",
        "file": "crates/trading_engine/src/orders/oco.rs",
        "line": 546,
        "variants": [
          "error",
          "PositionLimitExceeded",
          "error",
          "InsufficientMargin",
          "error",
          "RiskLimitExceeded"
        ],
        "visibility": "pub"
      },
      {
        "name": "ExchangeError",
        "file": "crates/trading_engine/src/orders/oco.rs",
        "line": 558,
        "variants": [
          "error",
          "ConnectionError",
          "error",
          "OrderRejected",
          "error",
          "InvalidSymbol"
        ],
        "visibility": "pub"
      },
      {
        "name": "SagaState",
        "file": "crates/trading_engine/src/transactions/saga.rs",
        "line": 21,
        "variants": [
          "Saga",
          "not",
          "started",
          "Pending",
          "Saga",
          "is",
          "executing",
          "forward",
          "Running",
          "Saga",
          "completed",
          "successfully",
          "Completed",
          "Saga",
          "failed",
          "and",
          "compensating",
          "Compensating",
          "Saga",
          "fully",
          "compensated",
          "Compensated",
          "Saga",
          "in",
          "inconsistent",
          "state",
          "Aborted",
          "reason",
          "String"
        ],
        "visibility": "pub"
      },
      {
        "name": "StepResult",
        "file": "crates/trading_engine/src/transactions/saga.rs",
        "line": 38,
        "variants": [
          "Step",
          "succeeded",
          "continue",
          "to",
          "next",
          "Success",
          "Step",
          "failed",
          "trigger",
          "compensation",
          "Failure",
          "Step",
          "requires",
          "retry",
          "Retry",
          "Step",
          "skipped",
          "conditional",
          "Skipped"
        ],
        "visibility": "pub"
      },
      {
        "name": "SagaEvent",
        "file": "crates/trading_engine/src/transactions/saga.rs",
        "line": 336,
        "variants": [
          "Started",
          "StepCompleted",
          "StepFailed",
          "Completed",
          "Compensated",
          "Aborted"
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderStatus",
        "file": "crates/trading_engine/src/transactions/compensator.rs",
        "line": 379,
        "variants": [
          "Open",
          "PartiallyFilled",
          "filled_quantity",
          "Decimal",
          "remaining",
          "Decimal"
        ],
        "visibility": "pub"
      },
      {
        "name": "TransactionType",
        "file": "crates/trading_engine/src/transactions/mod.rs",
        "line": 35,
        "variants": [
          "OrderPlacement",
          "order_id",
          "Uuid",
          "symbol",
          "String",
          "side",
          "OrderSide",
          "quantity",
          "Decimal",
          "price",
          "Option",
          "Decimal"
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderSide",
        "file": "crates/trading_engine/src/transactions/mod.rs",
        "line": 74,
        "variants": [
          "Buy",
          "Sell"
        ],
        "visibility": "pub"
      },
      {
        "name": "FeeType",
        "file": "crates/trading_engine/src/transactions/mod.rs",
        "line": 80,
        "variants": [
          "Maker",
          "Taker",
          "Funding",
          "Withdrawal"
        ],
        "visibility": "pub"
      },
      {
        "name": "TransactionStatus",
        "file": "crates/trading_engine/src/transactions/mod.rs",
        "line": 89,
        "variants": [
          "Transaction",
          "has",
          "been",
          "initiated",
          "but",
          "not",
          "yet",
          "started",
          "Pending",
          "Transaction",
          "is",
          "currently",
          "being",
          "processed",
          "InProgress",
          "Transaction",
          "completed",
          "successfully",
          "Committed",
          "Transaction",
          "failed",
          "and",
          "needs",
          "compensation",
          "Failed",
          "error",
          "String"
        ],
        "visibility": "pub"
      },
      {
        "name": "TransactionEvent",
        "file": "crates/trading_engine/src/transactions/mod.rs",
        "line": 204,
        "variants": [
          "Started",
          "Committed",
          "Failed",
          "Compensating",
          "Compensated"
        ],
        "visibility": "pub"
      },
      {
        "name": "CircuitState",
        "file": "crates/trading_engine/src/transactions/retry.rs",
        "line": 109,
        "variants": [
          "Circuit",
          "is",
          "closed",
          "requests",
          "flow",
          "normally",
          "Closed",
          "Circuit",
          "is",
          "open",
          "requests",
          "are",
          "rejected",
          "Open",
          "Circuit",
          "is",
          "half",
          "open",
          "limited",
          "requests",
          "for",
          "testing",
          "HalfOpen"
        ],
        "visibility": "pub"
      },
      {
        "name": "ViolationType",
        "file": "crates/feature_store/src/point_in_time.rs",
        "line": 422,
        "variants": [
          "FutureLeak",
          "Feature",
          "from",
          "future",
          "InsufficientLag",
          "Feature",
          "too",
          "recent"
        ],
        "visibility": "pub"
      },
      {
        "name": "FeatureValue",
        "file": "crates/feature_store/src/lib.rs",
        "line": 361,
        "variants": [
          "Float",
          "Integer",
          "String",
          "Vector",
          "Tensor"
        ],
        "visibility": "pub"
      },
      {
        "name": "DriftType",
        "file": "crates/feature_store/src/drift_detection.rs",
        "line": 558,
        "variants": [
          "Gradual",
          "Slow",
          "change",
          "over",
          "time",
          "Sudden",
          "Abrupt",
          "change",
          "Outlier",
          "Individual",
          "outliers",
          "Distributional",
          "Shape",
          "change",
          "Statistical",
          "Statistical",
          "properties",
          "change"
        ],
        "visibility": "pub"
      },
      {
        "name": "Severity",
        "file": "crates/feature_store/src/drift_detection.rs",
        "line": 568,
        "variants": [
          "Low",
          "Medium",
          "High",
          "Critical"
        ],
        "visibility": "pub"
      },
      {
        "name": "ExperimentStatus",
        "file": "crates/feature_store/src/ab_testing.rs",
        "line": 459,
        "variants": [
          "Draft",
          "Running",
          "Paused",
          "Stopped",
          "Completed"
        ],
        "visibility": "pub"
      },
      {
        "name": "StopReason",
        "file": "crates/feature_store/src/ab_testing.rs",
        "line": 469,
        "variants": [
          "Manual",
          "Expired",
          "SignificantPositive",
          "SignificantNegative",
          "GuardrailViolation",
          "Error"
        ],
        "visibility": "pub"
      },
      {
        "name": "CompressionAlgorithm",
        "file": "crates/data_ingestion/src/sinks/parquet_writer.rs",
        "line": 98,
        "variants": [
          "Snappy",
          "Gzip",
          "Lz4",
          "Zstd",
          "Compression",
          "level",
          "1",
          "22",
          "Brotli",
          "Compression",
          "level",
          "0",
          "11"
        ],
        "visibility": "pub"
      },
      {
        "name": "PartitionStrategy",
        "file": "crates/data_ingestion/src/sinks/parquet_writer.rs",
        "line": 107,
        "variants": [
          "Daily",
          "Hourly",
          "HourlyWithExchange",
          "DailyWithSymbol"
        ],
        "visibility": "pub"
      },
      {
        "name": "CompressionType",
        "file": "crates/data_ingestion/src/sinks/clickhouse_sink.rs",
        "line": 85,
        "variants": [
          "None",
          "Lz4",
          "Lz4hc",
          "Zstd"
        ],
        "visibility": "pub"
      },
      {
        "name": "CandleInterval",
        "file": "crates/data_ingestion/src/aggregators/timescale_aggregator.rs",
        "line": 107,
        "variants": [
          "OneSecond",
          "FiveSeconds",
          "TenSeconds",
          "ThirtySeconds",
          "OneMinute",
          "FiveMinutes",
          "FifteenMinutes",
          "ThirtyMinutes",
          "OneHour",
          "FourHours",
          "OneDay",
          "OneWeek"
        ],
        "visibility": "pub"
      },
      {
        "name": "AggregateLevel",
        "file": "crates/data_ingestion/src/timescale/aggregates.rs",
        "line": 13,
        "variants": [
          "OneSecond",
          "OneMinute",
          "FiveMinutes",
          "FifteenMinutes",
          "OneHour",
          "FourHours",
          "OneDay"
        ],
        "visibility": "pub"
      },
      {
        "name": "TradeSide",
        "file": "crates/data_ingestion/src/timescale/mod.rs",
        "line": 144,
        "variants": [
          "Buy",
          "Sell",
          "Unknown"
        ],
        "visibility": "pub"
      },
      {
        "name": "SnapshotType",
        "file": "crates/data_ingestion/src/timescale/mod.rs",
        "line": 177,
        "variants": [
          "Full",
          "Delta"
        ],
        "visibility": "pub"
      },
      {
        "name": "VolatilityRegime",
        "file": "crates/data_ingestion/src/event_driven/adaptive_sampler.rs",
        "line": 26,
        "variants": [
          "VeryLow",
          "10",
          "annualized",
          "Low",
          "10",
          "20",
          "annualized",
          "Normal",
          "20",
          "40",
          "annualized",
          "High",
          "40",
          "80",
          "annualized",
          "Extreme",
          "80",
          "annualized",
          "Crisis",
          "Market",
          "stress",
          "crash",
          "conditions"
        ],
        "visibility": "pub"
      },
      {
        "name": "SamplingStrategy",
        "file": "crates/data_ingestion/src/event_driven/adaptive_sampler.rs",
        "line": 37,
        "variants": [
          "Fixed",
          "rate",
          "sampling",
          "Fixed",
          "interval_ms",
          "u64"
        ],
        "visibility": "pub"
      },
      {
        "name": "DispatchStrategy",
        "file": "crates/data_ingestion/src/event_driven/event_dispatcher.rs",
        "line": 7,
        "variants": [
          "RoundRobin",
          "Priority",
          "LoadBalanced"
        ],
        "visibility": "pub"
      },
      {
        "name": "Priority",
        "file": "crates/data_ingestion/src/event_driven/event_dispatcher.rs",
        "line": 16,
        "variants": [
          "Critical",
          "0",
          "High",
          "1",
          "Medium",
          "2",
          "Low",
          "3"
        ],
        "visibility": "pub"
      },
      {
        "name": "EventPriority",
        "file": "crates/data_ingestion/src/event_driven/processor.rs",
        "line": 31,
        "variants": [
          "Critical",
          "0",
          "Market",
          "halt",
          "circuit",
          "breaker",
          "High",
          "1",
          "Large",
          "trades",
          "microbursts",
          "Medium",
          "2",
          "Normal",
          "trades",
          "Low",
          "3",
          "Book",
          "updates",
          "Background",
          "4",
          "Statistics",
          "monitoring"
        ],
        "visibility": "pub"
      },
      {
        "name": "EventPayload",
        "file": "crates/data_ingestion/src/event_driven/processor.rs",
        "line": 63,
        "variants": [
          "Trade",
          "price",
          "Price",
          "quantity",
          "Quantity",
          "aggressor_side",
          "TradeSide"
        ],
        "visibility": "pub"
      },
      {
        "name": "TradeSide",
        "file": "crates/data_ingestion/src/event_driven/processor.rs",
        "line": 90,
        "variants": [
          "Buy",
          "Sell"
        ],
        "visibility": "pub"
      },
      {
        "name": "VolatilityModel",
        "file": "crates/data_ingestion/src/event_driven/volatility_tracker.rs",
        "line": 20,
        "variants": [
          "GARCH",
          "EWMA",
          "RealizedVol"
        ],
        "visibility": "pub"
      },
      {
        "name": "WindowType",
        "file": "crates/data_ingestion/src/event_driven/bucketed_aggregator.rs",
        "line": 25,
        "variants": [
          "Fixed",
          "time",
          "windows",
          "tumbling",
          "Tumbling",
          "Overlapping",
          "windows",
          "sliding",
          "Sliding",
          "Count",
          "based",
          "windows",
          "Count",
          "Volume",
          "based",
          "windows",
          "Volume",
          "Tick",
          "based",
          "windows",
          "Tick"
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketEvent",
        "file": "crates/data_ingestion/src/producers/redpanda_producer.rs",
        "line": 35,
        "variants": [
          "Trade",
          "exchange",
          "String",
          "symbol",
          "String",
          "price",
          "f64",
          "quantity",
          "f64",
          "side",
          "TradeSide",
          "timestamp_ns",
          "u64",
          "trade_id",
          "u64"
        ],
        "visibility": "pub"
      },
      {
        "name": "TradeSide",
        "file": "crates/data_ingestion/src/producers/redpanda_producer.rs",
        "line": 71,
        "variants": [
          "Buy",
          "Sell"
        ],
        "visibility": "pub"
      },
      {
        "name": "CompressionType",
        "file": "crates/data_ingestion/src/producers/redpanda_producer.rs",
        "line": 93,
        "variants": [
          "None",
          "Lz4",
          "Snappy",
          "Zstd",
          "Gzip"
        ],
        "visibility": "pub"
      },
      {
        "name": "AckLevel",
        "file": "crates/data_ingestion/src/producers/redpanda_producer.rs",
        "line": 102,
        "variants": [
          "None",
          "Fire",
          "and",
          "forget",
          "Leader",
          "Leader",
          "acknowledgment",
          "only",
          "All",
          "All",
          "in",
          "sync",
          "replicas"
        ],
        "visibility": "pub"
      },
      {
        "name": "SchemaAuth",
        "file": "crates/data_ingestion/src/schema/mod.rs",
        "line": 90,
        "variants": [
          "Basic",
          "username",
          "String",
          "password",
          "String"
        ],
        "visibility": "pub"
      },
      {
        "name": "CompatibilityLevel",
        "file": "crates/data_ingestion/src/schema/mod.rs",
        "line": 98,
        "variants": [
          "None",
          "Backward",
          "BackwardTransitive",
          "Forward",
          "ForwardTransitive",
          "Full",
          "FullTransitive"
        ],
        "visibility": "pub"
      },
      {
        "name": "SubjectStrategy",
        "file": "crates/data_ingestion/src/schema/mod.rs",
        "line": 124,
        "variants": [
          "TopicName",
          "RecordName",
          "TopicRecordName"
        ],
        "visibility": "pub"
      },
      {
        "name": "SchemaType",
        "file": "crates/data_ingestion/src/schema/mod.rs",
        "line": 132,
        "variants": [
          "Avro",
          "Json",
          "Protobuf"
        ],
        "visibility": "pub"
      },
      {
        "name": "SchemaChange",
        "file": "crates/data_ingestion/src/schema/mod.rs",
        "line": 171,
        "variants": [
          "FieldAdded",
          "name",
          "String",
          "default",
          "Option",
          "Value"
        ],
        "visibility": "pub"
      },
      {
        "name": "QualityLevel",
        "file": "crates/data_ingestion/src/data_quality/quality_scorer.rs",
        "line": 135,
        "variants": [
          "Excellent",
          "Good",
          "Acceptable",
          "Poor",
          "Unacceptable"
        ],
        "visibility": "pub"
      },
      {
        "name": "AlertChannel",
        "file": "crates/data_ingestion/src/data_quality/monitoring.rs",
        "line": 36,
        "variants": [
          "Log",
          "Webhook",
          "Email",
          "Slack"
        ],
        "visibility": "pub"
      },
      {
        "name": "AlertSeverity",
        "file": "crates/data_ingestion/src/data_quality/monitoring.rs",
        "line": 282,
        "variants": [
          "Low",
          "Medium",
          "High",
          "Critical"
        ],
        "visibility": "pub"
      },
      {
        "name": "GapSeverity",
        "file": "crates/data_ingestion/src/data_quality/kalman_filter.rs",
        "line": 463,
        "variants": [
          "Minor",
          "10",
          "seconds",
          "Moderate",
          "10",
          "60",
          "seconds",
          "Major",
          "1",
          "5",
          "minutes",
          "Critical",
          "5",
          "minutes",
          "Statistical",
          "Outlier",
          "detected"
        ],
        "visibility": "pub"
      },
      {
        "name": "DetectionAlgorithm",
        "file": "crates/data_ingestion/src/data_quality/change_detection.rs",
        "line": 32,
        "variants": [
          "CUSUM",
          "Cumulative",
          "sum",
          "PELT",
          "Pruned",
          "Exact",
          "Linear",
          "Time",
          "BayesianOnline"
        ],
        "visibility": "pub"
      },
      {
        "name": "ChangeType",
        "file": "crates/data_ingestion/src/data_quality/change_detection.rs",
        "line": 189,
        "variants": [
          "LevelShift",
          "VarianceChange",
          "DistributionChange",
          "TrendChange"
        ],
        "visibility": "pub"
      },
      {
        "name": "AnomalyType",
        "file": "crates/data_ingestion/src/data_quality/benford.rs",
        "line": 365,
        "variants": [
          "FirstDigit",
          "SecondDigit",
          "FirstTwoDigits",
          "Mantissa"
        ],
        "visibility": "pub"
      },
      {
        "name": "DataType",
        "file": "crates/data_ingestion/src/data_quality/mod.rs",
        "line": 472,
        "variants": [
          "Price",
          "Volume",
          "OrderBook",
          "Trade",
          "Quote",
          "AggregatedBar"
        ],
        "visibility": "pub"
      },
      {
        "name": "IssueSeverity",
        "file": "crates/data_ingestion/src/data_quality/mod.rs",
        "line": 504,
        "variants": [
          "Low",
          "Medium",
          "High",
          "Critical"
        ],
        "visibility": "pub"
      },
      {
        "name": "IssueCategory",
        "file": "crates/data_ingestion/src/data_quality/mod.rs",
        "line": 543,
        "variants": [
          "StatisticalAnomaly",
          "DataGap",
          "InconsistentData",
          "RegimeChange",
          "StaleData",
          "InvalidValue"
        ],
        "visibility": "pub"
      },
      {
        "name": "CorrectionType",
        "file": "crates/data_ingestion/src/data_quality/mod.rs",
        "line": 562,
        "variants": [
          "Backfill",
          "Interpolation",
          "SourceSwitch",
          "ValueAdjustment"
        ],
        "visibility": "pub"
      },
      {
        "name": "BackfillPriority",
        "file": "crates/data_ingestion/src/data_quality/backfill.rs",
        "line": 61,
        "variants": [
          "Critical",
          "Real",
          "time",
          "trading",
          "impacted",
          "High",
          "Recent",
          "data",
          "for",
          "analysis",
          "Medium",
          "Historical",
          "completeness",
          "Low",
          "Nice",
          "to",
          "have"
        ],
        "visibility": "pub"
      },
      {
        "name": "JobStatus",
        "file": "crates/data_ingestion/src/data_quality/backfill.rs",
        "line": 133,
        "variants": [
          "Pending",
          "Running",
          "Completed",
          "Failed",
          "Retrying",
          "Current",
          "retry",
          "attempt"
        ],
        "visibility": "pub"
      },
      {
        "name": "TradeSide",
        "file": "crates/data_ingestion/src/replay/slippage_model.rs",
        "line": 103,
        "variants": [
          "Buy",
          "Sell"
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketImpactModel",
        "file": "crates/data_ingestion/src/replay/slippage_model.rs",
        "line": 110,
        "variants": [
          "Linear",
          "impact",
          "I",
          "\u03b2",
          "Q",
          "Linear",
          "beta",
          "f64"
        ],
        "visibility": "pub"
      },
      {
        "name": "PlaybackSpeed",
        "file": "crates/data_ingestion/src/replay/playback_engine.rs",
        "line": 84,
        "variants": [
          "As",
          "fast",
          "as",
          "possible",
          "Maximum",
          "Real",
          "time",
          "speed",
          "Realtime",
          "Custom",
          "multiplier",
          "Custom",
          "Step",
          "through",
          "events",
          "manually",
          "Manual"
        ],
        "visibility": "pub"
      },
      {
        "name": "SimulationEvent",
        "file": "crates/data_ingestion/src/replay/playback_engine.rs",
        "line": 97,
        "variants": [
          "Order",
          "book",
          "update",
          "BookUpdate",
          "Trade",
          "execution",
          "Trade",
          "symbol",
          "Symbol",
          "price",
          "Price",
          "quantity",
          "Quantity",
          "side",
          "TradeSide",
          "timestamp",
          "DateTime",
          "Utc"
        ],
        "visibility": "pub"
      },
      {
        "name": "SignalUrgency",
        "file": "crates/data_ingestion/src/replay/playback_engine.rs",
        "line": 192,
        "variants": [
          "Low",
          "Medium",
          "High",
          "Critical"
        ],
        "visibility": "pub"
      },
      {
        "name": "SpecialProgram",
        "file": "crates/data_ingestion/src/replay/fee_calculator.rs",
        "line": 46,
        "variants": [
          "MarketMaker",
          "name",
          "String",
          "maker_rebate_bps",
          "f64",
          "min_quote_time_pct",
          "f64",
          "min_spread_bps",
          "f64"
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderType",
        "file": "crates/data_ingestion/src/replay/fee_calculator.rs",
        "line": 778,
        "variants": [
          "Market",
          "Limit",
          "LimitIOC",
          "PostOnly",
          "Mixed"
        ],
        "visibility": "pub"
      },
      {
        "name": "Side",
        "file": "crates/data_ingestion/src/replay/lob_simulator.rs",
        "line": 38,
        "variants": [
          "Bid",
          "Ask"
        ],
        "visibility": "pub"
      },
      {
        "name": "UpdateType",
        "file": "crates/data_ingestion/src/replay/lob_simulator.rs",
        "line": 45,
        "variants": [
          "New",
          "order",
          "added",
          "Add",
          "order_id",
          "u64",
          "side",
          "Side",
          "price",
          "Price",
          "quantity",
          "Quantity"
        ],
        "visibility": "pub"
      },
      {
        "name": "MicroburstType",
        "file": "crates/data_ingestion/src/replay/microburst_detector.rs",
        "line": 27,
        "variants": [
          "Sudden",
          "volume",
          "spike",
          "VolumeSpike",
          "normal_volume",
          "Quantity",
          "spike_volume",
          "Quantity",
          "duration_ms",
          "u64",
          "sigma_deviation",
          "f64"
        ],
        "visibility": "pub"
      },
      {
        "name": "StuffingPattern",
        "file": "crates/data_ingestion/src/replay/microburst_detector.rs",
        "line": 71,
        "variants": [
          "Sawtooth",
          "Rapid",
          "add",
          "cancel",
          "at",
          "same",
          "price",
          "Layering",
          "Multiple",
          "orders",
          "away",
          "from",
          "market",
          "Momentum",
          "Create",
          "false",
          "momentum",
          "signals",
          "Exploratory",
          "Test",
          "market",
          "response"
        ],
        "visibility": "pub"
      },
      {
        "name": "EventSeverity",
        "file": "crates/data_ingestion/src/replay/microburst_detector.rs",
        "line": 128,
        "variants": [
          "Low",
          "Normal",
          "market",
          "noise",
          "Medium",
          "Unusual",
          "but",
          "not",
          "dangerous",
          "High",
          "Significant",
          "market",
          "event",
          "Critical",
          "System",
          "threatening",
          "event"
        ],
        "visibility": "pub"
      },
      {
        "name": "DetectionMethod",
        "file": "crates/data_ingestion/src/replay/microburst_detector.rs",
        "line": 147,
        "variants": [
          "ZScore",
          "MAD",
          "Median",
          "Absolute",
          "Deviation",
          "EWMA",
          "Exponentially",
          "Weighted",
          "Moving",
          "Average",
          "JarqueBera",
          "KolmogorovSmirnov",
          "GrangerCausality",
          "MachineLearning"
        ],
        "visibility": "pub"
      },
      {
        "name": "DataSource",
        "file": "crates/data_ingestion/src/replay/historical_loader.rs",
        "line": 31,
        "variants": [
          "LOBSTER",
          "format",
          "academic",
          "standard",
          "LOBSTER",
          "orderbook_file",
          "PathBuf",
          "message_file",
          "PathBuf",
          "levels",
          "u32"
        ],
        "visibility": "pub"
      },
      {
        "name": "TardisDataType",
        "file": "crates/data_ingestion/src/replay/historical_loader.rs",
        "line": 81,
        "variants": [
          "BookSnapshot",
          "BookUpdate",
          "Trade",
          "Quote",
          "BookChange"
        ],
        "visibility": "pub"
      },
      {
        "name": "DatabentSchema",
        "file": "crates/data_ingestion/src/replay/historical_loader.rs",
        "line": 91,
        "variants": [
          "MBO",
          "Market",
          "by",
          "Order",
          "MBP1",
          "Market",
          "by",
          "Price",
          "top",
          "of",
          "book",
          "MBP10",
          "Market",
          "by",
          "Price",
          "10",
          "levels",
          "TBBO",
          "Top",
          "of",
          "book",
          "Trades"
        ],
        "visibility": "pub"
      },
      {
        "name": "BinaryFormat",
        "file": "crates/data_ingestion/src/replay/historical_loader.rs",
        "line": 101,
        "variants": [
          "FIX",
          "FAST",
          "SBE",
          "Simple",
          "Binary",
          "Encoding",
          "Protobuf",
          "MsgPack"
        ],
        "visibility": "pub"
      },
      {
        "name": "DataFormat",
        "file": "crates/data_ingestion/src/replay/historical_loader.rs",
        "line": 111,
        "variants": [
          "OrderBookUpdate",
          "Trade",
          "Quote",
          "BookSnapshot"
        ],
        "visibility": "pub"
      },
      {
        "name": "TickType",
        "file": "crates/data_ingestion/src/replay/historical_loader.rs",
        "line": 130,
        "variants": [
          "Trade",
          "Quote",
          "BookUpdate"
        ],
        "visibility": "pub"
      },
      {
        "name": "LOBSTERMessageType",
        "file": "crates/data_ingestion/src/replay/historical_loader.rs",
        "line": 159,
        "variants": [
          "NewLimitOrder",
          "1",
          "CancellationPartial",
          "2",
          "CancellationTotal",
          "3",
          "ExecutionVisible",
          "4",
          "ExecutionHidden",
          "5",
          "CrossTrade",
          "6",
          "TradingHalt",
          "7"
        ],
        "visibility": "private"
      },
      {
        "name": "ValidationLevel",
        "file": "crates/data_ingestion/tests/integration_test.rs",
        "line": 125,
        "variants": [
          "Basic",
          "Just",
          "throughput",
          "Standard",
          "Throughput",
          "latency",
          "Full",
          "Everything",
          "including",
          "data",
          "integrity"
        ],
        "visibility": "private"
      },
      {
        "name": "BackpressurePolicy",
        "file": "infrastructure/src/backpressure.rs",
        "line": 14,
        "variants": [
          "Drop",
          "new",
          "messages",
          "when",
          "queue",
          "is",
          "full",
          "DropNewest",
          "Drop",
          "oldest",
          "messages",
          "when",
          "queue",
          "is",
          "full",
          "DropOldest",
          "Block",
          "producer",
          "until",
          "space",
          "available",
          "BlockProducer",
          "timeout",
          "Option",
          "Duration"
        ],
        "visibility": "pub"
      },
      {
        "name": "BackpressureResult",
        "file": "infrastructure/src/backpressure.rs",
        "line": 282,
        "variants": [
          "Accept",
          "the",
          "message",
          "Accept",
          "Accept",
          "with",
          "semaphore",
          "permit",
          "AcceptWithPermit",
          "Drop",
          "the",
          "new",
          "message",
          "Drop",
          "Drop",
          "oldest",
          "message",
          "to",
          "make",
          "room",
          "DropOldest",
          "Reject",
          "with",
          "error",
          "message",
          "Reject",
          "Throttle",
          "for",
          "specified",
          "duration",
          "Throttle"
        ],
        "visibility": "pub"
      },
      {
        "name": "GlobalAction",
        "file": "infrastructure/src/backpressure.rs",
        "line": 366,
        "variants": [
          "Normal",
          "SlowDown",
          "Fraction",
          "of",
          "normal",
          "rate",
          "EmergencyStop"
        ],
        "visibility": "pub"
      },
      {
        "name": "StpPolicy",
        "file": "adapters/outbound/exchanges/bounded_idempotency.rs",
        "line": 266,
        "variants": [
          "Cancel",
          "the",
          "newer",
          "order",
          "CancelNew",
          "Cancel",
          "the",
          "resting",
          "order",
          "CancelResting",
          "Cancel",
          "both",
          "orders",
          "CancelBoth",
          "Decrement",
          "and",
          "cancel",
          "DecrementBoth"
        ],
        "visibility": "pub"
      },
      {
        "name": "StpResult",
        "file": "adapters/outbound/exchanges/bounded_idempotency.rs",
        "line": 348,
        "variants": [
          "NoSelfTrade",
          "CancelNew",
          "CancelResting",
          "CancelBoth",
          "new",
          "OrderId",
          "resting",
          "OrderId"
        ],
        "visibility": "pub"
      },
      {
        "name": "SymbolMessage",
        "file": "adapters/outbound/exchanges/symbol_actor.rs",
        "line": 20,
        "variants": [
          "PlaceOrder",
          "order",
          "Order",
          "client_order_id",
          "String",
          "response",
          "oneshot",
          "Sender",
          "Result",
          "String"
        ],
        "visibility": "pub"
      },
      {
        "name": "SymbolFilter",
        "file": "adapters/outbound/exchanges/binance_real.rs",
        "line": 130,
        "variants": [
          "serde",
          "PriceFilter",
          "serde",
          "min_price",
          "String",
          "serde",
          "max_price",
          "String",
          "serde",
          "tick_size",
          "String"
        ],
        "visibility": "private"
      },
      {
        "name": "LatencyMode",
        "file": "adapters/outbound/exchanges/exchange_simulator.rs",
        "line": 28,
        "variants": [
          "None",
          "Fixed",
          "Variable",
          "min",
          "Duration",
          "max",
          "Duration"
        ],
        "visibility": "pub"
      },
      {
        "name": "FillMode",
        "file": "adapters/outbound/exchanges/exchange_simulator.rs",
        "line": 37,
        "variants": [
          "Instant",
          "Fill",
          "immediately",
          "at",
          "requested",
          "price",
          "Realistic",
          "Partial",
          "fills",
          "slippage",
          "etc",
          "Aggressive",
          "High",
          "slippage",
          "many",
          "partials",
          "Conservative",
          "Better",
          "prices",
          "but",
          "slower"
        ],
        "visibility": "pub"
      },
      {
        "name": "FailureMode",
        "file": "adapters/outbound/exchanges/exchange_simulator.rs",
        "line": 66,
        "variants": [
          "None",
          "RandomDrops",
          "probability",
          "f64"
        ],
        "visibility": "pub"
      },
      {
        "name": "ApiError",
        "file": "adapters/inbound/rest/api_server.rs",
        "line": 407,
        "variants": [
          "InvalidRequest",
          "InvalidOrderId",
          "OrderNotFound",
          "RiskCheckFailed",
          "OrderPlacementFailed",
          "Internal"
        ],
        "visibility": "private"
      }
    ],
    "traits": [
      {
        "name": "Command",
        "file": "application/commands/place_order_command.rs",
        "line": 17,
        "methods": [
          "execute",
          "validate"
        ],
        "visibility": "pub"
      },
      {
        "name": "RiskChecker",
        "file": "application/commands/place_order_command.rs",
        "line": 329,
        "methods": [
          "check_order"
        ],
        "visibility": "pub"
      },
      {
        "name": "EventPublisher",
        "file": "application/commands/place_order_command.rs",
        "line": 335,
        "methods": [
          "publish"
        ],
        "visibility": "pub"
      },
      {
        "name": "Repository",
        "file": "ports/outbound/repository_port.rs",
        "line": 14,
        "methods": [
          "save",
          "find_by_id",
          "find_all",
          "update",
          "delete",
          "exists",
          "count"
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderRepository",
        "file": "ports/outbound/repository_port.rs",
        "line": 43,
        "methods": [
          "find_by_status",
          "find_by_symbol",
          "find_by_symbol_and_status",
          "find_active",
          "find_by_date_range",
          "find_recent",
          "get_total_volume",
          "get_statistics"
        ],
        "visibility": "pub"
      },
      {
        "name": "UnitOfWork",
        "file": "ports/outbound/repository_port.rs",
        "line": 92,
        "methods": [
          "begin",
          "commit",
          "rollback",
          "orders"
        ],
        "visibility": "pub"
      },
      {
        "name": "ExchangePort",
        "file": "ports/outbound/exchange_port.rs",
        "line": 61,
        "methods": [
          "place_order",
          "cancel_order",
          "modify_order",
          "get_order_status",
          "get_open_orders",
          "get_order_history",
          "get_order_book",
          "get_recent_trades",
          "get_ticker",
          "get_balances",
          "get_trading_fees",
          "get_capabilities",
          "health_check",
          "get_rate_limit_status"
        ],
        "visibility": "pub"
      },
      {
        "name": "ExtendedExchangePort",
        "file": "ports/outbound/exchange_port.rs",
        "line": 115,
        "methods": [
          "place_oco_order",
          "place_reduce_only_order",
          "place_post_only_order",
          "place_iceberg_order"
        ],
        "visibility": "pub"
      },
      {
        "name": "ReconnectStrategy",
        "file": "crates/websocket/src/reconnect.rs",
        "line": 9,
        "methods": [
          "next_delay",
          "reset",
          "should_retry"
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderBookAnalytics",
        "file": "crates/risk/src/master_orchestration_system.rs",
        "line": 848,
        "methods": [
          "total_depth",
          "spread",
          "imbalance",
          "mid_price"
        ],
        "visibility": "pub"
      },
      {
        "name": "MLFeedbackSystemReadGuardExt",
        "file": "crates/risk/src/ml_method_wrappers.rs",
        "line": 89,
        "methods": [
          "calibrate_probability"
        ],
        "visibility": "pub"
      },
      {
        "name": "MLFeedbackSystemWriteGuardExt",
        "file": "crates/risk/src/ml_method_wrappers.rs",
        "line": 100,
        "methods": [
          "update_prediction_history"
        ],
        "visibility": "pub"
      },
      {
        "name": "SHAPCalculatorReadGuardExt",
        "file": "crates/risk/src/ml_method_wrappers.rs",
        "line": 111,
        "methods": [
          "calculate_shap_values"
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketAnalyticsWriteGuardExt",
        "file": "crates/risk/src/ml_method_wrappers.rs",
        "line": 122,
        "methods": [
          "get_stochastic",
          "get_obv",
          "get_obv_ma"
        ],
        "visibility": "pub"
      },
      {
        "name": "ToPriceExt",
        "file": "crates/risk/src/unified_type_ops.rs",
        "line": 233,
        "methods": [
          "to_price"
        ],
        "visibility": "pub"
      },
      {
        "name": "ToQuantityExt",
        "file": "crates/risk/src/unified_type_ops.rs",
        "line": 252,
        "methods": [
          "to_quantity"
        ],
        "visibility": "pub"
      },
      {
        "name": "ToPercentageExt",
        "file": "crates/risk/src/unified_type_ops.rs",
        "line": 271,
        "methods": [
          "to_percentage"
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderBookExtensions",
        "file": "crates/risk/src/order_book_extensions.rs",
        "line": 10,
        "methods": [
          "total_bid_volume",
          "total_ask_volume",
          "volume_imbalance",
          "bid_ask_spread",
          "mid_price",
          "order_flow_imbalance",
          "depth_imbalance",
          "spread_bps",
          "recent_trades"
        ],
        "visibility": "pub"
      },
      {
        "name": "MLFeedbackExtensions",
        "file": "crates/risk/src/order_book_extensions.rs",
        "line": 190,
        "methods": [
          "predict",
          "calibrate_probability",
          "update_prediction_history",
          "should_retrain",
          "online_learning_update",
          "add_training_example"
        ],
        "visibility": "pub"
      },
      {
        "name": "PriceExt",
        "file": "crates/risk/src/order_book_methods.rs",
        "line": 307,
        "methods": [
          "to_f64"
        ],
        "visibility": "pub"
      },
      {
        "name": "Sampler",
        "file": "crates/risk/src/hyperparameter_optimization.rs",
        "line": 482,
        "methods": [
          "sample",
          "infer_relative_search_space",
          "sample_relative"
        ],
        "visibility": "pub"
      },
      {
        "name": "Pruner",
        "file": "crates/risk/src/hyperparameter_optimization.rs",
        "line": 1034,
        "methods": [
          "should_prune"
        ],
        "visibility": "pub"
      },
      {
        "name": "OrderBookAnalytics",
        "file": "crates/risk/src/order_book_analytics_ext.rs",
        "line": 9,
        "methods": [
          "total_bid_volume",
          "total_ask_volume",
          "volume_imbalance",
          "bid_ask_spread",
          "spread_bps",
          "mid_price",
          "order_flow_imbalance",
          "depth_imbalance",
          "weighted_mid_price",
          "micro_price",
          "book_pressure"
        ],
        "visibility": "pub"
      },
      {
        "name": "DecimalConvert",
        "file": "crates/risk/src/type_conversion.rs",
        "line": 18,
        "methods": [
          "to_decimal",
          "from_decimal"
        ],
        "visibility": "pub"
      },
      {
        "name": "FloatConvert",
        "file": "crates/risk/src/type_conversion.rs",
        "line": 23,
        "methods": [
          "to_f64",
          "from_f64"
        ],
        "visibility": "pub"
      },
      {
        "name": "TradingSignalExt",
        "file": "crates/risk/src/type_conversion.rs",
        "line": 287,
        "methods": [
          "with_entry_price",
          "with_stop_loss",
          "with_take_profit",
          "validate_risk_reward"
        ],
        "visibility": "pub"
      },
      {
        "name": "DecimalExt",
        "file": "crates/risk/src/type_conversion.rs",
        "line": 436,
        "methods": [
          "from_f64",
          "to_f64"
        ],
        "visibility": "pub"
      },
      {
        "name": "MLFeedbackSystemExt",
        "file": "crates/risk/src/ml_complete_impl.rs",
        "line": 21,
        "methods": [
          "calibrate_probability",
          "update_prediction_history",
          "get_calibration_metrics",
          "recalibrate_with_isotonic"
        ],
        "visibility": "pub"
      },
      {
        "name": "SHAPCalculatorExt",
        "file": "crates/risk/src/ml_complete_impl.rs",
        "line": 29,
        "methods": [
          "calculate_shap_values",
          "get_feature_importance",
          "calculate_interaction_effects"
        ],
        "visibility": "pub"
      },
      {
        "name": "MarketAnalyticsExt",
        "file": "crates/risk/src/ml_complete_impl.rs",
        "line": 36,
        "methods": [
          "get_stochastic",
          "get_obv",
          "get_obv_ma",
          "calculate_rsi",
          "calculate_macd",
          "calculate_bollinger_bands"
        ],
        "visibility": "pub"
      },
      {
        "name": "EnhancedOrderBookExt",
        "file": "crates/risk/src/ml_complete_impl.rs",
        "line": 46,
        "methods": [
          "total_bid_volume",
          "total_ask_volume",
          "calculate_vwap",
          "calculate_microprice",
          "calculate_kyle_lambda"
        ],
        "visibility": "pub"
      },
      {
        "name": "MLModel",
        "file": "crates/ml/src/validation/purged_cv.rs",
        "line": 352,
        "methods": [
          "fit",
          "predict"
        ],
        "visibility": "pub"
      },
      {
        "name": "ValidationStrategy",
        "file": "crates/ml/src/training/cross_validation.rs",
        "line": 18,
        "methods": [
          "split",
          "name"
        ],
        "visibility": "pub"
      },
      {
        "name": "Optimizer",
        "file": "crates/ml/src/training/optimizer.rs",
        "line": 16,
        "methods": [
          "step",
          "reset",
          "get_learning_rate"
        ],
        "visibility": "pub"
      },
      {
        "name": "Indicator",
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 62,
        "methods": [
          "calculate",
          "name",
          "requires_volume"
        ],
        "visibility": "pub"
      },
      {
        "name": "MetaLearner",
        "file": "crates/ml/src/models/ensemble.rs",
        "line": 147,
        "methods": [
          "train",
          "predict"
        ],
        "visibility": "private"
      },
      {
        "name": "BaseModel",
        "file": "crates/ml/src/models/stacking_ensemble.rs",
        "line": 16,
        "methods": [
          "fit",
          "predict",
          "predict_proba",
          "feature_importance",
          "name"
        ],
        "visibility": "pub"
      },
      {
        "name": "TradingModel",
        "file": "crates/ml/src/backtesting/walk_forward.rs",
        "line": 544,
        "methods": [
          "optimize",
          "fit",
          "predict",
          "set_parameters"
        ],
        "visibility": "pub"
      },
      {
        "name": "Clock",
        "file": "crates/infrastructure/src/circuit_breaker_sophia.rs",
        "line": 100,
        "methods": [
          "now",
          "elapsed"
        ],
        "visibility": "pub"
      },
      {
        "name": "ExchangeConnector",
        "file": "crates/infrastructure/src/position_reconciliation.rs",
        "line": 347,
        "methods": [
          "get_open_positions",
          "get_position",
          "get_balance",
          "get_open_orders",
          "verify_connectivity",
          "exchange_name"
        ],
        "visibility": "pub"
      },
      {
        "name": "CircuitBreakerIntegration",
        "file": "crates/infrastructure/src/circuit_breaker_integration.rs",
        "line": 751,
        "methods": [],
        "visibility": "pub"
      },
      {
        "name": "SimdOperation",
        "file": "crates/infrastructure/src/cpu_features.rs",
        "line": 266,
        "methods": [
          "execute",
          "execute_with_strategy"
        ],
        "visibility": "pub"
      },
      {
        "name": "Clock",
        "file": "crates/infrastructure/src/circuit_breaker.rs",
        "line": 81,
        "methods": [
          "now",
          "elapsed"
        ],
        "visibility": "pub"
      },
      {
        "name": "PipelineStage",
        "file": "crates/infrastructure/src/rayon_enhanced.rs",
        "line": 411,
        "methods": [
          "process"
        ],
        "visibility": "pub"
      },
      {
        "name": "SecretProvider",
        "file": "crates/infrastructure/src/deployment_config.rs",
        "line": 118,
        "methods": [
          "get_secret",
          "get_secrets_with_prefix",
          "validate_secrets"
        ],
        "visibility": "pub"
      },
      {
        "name": "Shutdownable",
        "file": "crates/infrastructure/src/emergency_coordinator.rs",
        "line": 19,
        "methods": [
          "name",
          "cancel_all_orders",
          "emergency_liquidate",
          "shutdown",
          "is_healthy"
        ],
        "visibility": "pub"
      },
      {
        "name": "GuardConditions",
        "file": "crates/infrastructure/src/software_control_modes.rs",
        "line": 162,
        "methods": [
          "check_transition"
        ],
        "visibility": "pub"
      },
      {
        "name": "RetryableError",
        "file": "crates/infrastructure/src/retry_logic.rs",
        "line": 38,
        "methods": [
          "is_retryable",
          "suggested_wait"
        ],
        "visibility": "pub"
      },
      {
        "name": "GPIOInterface",
        "file": "crates/infrastructure/src/hardware_kill_switch.rs",
        "line": 61,
        "methods": [
          "read_pin",
          "write_pin",
          "set_pin_mode",
          "enable_interrupt"
        ],
        "visibility": "pub"
      },
      {
        "name": "MessageHandler",
        "file": "crates/infrastructure/src/stream_processing/consumer.rs",
        "line": 23,
        "methods": [
          "handle_batch",
          "handle"
        ],
        "visibility": "pub"
      },
      {
        "name": "RoutingRule",
        "file": "crates/infrastructure/src/stream_processing/router.rs",
        "line": 20,
        "methods": [
          "matches",
          "destination",
          "priority"
        ],
        "visibility": "pub"
      },
      {
        "name": "ProcessorStage",
        "file": "crates/infrastructure/src/stream_processing/processor.rs",
        "line": 36,
        "methods": [
          "name",
          "process",
          "can_handle"
        ],
        "visibility": "pub"
      },
      {
        "name": "ObjectPool",
        "file": "crates/infrastructure/src/memory/pools_upgraded.rs",
        "line": 38,
        "methods": [
          "acquire",
          "release",
          "stats",
          "prewarm"
        ],
        "visibility": "pub"
      },
      {
        "name": "RiskValidator",
        "file": "crates/trading_engine/src/orders/oco.rs",
        "line": 145,
        "methods": [
          "validate_oco",
          "check_position_limits",
          "validate_margin"
        ],
        "visibility": "pub"
      },
      {
        "name": "ExchangeConnector",
        "file": "crates/trading_engine/src/orders/oco.rs",
        "line": 153,
        "methods": [
          "submit_order",
          "cancel_order",
          "modify_order",
          "get_order_status"
        ],
        "visibility": "pub"
      },
      {
        "name": "SagaStep",
        "file": "crates/trading_engine/src/transactions/saga.rs",
        "line": 51,
        "methods": [
          "name",
          "execute",
          "compensate",
          "is_idempotent"
        ],
        "visibility": "pub"
      },
      {
        "name": "CompensatingTransaction",
        "file": "crates/trading_engine/src/transactions/compensator.rs",
        "line": 23,
        "methods": [
          "execute",
          "can_compensate",
          "priority"
        ],
        "visibility": "pub"
      },
      {
        "name": "FeatureTransformer",
        "file": "crates/feature_store/src/feature_pipeline.rs",
        "line": 404,
        "methods": [
          "transform"
        ],
        "visibility": "private"
      },
      {
        "name": "EventHandler",
        "file": "crates/data_ingestion/src/event_driven/processor.rs",
        "line": 207,
        "methods": [
          "handle",
          "can_handle"
        ],
        "visibility": "pub"
      },
      {
        "name": "MetricsCollector",
        "file": "crates/data_ingestion/src/monitoring/mod.rs",
        "line": 7,
        "methods": [
          "record",
          "increment",
          "get_value"
        ],
        "visibility": "pub"
      },
      {
        "name": "AlertSender",
        "file": "crates/data_ingestion/src/data_quality/monitoring.rs",
        "line": 44,
        "methods": [
          "send_alert"
        ],
        "visibility": "pub"
      },
      {
        "name": "DataSource",
        "file": "crates/data_ingestion/src/data_quality/reconciliation.rs",
        "line": 57,
        "methods": [
          "get_latest_data",
          "name",
          "reliability_score",
          "latency_ms"
        ],
        "visibility": "pub"
      },
      {
        "name": "BackfillSource",
        "file": "crates/data_ingestion/src/data_quality/backfill.rs",
        "line": 157,
        "methods": [
          "fetch_data",
          "estimate_cost",
          "reliability_score",
          "name"
        ],
        "visibility": "pub"
      },
      {
        "name": "TradingStrategy",
        "file": "crates/data_ingestion/src/replay/playback_engine.rs",
        "line": 162,
        "methods": [
          "on_book_update",
          "on_trade",
          "on_microburst",
          "get_positions",
          "calculate_pnl"
        ],
        "visibility": "pub"
      },
      {
        "name": "DataLoader",
        "file": "crates/data_ingestion/src/replay/historical_loader.rs",
        "line": 199,
        "methods": [
          "load",
          "stream",
          "metadata"
        ],
        "visibility": "pub"
      },
      {
        "name": "AsyncIterator",
        "file": "crates/data_ingestion/src/replay/historical_loader.rs",
        "line": 743,
        "methods": [
          "next"
        ],
        "visibility": "private"
      },
      {
        "name": "PriceGenerator",
        "file": "crates/data_ingestion/tests/integration_test.rs",
        "line": 262,
        "methods": [
          "next_price"
        ],
        "visibility": "private"
      },
      {
        "name": "ExchangeAdapter",
        "file": "adapters/outbound/exchanges/exchange_adapter_trait.rs",
        "line": 18,
        "methods": [
          "name",
          "get_supported_symbols",
          "health_check",
          "get_config",
          "subscribe_market_data",
          "unsubscribe_market_data",
          "get_limits",
          "validate_order"
        ],
        "visibility": "pub"
      },
      {
        "name": "TransactionParticipant",
        "file": "adapters/outbound/persistence/transaction_manager.rs",
        "line": 382,
        "methods": [
          "prepare",
          "commit",
          "rollback",
          "name"
        ],
        "visibility": "pub"
      },
      {
        "name": "RiskService",
        "file": "adapters/inbound/rest/api_server.rs",
        "line": 464,
        "methods": [
          "is_ready",
          "check_order",
          "risk_checker"
        ],
        "visibility": "private"
      },
      {
        "name": "MarketDataService",
        "file": "adapters/inbound/rest/api_server.rs",
        "line": 471,
        "methods": [
          "is_ready"
        ],
        "visibility": "private"
      }
    ]
  },
  "trait_implementations": {
    "VenueError": [
      {
        "struct": "VenueError",
        "trait": "Error",
        "file": "domain/errors/error_taxonomy.rs",
        "line": 595,
        "methods": []
      }
    ],
    "OcoSemantics": [
      {
        "struct": "OcoSemantics",
        "trait": "Default",
        "file": "domain/entities/oco_order.rs",
        "line": 38,
        "methods": [
          {
            "name": "default",
            "line": 38,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "FillDistribution": [
      {
        "struct": "FillDistribution",
        "trait": "Default",
        "file": "domain/value_objects/statistical_distributions.rs",
        "line": 22,
        "methods": [
          {
            "name": "default",
            "line": 22,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "LatencyDistribution": [
      {
        "struct": "LatencyDistribution",
        "trait": "Default",
        "file": "domain/value_objects/statistical_distributions.rs",
        "line": 110,
        "methods": [
          {
            "name": "default",
            "line": 110,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "SlippageDistribution": [
      {
        "struct": "SlippageDistribution",
        "trait": "Default",
        "file": "domain/value_objects/statistical_distributions.rs",
        "line": 184,
        "methods": [
          {
            "name": "default",
            "line": 184,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "ArrivalRateDistribution": [
      {
        "struct": "ArrivalRateDistribution",
        "trait": "Default",
        "file": "domain/value_objects/statistical_distributions.rs",
        "line": 231,
        "methods": [
          {
            "name": "default",
            "line": 231,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "MarketStatistics": [
      {
        "struct": "MarketStatistics",
        "trait": "Default",
        "file": "domain/value_objects/statistical_distributions.rs",
        "line": 265,
        "methods": [
          {
            "name": "default",
            "line": 265,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "PriceFilter": [
      {
        "struct": "PriceFilter",
        "trait": "Default",
        "file": "domain/value_objects/validation_filters.rs",
        "line": 52,
        "methods": [
          {
            "name": "default",
            "line": 52,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "LotSizeFilter": [
      {
        "struct": "LotSizeFilter",
        "trait": "Default",
        "file": "domain/value_objects/validation_filters.rs",
        "line": 120,
        "methods": [
          {
            "name": "default",
            "line": 120,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "NotionalFilter": [
      {
        "struct": "NotionalFilter",
        "trait": "Default",
        "file": "domain/value_objects/validation_filters.rs",
        "line": 163,
        "methods": [
          {
            "name": "default",
            "line": 163,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "PercentPriceFilter": [
      {
        "struct": "PercentPriceFilter",
        "trait": "Default",
        "file": "domain/value_objects/validation_filters.rs",
        "line": 214,
        "methods": [
          {
            "name": "default",
            "line": 214,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "Money": [
      {
        "struct": "Money",
        "trait": "Add",
        "file": "domain/value_objects/decimal_money.rs",
        "line": 128,
        "methods": [
          {
            "name": "add",
            "line": 129,
            "return_type": "Self::Output",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Money",
        "trait": "Sub",
        "file": "domain/value_objects/decimal_money.rs",
        "line": 139,
        "methods": [
          {
            "name": "sub",
            "line": 140,
            "return_type": "Self::Output",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Money",
        "trait": "Neg",
        "file": "domain/value_objects/decimal_money.rs",
        "line": 166,
        "methods": [
          {
            "name": "neg",
            "line": 167,
            "return_type": "Money",
            "is_async": false
          }
        ]
      }
    ],
    "MarketImpactModel": [
      {
        "struct": "MarketImpactModel",
        "trait": "Default",
        "file": "domain/value_objects/market_impact.rs",
        "line": 41,
        "methods": [
          {
            "name": "default",
            "line": 41,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "TimestampConfig": [
      {
        "struct": "TimestampConfig",
        "trait": "Default",
        "file": "domain/value_objects/timestamp_validator.rs",
        "line": 24,
        "methods": [
          {
            "name": "default",
            "line": 24,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "PlaceOrderCommand": [
      {
        "struct": "PlaceOrderCommand",
        "trait": "Command",
        "file": "application/commands/place_order_command.rs",
        "line": 62,
        "methods": [
          {
            "name": "validate",
            "line": 63,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "execute",
            "line": 100,
            "return_type": "Result<Self::Output>",
            "is_async": true
          },
          {
            "name": "compensate",
            "line": 141,
            "return_type": "Result<()>",
            "is_async": true
          }
        ]
      }
    ],
    "CancelOrderCommand": [
      {
        "struct": "CancelOrderCommand",
        "trait": "Command",
        "file": "application/commands/place_order_command.rs",
        "line": 200,
        "methods": [
          {
            "name": "validate",
            "line": 200,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "execute",
            "line": 214,
            "return_type": "Result<Self::Output>",
            "is_async": true
          }
        ]
      }
    ],
    "BatchOrderCommand": [
      {
        "struct": "BatchOrderCommand",
        "trait": "Command",
        "file": "application/commands/place_order_command.rs",
        "line": 281,
        "methods": [
          {
            "name": "execute",
            "line": 282,
            "return_type": "Result<Self::Output>",
            "is_async": true
          }
        ]
      }
    ],
    "TestConfig": [
      {
        "struct": "TestConfig",
        "trait": "Default",
        "file": "tests/integration_test.rs",
        "line": 41,
        "methods": [
          {
            "name": "default",
            "line": 41,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "TestConfig",
        "trait": "Default",
        "file": "tests/integration_tests.rs",
        "line": 29,
        "methods": [
          {
            "name": "default",
            "line": 29,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "TestConfig",
        "trait": "Default",
        "file": "crates/data_ingestion/tests/integration_test.rs",
        "line": 77,
        "methods": [
          {
            "name": "default",
            "line": 77,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "MacroCorrelationConfig": [
      {
        "struct": "MacroCorrelationConfig",
        "trait": "Default",
        "file": "crates/data_intelligence/src/macro_economy_enhanced.rs",
        "line": 47,
        "methods": [
          {
            "name": "default",
            "line": 47,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "MacroRegime": [
      {
        "struct": "MacroRegime",
        "trait": "Default",
        "file": "crates/data_intelligence/src/macro_economy_enhanced.rs",
        "line": 908,
        "methods": [
          {
            "name": "default",
            "line": 908,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "OptionsFlowConfig": [
      {
        "struct": "OptionsFlowConfig",
        "trait": "Default",
        "file": "crates/data_intelligence/src/options_flow.rs",
        "line": 50,
        "methods": [
          {
            "name": "default",
            "line": 50,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "WebSocketConfig": [
      {
        "struct": "WebSocketConfig",
        "trait": "Default",
        "file": "crates/data_intelligence/src/websocket_aggregator.rs",
        "line": 41,
        "methods": [
          {
            "name": "default",
            "line": 41,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "WebSocketConfig",
        "trait": "Default",
        "file": "crates/websocket/src/client.rs",
        "line": 64,
        "methods": [
          {
            "name": "default",
            "line": 64,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "MacroConfig": [
      {
        "struct": "MacroConfig",
        "trait": "Default",
        "file": "crates/data_intelligence/src/macro_correlator.rs",
        "line": 31,
        "methods": [
          {
            "name": "default",
            "line": 31,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "Grok3MiniConfig": [
      {
        "struct": "Grok3MiniConfig",
        "trait": "Default",
        "file": "crates/data_intelligence/src/xai_enhanced_prompts.rs",
        "line": 506,
        "methods": [
          {
            "name": "default",
            "line": 506,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "OverfittingConfig": [
      {
        "struct": "OverfittingConfig",
        "trait": "Default",
        "file": "crates/data_intelligence/src/overfitting_prevention.rs",
        "line": 65,
        "methods": [
          {
            "name": "default",
            "line": 65,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "NewsConfig": [
      {
        "struct": "NewsConfig",
        "trait": "Default",
        "file": "crates/data_intelligence/src/news_sentiment.rs",
        "line": 32,
        "methods": [
          {
            "name": "default",
            "line": 32,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "DexAnalyticsConfig": [
      {
        "struct": "DexAnalyticsConfig",
        "trait": "Default",
        "file": "crates/data_intelligence/src/dex_analytics.rs",
        "line": 48,
        "methods": [
          {
            "name": "default",
            "line": 48,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "StablecoinConfig": [
      {
        "struct": "StablecoinConfig",
        "trait": "Default",
        "file": "crates/data_intelligence/src/stablecoin_tracker.rs",
        "line": 52,
        "methods": [
          {
            "name": "default",
            "line": 52,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "OnChainConfig": [
      {
        "struct": "OnChainConfig",
        "trait": "Default",
        "file": "crates/data_intelligence/src/onchain_analytics.rs",
        "line": 32,
        "methods": [
          {
            "name": "default",
            "line": 32,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "QuantizationConfig": [
      {
        "struct": "QuantizationConfig",
        "trait": "Default",
        "file": "crates/data_intelligence/src/data_quantizer.rs",
        "line": 36,
        "methods": [
          {
            "name": "default",
            "line": 36,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "PipelineConfig": [
      {
        "struct": "PipelineConfig",
        "trait": "Default",
        "file": "crates/data_intelligence/src/zero_copy_pipeline.rs",
        "line": 31,
        "methods": [
          {
            "name": "default",
            "line": 31,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "PipelineConfig",
        "trait": "Default",
        "file": "crates/feature_store/src/feature_pipeline.rs",
        "line": 28,
        "methods": [
          {
            "name": "default",
            "line": 28,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "CacheConfig": [
      {
        "struct": "CacheConfig",
        "trait": "Default",
        "file": "crates/data_intelligence/src/cache_layer.rs",
        "line": 45,
        "methods": [
          {
            "name": "default",
            "line": 45,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "WhaleAlertConfig": [
      {
        "struct": "WhaleAlertConfig",
        "trait": "Default",
        "file": "crates/data_intelligence/src/whale_alert.rs",
        "line": 49,
        "methods": [
          {
            "name": "default",
            "line": 49,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "XAIConfig": [
      {
        "struct": "XAIConfig",
        "trait": "Default",
        "file": "crates/data_intelligence/src/xai_integration.rs",
        "line": 28,
        "methods": [
          {
            "name": "default",
            "line": 28,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "ValidationConfig": [
      {
        "struct": "ValidationConfig",
        "trait": "Default",
        "file": "crates/data_intelligence/src/historical_validator.rs",
        "line": 29,
        "methods": [
          {
            "name": "default",
            "line": 29,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "WebSocketManager": [
      {
        "struct": "WebSocketManager",
        "trait": "Default",
        "file": "crates/websocket/src/manager.rs",
        "line": 27,
        "methods": [
          {
            "name": "default",
            "line": 27,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "ExponentialBackoff": [
      {
        "struct": "ExponentialBackoff",
        "trait": "Default",
        "file": "crates/websocket/src/reconnect.rs",
        "line": 29,
        "methods": [
          {
            "name": "default",
            "line": 29,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ExponentialBackoff",
        "trait": "ReconnectStrategy",
        "file": "crates/websocket/src/reconnect.rs",
        "line": 74,
        "methods": [
          {
            "name": "next_delay",
            "line": 74,
            "return_type": "Option<Duration>",
            "is_async": true
          },
          {
            "name": "reset",
            "line": 78,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "should_retry",
            "line": 84,
            "return_type": "bool",
            "is_async": false
          }
        ]
      }
    ],
    "FixedInterval": [
      {
        "struct": "FixedInterval",
        "trait": "ReconnectStrategy",
        "file": "crates/websocket/src/reconnect.rs",
        "line": 105,
        "methods": [
          {
            "name": "next_delay",
            "line": 105,
            "return_type": "Option<Duration>",
            "is_async": true
          },
          {
            "name": "reset",
            "line": 110,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "should_retry",
            "line": 112,
            "return_type": "bool",
            "is_async": false
          }
        ]
      }
    ],
    "LinearBackoff": [
      {
        "struct": "LinearBackoff",
        "trait": "ReconnectStrategy",
        "file": "crates/websocket/src/reconnect.rs",
        "line": 146,
        "methods": [
          {
            "name": "next_delay",
            "line": 146,
            "return_type": "Option<Duration>",
            "is_async": true
          },
          {
            "name": "reset",
            "line": 152,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "should_retry",
            "line": 154,
            "return_type": "bool",
            "is_async": false
          }
        ]
      }
    ],
    "ReliableWebSocketConfig": [
      {
        "struct": "ReliableWebSocketConfig",
        "trait": "Default",
        "file": "crates/websocket/src/reliable_client.rs",
        "line": 87,
        "methods": [
          {
            "name": "default",
            "line": 87,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "MasterConfig": [
      {
        "struct": "MasterConfig",
        "trait": "Default",
        "file": "crates/risk/src/master_orchestration_system.rs",
        "line": 97,
        "methods": [
          {
            "name": "default",
            "line": 97,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "MasterOrchestrationSystem": [
      {
        "struct": "MasterOrchestrationSystem",
        "trait": "Clone",
        "file": "crates/risk/src/master_orchestration_system.rs",
        "line": 806,
        "methods": [
          {
            "name": "clone",
            "line": 806,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "OrderBook": [
      {
        "struct": "OrderBook",
        "trait": "OrderBookAnalytics",
        "file": "crates/risk/src/master_orchestration_system.rs",
        "line": 856,
        "methods": [
          {
            "name": "total_depth",
            "line": 856,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "spread",
            "line": 859,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "imbalance",
            "line": 866,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "mid_price",
            "line": 876,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "OrderBook",
        "trait": "OrderBookExtensions",
        "file": "crates/risk/src/order_book_extensions.rs",
        "line": 30,
        "methods": [
          {
            "name": "total_bid_volume",
            "line": 30,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "total_ask_volume",
            "line": 37,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "volume_imbalance",
            "line": 44,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "bid_ask_spread",
            "line": 56,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "mid_price",
            "line": 66,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "order_flow_imbalance",
            "line": 79,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "depth_imbalance",
            "line": 106,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "spread_bps",
            "line": 142,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "recent_trades",
            "line": 154,
            "return_type": "Vec<Trade>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "OrderBook",
        "trait": "OrderBookAnalytics",
        "file": "crates/risk/src/order_book_analytics_ext.rs",
        "line": 23,
        "methods": [
          {
            "name": "total_bid_volume",
            "line": 24,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "total_ask_volume",
            "line": 31,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "volume_imbalance",
            "line": 39,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "bid_ask_spread",
            "line": 50,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "spread_bps",
            "line": 62,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "mid_price",
            "line": 78,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "order_flow_imbalance",
            "line": 90,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "depth_imbalance",
            "line": 107,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "weighted_mid_price",
            "line": 127,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "micro_price",
            "line": 146,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "book_pressure",
            "line": 165,
            "return_type": "f64",
            "is_async": false
          }
        ]
      }
    ],
    "RwLockReadGuard": [
      {
        "struct": "RwLockReadGuard",
        "trait": "MLFeedbackSystemReadGuardExt",
        "file": "crates/risk/src/ml_method_wrappers.rs",
        "line": 93,
        "methods": [
          {
            "name": "calibrate_probability",
            "line": 93,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "RwLockReadGuard",
        "trait": "SHAPCalculatorReadGuardExt",
        "file": "crates/risk/src/ml_method_wrappers.rs",
        "line": 115,
        "methods": [
          {
            "name": "calculate_shap_values",
            "line": 115,
            "return_type": "Vec<f64>",
            "is_async": false
          }
        ]
      }
    ],
    "RwLockWriteGuard": [
      {
        "struct": "RwLockWriteGuard",
        "trait": "MLFeedbackSystemWriteGuardExt",
        "file": "crates/risk/src/ml_method_wrappers.rs",
        "line": 104,
        "methods": [
          {
            "name": "update_prediction_history",
            "line": 104,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "RwLockWriteGuard",
        "trait": "MarketAnalyticsWriteGuardExt",
        "file": "crates/risk/src/ml_method_wrappers.rs",
        "line": 128,
        "methods": [
          {
            "name": "get_stochastic",
            "line": 128,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "get_obv",
            "line": 129,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "get_obv_ma",
            "line": 133,
            "return_type": "f64",
            "is_async": false
          }
        ]
      }
    ],
    "Price": [
      {
        "struct": "Price",
        "trait": "Add",
        "file": "crates/risk/src/unified_type_ops.rs",
        "line": 17,
        "methods": [
          {
            "name": "add",
            "line": 20,
            "return_type": "Price",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Price",
        "trait": "Sub",
        "file": "crates/risk/src/unified_type_ops.rs",
        "line": 26,
        "methods": [
          {
            "name": "sub",
            "line": 29,
            "return_type": "Price",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Price",
        "trait": "Div",
        "file": "crates/risk/src/unified_type_ops.rs",
        "line": 66,
        "methods": [
          {
            "name": "div",
            "line": 69,
            "return_type": "Decimal",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Price",
        "trait": "Default",
        "file": "crates/risk/src/unified_type_ops.rs",
        "line": 317,
        "methods": [
          {
            "name": "default",
            "line": 317,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Price",
        "trait": "PriceExt",
        "file": "crates/risk/src/order_book_methods.rs",
        "line": 311,
        "methods": [
          {
            "name": "to_f64",
            "line": 311,
            "return_type": "f64",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Price",
        "trait": "DecimalConvert",
        "file": "crates/risk/src/type_conversion.rs",
        "line": 30,
        "methods": [
          {
            "name": "to_decimal",
            "line": 30,
            "return_type": "Decimal",
            "is_async": false
          },
          {
            "name": "from_decimal",
            "line": 35,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Price",
        "trait": "FloatConvert",
        "file": "crates/risk/src/type_conversion.rs",
        "line": 42,
        "methods": [
          {
            "name": "to_f64",
            "line": 42,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "from_f64",
            "line": 47,
            "return_type": "Result<Self>",
            "is_async": false
          }
        ]
      }
    ],
    "Quantity": [
      {
        "struct": "Quantity",
        "trait": "Add",
        "file": "crates/risk/src/unified_type_ops.rs",
        "line": 96,
        "methods": [
          {
            "name": "add",
            "line": 99,
            "return_type": "Quantity",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Quantity",
        "trait": "Sub",
        "file": "crates/risk/src/unified_type_ops.rs",
        "line": 105,
        "methods": [
          {
            "name": "sub",
            "line": 108,
            "return_type": "Quantity",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Quantity",
        "trait": "Div",
        "file": "crates/risk/src/unified_type_ops.rs",
        "line": 138,
        "methods": [
          {
            "name": "div",
            "line": 141,
            "return_type": "Decimal",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Quantity",
        "trait": "Default",
        "file": "crates/risk/src/unified_type_ops.rs",
        "line": 323,
        "methods": [
          {
            "name": "default",
            "line": 323,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Quantity",
        "trait": "DecimalConvert",
        "file": "crates/risk/src/type_conversion.rs",
        "line": 82,
        "methods": [
          {
            "name": "to_decimal",
            "line": 82,
            "return_type": "Decimal",
            "is_async": false
          },
          {
            "name": "from_decimal",
            "line": 86,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Quantity",
        "trait": "FloatConvert",
        "file": "crates/risk/src/type_conversion.rs",
        "line": 94,
        "methods": [
          {
            "name": "to_f64",
            "line": 94,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "from_f64",
            "line": 98,
            "return_type": "Result<Self>",
            "is_async": false
          }
        ]
      }
    ],
    "Percentage": [
      {
        "struct": "Percentage",
        "trait": "Add",
        "file": "crates/risk/src/unified_type_ops.rs",
        "line": 168,
        "methods": [
          {
            "name": "add",
            "line": 171,
            "return_type": "Percentage",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Percentage",
        "trait": "Sub",
        "file": "crates/risk/src/unified_type_ops.rs",
        "line": 177,
        "methods": [
          {
            "name": "sub",
            "line": 180,
            "return_type": "Percentage",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Percentage",
        "trait": "Default",
        "file": "crates/risk/src/unified_type_ops.rs",
        "line": 329,
        "methods": [
          {
            "name": "default",
            "line": 329,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Percentage",
        "trait": "DecimalConvert",
        "file": "crates/risk/src/type_conversion.rs",
        "line": 133,
        "methods": [
          {
            "name": "to_decimal",
            "line": 133,
            "return_type": "Decimal",
            "is_async": false
          },
          {
            "name": "from_decimal",
            "line": 137,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Percentage",
        "trait": "FloatConvert",
        "file": "crates/risk/src/type_conversion.rs",
        "line": 145,
        "methods": [
          {
            "name": "to_f64",
            "line": 145,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "from_f64",
            "line": 149,
            "return_type": "Result<Self>",
            "is_async": false
          }
        ]
      }
    ],
    "Decimal": [
      {
        "struct": "Decimal",
        "trait": "ToPriceExt",
        "file": "crates/risk/src/unified_type_ops.rs",
        "line": 237,
        "methods": [
          {
            "name": "to_price",
            "line": 237,
            "return_type": "Price",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Decimal",
        "trait": "ToQuantityExt",
        "file": "crates/risk/src/unified_type_ops.rs",
        "line": 256,
        "methods": [
          {
            "name": "to_quantity",
            "line": 256,
            "return_type": "Quantity",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Decimal",
        "trait": "ToPercentageExt",
        "file": "crates/risk/src/unified_type_ops.rs",
        "line": 282,
        "methods": [
          {
            "name": "to_percentage",
            "line": 282,
            "return_type": "Percentage",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Decimal",
        "trait": "DecimalExt",
        "file": "crates/risk/src/type_conversion.rs",
        "line": 441,
        "methods": [
          {
            "name": "from_f64",
            "line": 441,
            "return_type": "Option<Self>",
            "is_async": false
          },
          {
            "name": "to_f64",
            "line": 443,
            "return_type": "Option<f64>",
            "is_async": false
          }
        ]
      }
    ],
    "f64": [
      {
        "struct": "f64",
        "trait": "ToPriceExt",
        "file": "crates/risk/src/unified_type_ops.rs",
        "line": 244,
        "methods": [
          {
            "name": "to_price",
            "line": 245,
            "return_type": "Price",
            "is_async": false
          }
        ]
      },
      {
        "struct": "f64",
        "trait": "ToQuantityExt",
        "file": "crates/risk/src/unified_type_ops.rs",
        "line": 263,
        "methods": [
          {
            "name": "to_quantity",
            "line": 263,
            "return_type": "Quantity",
            "is_async": false
          }
        ]
      },
      {
        "struct": "f64",
        "trait": "ToPercentageExt",
        "file": "crates/risk/src/unified_type_ops.rs",
        "line": 275,
        "methods": [
          {
            "name": "to_percentage",
            "line": 275,
            "return_type": "Percentage",
            "is_async": false
          }
        ]
      }
    ],
    "MLMetrics": [
      {
        "struct": "MLMetrics",
        "trait": "Default",
        "file": "crates/risk/src/ml_feedback.rs",
        "line": 1113,
        "methods": [
          {
            "name": "default",
            "line": 1113,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "KellyConfig": [
      {
        "struct": "KellyConfig",
        "trait": "Default",
        "file": "crates/risk/src/kelly_sizing.rs",
        "line": 58,
        "methods": [
          {
            "name": "default",
            "line": 58,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "RiskAdjustments": [
      {
        "struct": "RiskAdjustments",
        "trait": "Default",
        "file": "crates/risk/src/kelly_sizing.rs",
        "line": 113,
        "methods": [
          {
            "name": "default",
            "line": 113,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "TCopulaConfig": [
      {
        "struct": "TCopulaConfig",
        "trait": "Default",
        "file": "crates/risk/src/t_copula.rs",
        "line": 32,
        "methods": [
          {
            "name": "default",
            "line": 32,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "PathStatistics": [
      {
        "struct": "PathStatistics",
        "trait": "Default",
        "file": "crates/risk/src/monte_carlo.rs",
        "line": 978,
        "methods": [
          {
            "name": "default",
            "line": 978,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "PooledObject": [
      {
        "struct": "PooledObject",
        "trait": "Drop",
        "file": "crates/risk/src/performance_optimizations.rs",
        "line": 84,
        "methods": [
          {
            "name": "drop",
            "line": 84,
            "return_type": "()",
            "is_async": false
          }
        ]
      }
    ],
    "LockFreeRingBuffer": [
      {
        "struct": "LockFreeRingBuffer",
        "trait": "Sync",
        "file": "crates/risk/src/performance_optimizations.rs",
        "line": 128,
        "methods": []
      },
      {
        "struct": "LockFreeRingBuffer",
        "trait": "Send",
        "file": "crates/risk/src/performance_optimizations.rs",
        "line": 129,
        "methods": []
      }
    ],
    "SimdFeatures": [
      {
        "struct": "SimdFeatures",
        "trait": "Default",
        "file": "crates/risk/src/performance_optimizations.rs",
        "line": 221,
        "methods": [
          {
            "name": "default",
            "line": 221,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "TestObject": [
      {
        "struct": "TestObject",
        "trait": "Send",
        "file": "crates/risk/src/deep_dive_integration_tests.rs",
        "line": 173,
        "methods": []
      }
    ],
    "PerformanceStats": [
      {
        "struct": "PerformanceStats",
        "trait": "Default",
        "file": "crates/risk/src/profit_extractor.rs",
        "line": 1547,
        "methods": [
          {
            "name": "default",
            "line": 1547,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "RiskParameters": [
      {
        "struct": "RiskParameters",
        "trait": "Default",
        "file": "crates/risk/src/trading_types_complete.rs",
        "line": 395,
        "methods": [
          {
            "name": "default",
            "line": 395,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "AutoTunerConfig": [
      {
        "struct": "AutoTunerConfig",
        "trait": "Default",
        "file": "crates/risk/src/hyperparameter_optimization.rs",
        "line": 33,
        "methods": [
          {
            "name": "default",
            "line": 33,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "RandomSampler": [
      {
        "struct": "RandomSampler",
        "trait": "Sampler",
        "file": "crates/risk/src/hyperparameter_optimization.rs",
        "line": 419,
        "methods": [
          {
            "name": "sample",
            "line": 419,
            "return_type": "ParameterValue",
            "is_async": false
          },
          {
            "name": "infer_relative_search_space",
            "line": 435,
            "return_type": "HashMap<String, ParameterType>",
            "is_async": false
          },
          {
            "name": "sample_relative",
            "line": 445,
            "return_type": "HashMap<String, ParameterValue>",
            "is_async": false
          }
        ]
      }
    ],
    "NoPruner": [
      {
        "struct": "NoPruner",
        "trait": "Pruner",
        "file": "crates/risk/src/hyperparameter_optimization.rs",
        "line": 475,
        "methods": [
          {
            "name": "should_prune",
            "line": 475,
            "return_type": "bool",
            "is_async": false
          }
        ]
      }
    ],
    "TPESampler": [
      {
        "struct": "TPESampler",
        "trait": "Sampler",
        "file": "crates/risk/src/hyperparameter_optimization.rs",
        "line": 724,
        "methods": [
          {
            "name": "sample",
            "line": 724,
            "return_type": "ParameterValue",
            "is_async": false
          },
          {
            "name": "infer_relative_search_space",
            "line": 782,
            "return_type": "HashMap<String, ParameterType>",
            "is_async": false
          },
          {
            "name": "sample_relative",
            "line": 791,
            "return_type": "HashMap<String, ParameterValue>",
            "is_async": false
          }
        ]
      }
    ],
    "MedianPruner": [
      {
        "struct": "MedianPruner",
        "trait": "Pruner",
        "file": "crates/risk/src/hyperparameter_optimization.rs",
        "line": 1056,
        "methods": [
          {
            "name": "should_prune",
            "line": 1056,
            "return_type": "bool",
            "is_async": false
          }
        ]
      }
    ],
    "OrderBookSnapshot": [
      {
        "struct": "OrderBookSnapshot",
        "trait": "Default",
        "file": "crates/risk/src/order_book_analytics.rs",
        "line": 934,
        "methods": [
          {
            "name": "default",
            "line": 934,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "FundingConfig": [
      {
        "struct": "FundingConfig",
        "trait": "Default",
        "file": "crates/risk/src/funding_rates.rs",
        "line": 593,
        "methods": [
          {
            "name": "default",
            "line": 593,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "MLFeedbackSystemExt": [
      {
        "struct": "MLFeedbackSystemExt",
        "trait": "Default",
        "file": "crates/risk/src/ml_extensions.rs",
        "line": 71,
        "methods": [
          {
            "name": "default",
            "line": 71,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "SHAPCalculatorExt": [
      {
        "struct": "SHAPCalculatorExt",
        "trait": "Default",
        "file": "crates/risk/src/ml_extensions.rs",
        "line": 83,
        "methods": [
          {
            "name": "default",
            "line": 83,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "MarketAnalyticsExt": [
      {
        "struct": "MarketAnalyticsExt",
        "trait": "Default",
        "file": "crates/risk/src/ml_extensions.rs",
        "line": 95,
        "methods": [
          {
            "name": "default",
            "line": 95,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "PortfolioConfig": [
      {
        "struct": "PortfolioConfig",
        "trait": "Default",
        "file": "crates/risk/src/portfolio_manager.rs",
        "line": 369,
        "methods": [
          {
            "name": "default",
            "line": 369,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "ClampConfig": [
      {
        "struct": "ClampConfig",
        "trait": "Default",
        "file": "crates/risk/src/clamps.rs",
        "line": 67,
        "methods": [
          {
            "name": "default",
            "line": 67,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "MLFeedbackSystem": [
      {
        "struct": "MLFeedbackSystem",
        "trait": "MLFeedbackSystemExt",
        "file": "crates/risk/src/ml_complete_impl.rs",
        "line": 65,
        "methods": [
          {
            "name": "calibrate_probability",
            "line": 67,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "update_prediction_history",
            "line": 84,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_calibration_metrics",
            "line": 107,
            "return_type": "CalibrationMetrics",
            "is_async": false
          },
          {
            "name": "recalibrate_with_isotonic",
            "line": 166,
            "return_type": "()",
            "is_async": false
          }
        ]
      }
    ],
    "SHAPCalculator": [
      {
        "struct": "SHAPCalculator",
        "trait": "SHAPCalculatorExt",
        "file": "crates/risk/src/ml_complete_impl.rs",
        "line": 193,
        "methods": [
          {
            "name": "calculate_shap_values",
            "line": 195,
            "return_type": "Vec<f64>",
            "is_async": false
          },
          {
            "name": "get_feature_importance",
            "line": 236,
            "return_type": "Vec<(String, f64)>",
            "is_async": false
          },
          {
            "name": "calculate_interaction_effects",
            "line": 262,
            "return_type": "HashMap<(usize, usize), f64>",
            "is_async": false
          }
        ]
      }
    ],
    "MarketAnalytics": [
      {
        "struct": "MarketAnalytics",
        "trait": "MarketAnalyticsExt",
        "file": "crates/risk/src/ml_complete_impl.rs",
        "line": 288,
        "methods": [
          {
            "name": "get_stochastic",
            "line": 290,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "get_obv",
            "line": 309,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "get_obv_ma",
            "line": 337,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_rsi",
            "line": 359,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "calculate_macd",
            "line": 390,
            "return_type": "(f64, f64, f64)",
            "is_async": false
          },
          {
            "name": "calculate_bollinger_bands",
            "line": 424,
            "return_type": "(f64, f64, f64)",
            "is_async": false
          }
        ]
      }
    ],
    "EnhancedOrderBook": [
      {
        "struct": "EnhancedOrderBook",
        "trait": "EnhancedOrderBookExt",
        "file": "crates/risk/src/ml_complete_impl.rs",
        "line": 450,
        "methods": [
          {
            "name": "total_bid_volume",
            "line": 450,
            "return_type": "Decimal",
            "is_async": false
          },
          {
            "name": "total_ask_volume",
            "line": 456,
            "return_type": "Decimal",
            "is_async": false
          },
          {
            "name": "calculate_vwap",
            "line": 465,
            "return_type": "Decimal",
            "is_async": false
          },
          {
            "name": "calculate_microprice",
            "line": 496,
            "return_type": "Decimal",
            "is_async": false
          },
          {
            "name": "calculate_kyle_lambda",
            "line": 516,
            "return_type": "f64",
            "is_async": false
          }
        ]
      }
    ],
    "RiskMetrics": [
      {
        "struct": "RiskMetrics",
        "trait": "Default",
        "file": "crates/risk/src/unified_types.rs",
        "line": 143,
        "methods": [
          {
            "name": "default",
            "line": 143,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "RiskMetrics",
        "trait": "Default",
        "file": "crates/risk_engine/src/monitor.rs",
        "line": 49,
        "methods": [
          {
            "name": "default",
            "line": 49,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "PositionId": [
      {
        "struct": "PositionId",
        "trait": "Default",
        "file": "crates/order_management/src/position.rs",
        "line": 20,
        "methods": [
          {
            "name": "default",
            "line": 20,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "PositionManager": [
      {
        "struct": "PositionManager",
        "trait": "Default",
        "file": "crates/order_management/src/position.rs",
        "line": 185,
        "methods": [
          {
            "name": "default",
            "line": 185,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "PnLCalculator": [
      {
        "struct": "PnLCalculator",
        "trait": "Default",
        "file": "crates/order_management/src/position.rs",
        "line": 379,
        "methods": [
          {
            "name": "default",
            "line": 379,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "OrderManagerConfig": [
      {
        "struct": "OrderManagerConfig",
        "trait": "Default",
        "file": "crates/order_management/src/manager.rs",
        "line": 27,
        "methods": [
          {
            "name": "default",
            "line": 27,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "OrderId": [
      {
        "struct": "OrderId",
        "trait": "Default",
        "file": "crates/order_management/src/order.rs",
        "line": 15,
        "methods": [
          {
            "name": "default",
            "line": 15,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "PositionLimits": [
      {
        "struct": "PositionLimits",
        "trait": "Default",
        "file": "crates/risk_engine/src/limits.rs",
        "line": 44,
        "methods": [
          {
            "name": "default",
            "line": 44,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "LossLimits": [
      {
        "struct": "LossLimits",
        "trait": "Default",
        "file": "crates/risk_engine/src/limits.rs",
        "line": 80,
        "methods": [
          {
            "name": "default",
            "line": 80,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "ExposureLimits": [
      {
        "struct": "ExposureLimits",
        "trait": "Default",
        "file": "crates/risk_engine/src/limits.rs",
        "line": 109,
        "methods": [
          {
            "name": "default",
            "line": 109,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "CorrelationLimits": [
      {
        "struct": "CorrelationLimits",
        "trait": "Default",
        "file": "crates/risk_engine/src/limits.rs",
        "line": 136,
        "methods": [
          {
            "name": "default",
            "line": 136,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "DetectionConfig": [
      {
        "struct": "DetectionConfig",
        "trait": "Default",
        "file": "crates/risk_engine/src/market_maker_detection.rs",
        "line": 128,
        "methods": [
          {
            "name": "default",
            "line": 128,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "DetectionConfig",
        "trait": "Default",
        "file": "crates/risk_engine/src/latency_arbitrage_detection.rs",
        "line": 162,
        "methods": [
          {
            "name": "default",
            "line": 162,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "AdverseSelectionDetector": [
      {
        "struct": "AdverseSelectionDetector",
        "trait": "Clone",
        "file": "crates/risk_engine/src/adverse_selection.rs",
        "line": 387,
        "methods": [
          {
            "name": "clone",
            "line": 387,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "IntegratedMLPipeline": [
      {
        "struct": "IntegratedMLPipeline",
        "trait": "Default",
        "file": "crates/ml/src/integrated_optimization.rs",
        "line": 65,
        "methods": [
          {
            "name": "default",
            "line": 65,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "AVXOptimizer": [
      {
        "struct": "AVXOptimizer",
        "trait": "Default",
        "file": "crates/ml/src/optimization.rs",
        "line": 27,
        "methods": [
          {
            "name": "default",
            "line": 27,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "GARCH": [
      {
        "struct": "GARCH",
        "trait": "Default",
        "file": "crates/ml/src/garch.rs",
        "line": 43,
        "methods": [
          {
            "name": "default",
            "line": 43,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "StrassenMultiplier": [
      {
        "struct": "StrassenMultiplier",
        "trait": "Default",
        "file": "crates/ml/src/math_opt/mod.rs",
        "line": 40,
        "methods": [
          {
            "name": "default",
            "line": 40,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "FFTConvolution": [
      {
        "struct": "FFTConvolution",
        "trait": "Default",
        "file": "crates/ml/src/math_opt/mod.rs",
        "line": 473,
        "methods": [
          {
            "name": "default",
            "line": 473,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "KahanSum": [
      {
        "struct": "KahanSum",
        "trait": "Default",
        "file": "crates/ml/src/math_opt/mod.rs",
        "line": 617,
        "methods": [
          {
            "name": "default",
            "line": 617,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "LeakageSentinel": [
      {
        "struct": "LeakageSentinel",
        "trait": "Default",
        "file": "crates/ml/src/validation/purged_cv.rs",
        "line": 152,
        "methods": [
          {
            "name": "default",
            "line": 152,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "MockModel": [
      {
        "struct": "MockModel",
        "trait": "MLModel",
        "file": "crates/ml/src/validation/purged_cv.rs",
        "line": 399,
        "methods": [
          {
            "name": "fit",
            "line": 399,
            "return_type": "Result<(), String>",
            "is_async": false
          },
          {
            "name": "predict",
            "line": 402,
            "return_type": "Result<Array1<f32>, String>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MockModel",
        "trait": "BaseModel",
        "file": "crates/ml/src/models/stacking_ensemble.rs",
        "line": 705,
        "methods": [
          {
            "name": "fit",
            "line": 705,
            "return_type": "Result<(), ModelError>",
            "is_async": true
          },
          {
            "name": "predict",
            "line": 708,
            "return_type": "Result<Array1<f32>, ModelError>",
            "is_async": true
          },
          {
            "name": "predict_proba",
            "line": 716,
            "return_type": "Result<Array2<f32>, ModelError>",
            "is_async": true
          },
          {
            "name": "feature_importance",
            "line": 730,
            "return_type": "Option<Array1<f32>>",
            "is_async": false
          },
          {
            "name": "name",
            "line": 734,
            "return_type": "&str",
            "is_async": false
          }
        ]
      }
    ],
    "IsotonicCalibrator": [
      {
        "struct": "IsotonicCalibrator",
        "trait": "Default",
        "file": "crates/ml/src/calibration/isotonic.rs",
        "line": 40,
        "methods": [
          {
            "name": "default",
            "line": 40,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "AlignedVec": [
      {
        "struct": "AlignedVec",
        "trait": "Drop",
        "file": "crates/ml/src/simd/mod.rs",
        "line": 117,
        "methods": [
          {
            "name": "drop",
            "line": 117,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "AlignedVec",
        "trait": "Default",
        "file": "crates/ml/src/simd/mod.rs",
        "line": 136,
        "methods": [
          {
            "name": "default",
            "line": 136,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "AlignedVec",
        "trait": "Send",
        "file": "crates/ml/src/simd/mod.rs",
        "line": 143,
        "methods": []
      },
      {
        "struct": "AlignedVec",
        "trait": "Sync",
        "file": "crates/ml/src/simd/mod.rs",
        "line": 146,
        "methods": []
      }
    ],
    "ConvergenceConfig": [
      {
        "struct": "ConvergenceConfig",
        "trait": "Default",
        "file": "crates/ml/src/training/convergence_monitor.rs",
        "line": 72,
        "methods": [
          {
            "name": "default",
            "line": 72,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "SearchSpace": [
      {
        "struct": "SearchSpace",
        "trait": "Default",
        "file": "crates/ml/src/training/hyperparameter.rs",
        "line": 39,
        "methods": [
          {
            "name": "default",
            "line": 39,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "Trial": [
      {
        "struct": "Trial",
        "trait": "PartialEq",
        "file": "crates/ml/src/training/hyperparameter.rs",
        "line": 179,
        "methods": [
          {
            "name": "eq",
            "line": 179,
            "return_type": "bool",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Trial",
        "trait": "Eq",
        "file": "crates/ml/src/training/hyperparameter.rs",
        "line": 185,
        "methods": []
      },
      {
        "struct": "Trial",
        "trait": "PartialOrd",
        "file": "crates/ml/src/training/hyperparameter.rs",
        "line": 187,
        "methods": [
          {
            "name": "partial_cmp",
            "line": 187,
            "return_type": "Option<Ordering>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "Trial",
        "trait": "Ord",
        "file": "crates/ml/src/training/hyperparameter.rs",
        "line": 193,
        "methods": [
          {
            "name": "cmp",
            "line": 193,
            "return_type": "Ordering",
            "is_async": false
          }
        ]
      }
    ],
    "TimeSeriesSplit": [
      {
        "struct": "TimeSeriesSplit",
        "trait": "ValidationStrategy",
        "file": "crates/ml/src/training/cross_validation.rs",
        "line": 64,
        "methods": [
          {
            "name": "split",
            "line": 64,
            "return_type": "Vec<(Vec<usize>, Vec<usize>)>",
            "is_async": false
          },
          {
            "name": "name",
            "line": 102,
            "return_type": "&str",
            "is_async": false
          }
        ]
      }
    ],
    "PurgedKFold": [
      {
        "struct": "PurgedKFold",
        "trait": "ValidationStrategy",
        "file": "crates/ml/src/training/cross_validation.rs",
        "line": 143,
        "methods": [
          {
            "name": "split",
            "line": 143,
            "return_type": "Vec<(Vec<usize>, Vec<usize>)>",
            "is_async": false
          },
          {
            "name": "name",
            "line": 176,
            "return_type": "&str",
            "is_async": false
          }
        ]
      }
    ],
    "CombinatorialPurgedCV": [
      {
        "struct": "CombinatorialPurgedCV",
        "trait": "ValidationStrategy",
        "file": "crates/ml/src/training/cross_validation.rs",
        "line": 244,
        "methods": [
          {
            "name": "split",
            "line": 244,
            "return_type": "Vec<(Vec<usize>, Vec<usize>)>",
            "is_async": false
          },
          {
            "name": "name",
            "line": 282,
            "return_type": "&str",
            "is_async": false
          }
        ]
      }
    ],
    "WalkForwardAnalysis": [
      {
        "struct": "WalkForwardAnalysis",
        "trait": "ValidationStrategy",
        "file": "crates/ml/src/training/cross_validation.rs",
        "line": 326,
        "methods": [
          {
            "name": "split",
            "line": 326,
            "return_type": "Vec<(Vec<usize>, Vec<usize>)>",
            "is_async": false
          },
          {
            "name": "name",
            "line": 346,
            "return_type": "&str",
            "is_async": false
          }
        ]
      }
    ],
    "AdamOptimizer": [
      {
        "struct": "AdamOptimizer",
        "trait": "Optimizer",
        "file": "crates/ml/src/training/optimizer.rs",
        "line": 66,
        "methods": [
          {
            "name": "step",
            "line": 66,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "reset",
            "line": 98,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_learning_rate",
            "line": 104,
            "return_type": "f64",
            "is_async": false
          }
        ]
      }
    ],
    "SGDOptimizer": [
      {
        "struct": "SGDOptimizer",
        "trait": "Optimizer",
        "file": "crates/ml/src/training/optimizer.rs",
        "line": 139,
        "methods": [
          {
            "name": "step",
            "line": 139,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "reset",
            "line": 163,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_learning_rate",
            "line": 168,
            "return_type": "f64",
            "is_async": false
          }
        ]
      }
    ],
    "RMSpropOptimizer": [
      {
        "struct": "RMSpropOptimizer",
        "trait": "Optimizer",
        "file": "crates/ml/src/training/optimizer.rs",
        "line": 207,
        "methods": [
          {
            "name": "step",
            "line": 207,
            "return_type": "Result<()>",
            "is_async": false
          },
          {
            "name": "reset",
            "line": 238,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_learning_rate",
            "line": 244,
            "return_type": "f64",
            "is_async": false
          }
        ]
      }
    ],
    "MetricsCalculator": [
      {
        "struct": "MetricsCalculator",
        "trait": "Default",
        "file": "crates/ml/src/training/metrics.rs",
        "line": 270,
        "methods": [
          {
            "name": "default",
            "line": 270,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "TrainingConfig": [
      {
        "struct": "TrainingConfig",
        "trait": "Default",
        "file": "crates/ml/src/training/mod.rs",
        "line": 76,
        "methods": [
          {
            "name": "default",
            "line": 76,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "FeatureConfig": [
      {
        "struct": "FeatureConfig",
        "trait": "Default",
        "file": "crates/ml/src/feature_engine/pipeline.rs",
        "line": 57,
        "methods": [
          {
            "name": "default",
            "line": 57,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "SimdAccelerator": [
      {
        "struct": "SimdAccelerator",
        "trait": "Default",
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 118,
        "methods": [
          {
            "name": "default",
            "line": 118,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "CircuitBreaker": [
      {
        "struct": "CircuitBreaker",
        "trait": "Default",
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 224,
        "methods": [
          {
            "name": "default",
            "line": 224,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "FeatureBounds": [
      {
        "struct": "FeatureBounds",
        "trait": "Default",
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 259,
        "methods": [
          {
            "name": "default",
            "line": 259,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "SMA": [
      {
        "struct": "SMA",
        "trait": "Indicator",
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 329,
        "methods": [
          {
            "name": "calculate",
            "line": 329,
            "return_type": "Result<f64, IndicatorError>",
            "is_async": false
          },
          {
            "name": "name",
            "line": 344,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "lookback_period",
            "line": 347,
            "return_type": "usize",
            "is_async": false
          }
        ]
      }
    ],
    "EMA": [
      {
        "struct": "EMA",
        "trait": "Indicator",
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 364,
        "methods": [
          {
            "name": "calculate",
            "line": 364,
            "return_type": "Result<f64, IndicatorError>",
            "is_async": false
          },
          {
            "name": "name",
            "line": 377,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "lookback_period",
            "line": 380,
            "return_type": "usize",
            "is_async": false
          }
        ]
      }
    ],
    "WMA": [
      {
        "struct": "WMA",
        "trait": "Indicator",
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 396,
        "methods": [
          {
            "name": "calculate",
            "line": 396,
            "return_type": "Result<f64, IndicatorError>",
            "is_async": false
          },
          {
            "name": "name",
            "line": 412,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "lookback_period",
            "line": 415,
            "return_type": "usize",
            "is_async": false
          }
        ]
      }
    ],
    "VWMA": [
      {
        "struct": "VWMA",
        "trait": "Indicator",
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 431,
        "methods": [
          {
            "name": "calculate",
            "line": 431,
            "return_type": "Result<f64, IndicatorError>",
            "is_async": false
          },
          {
            "name": "name",
            "line": 450,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "requires_volume",
            "line": 453,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "lookback_period",
            "line": 454,
            "return_type": "usize",
            "is_async": false
          }
        ]
      }
    ],
    "RSI": [
      {
        "struct": "RSI",
        "trait": "Indicator",
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 522,
        "methods": [
          {
            "name": "calculate",
            "line": 522,
            "return_type": "Result<f64, IndicatorError>",
            "is_async": false
          },
          {
            "name": "name",
            "line": 530,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "lookback_period",
            "line": 533,
            "return_type": "usize",
            "is_async": false
          }
        ]
      }
    ],
    "MACD": [
      {
        "struct": "MACD",
        "trait": "Indicator",
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 555,
        "methods": [
          {
            "name": "calculate",
            "line": 555,
            "return_type": "Result<f64, IndicatorError>",
            "is_async": false
          },
          {
            "name": "name",
            "line": 569,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "lookback_period",
            "line": 572,
            "return_type": "usize",
            "is_async": false
          }
        ]
      }
    ],
    "ATR": [
      {
        "struct": "ATR",
        "trait": "Indicator",
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 592,
        "methods": [
          {
            "name": "calculate",
            "line": 592,
            "return_type": "Result<f64, IndicatorError>",
            "is_async": false
          },
          {
            "name": "name",
            "line": 613,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "lookback_period",
            "line": 616,
            "return_type": "usize",
            "is_async": false
          }
        ]
      }
    ],
    "BollingerBands": [
      {
        "struct": "BollingerBands",
        "trait": "Indicator",
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 633,
        "methods": [
          {
            "name": "calculate",
            "line": 633,
            "return_type": "Result<f64, IndicatorError>",
            "is_async": false
          },
          {
            "name": "name",
            "line": 654,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "lookback_period",
            "line": 657,
            "return_type": "usize",
            "is_async": false
          }
        ]
      }
    ],
    "OBV": [
      {
        "struct": "OBV",
        "trait": "Indicator",
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 668,
        "methods": [
          {
            "name": "calculate",
            "line": 668,
            "return_type": "Result<f64, IndicatorError>",
            "is_async": false
          },
          {
            "name": "name",
            "line": 685,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "requires_volume",
            "line": 688,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "lookback_period",
            "line": 689,
            "return_type": "usize",
            "is_async": false
          }
        ]
      }
    ],
    "IndicatorEngine": [
      {
        "struct": "IndicatorEngine",
        "trait": "Default",
        "file": "crates/ml/src/feature_engine/indicators.rs",
        "line": 697,
        "methods": [
          {
            "name": "default",
            "line": 697,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "Stochastic": [
      {
        "struct": "Stochastic",
        "trait": "Indicator",
        "file": "crates/ml/src/feature_engine/indicators_extended.rs",
        "line": 25,
        "methods": [
          {
            "name": "calculate",
            "line": 25,
            "return_type": "Result<f64, IndicatorError>",
            "is_async": false
          },
          {
            "name": "name",
            "line": 40,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "lookback_period",
            "line": 44,
            "return_type": "usize",
            "is_async": false
          }
        ]
      }
    ],
    "WilliamsR": [
      {
        "struct": "WilliamsR",
        "trait": "Indicator",
        "file": "crates/ml/src/feature_engine/indicators_extended.rs",
        "line": 60,
        "methods": [
          {
            "name": "calculate",
            "line": 60,
            "return_type": "Result<f64, IndicatorError>",
            "is_async": false
          },
          {
            "name": "name",
            "line": 75,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "lookback_period",
            "line": 78,
            "return_type": "usize",
            "is_async": false
          }
        ]
      }
    ],
    "CCI": [
      {
        "struct": "CCI",
        "trait": "Indicator",
        "file": "crates/ml/src/feature_engine/indicators_extended.rs",
        "line": 94,
        "methods": [
          {
            "name": "calculate",
            "line": 94,
            "return_type": "Result<f64, IndicatorError>",
            "is_async": false
          },
          {
            "name": "name",
            "line": 119,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "lookback_period",
            "line": 122,
            "return_type": "usize",
            "is_async": false
          }
        ]
      }
    ],
    "MFI": [
      {
        "struct": "MFI",
        "trait": "Indicator",
        "file": "crates/ml/src/feature_engine/indicators_extended.rs",
        "line": 138,
        "methods": [
          {
            "name": "calculate",
            "line": 138,
            "return_type": "Result<f64, IndicatorError>",
            "is_async": false
          },
          {
            "name": "name",
            "line": 164,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "requires_volume",
            "line": 167,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "lookback_period",
            "line": 168,
            "return_type": "usize",
            "is_async": false
          }
        ]
      }
    ],
    "HMA": [
      {
        "struct": "HMA",
        "trait": "Indicator",
        "file": "crates/ml/src/feature_engine/indicators_extended.rs",
        "line": 188,
        "methods": [
          {
            "name": "calculate",
            "line": 188,
            "return_type": "Result<f64, IndicatorError>",
            "is_async": false
          },
          {
            "name": "name",
            "line": 220,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "lookback_period",
            "line": 223,
            "return_type": "usize",
            "is_async": false
          }
        ]
      }
    ],
    "KAMA": [
      {
        "struct": "KAMA",
        "trait": "Indicator",
        "file": "crates/ml/src/feature_engine/indicators_extended.rs",
        "line": 241,
        "methods": [
          {
            "name": "calculate",
            "line": 241,
            "return_type": "Result<f64, IndicatorError>",
            "is_async": false
          },
          {
            "name": "name",
            "line": 272,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "lookback_period",
            "line": 275,
            "return_type": "usize",
            "is_async": false
          }
        ]
      }
    ],
    "ParabolicSAR": [
      {
        "struct": "ParabolicSAR",
        "trait": "Indicator",
        "file": "crates/ml/src/feature_engine/indicators_extended.rs",
        "line": 292,
        "methods": [
          {
            "name": "calculate",
            "line": 292,
            "return_type": "Result<f64, IndicatorError>",
            "is_async": false
          },
          {
            "name": "name",
            "line": 339,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "lookback_period",
            "line": 343,
            "return_type": "usize",
            "is_async": false
          }
        ]
      }
    ],
    "KeltnerChannel": [
      {
        "struct": "KeltnerChannel",
        "trait": "Indicator",
        "file": "crates/ml/src/feature_engine/indicators_extended.rs",
        "line": 365,
        "methods": [
          {
            "name": "calculate",
            "line": 365,
            "return_type": "Result<f64, IndicatorError>",
            "is_async": false
          },
          {
            "name": "name",
            "line": 376,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "lookback_period",
            "line": 379,
            "return_type": "usize",
            "is_async": false
          }
        ]
      }
    ],
    "DonchianChannel": [
      {
        "struct": "DonchianChannel",
        "trait": "Indicator",
        "file": "crates/ml/src/feature_engine/indicators_extended.rs",
        "line": 395,
        "methods": [
          {
            "name": "calculate",
            "line": 395,
            "return_type": "Result<f64, IndicatorError>",
            "is_async": false
          },
          {
            "name": "name",
            "line": 406,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "lookback_period",
            "line": 409,
            "return_type": "usize",
            "is_async": false
          }
        ]
      }
    ],
    "StdDev": [
      {
        "struct": "StdDev",
        "trait": "Indicator",
        "file": "crates/ml/src/feature_engine/indicators_extended.rs",
        "line": 425,
        "methods": [
          {
            "name": "calculate",
            "line": 425,
            "return_type": "Result<f64, IndicatorError>",
            "is_async": false
          },
          {
            "name": "name",
            "line": 441,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "lookback_period",
            "line": 444,
            "return_type": "usize",
            "is_async": false
          }
        ]
      }
    ],
    "CMF": [
      {
        "struct": "CMF",
        "trait": "Indicator",
        "file": "crates/ml/src/feature_engine/indicators_extended.rs",
        "line": 464,
        "methods": [
          {
            "name": "calculate",
            "line": 464,
            "return_type": "Result<f64, IndicatorError>",
            "is_async": false
          },
          {
            "name": "name",
            "line": 489,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "requires_volume",
            "line": 492,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "lookback_period",
            "line": 493,
            "return_type": "usize",
            "is_async": false
          }
        ]
      }
    ],
    "VWAP": [
      {
        "struct": "VWAP",
        "trait": "Indicator",
        "file": "crates/ml/src/feature_engine/indicators_extended.rs",
        "line": 500,
        "methods": [
          {
            "name": "calculate",
            "line": 500,
            "return_type": "Result<f64, IndicatorError>",
            "is_async": false
          },
          {
            "name": "name",
            "line": 521,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "requires_volume",
            "line": 524,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "lookback_period",
            "line": 525,
            "return_type": "usize",
            "is_async": false
          }
        ]
      }
    ],
    "ADL": [
      {
        "struct": "ADL",
        "trait": "Indicator",
        "file": "crates/ml/src/feature_engine/indicators_extended.rs",
        "line": 532,
        "methods": [
          {
            "name": "calculate",
            "line": 532,
            "return_type": "Result<f64, IndicatorError>",
            "is_async": false
          },
          {
            "name": "name",
            "line": 551,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "requires_volume",
            "line": 554,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "lookback_period",
            "line": 555,
            "return_type": "usize",
            "is_async": false
          }
        ]
      }
    ],
    "SupportResistance": [
      {
        "struct": "SupportResistance",
        "trait": "Indicator",
        "file": "crates/ml/src/feature_engine/indicators_extended.rs",
        "line": 576,
        "methods": [
          {
            "name": "calculate",
            "line": 576,
            "return_type": "Result<f64, IndicatorError>",
            "is_async": false
          },
          {
            "name": "name",
            "line": 605,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "lookback_period",
            "line": 609,
            "return_type": "usize",
            "is_async": false
          }
        ]
      }
    ],
    "PivotPoints": [
      {
        "struct": "PivotPoints",
        "trait": "Indicator",
        "file": "crates/ml/src/feature_engine/indicators_extended.rs",
        "line": 616,
        "methods": [
          {
            "name": "calculate",
            "line": 616,
            "return_type": "Result<f64, IndicatorError>",
            "is_async": false
          },
          {
            "name": "name",
            "line": 625,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "lookback_period",
            "line": 628,
            "return_type": "usize",
            "is_async": false
          }
        ]
      }
    ],
    "TrendStrengthIndex": [
      {
        "struct": "TrendStrengthIndex",
        "trait": "Indicator",
        "file": "crates/ml/src/feature_engine/indicators_extended.rs",
        "line": 648,
        "methods": [
          {
            "name": "calculate",
            "line": 648,
            "return_type": "Result<f64, IndicatorError>",
            "is_async": false
          },
          {
            "name": "name",
            "line": 664,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "lookback_period",
            "line": 667,
            "return_type": "usize",
            "is_async": false
          }
        ]
      }
    ],
    "MarketRegime": [
      {
        "struct": "MarketRegime",
        "trait": "Indicator",
        "file": "crates/ml/src/feature_engine/indicators_extended.rs",
        "line": 684,
        "methods": [
          {
            "name": "calculate",
            "line": 684,
            "return_type": "Result<f64, IndicatorError>",
            "is_async": false
          },
          {
            "name": "name",
            "line": 709,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "lookback_period",
            "line": 713,
            "return_type": "usize",
            "is_async": false
          }
        ]
      }
    ],
    "IchimokuCloud": [
      {
        "struct": "IchimokuCloud",
        "trait": "Indicator",
        "file": "crates/ml/src/feature_engine/ichimoku.rs",
        "line": 297,
        "methods": [
          {
            "name": "calculate",
            "line": 297,
            "return_type": "Result<f64, IndicatorError>",
            "is_async": false
          },
          {
            "name": "name",
            "line": 301,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "lookback_period",
            "line": 306,
            "return_type": "usize",
            "is_async": false
          }
        ]
      }
    ],
    "GRUConfig": [
      {
        "struct": "GRUConfig",
        "trait": "Default",
        "file": "crates/ml/src/models/gru.rs",
        "line": 61,
        "methods": [
          {
            "name": "default",
            "line": 61,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "DataScaler": [
      {
        "struct": "DataScaler",
        "trait": "Default",
        "file": "crates/ml/src/models/gru.rs",
        "line": 308,
        "methods": [
          {
            "name": "default",
            "line": 308,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "ARIMAConfig": [
      {
        "struct": "ARIMAConfig",
        "trait": "Default",
        "file": "crates/ml/src/models/arima.rs",
        "line": 42,
        "methods": [
          {
            "name": "default",
            "line": 42,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "LSTMConfig": [
      {
        "struct": "LSTMConfig",
        "trait": "Default",
        "file": "crates/ml/src/models/lstm.rs",
        "line": 61,
        "methods": [
          {
            "name": "default",
            "line": 61,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "GARCHModel": [
      {
        "struct": "GARCHModel",
        "trait": "Default",
        "file": "crates/ml/src/models/garch.rs",
        "line": 43,
        "methods": [
          {
            "name": "default",
            "line": 43,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "EnsembleConfig": [
      {
        "struct": "EnsembleConfig",
        "trait": "Default",
        "file": "crates/ml/src/models/ensemble.rs",
        "line": 91,
        "methods": [
          {
            "name": "default",
            "line": 91,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "XGBoostParams": [
      {
        "struct": "XGBoostParams",
        "trait": "Default",
        "file": "crates/ml/src/models/xgboost_optimized.rs",
        "line": 94,
        "methods": [
          {
            "name": "default",
            "line": 94,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "ModelMetrics": [
      {
        "struct": "ModelMetrics",
        "trait": "Default",
        "file": "crates/ml/src/models/registry.rs",
        "line": 172,
        "methods": [
          {
            "name": "default",
            "line": 172,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "RollbackConfig": [
      {
        "struct": "RollbackConfig",
        "trait": "Default",
        "file": "crates/ml/src/models/registry.rs",
        "line": 237,
        "methods": [
          {
            "name": "default",
            "line": 237,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "DegradationDetector": [
      {
        "struct": "DegradationDetector",
        "trait": "Default",
        "file": "crates/ml/src/models/registry.rs",
        "line": 263,
        "methods": [
          {
            "name": "default",
            "line": 263,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "WalkForwardConfig": [
      {
        "struct": "WalkForwardConfig",
        "trait": "Default",
        "file": "crates/ml/src/backtesting/walk_forward.rs",
        "line": 72,
        "methods": [
          {
            "name": "default",
            "line": 72,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "CircuitConfig": [
      {
        "struct": "CircuitConfig",
        "trait": "Default",
        "file": "crates/infrastructure/src/circuit_breaker_sophia.rs",
        "line": 77,
        "methods": [
          {
            "name": "default",
            "line": 77,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "CircuitConfig",
        "trait": "Default",
        "file": "crates/infrastructure/src/circuit_breaker.rs",
        "line": 60,
        "methods": [
          {
            "name": "default",
            "line": 60,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "SystemClock": [
      {
        "struct": "SystemClock",
        "trait": "Clock",
        "file": "crates/infrastructure/src/circuit_breaker_sophia.rs",
        "line": 118,
        "methods": [
          {
            "name": "now",
            "line": 118,
            "return_type": "Instant",
            "is_async": false
          }
        ]
      },
      {
        "struct": "SystemClock",
        "trait": "Clock",
        "file": "crates/infrastructure/src/circuit_breaker.rs",
        "line": 100,
        "methods": [
          {
            "name": "now",
            "line": 100,
            "return_type": "Instant",
            "is_async": false
          }
        ]
      }
    ],
    "CallGuard": [
      {
        "struct": "CallGuard",
        "trait": "Send",
        "file": "crates/infrastructure/src/circuit_breaker_sophia.rs",
        "line": 497,
        "methods": []
      },
      {
        "struct": "CallGuard",
        "trait": "Sync",
        "file": "crates/infrastructure/src/circuit_breaker_sophia.rs",
        "line": 498,
        "methods": []
      },
      {
        "struct": "CallGuard",
        "trait": "Drop",
        "file": "crates/infrastructure/src/circuit_breaker_sophia.rs",
        "line": 531,
        "methods": [
          {
            "name": "drop",
            "line": 532,
            "return_type": "()",
            "is_async": false
          }
        ]
      },
      {
        "struct": "CallGuard",
        "trait": "Drop",
        "file": "crates/infrastructure/src/circuit_breaker.rs",
        "line": 190,
        "methods": [
          {
            "name": "drop",
            "line": 190,
            "return_type": "()",
            "is_async": false
          }
        ]
      }
    ],
    "ReconciliationConfig": [
      {
        "struct": "ReconciliationConfig",
        "trait": "Default",
        "file": "crates/infrastructure/src/position_reconciliation.rs",
        "line": 462,
        "methods": [
          {
            "name": "default",
            "line": 462,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ReconciliationConfig",
        "trait": "Default",
        "file": "crates/data_ingestion/src/data_quality/reconciliation.rs",
        "line": 39,
        "methods": [
          {
            "name": "default",
            "line": 39,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "ToxicityThresholds": [
      {
        "struct": "ToxicityThresholds",
        "trait": "Default",
        "file": "crates/infrastructure/src/circuit_breaker_integration.rs",
        "line": 294,
        "methods": [
          {
            "name": "default",
            "line": 294,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "FakeClock": [
      {
        "struct": "FakeClock",
        "trait": "Clock",
        "file": "crates/infrastructure/src/circuit_breaker.rs",
        "line": 127,
        "methods": [
          {
            "name": "now",
            "line": 127,
            "return_type": "Instant",
            "is_async": false
          }
        ]
      }
    ],
    "ParallelPipeline": [
      {
        "struct": "ParallelPipeline",
        "trait": "Default",
        "file": "crates/infrastructure/src/rayon_enhanced.rs",
        "line": 415,
        "methods": [
          {
            "name": "default",
            "line": 415,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "PanicThresholds": [
      {
        "struct": "PanicThresholds",
        "trait": "Default",
        "file": "crates/infrastructure/src/panic_conditions.rs",
        "line": 60,
        "methods": [
          {
            "name": "default",
            "line": 60,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "PriorityAlert": [
      {
        "struct": "PriorityAlert",
        "trait": "PartialEq",
        "file": "crates/infrastructure/src/alert_management.rs",
        "line": 419,
        "methods": [
          {
            "name": "eq",
            "line": 419,
            "return_type": "bool",
            "is_async": false
          }
        ]
      },
      {
        "struct": "PriorityAlert",
        "trait": "Eq",
        "file": "crates/infrastructure/src/alert_management.rs",
        "line": 425,
        "methods": []
      },
      {
        "struct": "PriorityAlert",
        "trait": "PartialOrd",
        "file": "crates/infrastructure/src/alert_management.rs",
        "line": 427,
        "methods": [
          {
            "name": "partial_cmp",
            "line": 427,
            "return_type": "Option<CmpOrdering>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "PriorityAlert",
        "trait": "Ord",
        "file": "crates/infrastructure/src/alert_management.rs",
        "line": 433,
        "methods": [
          {
            "name": "cmp",
            "line": 433,
            "return_type": "CmpOrdering",
            "is_async": false
          }
        ]
      }
    ],
    "RecoveryPolicy": [
      {
        "struct": "RecoveryPolicy",
        "trait": "Default",
        "file": "crates/infrastructure/src/mode_persistence.rs",
        "line": 115,
        "methods": [
          {
            "name": "default",
            "line": 115,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "EnvSecretProvider": [
      {
        "struct": "EnvSecretProvider",
        "trait": "SecretProvider",
        "file": "crates/infrastructure/src/deployment_config.rs",
        "line": 142,
        "methods": [
          {
            "name": "get_secret",
            "line": 142,
            "return_type": "Result<String>",
            "is_async": false
          },
          {
            "name": "get_secrets_with_prefix",
            "line": 146,
            "return_type": "Result<HashMap<String, String>>",
            "is_async": false
          },
          {
            "name": "validate_secrets",
            "line": 161,
            "return_type": "Result<()>",
            "is_async": false
          }
        ]
      }
    ],
    "K8sSecretProvider": [
      {
        "struct": "K8sSecretProvider",
        "trait": "SecretProvider",
        "file": "crates/infrastructure/src/deployment_config.rs",
        "line": 187,
        "methods": [
          {
            "name": "get_secret",
            "line": 187,
            "return_type": "Result<String>",
            "is_async": false
          },
          {
            "name": "get_secrets_with_prefix",
            "line": 191,
            "return_type": "Result<HashMap<String, String>>",
            "is_async": false
          },
          {
            "name": "validate_secrets",
            "line": 207,
            "return_type": "Result<()>",
            "is_async": false
          }
        ]
      }
    ],
    "MockComponent": [
      {
        "struct": "MockComponent",
        "trait": "Shutdownable",
        "file": "crates/infrastructure/src/emergency_coordinator.rs",
        "line": 418,
        "methods": [
          {
            "name": "name",
            "line": 418,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "cancel_all_orders",
            "line": 420,
            "return_type": "Result<(), String>",
            "is_async": true
          },
          {
            "name": "emergency_liquidate",
            "line": 424,
            "return_type": "Result<(), String>",
            "is_async": true
          },
          {
            "name": "shutdown",
            "line": 428,
            "return_type": "Result<(), String>",
            "is_async": true
          },
          {
            "name": "is_healthy",
            "line": 433,
            "return_type": "bool",
            "is_async": false
          }
        ]
      }
    ],
    "TransitionRules": [
      {
        "struct": "TransitionRules",
        "trait": "Default",
        "file": "crates/infrastructure/src/software_control_modes.rs",
        "line": 117,
        "methods": [
          {
            "name": "default",
            "line": 117,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "DefaultGuardConditions": [
      {
        "struct": "DefaultGuardConditions",
        "trait": "GuardConditions",
        "file": "crates/infrastructure/src/software_control_modes.rs",
        "line": 180,
        "methods": [
          {
            "name": "check_transition",
            "line": 180,
            "return_type": "Result<()>",
            "is_async": false
          }
        ]
      }
    ],
    "PerformanceMetrics": [
      {
        "struct": "PerformanceMetrics",
        "trait": "Default",
        "file": "crates/infrastructure/src/historical_charts.rs",
        "line": 385,
        "methods": [
          {
            "name": "default",
            "line": 385,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "RuntimeStats": [
      {
        "struct": "RuntimeStats",
        "trait": "Default",
        "file": "crates/infrastructure/src/runtime_optimization.rs",
        "line": 36,
        "methods": [
          {
            "name": "default",
            "line": 36,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "ZeroAllocTask": [
      {
        "struct": "ZeroAllocTask",
        "trait": "Default",
        "file": "crates/infrastructure/src/runtime_optimization.rs",
        "line": 170,
        "methods": [
          {
            "name": "default",
            "line": 170,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "ParallelizationConfig": [
      {
        "struct": "ParallelizationConfig",
        "trait": "Default",
        "file": "crates/infrastructure/src/parallelization.rs",
        "line": 26,
        "methods": [
          {
            "name": "default",
            "line": 26,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "LockFreeStats": [
      {
        "struct": "LockFreeStats",
        "trait": "Default",
        "file": "crates/infrastructure/src/parallelization.rs",
        "line": 105,
        "methods": [
          {
            "name": "default",
            "line": 105,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "AuditConfig": [
      {
        "struct": "AuditConfig",
        "trait": "Default",
        "file": "crates/infrastructure/src/audit_system.rs",
        "line": 1155,
        "methods": [
          {
            "name": "default",
            "line": 1155,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "RetryPolicy": [
      {
        "struct": "RetryPolicy",
        "trait": "Default",
        "file": "crates/infrastructure/src/retry_logic.rs",
        "line": 84,
        "methods": [
          {
            "name": "default",
            "line": 84,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "RetryPolicy",
        "trait": "Default",
        "file": "crates/trading_engine/src/transactions/retry.rs",
        "line": 45,
        "methods": [
          {
            "name": "default",
            "line": 45,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "TestError": [
      {
        "struct": "TestError",
        "trait": "RetryableError",
        "file": "crates/infrastructure/src/retry_logic.rs",
        "line": 458,
        "methods": [
          {
            "name": "is_retryable",
            "line": 458,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "is_rate_limit",
            "line": 460,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "suggested_wait",
            "line": 464,
            "return_type": "Option<Duration>",
            "is_async": false
          }
        ]
      }
    ],
    "MockGPIO": [
      {
        "struct": "MockGPIO",
        "trait": "GPIOInterface",
        "file": "crates/infrastructure/src/hardware_kill_switch.rs",
        "line": 584,
        "methods": [
          {
            "name": "read_pin",
            "line": 584,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "write_pin",
            "line": 586,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "set_pin_mode",
            "line": 590,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "enable_interrupt",
            "line": 594,
            "return_type": "()",
            "is_async": false
          }
        ]
      }
    ],
    "ConsumerConfig": [
      {
        "struct": "ConsumerConfig",
        "trait": "Default",
        "file": "crates/infrastructure/src/stream_processing/consumer.rs",
        "line": 60,
        "methods": [
          {
            "name": "default",
            "line": 60,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "ConsumerConfig",
        "trait": "Default",
        "file": "crates/data_ingestion/src/consumers/redpanda_consumer.rs",
        "line": 78,
        "methods": [
          {
            "name": "default",
            "line": 78,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "MarketDataHandler": [
      {
        "struct": "MarketDataHandler",
        "trait": "MessageHandler",
        "file": "crates/infrastructure/src/stream_processing/consumer.rs",
        "line": 339,
        "methods": [
          {
            "name": "handle_batch",
            "line": 339,
            "return_type": "Result<()>",
            "is_async": true
          }
        ]
      }
    ],
    "FeatureHandler": [
      {
        "struct": "FeatureHandler",
        "trait": "MessageHandler",
        "file": "crates/infrastructure/src/stream_processing/consumer.rs",
        "line": 356,
        "methods": [
          {
            "name": "handle_batch",
            "line": 356,
            "return_type": "Result<()>",
            "is_async": true
          }
        ]
      }
    ],
    "SymbolRoute": [
      {
        "struct": "SymbolRoute",
        "trait": "RoutingRule",
        "file": "crates/infrastructure/src/stream_processing/router.rs",
        "line": 46,
        "methods": [
          {
            "name": "matches",
            "line": 46,
            "return_type": "bool",
            "is_async": true
          },
          {
            "name": "destination",
            "line": 55,
            "return_type": "&str",
            "is_async": false
          }
        ]
      }
    ],
    "RiskRoute": [
      {
        "struct": "RiskRoute",
        "trait": "RoutingRule",
        "file": "crates/infrastructure/src/stream_processing/router.rs",
        "line": 77,
        "methods": [
          {
            "name": "matches",
            "line": 77,
            "return_type": "bool",
            "is_async": true
          },
          {
            "name": "destination",
            "line": 89,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "priority",
            "line": 94,
            "return_type": "u32",
            "is_async": false
          }
        ]
      }
    ],
    "ConfidenceRoute": [
      {
        "struct": "ConfidenceRoute",
        "trait": "RoutingRule",
        "file": "crates/infrastructure/src/stream_processing/router.rs",
        "line": 120,
        "methods": [
          {
            "name": "matches",
            "line": 120,
            "return_type": "bool",
            "is_async": true
          },
          {
            "name": "destination",
            "line": 127,
            "return_type": "&str",
            "is_async": false
          }
        ]
      }
    ],
    "ProcessingPipeline": [
      {
        "struct": "ProcessingPipeline",
        "trait": "Default",
        "file": "crates/infrastructure/src/stream_processing/processor.rs",
        "line": 49,
        "methods": [
          {
            "name": "default",
            "line": 49,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "FeatureExtractionStage": [
      {
        "struct": "FeatureExtractionStage",
        "trait": "Default",
        "file": "crates/infrastructure/src/stream_processing/processor.rs",
        "line": 136,
        "methods": [
          {
            "name": "default",
            "line": 136,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "FeatureExtractionStage",
        "trait": "ProcessorStage",
        "file": "crates/infrastructure/src/stream_processing/processor.rs",
        "line": 149,
        "methods": [
          {
            "name": "name",
            "line": 149,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "can_handle",
            "line": 150,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "process",
            "line": 155,
            "return_type": "Result<StreamMessage>",
            "is_async": true
          }
        ]
      }
    ],
    "MLInferenceStage": [
      {
        "struct": "MLInferenceStage",
        "trait": "ProcessorStage",
        "file": "crates/infrastructure/src/stream_processing/processor.rs",
        "line": 206,
        "methods": [
          {
            "name": "name",
            "line": 206,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "can_handle",
            "line": 207,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "process",
            "line": 212,
            "return_type": "Result<StreamMessage>",
            "is_async": true
          }
        ]
      }
    ],
    "SignalGenerationStage": [
      {
        "struct": "SignalGenerationStage",
        "trait": "ProcessorStage",
        "file": "crates/infrastructure/src/stream_processing/processor.rs",
        "line": 250,
        "methods": [
          {
            "name": "name",
            "line": 250,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "can_handle",
            "line": 251,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "process",
            "line": 256,
            "return_type": "Result<StreamMessage>",
            "is_async": true
          }
        ]
      }
    ],
    "RiskValidationStage": [
      {
        "struct": "RiskValidationStage",
        "trait": "ProcessorStage",
        "file": "crates/infrastructure/src/stream_processing/processor.rs",
        "line": 303,
        "methods": [
          {
            "name": "name",
            "line": 303,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "can_handle",
            "line": 304,
            "return_type": "bool",
            "is_async": false
          },
          {
            "name": "process",
            "line": 309,
            "return_type": "Result<StreamMessage>",
            "is_async": true
          }
        ]
      }
    ],
    "PersistenceStage": [
      {
        "struct": "PersistenceStage",
        "trait": "Default",
        "file": "crates/infrastructure/src/stream_processing/processor.rs",
        "line": 346,
        "methods": [
          {
            "name": "default",
            "line": 346,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "PersistenceStage",
        "trait": "ProcessorStage",
        "file": "crates/infrastructure/src/stream_processing/processor.rs",
        "line": 359,
        "methods": [
          {
            "name": "name",
            "line": 359,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "process",
            "line": 360,
            "return_type": "Result<StreamMessage>",
            "is_async": true
          }
        ]
      }
    ],
    "PipelineBuilder": [
      {
        "struct": "PipelineBuilder",
        "trait": "Default",
        "file": "crates/infrastructure/src/stream_processing/processor.rs",
        "line": 391,
        "methods": [
          {
            "name": "default",
            "line": 391,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "StreamConfig": [
      {
        "struct": "StreamConfig",
        "trait": "Default",
        "file": "crates/infrastructure/src/stream_processing/mod.rs",
        "line": 148,
        "methods": [
          {
            "name": "default",
            "line": 148,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "UnboundedQueue": [
      {
        "struct": "UnboundedQueue",
        "trait": "Default",
        "file": "crates/infrastructure/src/memory/rings.rs",
        "line": 128,
        "methods": [
          {
            "name": "default",
            "line": 128,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "TickRing": [
      {
        "struct": "TickRing",
        "trait": "Default",
        "file": "crates/infrastructure/src/memory/rings.rs",
        "line": 170,
        "methods": [
          {
            "name": "default",
            "line": 170,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "OrderQueue": [
      {
        "struct": "OrderQueue",
        "trait": "Default",
        "file": "crates/infrastructure/src/memory/rings.rs",
        "line": 221,
        "methods": [
          {
            "name": "default",
            "line": 221,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "GarbageList": [
      {
        "struct": "GarbageList",
        "trait": "Send",
        "file": "crates/infrastructure/src/memory/safe_pools.rs",
        "line": 271,
        "methods": []
      },
      {
        "struct": "GarbageList",
        "trait": "Sync",
        "file": "crates/infrastructure/src/memory/safe_pools.rs",
        "line": 272,
        "methods": []
      }
    ],
    "SafeObjectPool": [
      {
        "struct": "SafeObjectPool",
        "trait": "Drop",
        "file": "crates/infrastructure/src/memory/safe_pools.rs",
        "line": 532,
        "methods": [
          {
            "name": "drop",
            "line": 532,
            "return_type": "()",
            "is_async": false
          }
        ]
      }
    ],
    "Order": [
      {
        "struct": "Order",
        "trait": "Default",
        "file": "crates/infrastructure/src/memory/safe_pools.rs",
        "line": 638,
        "methods": [
          {
            "name": "default",
            "line": 638,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "Signal": [
      {
        "struct": "Signal",
        "trait": "Default",
        "file": "crates/infrastructure/src/memory/safe_pools.rs",
        "line": 683,
        "methods": [
          {
            "name": "default",
            "line": 683,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "Tick": [
      {
        "struct": "Tick",
        "trait": "Default",
        "file": "crates/infrastructure/src/memory/safe_pools.rs",
        "line": 717,
        "methods": [
          {
            "name": "default",
            "line": 717,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "OrderPool": [
      {
        "struct": "OrderPool",
        "trait": "Default",
        "file": "crates/infrastructure/src/memory/pools.rs",
        "line": 89,
        "methods": [
          {
            "name": "default",
            "line": 89,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "SignalPool": [
      {
        "struct": "SignalPool",
        "trait": "Default",
        "file": "crates/infrastructure/src/memory/pools.rs",
        "line": 193,
        "methods": [
          {
            "name": "default",
            "line": 193,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "TickPool": [
      {
        "struct": "TickPool",
        "trait": "Default",
        "file": "crates/infrastructure/src/memory/pools.rs",
        "line": 285,
        "methods": [
          {
            "name": "default",
            "line": 285,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "TrackingAllocator": [
      {
        "struct": "TrackingAllocator",
        "trait": "GlobalAlloc",
        "file": "crates/infrastructure/src/memory/zero_alloc_tests.rs",
        "line": 39,
        "methods": [
          {
            "name": "alloc",
            "line": 39,
            "return_type": "*mut u8",
            "is_async": false
          },
          {
            "name": "dealloc",
            "line": 42,
            "return_type": "()",
            "is_async": false
          }
        ]
      }
    ],
    "PoolGuard": [
      {
        "struct": "PoolGuard",
        "trait": "Drop",
        "file": "crates/infrastructure/src/zero_copy/mod.rs",
        "line": 104,
        "methods": [
          {
            "name": "drop",
            "line": 104,
            "return_type": "()",
            "is_async": false
          }
        ]
      }
    ],
    "Arena": [
      {
        "struct": "Arena",
        "trait": "Send",
        "file": "crates/infrastructure/src/zero_copy/mod.rs",
        "line": 148,
        "methods": []
      },
      {
        "struct": "Arena",
        "trait": "Sync",
        "file": "crates/infrastructure/src/zero_copy/mod.rs",
        "line": 149,
        "methods": []
      },
      {
        "struct": "Arena",
        "trait": "Drop",
        "file": "crates/infrastructure/src/zero_copy/mod.rs",
        "line": 194,
        "methods": [
          {
            "name": "drop",
            "line": 194,
            "return_type": "()",
            "is_async": false
          }
        ]
      }
    ],
    "LockFreeMetrics": [
      {
        "struct": "LockFreeMetrics",
        "trait": "Default",
        "file": "crates/infrastructure/src/zero_copy/mod.rs",
        "line": 214,
        "methods": [
          {
            "name": "default",
            "line": 214,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "RingBuffer": [
      {
        "struct": "RingBuffer",
        "trait": "Send",
        "file": "crates/infrastructure/src/zero_copy/mod.rs",
        "line": 354,
        "methods": []
      },
      {
        "struct": "RingBuffer",
        "trait": "Sync",
        "file": "crates/infrastructure/src/zero_copy/mod.rs",
        "line": 355,
        "methods": []
      },
      {
        "struct": "RingBuffer",
        "trait": "Drop",
        "file": "crates/infrastructure/src/zero_copy/mod.rs",
        "line": 413,
        "methods": [
          {
            "name": "drop",
            "line": 413,
            "return_type": "()",
            "is_async": false
          }
        ]
      }
    ],
    "MemoryPoolManager": [
      {
        "struct": "MemoryPoolManager",
        "trait": "Default",
        "file": "crates/infrastructure/src/zero_copy/mod.rs",
        "line": 518,
        "methods": [
          {
            "name": "default",
            "line": 518,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "FastOrderProcessor": [
      {
        "struct": "FastOrderProcessor",
        "trait": "Default",
        "file": "crates/trading_engine/src/fast_order_processor.rs",
        "line": 39,
        "methods": [
          {
            "name": "default",
            "line": 39,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "FeeOptimizerConfig": [
      {
        "struct": "FeeOptimizerConfig",
        "trait": "Default",
        "file": "crates/trading_engine/src/fee_optimization.rs",
        "line": 184,
        "methods": [
          {
            "name": "default",
            "line": 184,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "LiquidationConfig": [
      {
        "struct": "LiquidationConfig",
        "trait": "Default",
        "file": "crates/trading_engine/src/liquidation_engine.rs",
        "line": 215,
        "methods": [
          {
            "name": "default",
            "line": 215,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "MockRiskValidator": [
      {
        "struct": "MockRiskValidator",
        "trait": "RiskValidator",
        "file": "crates/trading_engine/src/orders/oco.rs",
        "line": 577,
        "methods": [
          {
            "name": "validate_oco",
            "line": 577,
            "return_type": "Result<(), RiskError>",
            "is_async": true
          },
          {
            "name": "check_position_limits",
            "line": 579,
            "return_type": "Result<(), RiskError>",
            "is_async": true
          },
          {
            "name": "validate_margin",
            "line": 583,
            "return_type": "Result<f64, RiskError>",
            "is_async": true
          }
        ]
      }
    ],
    "MockExchange": [
      {
        "struct": "MockExchange",
        "trait": "ExchangeConnector",
        "file": "crates/trading_engine/src/orders/oco.rs",
        "line": 594,
        "methods": [
          {
            "name": "submit_order",
            "line": 594,
            "return_type": "Result<Uuid, ExchangeError>",
            "is_async": true
          },
          {
            "name": "cancel_order",
            "line": 596,
            "return_type": "Result<(), ExchangeError>",
            "is_async": true
          },
          {
            "name": "modify_order",
            "line": 600,
            "return_type": "Result<(), ExchangeError>",
            "is_async": true
          },
          {
            "name": "get_order_status",
            "line": 604,
            "return_type": "Result<OrderStatus, ExchangeError>",
            "is_async": true
          }
        ]
      }
    ],
    "PlaceOrderStep": [
      {
        "struct": "PlaceOrderStep",
        "trait": "SagaStep",
        "file": "crates/trading_engine/src/transactions/saga.rs",
        "line": 471,
        "methods": [
          {
            "name": "name",
            "line": 471,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "execute",
            "line": 473,
            "return_type": "Result<StepResult>",
            "is_async": true
          },
          {
            "name": "compensate",
            "line": 488,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "is_idempotent",
            "line": 497,
            "return_type": "bool",
            "is_async": false
          }
        ]
      }
    ],
    "RiskCheckStep": [
      {
        "struct": "RiskCheckStep",
        "trait": "SagaStep",
        "file": "crates/trading_engine/src/transactions/saga.rs",
        "line": 513,
        "methods": [
          {
            "name": "name",
            "line": 513,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "execute",
            "line": 515,
            "return_type": "Result<StepResult>",
            "is_async": true
          },
          {
            "name": "compensate",
            "line": 530,
            "return_type": "Result<()>",
            "is_async": true
          }
        ]
      }
    ],
    "UpdateBalanceStep": [
      {
        "struct": "UpdateBalanceStep",
        "trait": "SagaStep",
        "file": "crates/trading_engine/src/transactions/saga.rs",
        "line": 547,
        "methods": [
          {
            "name": "name",
            "line": 547,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "execute",
            "line": 549,
            "return_type": "Result<StepResult>",
            "is_async": true
          },
          {
            "name": "compensate",
            "line": 563,
            "return_type": "Result<()>",
            "is_async": true
          }
        ]
      }
    ],
    "OrderCancellationCompensator": [
      {
        "struct": "OrderCancellationCompensator",
        "trait": "CompensatingTransaction",
        "file": "crates/trading_engine/src/transactions/compensator.rs",
        "line": 105,
        "methods": [
          {
            "name": "execute",
            "line": 105,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "can_compensate",
            "line": 168,
            "return_type": "bool",
            "is_async": true
          },
          {
            "name": "priority",
            "line": 179,
            "return_type": "u32",
            "is_async": false
          }
        ]
      }
    ],
    "PositionReversalCompensator": [
      {
        "struct": "PositionReversalCompensator",
        "trait": "CompensatingTransaction",
        "file": "crates/trading_engine/src/transactions/compensator.rs",
        "line": 200,
        "methods": [
          {
            "name": "execute",
            "line": 200,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "can_compensate",
            "line": 217,
            "return_type": "bool",
            "is_async": true
          },
          {
            "name": "priority",
            "line": 224,
            "return_type": "u32",
            "is_async": false
          }
        ]
      }
    ],
    "BalanceReversalCompensator": [
      {
        "struct": "BalanceReversalCompensator",
        "trait": "CompensatingTransaction",
        "file": "crates/trading_engine/src/transactions/compensator.rs",
        "line": 243,
        "methods": [
          {
            "name": "execute",
            "line": 243,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "can_compensate",
            "line": 260,
            "return_type": "bool",
            "is_async": true
          },
          {
            "name": "priority",
            "line": 271,
            "return_type": "u32",
            "is_async": false
          }
        ]
      }
    ],
    "FeeRefundCompensator": [
      {
        "struct": "FeeRefundCompensator",
        "trait": "CompensatingTransaction",
        "file": "crates/trading_engine/src/transactions/compensator.rs",
        "line": 291,
        "methods": [
          {
            "name": "execute",
            "line": 291,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "can_compensate",
            "line": 304,
            "return_type": "bool",
            "is_async": true
          },
          {
            "name": "priority",
            "line": 313,
            "return_type": "u32",
            "is_async": false
          }
        ]
      }
    ],
    "MarginReleaseCompensator": [
      {
        "struct": "MarginReleaseCompensator",
        "trait": "CompensatingTransaction",
        "file": "crates/trading_engine/src/transactions/compensator.rs",
        "line": 331,
        "methods": [
          {
            "name": "execute",
            "line": 331,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "can_compensate",
            "line": 343,
            "return_type": "bool",
            "is_async": true
          },
          {
            "name": "priority",
            "line": 350,
            "return_type": "u32",
            "is_async": false
          }
        ]
      }
    ],
    "NoOpCompensator": [
      {
        "struct": "NoOpCompensator",
        "trait": "CompensatingTransaction",
        "file": "crates/trading_engine/src/transactions/compensator.rs",
        "line": 362,
        "methods": [
          {
            "name": "execute",
            "line": 362,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "can_compensate",
            "line": 363,
            "return_type": "bool",
            "is_async": true
          },
          {
            "name": "priority",
            "line": 367,
            "return_type": "u32",
            "is_async": false
          }
        ]
      }
    ],
    "CircuitBreakerConfig": [
      {
        "struct": "CircuitBreakerConfig",
        "trait": "Default",
        "file": "crates/trading_engine/src/transactions/retry.rs",
        "line": 146,
        "methods": [
          {
            "name": "default",
            "line": 146,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "TestStep": [
      {
        "struct": "TestStep",
        "trait": "SagaStep",
        "file": "crates/trading_engine/src/transactions/tests.rs",
        "line": 298,
        "methods": [
          {
            "name": "name",
            "line": 298,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "execute",
            "line": 300,
            "return_type": "Result<StepResult>",
            "is_async": true
          },
          {
            "name": "compensate",
            "line": 313,
            "return_type": "Result<()>",
            "is_async": true
          }
        ]
      }
    ],
    "MicrostructureConfig": [
      {
        "struct": "MicrostructureConfig",
        "trait": "Default",
        "file": "crates/feature_store/src/market_microstructure.rs",
        "line": 42,
        "methods": [
          {
            "name": "default",
            "line": 42,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "GameTheoryConfig": [
      {
        "struct": "GameTheoryConfig",
        "trait": "Default",
        "file": "crates/feature_store/src/game_theory.rs",
        "line": 37,
        "methods": [
          {
            "name": "default",
            "line": 37,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "RedisConfig": [
      {
        "struct": "RedisConfig",
        "trait": "Default",
        "file": "crates/feature_store/src/online_store.rs",
        "line": 33,
        "methods": [
          {
            "name": "default",
            "line": 33,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "PointInTimeConfig": [
      {
        "struct": "PointInTimeConfig",
        "trait": "Default",
        "file": "crates/feature_store/src/point_in_time.rs",
        "line": 23,
        "methods": [
          {
            "name": "default",
            "line": 23,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "MonitoringConfig": [
      {
        "struct": "MonitoringConfig",
        "trait": "Default",
        "file": "crates/feature_store/src/monitoring.rs",
        "line": 26,
        "methods": [
          {
            "name": "default",
            "line": 26,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "MonitoringConfig",
        "trait": "Default",
        "file": "crates/data_ingestion/src/data_quality/monitoring.rs",
        "line": 24,
        "methods": [
          {
            "name": "default",
            "line": 24,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "AlertThresholds": [
      {
        "struct": "AlertThresholds",
        "trait": "Default",
        "file": "crates/feature_store/src/monitoring.rs",
        "line": 48,
        "methods": [
          {
            "name": "default",
            "line": 48,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "RegistryConfig": [
      {
        "struct": "RegistryConfig",
        "trait": "Default",
        "file": "crates/feature_store/src/feature_registry.rs",
        "line": 25,
        "methods": [
          {
            "name": "default",
            "line": 25,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "FeatureStoreConfig": [
      {
        "struct": "FeatureStoreConfig",
        "trait": "Default",
        "file": "crates/feature_store/src/lib.rs",
        "line": 60,
        "methods": [
          {
            "name": "default",
            "line": 60,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "DriftConfig": [
      {
        "struct": "DriftConfig",
        "trait": "Default",
        "file": "crates/feature_store/src/drift_detection.rs",
        "line": 34,
        "methods": [
          {
            "name": "default",
            "line": 34,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "MovingAverageTransformer": [
      {
        "struct": "MovingAverageTransformer",
        "trait": "FeatureTransformer",
        "file": "crates/feature_store/src/feature_pipeline.rs",
        "line": 424,
        "methods": [
          {
            "name": "transform",
            "line": 424,
            "return_type": "Result<Vec<FeatureUpdate>>",
            "is_async": true
          }
        ]
      }
    ],
    "EMATransformer": [
      {
        "struct": "EMATransformer",
        "trait": "FeatureTransformer",
        "file": "crates/feature_store/src/feature_pipeline.rs",
        "line": 466,
        "methods": [
          {
            "name": "transform",
            "line": 466,
            "return_type": "Result<Vec<FeatureUpdate>>",
            "is_async": true
          }
        ]
      }
    ],
    "ZScoreTransformer": [
      {
        "struct": "ZScoreTransformer",
        "trait": "FeatureTransformer",
        "file": "crates/feature_store/src/feature_pipeline.rs",
        "line": 501,
        "methods": [
          {
            "name": "transform",
            "line": 501,
            "return_type": "Result<Vec<FeatureUpdate>>",
            "is_async": true
          }
        ]
      }
    ],
    "LogTransformer": [
      {
        "struct": "LogTransformer",
        "trait": "FeatureTransformer",
        "file": "crates/feature_store/src/feature_pipeline.rs",
        "line": 539,
        "methods": [
          {
            "name": "transform",
            "line": 539,
            "return_type": "Result<Vec<FeatureUpdate>>",
            "is_async": true
          }
        ]
      }
    ],
    "LagTransformer": [
      {
        "struct": "LagTransformer",
        "trait": "FeatureTransformer",
        "file": "crates/feature_store/src/feature_pipeline.rs",
        "line": 577,
        "methods": [
          {
            "name": "transform",
            "line": 577,
            "return_type": "Result<Vec<FeatureUpdate>>",
            "is_async": true
          }
        ]
      }
    ],
    "TimescaleConfig": [
      {
        "struct": "TimescaleConfig",
        "trait": "Default",
        "file": "crates/feature_store/src/offline_store.rs",
        "line": 32,
        "methods": [
          {
            "name": "default",
            "line": 32,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "TimescaleConfig",
        "trait": "Default",
        "file": "crates/data_ingestion/src/aggregators/timescale_aggregator.rs",
        "line": 72,
        "methods": [
          {
            "name": "default",
            "line": 72,
            "return_type": "Self",
            "is_async": false
          }
        ]
      },
      {
        "struct": "TimescaleConfig",
        "trait": "Default",
        "file": "crates/data_ingestion/src/timescale/mod.rs",
        "line": 75,
        "methods": [
          {
            "name": "default",
            "line": 75,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "ABConfig": [
      {
        "struct": "ABConfig",
        "trait": "Default",
        "file": "crates/feature_store/src/ab_testing.rs",
        "line": 32,
        "methods": [
          {
            "name": "default",
            "line": 32,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "ParquetConfig": [
      {
        "struct": "ParquetConfig",
        "trait": "Default",
        "file": "crates/data_ingestion/src/sinks/parquet_writer.rs",
        "line": 76,
        "methods": [
          {
            "name": "default",
            "line": 76,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "ClickHouseConfig": [
      {
        "struct": "ClickHouseConfig",
        "trait": "Default",
        "file": "crates/data_ingestion/src/sinks/clickhouse_sink.rs",
        "line": 92,
        "methods": [
          {
            "name": "default",
            "line": 92,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "TimescaleClient": [
      {
        "struct": "TimescaleClient",
        "trait": "Clone",
        "file": "crates/data_ingestion/src/timescale/mod.rs",
        "line": 781,
        "methods": [
          {
            "name": "clone",
            "line": 781,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "WindowConfig": [
      {
        "struct": "WindowConfig",
        "trait": "Default",
        "file": "crates/data_ingestion/src/event_driven/time_window.rs",
        "line": 14,
        "methods": [
          {
            "name": "default",
            "line": 14,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "SamplerConfig": [
      {
        "struct": "SamplerConfig",
        "trait": "Default",
        "file": "crates/data_ingestion/src/event_driven/adaptive_sampler.rs",
        "line": 103,
        "methods": [
          {
            "name": "default",
            "line": 103,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "ProcessorConfig": [
      {
        "struct": "ProcessorConfig",
        "trait": "Default",
        "file": "crates/data_ingestion/src/event_driven/processor.rs",
        "line": 124,
        "methods": [
          {
            "name": "default",
            "line": 124,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "VolatilityConfig": [
      {
        "struct": "VolatilityConfig",
        "trait": "Default",
        "file": "crates/data_ingestion/src/event_driven/volatility_tracker.rs",
        "line": 11,
        "methods": [
          {
            "name": "default",
            "line": 11,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "BucketConfig": [
      {
        "struct": "BucketConfig",
        "trait": "Default",
        "file": "crates/data_ingestion/src/event_driven/bucketed_aggregator.rs",
        "line": 101,
        "methods": [
          {
            "name": "default",
            "line": 101,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "ProducerConfig": [
      {
        "struct": "ProducerConfig",
        "trait": "Default",
        "file": "crates/data_ingestion/src/producers/redpanda_producer.rs",
        "line": 108,
        "methods": [
          {
            "name": "default",
            "line": 108,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "Counter": [
      {
        "struct": "Counter",
        "trait": "MetricsCollector",
        "file": "crates/data_ingestion/src/monitoring/mod.rs",
        "line": 26,
        "methods": [
          {
            "name": "record",
            "line": 26,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "increment",
            "line": 28,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_value",
            "line": 32,
            "return_type": "f64",
            "is_async": false
          }
        ]
      }
    ],
    "Histogram": [
      {
        "struct": "Histogram",
        "trait": "MetricsCollector",
        "file": "crates/data_ingestion/src/monitoring/mod.rs",
        "line": 63,
        "methods": [
          {
            "name": "record",
            "line": 63,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "increment",
            "line": 69,
            "return_type": "()",
            "is_async": false
          },
          {
            "name": "get_value",
            "line": 74,
            "return_type": "f64",
            "is_async": false
          }
        ]
      }
    ],
    "ClickHouseMetrics": [
      {
        "struct": "ClickHouseMetrics",
        "trait": "Default",
        "file": "crates/data_ingestion/src/monitoring/mod.rs",
        "line": 145,
        "methods": [
          {
            "name": "default",
            "line": 145,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "SchemaRegistryConfig": [
      {
        "struct": "SchemaRegistryConfig",
        "trait": "Default",
        "file": "crates/data_ingestion/src/schema/mod.rs",
        "line": 67,
        "methods": [
          {
            "name": "default",
            "line": 67,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "ScoringConfig": [
      {
        "struct": "ScoringConfig",
        "trait": "Default",
        "file": "crates/data_ingestion/src/data_quality/quality_scorer.rs",
        "line": 17,
        "methods": [
          {
            "name": "default",
            "line": 17,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "QualityWeights": [
      {
        "struct": "QualityWeights",
        "trait": "Default",
        "file": "crates/data_ingestion/src/data_quality/quality_scorer.rs",
        "line": 36,
        "methods": [
          {
            "name": "default",
            "line": 36,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "QualityMonitor": [
      {
        "struct": "QualityMonitor",
        "trait": "Clone",
        "file": "crates/data_ingestion/src/data_quality/monitoring.rs",
        "line": 213,
        "methods": [
          {
            "name": "clone",
            "line": 213,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "KalmanConfig": [
      {
        "struct": "KalmanConfig",
        "trait": "Default",
        "file": "crates/data_ingestion/src/data_quality/kalman_filter.rs",
        "line": 36,
        "methods": [
          {
            "name": "default",
            "line": 36,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "ChangeDetectionConfig": [
      {
        "struct": "ChangeDetectionConfig",
        "trait": "Default",
        "file": "crates/data_ingestion/src/data_quality/change_detection.rs",
        "line": 20,
        "methods": [
          {
            "name": "default",
            "line": 20,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "MockSource": [
      {
        "struct": "MockSource",
        "trait": "DataSource",
        "file": "crates/data_ingestion/src/data_quality/reconciliation.rs",
        "line": 72,
        "methods": [
          {
            "name": "get_latest_data",
            "line": 72,
            "return_type": "Result<SourceData>",
            "is_async": true
          },
          {
            "name": "name",
            "line": 82,
            "return_type": "String",
            "is_async": false
          },
          {
            "name": "reliability_score",
            "line": 87,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "latency_ms",
            "line": 91,
            "return_type": "u64",
            "is_async": false
          }
        ]
      }
    ],
    "BenfordConfig": [
      {
        "struct": "BenfordConfig",
        "trait": "Default",
        "file": "crates/data_ingestion/src/data_quality/benford.rs",
        "line": 32,
        "methods": [
          {
            "name": "default",
            "line": 32,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "DataQualityConfig": [
      {
        "struct": "DataQualityConfig",
        "trait": "Default",
        "file": "crates/data_ingestion/src/data_quality/mod.rs",
        "line": 66,
        "methods": [
          {
            "name": "default",
            "line": 66,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "BackfillConfig": [
      {
        "struct": "BackfillConfig",
        "trait": "Default",
        "file": "crates/data_ingestion/src/data_quality/backfill.rs",
        "line": 38,
        "methods": [
          {
            "name": "default",
            "line": 38,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "BackfillRequest": [
      {
        "struct": "BackfillRequest",
        "trait": "Ord",
        "file": "crates/data_ingestion/src/data_quality/backfill.rs",
        "line": 109,
        "methods": [
          {
            "name": "cmp",
            "line": 109,
            "return_type": "Ordering",
            "is_async": false
          }
        ]
      },
      {
        "struct": "BackfillRequest",
        "trait": "PartialOrd",
        "file": "crates/data_ingestion/src/data_quality/backfill.rs",
        "line": 115,
        "methods": [
          {
            "name": "partial_cmp",
            "line": 115,
            "return_type": "Option<Ordering>",
            "is_async": false
          }
        ]
      },
      {
        "struct": "BackfillRequest",
        "trait": "PartialEq",
        "file": "crates/data_ingestion/src/data_quality/backfill.rs",
        "line": 121,
        "methods": [
          {
            "name": "eq",
            "line": 121,
            "return_type": "bool",
            "is_async": false
          }
        ]
      },
      {
        "struct": "BackfillRequest",
        "trait": "Eq",
        "file": "crates/data_ingestion/src/data_quality/backfill.rs",
        "line": 129,
        "methods": []
      }
    ],
    "MockDataSource": [
      {
        "struct": "MockDataSource",
        "trait": "BackfillSource",
        "file": "crates/data_ingestion/src/data_quality/backfill.rs",
        "line": 177,
        "methods": [
          {
            "name": "fetch_data",
            "line": 177,
            "return_type": "Result<Vec<DataPoint>>",
            "is_async": true
          },
          {
            "name": "estimate_cost",
            "line": 200,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "reliability_score",
            "line": 206,
            "return_type": "f64",
            "is_async": false
          },
          {
            "name": "name",
            "line": 210,
            "return_type": "String",
            "is_async": false
          }
        ]
      }
    ],
    "BackfillSystem": [
      {
        "struct": "BackfillSystem",
        "trait": "Clone",
        "file": "crates/data_ingestion/src/data_quality/backfill.rs",
        "line": 585,
        "methods": [
          {
            "name": "clone",
            "line": 585,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "SlippageConfig": [
      {
        "struct": "SlippageConfig",
        "trait": "Default",
        "file": "crates/data_ingestion/src/replay/slippage_model.rs",
        "line": 60,
        "methods": [
          {
            "name": "default",
            "line": 60,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "PlaybackConfig": [
      {
        "struct": "PlaybackConfig",
        "trait": "Default",
        "file": "crates/data_ingestion/src/replay/playback_engine.rs",
        "line": 65,
        "methods": [
          {
            "name": "default",
            "line": 65,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "DummyStrategy": [
      {
        "struct": "DummyStrategy",
        "trait": "TradingStrategy",
        "file": "crates/data_ingestion/src/replay/playback_engine.rs",
        "line": 617,
        "methods": [
          {
            "name": "on_book_update",
            "line": 617,
            "return_type": "Option<StrategySignal>",
            "is_async": true
          },
          {
            "name": "on_trade",
            "line": 619,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "on_microburst",
            "line": 622,
            "return_type": "()",
            "is_async": true
          },
          {
            "name": "get_positions",
            "line": 624,
            "return_type": "Vec<Position>",
            "is_async": false
          },
          {
            "name": "calculate_pnl",
            "line": 627,
            "return_type": "()",
            "is_async": false
          }
        ]
      }
    ],
    "SimulatorConfig": [
      {
        "struct": "SimulatorConfig",
        "trait": "Default",
        "file": "crates/data_ingestion/src/replay/lob_simulator.rs",
        "line": 176,
        "methods": [
          {
            "name": "default",
            "line": 176,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "DetectorConfig": [
      {
        "struct": "DetectorConfig",
        "trait": "Default",
        "file": "crates/data_ingestion/src/replay/microburst_detector.rs",
        "line": 185,
        "methods": [
          {
            "name": "default",
            "line": 185,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "HistoricalDataLoader": [
      {
        "struct": "HistoricalDataLoader",
        "trait": "DataLoader",
        "file": "crates/data_ingestion/src/replay/historical_loader.rs",
        "line": 637,
        "methods": [
          {
            "name": "load",
            "line": 637,
            "return_type": "Result<Vec<TickData>>",
            "is_async": true
          },
          {
            "name": "stream",
            "line": 688,
            "return_type": "Result<Box<dyn AsyncIterator<Item = Result<TickData>>>>",
            "is_async": true
          },
          {
            "name": "metadata",
            "line": 696,
            "return_type": "DataMetadata",
            "is_async": false
          }
        ]
      }
    ],
    "VecIterator": [
      {
        "struct": "VecIterator",
        "trait": "AsyncIterator",
        "file": "crates/data_ingestion/src/replay/historical_loader.rs",
        "line": 749,
        "methods": [
          {
            "name": "next",
            "line": 750,
            "return_type": "Option<Self::Item>",
            "is_async": true
          }
        ]
      }
    ],
    "BackpressureConfig": [
      {
        "struct": "BackpressureConfig",
        "trait": "Default",
        "file": "crates/data_ingestion/src/consumers/redpanda_consumer.rs",
        "line": 47,
        "methods": [
          {
            "name": "default",
            "line": 47,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "LatencyRequirements": [
      {
        "struct": "LatencyRequirements",
        "trait": "Default",
        "file": "crates/data_ingestion/tests/integration_test.rs",
        "line": 107,
        "methods": [
          {
            "name": "default",
            "line": 107,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "GeometricBrownianMotion": [
      {
        "struct": "GeometricBrownianMotion",
        "trait": "PriceGenerator",
        "file": "crates/data_ingestion/tests/integration_test.rs",
        "line": 283,
        "methods": [
          {
            "name": "next_price",
            "line": 283,
            "return_type": "f64",
            "is_async": false
          }
        ]
      }
    ],
    "OrnsteinUhlenbeck": [
      {
        "struct": "OrnsteinUhlenbeck",
        "trait": "PriceGenerator",
        "file": "crates/data_ingestion/tests/integration_test.rs",
        "line": 315,
        "methods": [
          {
            "name": "next_price",
            "line": 315,
            "return_type": "f64",
            "is_async": false
          }
        ]
      }
    ],
    "JumpDiffusion": [
      {
        "struct": "JumpDiffusion",
        "trait": "PriceGenerator",
        "file": "crates/data_ingestion/tests/integration_test.rs",
        "line": 349,
        "methods": [
          {
            "name": "next_price",
            "line": 349,
            "return_type": "f64",
            "is_async": false
          }
        ]
      }
    ],
    "BinanceRealAdapter": [
      {
        "struct": "BinanceRealAdapter",
        "trait": "ExchangeAdapter",
        "file": "adapters/outbound/exchanges/binance_real.rs",
        "line": 376,
        "methods": [
          {
            "name": "name",
            "line": 376,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "get_supported_symbols",
            "line": 377,
            "return_type": "Result<Vec<Symbol>>",
            "is_async": true
          },
          {
            "name": "health_check",
            "line": 392,
            "return_type": "Result<ExchangeHealth>",
            "is_async": true
          },
          {
            "name": "get_config",
            "line": 418,
            "return_type": "&ExchangeConfig",
            "is_async": false
          },
          {
            "name": "subscribe_market_data",
            "line": 422,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "fetch_order_book",
            "line": 451,
            "return_type": "Result<domain::value_objects::OrderBook>",
            "is_async": true
          },
          {
            "name": "place_order",
            "line": 488,
            "return_type": "Result<String>",
            "is_async": true
          },
          {
            "name": "cancel_order",
            "line": 587,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "get_order_status",
            "line": 629,
            "return_type": "Result<OrderStatus>",
            "is_async": true
          },
          {
            "name": "fetch_account_balance",
            "line": 675,
            "return_type": "Result<Vec<(String, Decimal)>>",
            "is_async": true
          }
        ]
      }
    ],
    "RateLimitConfig": [
      {
        "struct": "RateLimitConfig",
        "trait": "Default",
        "file": "adapters/outbound/exchanges/exchange_simulator.rs",
        "line": 53,
        "methods": [
          {
            "name": "default",
            "line": 53,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "ExchangeSimulator": [
      {
        "struct": "ExchangeSimulator",
        "trait": "ExchangePort",
        "file": "adapters/outbound/exchanges/exchange_simulator.rs",
        "line": 589,
        "methods": [
          {
            "name": "place_order",
            "line": 589,
            "return_type": "Result<String>",
            "is_async": true
          },
          {
            "name": "cancel_order",
            "line": 594,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "modify_order",
            "line": 623,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "get_order_status",
            "line": 667,
            "return_type": "Result<OrderStatus>",
            "is_async": true
          },
          {
            "name": "get_open_orders",
            "line": 679,
            "return_type": "Result<Vec<Order>>",
            "is_async": true
          },
          {
            "name": "get_order_history",
            "line": 686,
            "return_type": "Result<Vec<Order>>",
            "is_async": true
          },
          {
            "name": "get_order_book",
            "line": 693,
            "return_type": "Result<OrderBook>",
            "is_async": true
          },
          {
            "name": "get_recent_trades",
            "line": 741,
            "return_type": "Result<Vec<Trade>>",
            "is_async": true
          },
          {
            "name": "get_ticker",
            "line": 757,
            "return_type": "Result<(Price, Price)>",
            "is_async": true
          },
          {
            "name": "get_balances",
            "line": 774,
            "return_type": "Result<HashMap<String, Balance>>",
            "is_async": true
          },
          {
            "name": "get_trading_fees",
            "line": 782,
            "return_type": "Result<(f64, f64)>",
            "is_async": true
          },
          {
            "name": "get_capabilities",
            "line": 788,
            "return_type": "Result<ExchangeCapabilities>",
            "is_async": true
          },
          {
            "name": "health_check",
            "line": 798,
            "return_type": "Result<bool>",
            "is_async": true
          },
          {
            "name": "get_rate_limit_status",
            "line": 807,
            "return_type": "Result<(u32, u32)>",
            "is_async": true
          }
        ]
      }
    ],
    "BinanceAdapter": [
      {
        "struct": "BinanceAdapter",
        "trait": "ExchangeAdapter",
        "file": "adapters/outbound/exchanges/exchange_adapter_trait.rs",
        "line": 168,
        "methods": [
          {
            "name": "name",
            "line": 168,
            "return_type": "&str",
            "is_async": false
          },
          {
            "name": "get_supported_symbols",
            "line": 169,
            "return_type": "Result<Vec<Symbol>>",
            "is_async": true
          },
          {
            "name": "health_check",
            "line": 184,
            "return_type": "Result<ExchangeHealth>",
            "is_async": true
          },
          {
            "name": "get_config",
            "line": 205,
            "return_type": "&ExchangeConfig",
            "is_async": false
          },
          {
            "name": "subscribe_market_data",
            "line": 209,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "unsubscribe_market_data",
            "line": 222,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "get_limits",
            "line": 230,
            "return_type": "Result<ExchangeLimits>",
            "is_async": true
          },
          {
            "name": "validate_order",
            "line": 251,
            "return_type": "Result<ValidationResult>",
            "is_async": true
          }
        ]
      },
      {
        "struct": "BinanceAdapter",
        "trait": "ExchangePort",
        "file": "adapters/outbound/exchanges/exchange_adapter_trait.rs",
        "line": 288,
        "methods": [
          {
            "name": "place_order",
            "line": 288,
            "return_type": "Result<String>",
            "is_async": true
          },
          {
            "name": "cancel_order",
            "line": 306,
            "return_type": "Result<()>",
            "is_async": true
          },
          {
            "name": "get_order_status",
            "line": 317,
            "return_type": "Result<OrderStatus>",
            "is_async": true
          },
          {
            "name": "get_balances",
            "line": 324,
            "return_type": "Result<HashMap<String, Balance>>",
            "is_async": true
          }
        ]
      }
    ],
    "PostgresOrderRepository": [
      {
        "struct": "PostgresOrderRepository",
        "trait": "OrderRepository",
        "file": "adapters/outbound/persistence/postgres_order_repository.rs",
        "line": 268,
        "methods": [
          {
            "name": "find_by_status",
            "line": 268,
            "return_type": "Result<Vec<Order>>",
            "is_async": true
          },
          {
            "name": "find_by_symbol",
            "line": 285,
            "return_type": "Result<Vec<Order>>",
            "is_async": true
          },
          {
            "name": "find_by_symbol_and_status",
            "line": 306,
            "return_type": "Result<Vec<Order>>",
            "is_async": true
          },
          {
            "name": "find_active",
            "line": 332,
            "return_type": "Result<Vec<Order>>",
            "is_async": true
          },
          {
            "name": "find_by_date_range",
            "line": 356,
            "return_type": "Result<Vec<Order>>",
            "is_async": true
          },
          {
            "name": "find_recent",
            "line": 386,
            "return_type": "Result<Vec<Order>>",
            "is_async": true
          },
          {
            "name": "get_total_volume",
            "line": 407,
            "return_type": "Result<f64>",
            "is_async": true
          },
          {
            "name": "get_statistics",
            "line": 425,
            "return_type": "Result<OrderStatistics>",
            "is_async": true
          }
        ]
      }
    ],
    "RetryConfig": [
      {
        "struct": "RetryConfig",
        "trait": "Default",
        "file": "adapters/outbound/persistence/transaction_manager.rs",
        "line": 45,
        "methods": [
          {
            "name": "default",
            "line": 45,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "DatabaseConfig": [
      {
        "struct": "DatabaseConfig",
        "trait": "Default",
        "file": "adapters/outbound/persistence/postgres_connection.rs",
        "line": 27,
        "methods": [
          {
            "name": "default",
            "line": 27,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "ApiConfig": [
      {
        "struct": "ApiConfig",
        "trait": "Default",
        "file": "adapters/inbound/rest/api_server.rs",
        "line": 63,
        "methods": [
          {
            "name": "default",
            "line": 63,
            "return_type": "Self",
            "is_async": false
          }
        ]
      }
    ],
    "ApiError": [
      {
        "struct": "ApiError",
        "trait": "IntoResponse",
        "file": "adapters/inbound/rest/api_server.rs",
        "line": 416,
        "methods": [
          {
            "name": "into_response",
            "line": 416,
            "return_type": "Response",
            "is_async": false
          }
        ]
      }
    ]
  },
  "dependencies": {
    "test_simd_standalone.rs": [
      "std::time::Instant"
    ],
    "test_simd_detailed.rs": [
      "std::hint::black_box",
      "std::time::{Instant, Duration}"
    ],
    "performance_report.rs": [
      "infrastructure::simd_avx512::*",
      "std::time::{Duration, Instant}",
      "rust_decimal::Decimal",
      "infrastructure::object_pools::*",
      "infrastructure::memory::pools",
      "infrastructure::rayon_enhanced::*"
    ],
    "test_avx512_hot_path.rs": [
      "infrastructure::simd_avx512::*",
      "std::time::Instant"
    ],
    "test_decimal.rs": [
      "rust_decimal::prelude::*",
      "rust_decimal::Decimal"
    ],
    "bot4-main/src/main.rs": [
      "anyhow::Result"
    ],
    "bot4-main/src/observability/server.rs": [
      "std::net::SocketAddr",
      "axum::{\n    http::StatusCode,\n    response::IntoResponse,\n    routing::get,\n    Router,\n}",
      "super::metrics::{init_metrics, REGISTRY}",
      "tokio::net::TcpListener",
      "prometheus::{Encoder, TextEncoder}"
    ],
    "bot4-main/src/observability/metrics.rs": [
      "lazy_static::lazy_static",
      "std::sync::Once",
      "prometheus::{\n    Gauge, GaugeVec, HistogramOpts, HistogramVec,\n    IntCounter, IntCounterVec, IntGauge, IntGaugeVec, Opts, Registry,\n}",
      "std::time::Instant"
    ],
    "domain/services/stp_policy.rs": [
      "std::sync::Arc",
      "std::sync::atomic",
      "chrono::{DateTime, Utc}",
      "anyhow::{Result, Context}",
      "parking_lot::RwLock",
      "atomic::Ordering",
      "crate::domain::value_objects::Symbol",
      "crate::domain::entities::{Order, OrderId, OrderSide}",
      "std::collections::HashMap",
      "serde::{Serialize, Deserialize}"
    ],
    "domain/events/order_event.rs": [
      "crate::domain::value_objects::{Price, Quantity, Symbol}",
      "crate::domain::entities::OrderId",
      "chrono::{DateTime, Utc}",
      "crate::domain::entities::OrderSide"
    ],
    "domain/errors/error_taxonomy.rs": [
      "std::error::Error",
      "std::fmt",
      "std::time::Duration",
      "serde::{Serialize, Deserialize}"
    ],
    "domain/entities/order.rs": [
      "crate::domain::value_objects::{Price, Quantity, Symbol}",
      "chrono::{DateTime, Utc}",
      "std::fmt",
      "anyhow::{Result, bail}",
      "crate::domain::events::OrderEvent",
      "uuid::Uuid"
    ],
    "domain/entities/oco_order.rs": [
      "std::sync::Arc",
      "crate::domain::value_objects::{Price, Quantity, Symbol}",
      "chrono::{DateTime, Utc}",
      "anyhow::{Result, bail}",
      "tokio::sync::RwLock",
      "crate::domain::entities::{Order, OrderId, OrderStatus, OrderType}"
    ],
    "domain/value_objects/statistical_distributions.rs": [
      "rand::Rng",
      "rand_distr::{Distribution, Poisson, Beta, LogNormal, Normal, Exp}",
      "std::time::Duration",
      "anyhow::{Result, bail}"
    ],
    "domain/value_objects/price.rs": [
      "std::fmt",
      "anyhow::{Result, bail}"
    ],
    "domain/value_objects/symbol.rs": [
      "std::fmt",
      "anyhow::{Result, bail}"
    ],
    "domain/value_objects/validation_filters.rs": [
      "crate::domain::value_objects::{Price, Quantity, Symbol}",
      "crate::domain::entities::{Order, OrderType, OrderSide}",
      "anyhow::{Result, bail}"
    ],
    "domain/value_objects/quantity.rs": [
      "std::fmt",
      "anyhow::{Result, bail}"
    ],
    "domain/value_objects/decimal_money.rs": [
      "rust_decimal::Decimal",
      "rust_decimal::prelude::*",
      "std::fmt",
      "serde::{Serialize, Deserialize}",
      "std::collections::HashMap",
      "std::ops::{Add, Sub, Mul, Div, Neg}"
    ],
    "domain/value_objects/market_impact.rs": [
      "std::f64::consts::E",
      "anyhow::{Result, bail}"
    ],
    "domain/value_objects/fee.rs": [
      "std::fmt",
      "anyhow::{Result, bail}"
    ],
    "domain/value_objects/timestamp_validator.rs": [
      "std::sync::atomic::{AtomicI64, Ordering}",
      "chrono::{DateTime, Utc, Duration}",
      "std::sync::Arc",
      "anyhow::{Result, bail}"
    ],
    "application/commands/place_order_command.rs": [
      "std::sync::Arc",
      "anyhow::{Result, Context}",
      "async_trait::async_trait",
      "chrono::Utc",
      "crate::ports::outbound::repository_port::OrderRepository",
      "crate::domain::entities::{Order, OrderId}",
      "crate::domain::events::OrderEvent",
      "crate::ports::outbound::exchange_port::ExchangePort"
    ],
    "src/metrics_server.rs": [
      "std::sync::Arc",
      "infrastructure::memory::metrics::metrics",
      "tokio::net::TcpListener",
      "axum::{extract::State, http::StatusCode, response::IntoResponse, routing::get, Router}"
    ],
    "src/logging.rs": [
      "tracing_appender::rolling::{RollingFileAppender, Rotation}",
      "std::io",
      "serde_json::json",
      "tracing::{Level, Subscriber}",
      "tracing_subscriber::{\n    fmt::{self, format::FmtSpan},\n    layer::SubscriberExt,\n    util::SubscriberInitExt,\n    EnvFilter,\n    Layer,\n}"
    ],
    "src/main.rs": [
      "anyhow::Result",
      "tracing::info",
      "tracing_subscriber"
    ],
    "src/runtime_config.rs": [
      "std::sync::Arc",
      "std::thread",
      "core_affinity::{self, CoreId}",
      "tokio::runtime::{Builder, Runtime}"
    ],
    "src/observability/server.rs": [
      "std::net::SocketAddr",
      "super::metrics::{init_metrics, REGISTRY}",
      "tokio::net::TcpListener",
      "prometheus::{Encoder, TextEncoder}",
      "axum::{\n    extract::State,\n    http::StatusCode,\n    response::IntoResponse,\n    routing::get,\n    Router,\n}"
    ],
    "src/observability/metrics.rs": [
      "lazy_static::lazy_static",
      "prometheus::{\n    Counter, CounterVec, Gauge, GaugeVec, Histogram, HistogramOpts, HistogramVec,\n    IntCounter, IntCounterVec, IntGauge, IntGaugeVec, Opts, Registry,\n}",
      "std::time::Instant"
    ],
    "src/tests/exchange_outage_recovery.rs": [
      "std::sync::Arc",
      "tokio::time::sleep",
      "std::time::{Duration, Instant}",
      "crate::infrastructure::circuit_breaker::{GlobalCircuitBreaker, CircuitState, SystemClock}",
      "crate::risk_engine::emergency::{KillSwitch, EmergencyStop, TripCondition}",
      "crate::websocket::client::WebSocketClient",
      "std::sync::atomic::{AtomicBool, AtomicU64, Ordering}"
    ],
    "ports/outbound/repository_port.rs": [
      "anyhow::Result",
      "chrono::{DateTime, Utc}",
      "async_trait::async_trait",
      "crate::domain::value_objects::Symbol",
      "crate::domain::entities::{Order, OrderId, OrderStatus}",
      "std::time::Duration"
    ],
    "ports/outbound/exchange_port.rs": [
      "anyhow::Result",
      "async_trait::async_trait",
      "crate::domain::value_objects::{Symbol, Price, Quantity}",
      "crate::domain::entities::{Order, OrderId, OrderStatus}",
      "std::collections::HashMap"
    ],
    "tests/property_tests.rs": [
      "std::sync::Arc",
      "anyhow::Result",
      "bot4_core::domain::value_objects::market_impact::{MarketImpactModel, MarketDepth}",
      "proptest::prelude::*",
      "bot4_core::domain::value_objects::fee::{FeeModel, FeeTier}",
      "bot4_core::domain::value_objects::validation_filters::{ValidationFilters, PriceFilter, LotSizeFilter}",
      "bot4_core::domain::entities::{Order, OrderSide, OrderType, TimeInForce}",
      "std::collections::HashSet",
      "tokio::sync::RwLock",
      "bot4_core::adapters::outbound::exchanges::idempotency_manager::IdempotencyManager",
      "bot4_core::domain::value_objects::{Symbol, Price, Quantity}"
    ],
    "tests/phase3_integration.rs": [
      "std::sync::Arc",
      "std::time::{Duration, Instant}",
      "ndarray::{Array2, Array3}",
      "std::thread",
      "bot4_ml::{\n    feature_engine::indicators::IndicatorEngine,\n    models::{\n        ARIMAModel, ARIMAConfig,\n        LSTMModel, LSTMConfig,\n        GRUModel, GRUConfig,\n        EnsembleModel, EnsembleConfig, EnsembleStrategy, EnsembleInput,\n        ModelRegistry, DeploymentStrategy,\n    },\n    inference::{InferenceEngine, InferenceRequest, Priority},\n}"
    ],
    "tests/ks_statistical_tests.rs": [
      "anyhow::Result",
      "statrs::distribution::{ContinuousCDF, Exp, Normal, Beta as BetaDist, LogNormal as LogNormalDist}",
      "bot4_core::domain::value_objects::statistical_distributions::{\n    FillDistribution, LatencyDistribution, SlippageDistribution, MarketStatistics\n}",
      "rand::thread_rng",
      "std::collections::HashMap",
      "statrs::statistics::Statistics"
    ],
    "tests/performance_validation.rs": [
      "std::sync::Arc",
      "criterion::{black_box, Criterion}",
      "rust_decimal_macros::dec",
      "infrastructure::object_pools::POOL_REGISTRY",
      "infrastructure::parallelization::ParallelTradingEngine",
      "std::time::{Duration, Instant}",
      "rust_decimal::Decimal",
      "ml::simd::{dot_product_avx512, gemm_avx512}",
      "risk_engine::limits::RiskLimits",
      "order_management::{Order, OrderSide, OrderType}",
      "tokio::sync::RwLock",
      "std::sync::atomic::{AtomicU64, Ordering}",
      "risk_engine::checks::RiskChecker"
    ],
    "tests/integration_test.rs": [
      "anyhow::Result",
      "rust_decimal_macros::dec",
      "rust_decimal::Decimal",
      "sqlx::postgres::PgPoolOptions",
      "tokio::time::{sleep, Duration}",
      "bot4_trading::*",
      "testcontainers::{clients::Cli, images::postgres::Postgres}"
    ],
    "tests/integration_tests.rs": [
      "std::sync::Arc",
      "rust_decimal_macros::dec",
      "infrastructure::*",
      "order_management::*",
      "websocket::*",
      "bot4_main::*",
      "exchanges::*",
      "std::time::{Duration, Instant}",
      "ml::*",
      "rust_decimal::prelude::*",
      "tokio",
      "trading_engine::*",
      "risk_engine::*",
      "futures::stream::StreamExt",
      "analysis::*"
    ],
    "dto/request/order_dto.rs": [
      "crate::domain::entities::{Order, OrderSide, OrderType, TimeInForce}",
      "crate::domain::value_objects::{Symbol, Price, Quantity}",
      "serde::{Deserialize, Serialize}",
      "anyhow::{Result, bail}",
      "validator::Validate"
    ],
    "dto/response/order_response.rs": [
      "chrono::{DateTime, Utc}",
      "serde::{Deserialize, Serialize}",
      "crate::domain::entities::{Order, OrderId, OrderStatus, OrderSide, OrderType}"
    ],
    "dto/database/order_dto.rs": [
      "anyhow::Result",
      "sqlx::{FromRow, Row}",
      "chrono::{DateTime, Utc}",
      "serde::{Deserialize, Serialize}"
    ],
    "crates/data_intelligence/src/macro_economy_enhanced.rs": [
      "std::sync::Arc",
      "crate::{DataError, Result}",
      "rust_decimal::Decimal",
      "parking_lot::RwLock",
      "statrs::distribution::{StudentsT, ContinuousCDF}",
      "std::collections::{HashMap, VecDeque}",
      "chrono::{DateTime, Utc, Duration}",
      "nalgebra::{DMatrix, DVector}"
    ],
    "crates/data_intelligence/src/options_flow.rs": [
      "chrono::{DateTime, Utc, Duration, Datelike}",
      "std::sync::Arc",
      "rust_decimal::Decimal",
      "parking_lot::RwLock",
      "async_trait::async_trait",
      "reqwest::Client",
      "statrs::distribution::{Normal, ContinuousCDF}",
      "serde::{Deserialize, Serialize}",
      "thiserror::Error",
      "std::collections::{HashMap, BTreeMap, VecDeque}",
      "tokio::sync::mpsc"
    ],
    "crates/data_intelligence/src/websocket_aggregator.rs": [
      "std::sync::Arc",
      "futures_util::{SinkExt, StreamExt}",
      "chrono::{DateTime, Utc}",
      "rust_decimal::Decimal",
      "parking_lot::RwLock",
      "serde::{Deserialize, Serialize}",
      "thiserror::Error",
      "tokio_tungstenite::{connect_async, tungstenite::Message}",
      "tokio::sync::mpsc",
      "std::collections::HashMap"
    ],
    "crates/data_intelligence/src/macro_correlator.rs": [
      "std::sync::Arc",
      "chrono::{DateTime, Utc}",
      "rust_decimal::Decimal",
      "parking_lot::RwLock",
      "thiserror::Error",
      "std::collections::HashMap"
    ],
    "crates/data_intelligence/src/xai_enhanced_prompts.rs": [
      "serde::{Deserialize, Serialize}",
      "std::collections::HashMap",
      "rust_decimal::Decimal"
    ],
    "crates/data_intelligence/src/overfitting_prevention.rs": [
      "std::sync::Arc",
      "parking_lot::RwLock",
      "statrs::distribution::{StudentsT, ContinuousCDF}",
      "std::collections::{HashMap, VecDeque}",
      "crate::{DataError, Result}",
      "nalgebra::{DMatrix, DVector}",
      "rand::prelude::*"
    ],
    "crates/data_intelligence/src/news_sentiment.rs": [
      "std::sync::Arc",
      "chrono::{DateTime, Utc}",
      "rust_decimal::Decimal",
      "parking_lot::RwLock",
      "serde::{Deserialize, Serialize}",
      "thiserror::Error",
      "std::collections::HashMap"
    ],
    "crates/data_intelligence/src/dex_analytics.rs": [
      "std::sync::Arc",
      "rust_decimal::Decimal",
      "parking_lot::RwLock",
      "async_trait::async_trait",
      "reqwest::Client",
      "serde::{Deserialize, Serialize}",
      "thiserror::Error",
      "std::collections::{HashMap, BTreeMap, VecDeque}",
      "tokio::sync::mpsc",
      "chrono::{DateTime, Utc, Duration}"
    ],
    "crates/data_intelligence/src/stablecoin_tracker.rs": [
      "std::sync::Arc",
      "rust_decimal::Decimal",
      "parking_lot::RwLock",
      "async_trait::async_trait",
      "reqwest::Client",
      "serde::{Deserialize, Serialize}",
      "thiserror::Error",
      "std::collections::{HashMap, VecDeque, BTreeMap}",
      "tokio::sync::mpsc",
      "chrono::{DateTime, Utc, Duration}"
    ],
    "crates/data_intelligence/src/onchain_analytics.rs": [
      "std::sync::Arc",
      "chrono::{DateTime, Utc}",
      "rust_decimal::Decimal",
      "parking_lot::RwLock",
      "serde::{Deserialize, Serialize}",
      "thiserror::Error",
      "std::collections::HashMap"
    ],
    "crates/data_intelligence/src/lib.rs": [
      "std::sync::Arc",
      "chrono::{DateTime, Utc}",
      "rust_decimal::Decimal",
      "parking_lot::RwLock",
      "thiserror::Error"
    ],
    "crates/data_intelligence/src/simd_processors.rs": [
      "std::sync::Arc",
      "simdeez::sse41::*",
      "simdeez::avx512::*",
      "crate::{DataError, Result}",
      "simdeez::avx2::*",
      "simdeez::prelude::*",
      "std::sync::atomic::{AtomicU64, Ordering}",
      "std::arch::x86_64::*",
      "packed_simd::*"
    ],
    "crates/data_intelligence/src/data_quantizer.rs": [
      "thiserror::Error",
      "std::collections::HashMap",
      "rust_decimal::Decimal"
    ],
    "crates/data_intelligence/src/zero_copy_pipeline.rs": [
      "std::sync::Arc",
      "tracing::{debug, trace}",
      "crate::{DataError, Result}",
      "std::pin::Pin",
      "parking_lot::RwLock",
      "std::alloc::{alloc, dealloc, Layout}",
      "memmap2::{Mmap, MmapOptions}",
      "bytes::{Bytes, BytesMut}",
      "zerocopy::{AsBytes, FromBytes, FromZeroes}",
      "std::mem::MaybeUninit",
      "tokio::sync::mpsc",
      "crossbeam::channel::{bounded, Sender, Receiver}",
      "std::sync::atomic::{AtomicU64, AtomicUsize, Ordering}"
    ],
    "crates/data_intelligence/src/cache_layer.rs": [
      "std::sync::Arc",
      "chrono::{DateTime, Utc}",
      "dashmap::DashMap",
      "std::time::{Duration, Instant}",
      "parking_lot::RwLock",
      "redis::{Client as RedisClient, Commands, AsyncCommands, aio::ConnectionManager}",
      "bytes::Bytes",
      "std::sync::atomic::{AtomicU64, Ordering}",
      "lz4::EncoderBuilder",
      "sqlx::{PgPool, postgres::PgPoolOptions}",
      "zstd::stream::encode_all",
      "crate::{DataError, Result}",
      "std::collections::HashMap",
      "serde::{Serialize, Deserialize}"
    ],
    "crates/data_intelligence/src/whale_alert.rs": [
      "std::sync::Arc",
      "rust_decimal::Decimal",
      "parking_lot::RwLock",
      "async_trait::async_trait",
      "reqwest::Client",
      "serde::{Deserialize, Serialize}",
      "thiserror::Error",
      "tokio::sync::mpsc",
      "std::collections::{HashMap, VecDeque}",
      "chrono::{DateTime, Utc, Duration}"
    ],
    "crates/data_intelligence/src/xai_integration.rs": [
      "std::sync::Arc",
      "rust_decimal::Decimal",
      "parking_lot::RwLock",
      "serde::{Deserialize, Serialize}",
      "reqwest::{Client, header}",
      "tokio::sync::mpsc",
      "crate::{DataError, Result, XAISentiment}",
      "chrono::{DateTime, Utc, Duration}",
      "std::collections::HashMap"
    ],
    "crates/data_intelligence/src/historical_validator.rs": [
      "chrono::{DateTime, Utc}",
      "std::collections::VecDeque",
      "thiserror::Error",
      "rust_decimal::Decimal"
    ],
    "crates/websocket/src/zero_copy.rs": [
      "serde::de::DeserializeOwned",
      "bytes::{Bytes, BytesMut}",
      "thiserror::Error",
      "std::str"
    ],
    "crates/websocket/src/client.rs": [
      "std::sync::Arc",
      "futures_util::{SinkExt, StreamExt}",
      "url::Url",
      "infrastructure::{CircuitBreaker, CircuitConfig, SystemClock, Clock}",
      "crate::message::Message",
      "tokio::net::TcpStream",
      "tracing::{debug, error, info, warn}",
      "std::time::{Duration, Instant}",
      "parking_lot::RwLock",
      "crate::reconnect::{ReconnectStrategy, ExponentialBackoff}",
      "serde::{Deserialize, Serialize}",
      "thiserror::Error",
      "tokio_tungstenite::{\n    connect_async,\n    tungstenite::protocol::Message as WsMessage,\n    MaybeTlsStream, WebSocketStream,\n}",
      "tokio::sync::mpsc",
      "tokio::time::{interval, timeout}",
      "std::sync::atomic::{AtomicBool, AtomicU64, Ordering}"
    ],
    "crates/websocket/src/manager.rs": [
      "std::sync::Arc",
      "crate::client::{WebSocketClient, WebSocketConfig, WebSocketStats}",
      "dashmap::DashMap",
      "std::time::{Duration, Instant}",
      "parking_lot::RwLock",
      "tracing::{error, info, warn}",
      "tokio::sync::{mpsc, broadcast}",
      "tokio::time::interval",
      "crate::message::{Message, MessageType}",
      "std::sync::atomic::AtomicBool",
      "std::collections::HashMap",
      "std::sync::atomic::{AtomicU64, AtomicUsize, Ordering}"
    ],
    "crates/websocket/src/reconnect.rs": [
      "async_trait::async_trait",
      "rand::Rng",
      "std::time::Duration"
    ],
    "crates/websocket/src/reliable_client.rs": [
      "std::sync::Arc",
      "futures_util::{SinkExt, StreamExt}",
      "url::Url",
      "chrono::{DateTime, Utc}",
      "crate::message::Message",
      "tokio::net::TcpStream",
      "tracing::{debug, error, info, warn}",
      "std::time::{Duration, Instant}",
      "parking_lot::RwLock",
      "tokio::sync::{mpsc, broadcast, oneshot}",
      "tokio::time::{interval, timeout, sleep}",
      "std::collections::VecDeque",
      "thiserror::Error",
      "tokio_tungstenite::{\n    connect_async,\n    tungstenite::protocol::Message as WsMessage,\n    MaybeTlsStream, WebSocketStream,\n}",
      "infrastructure::{Clock, RetryExecutor, RetryPolicy}",
      "std::sync::atomic::{AtomicBool, AtomicU64, AtomicU32, Ordering}"
    ],
    "crates/websocket/src/message.rs": [
      "chrono::{DateTime, Utc}",
      "std::hash::Hash",
      "std::fmt",
      "serde::{Deserialize, Serialize}"
    ],
    "crates/exchanges/src/rate_limiter.rs": [
      "std::sync::Arc",
      "std::sync::atomic::{AtomicU64, AtomicU32, Ordering}",
      "std::time::{Duration, Instant}",
      "thiserror::Error",
      "tokio::sync::Semaphore",
      "crossbeam_utils::CachePadded"
    ],
    "crates/risk/src/master_orchestration_system.rs": [
      "rust_decimal::Decimal",
      "crate::prelude::{OrderBook, SentimentData, OptimizationStrategy}",
      "crate::profit_extractor::ProfitExtractor",
      "crate::ml_feedback::MLFeedbackSystem",
      "crate::market_analytics::MarketAnalytics",
      "crate::hyperparameter_integration::HyperparameterIntegrationSystem",
      "parking_lot::RwLock",
      "crate::hyperparameter_optimization::{AutoTunerConfig, OptimizationStudy}",
      "ndarray::{Array1, Array2}",
      "crate::clamps::RiskClampSystem",
      "crate::parameter_manager::ParameterManager",
      "crate::optimal_execution::ExecutionAlgorithm",
      "std::collections::HashMap",
      "crate::cross_asset_correlations::CrossAssetCorrelations",
      "crate::decision_orchestrator::{DecisionOrchestrator, Signal as DecisionSignal}",
      "crate::kelly_sizing::KellySizer",
      "rust_decimal::prelude::*",
      "crate::portfolio_manager::{PortfolioManager, PortfolioConfig}",
      "crate::isotonic::MarketRegime",
      "chrono::{DateTime, Utc, Duration}",
      "std::sync::Arc",
      "rust_decimal_macros::dec",
      "crate::monte_carlo::MonteCarloEngine",
      "crate::unified_types::*",
      "crate::feature_importance::SHAPCalculator",
      "anyhow::{Result, anyhow}",
      "crate::historical_regime_calibration::HistoricalRegimeCalibration",
      "tokio::time::{interval, Duration as TokioDuration}",
      "crate::t_copula::TCopula",
      "crate::auto_tuning::AutoTuningSystem"
    ],
    "crates/risk/src/ml_method_wrappers.rs": [
      "crate::ml_feedback::MLFeedbackSystem",
      "crate::market_analytics::MarketAnalytics",
      "crate::feature_importance::SHAPCalculator",
      "std::collections::VecDeque",
      "crate::unified_types::SignalAction",
      "parking_lot::{RwLockReadGuard, RwLockWriteGuard}"
    ],
    "crates/risk/src/xgboost_model.rs": [
      "std::sync::Arc",
      "rand::Rng",
      "parking_lot::RwLock",
      "bincode",
      "rayon::prelude::*",
      "ndarray::{Array1, Array2, Axis}",
      "std::collections::HashMap",
      "serde::{Serialize, Deserialize}"
    ],
    "crates/risk/src/unified_type_ops.rs": [
      "rust_decimal_macros::dec",
      "rust_decimal::Decimal",
      "crate::unified_types::{Price, Quantity, Percentage}",
      "std::fmt",
      "std::ops::{Add, Sub, Mul, Div}"
    ],
    "crates/risk/src/ml_feedback.rs": [
      "std::sync::Arc",
      "crate::unified_types::*",
      "parking_lot::RwLock",
      "ndarray::{Array1, Array2}",
      "std::collections::{VecDeque, HashMap}",
      "crate::auto_tuning::MarketRegime",
      "crate::xgboost_model::{GradientBoostingModel, ObjectiveFunction, TrainingResult}"
    ],
    "crates/risk/src/market_analytics.rs": [
      "std::sync::Arc",
      "rust_decimal::Decimal",
      "crate::unified_types::*",
      "parking_lot::RwLock",
      "std::collections::VecDeque",
      "rust_decimal::prelude::{FromPrimitive, ToPrimitive}",
      "std::cmp::Ordering"
    ],
    "crates/risk/src/hyperparameter_integration.rs": [
      "crate::hyperparameter_optimization::*",
      "std::sync::Arc",
      "chrono::{DateTime, Utc}",
      "crate::ml_feedback::MLFeedbackSystem",
      "crate::clamps::{RiskClampSystem, ClampConfig}",
      "crate::market_analytics::MarketAnalytics",
      "rust_decimal::Decimal",
      "parking_lot::RwLock",
      "crate::kelly_sizing::{KellySizer, KellyConfig}",
      "crate::isotonic::MarketRegime",
      "crate::profit_extractor::ProfitExtractor",
      "std::str::FromStr",
      "std::collections::HashMap",
      "crate::auto_tuning::AutoTuningSystem"
    ],
    "crates/risk/src/manipulation_detection.rs": [
      "crate::order_book_analytics::{OrderBookSnapshot, PriceLevel, Trade}",
      "rust_decimal_macros::dec",
      "rust_decimal::Decimal",
      "crate::unified_types::{Price, Quantity, Side}",
      "std::collections::{HashMap, VecDeque}",
      "chrono::{DateTime, Utc, Duration}"
    ],
    "crates/risk/src/kelly_sizing.rs": [
      "anyhow::Result",
      "rust_decimal_macros::dec",
      "rust_decimal::Decimal",
      "std::collections::VecDeque",
      "rust_decimal::prelude::ToPrimitive",
      "serde::{Serialize, Deserialize}"
    ],
    "crates/risk/src/order_book_extensions.rs": [
      "crate::unified_types::{Price, Quantity}",
      "rust_decimal::prelude::*",
      "crate::decision_orchestrator::OrderBook",
      "rust_decimal::Decimal"
    ],
    "crates/risk/src/t_copula.rs": [
      "std::sync::Arc",
      "statrs::function::gamma::{gamma, ln_gamma}",
      "parking_lot::RwLock",
      "serde::{Serialize, Deserialize}",
      "crate::parameter_manager::{PARAMETERS, ParameterManager}",
      "statrs::distribution::{StudentsT, ContinuousCDF, Continuous}",
      "rand::distributions::Distribution",
      "nalgebra::{DMatrix, DVector}",
      "std::collections::HashMap",
      "rand_distr::{StandardNormal, Gamma}"
    ],
    "crates/risk/src/kyle_lambda_validation.rs": [
      "rust_decimal_macros::dec",
      "crate::order_book_analytics::{OrderBookAnalytics, OrderBookSnapshot, PriceLevel, Trade}",
      "rand::rngs::StdRng",
      "rust_decimal::Decimal",
      "rand::{Rng, SeedableRng}",
      "rand_distr::Normal",
      "crate::unified_types::{Price, Quantity, Side}"
    ],
    "crates/risk/src/parameter_manager.rs": [
      "rust_decimal::Decimal",
      "rust_decimal::prelude::FromPrimitive",
      "serde::{Deserialize, Serialize}",
      "std::sync::{Arc, RwLock}",
      "std::str::FromStr",
      "std::collections::HashMap"
    ],
    "crates/risk/src/decision_orchestrator_enhanced_impl.rs": [
      "rust_decimal_macros::dec",
      "crate::ml_method_wrappers::{\n    MLFeedbackSystemReadGuardExt, MLFeedbackSystemWriteGuardExt,\n    SHAPCalculatorReadGuardExt, MarketAnalyticsWriteGuardExt\n}",
      "crate::unified_types::*",
      "rust_decimal::Decimal",
      "rust_decimal::prelude::*",
      "anyhow::{Result, anyhow}",
      "crate::HistoricalRegime",
      "crate::trading_types_complete::{EnhancedOrderBook, SentimentData}",
      "crate::prelude::{\n    ExecutionAlgorithm, AssetClass, tail_risk, Utc\n}",
      "std::collections::HashMap",
      "super::decision_orchestrator_enhanced::*",
      "crate::decision_orchestrator::Signal"
    ],
    "crates/risk/src/deep_dive_validation_study.rs": [
      "crate::hyperparameter_optimization::*",
      "crate::kelly_sizing::*",
      "crate::feature_importance::*",
      "crate::monte_carlo::*",
      "crate::order_book_analytics::*",
      "std::collections::HashMap"
    ],
    "crates/risk/src/order_book_methods.rs": [
      "crate::unified_types::{Price, Quantity}",
      "rust_decimal::prelude::*",
      "crate::trading_types_complete::{EnhancedOrderBook, OrderLevel}",
      "rust_decimal::Decimal"
    ],
    "crates/risk/src/ta_improvements.rs": [
      "std::collections::VecDeque"
    ],
    "crates/risk/src/hyperparameter_optimization_tests.rs": [
      "crate::hyperparameter_optimization::*",
      "std::sync::{Arc, Mutex}",
      "std::collections::HashMap",
      "crate::isotonic::MarketRegime"
    ],
    "crates/risk/src/monte_carlo.rs": [
      "std::sync::Arc",
      "anyhow::Result",
      "rust_decimal_macros::dec",
      "crate::kelly_sizing::KellySizer",
      "crate::unified_types::*",
      "rust_decimal::Decimal",
      "parking_lot::RwLock",
      "rust_decimal::prelude::*",
      "crate::clamps::RiskClampSystem",
      "std::collections::VecDeque",
      "crate::portfolio_manager::{PortfolioManager, PortfolioConfig}",
      "crate::garch::GARCHModel",
      "rayon::prelude::*",
      "crate::optimal_execution::OptimalExecutionEngine",
      "rand::prelude::*",
      "rand_distr::{Normal, LogNormal, Beta, Gamma, StudentT, Exp}"
    ],
    "crates/risk/src/garch.rs": [
      "std::f64::consts::PI",
      "anyhow::Result",
      "std::arch::x86_64::*",
      "serde::{Serialize, Deserialize}"
    ],
    "crates/risk/src/decision_orchestrator.rs": [
      "anyhow::Result",
      "rust_decimal::Decimal",
      "crate::profit_extractor::ProfitExtractor",
      "ndarray::Array2",
      "crate::ml_feedback::MLFeedbackSystem",
      "crate::market_analytics::MarketAnalytics",
      "parking_lot::RwLock",
      "crate::clamps::RiskClampSystem",
      "crate::cross_asset_correlations::{CrossAssetCorrelations, AssetClass}",
      "crate::kelly_sizing::KellySizer",
      "crate::portfolio_manager::{PortfolioManager, PortfolioConfig}",
      "crate::t_copula::{TCopula, TCopulaConfig}",
      "rust_decimal::prelude::{FromPrimitive, ToPrimitive}",
      "std::sync::Arc",
      "rust_decimal_macros::dec",
      "crate::unified_types::*",
      "crate::auto_tuning_persistence::AutoTuningPersistence",
      "crate::feature_importance::SHAPCalculator",
      "crate::historical_regime_calibration::HistoricalRegimeCalibration",
      "crate::auto_tuning::AutoTuningSystem"
    ],
    "crates/risk/src/ml_methods_impl.rs": [
      "crate::ml_feedback::MLFeedbackSystem",
      "crate::market_analytics::MarketAnalytics",
      "rust_decimal::Decimal",
      "crate::feature_importance::SHAPCalculator",
      "crate::unified_types::TradingSignal",
      "crate::order_book_analytics::EnhancedOrderBook",
      "std::collections::VecDeque"
    ],
    "crates/risk/src/performance_optimizations.rs": [
      "std::sync::Arc",
      "parking_lot::{RwLock, Mutex}",
      "smallvec::SmallVec",
      "arrayvec::ArrayVec",
      "std::sync::atomic::{AtomicU64, AtomicBool, Ordering}",
      "std::cell::UnsafeCell",
      "crossbeam::channel::{bounded, Sender, Receiver}"
    ],
    "crates/risk/src/cross_asset_correlations.rs": [
      "std::sync::Arc",
      "chrono::{DateTime, Utc}",
      "parking_lot::RwLock",
      "statrs::distribution::{Normal, ContinuousCDF}",
      "crate::garch::GARCHModel",
      "crate::parameter_manager::ParameterManager",
      "std::collections::{HashMap, VecDeque}",
      "crate::historical_regime_calibration::{HistoricalRegime, HistoricalRegimeCalibration}",
      "nalgebra::{DMatrix, DVector}",
      "crate::t_copula::TCopula",
      "serde::{Serialize, Deserialize}"
    ],
    "crates/risk/src/simd_decision_engine.rs": [
      "std::arch::x86_64::*",
      "anyhow::Result",
      "std::time::Instant"
    ],
    "crates/risk/src/comprehensive_tests.rs": [
      "std::str::FromStr",
      "rust_decimal::Decimal",
      "crate::{\n    RiskClampSystem, ClampConfig,\n    KellySizer, KellyConfig, TradeOutcome,\n    GARCHModel, IsotonicCalibrator, MarketRegime,\n}"
    ],
    "crates/risk/src/type_compatibility.rs": [
      "crate::unified_types::{Price, Quantity, Percentage, RiskMetrics}",
      "chrono::Utc",
      "std::collections::HashMap",
      "crate::trading_types_complete::{\n    EnhancedTradingSignal, EnhancedOrderBook, CompleteMarketData,\n    ExecutionAlgorithm, SentimentData, AssetClass, OptimizationStrategy,\n    OptimizationDirection, SignalAction, TimeInForce, MarketRegime,\n}"
    ],
    "crates/risk/src/profit_extractor.rs": [
      "std::sync::Arc",
      "crate::ml_feedback::{MLFeedbackSystem, MarketState}",
      "rust_decimal::Decimal",
      "crate::unified_types::*",
      "parking_lot::RwLock",
      "std::collections::VecDeque",
      "rust_decimal::prelude::{FromPrimitive, ToPrimitive}",
      "crate::market_analytics::{MarketAnalytics}",
      "crate::auto_tuning::{AutoTuningSystem, MarketRegime}"
    ],
    "crates/risk/src/trading_types_complete.rs": [
      "chrono::{DateTime, Utc}",
      "rust_decimal::Decimal",
      "crate::unified_types::{Price, Quantity, Percentage}",
      "std::collections::HashMap",
      "serde::{Serialize, Deserialize}"
    ],
    "crates/risk/src/hyperparameter_optimization.rs": [
      "std::collections::{HashMap, BTreeMap}",
      "chrono::{DateTime, Utc}",
      "rand::rngs::StdRng",
      "rand_distr::{Normal, Uniform, Beta, Distribution}",
      "serde::{Serialize, Deserialize}",
      "rayon::prelude::*",
      "crate::isotonic::MarketRegime",
      "std::sync::{Arc, RwLock}",
      "std::fmt::Debug",
      "rand::{SeedableRng, Rng}"
    ],
    "crates/risk/src/order_book_analytics_ext.rs": [
      "crate::unified_types::{Price, Quantity}",
      "crate::decision_orchestrator::OrderBook"
    ],
    "crates/risk/src/decision_orchestrator_enhanced.rs": [
      "crate::clamps::{RiskClampSystem, ClampConfig}",
      "rust_decimal::Decimal",
      "crate::profit_extractor::{ProfitExtractor, PerformanceStats}",
      "crate::hyperparameter_optimization::{HyperparameterOptimizer, AutoTunerConfig}",
      "crate::market_analytics::MarketAnalytics",
      "ndarray::{Array1, Array2}",
      "parking_lot::RwLock",
      "crate::ml_feedback::{MLFeedbackSystem, MLMetrics}",
      "crate::cross_asset_correlations::{CrossAssetCorrelations, AssetClass}",
      "crate::trading_types_complete::{EnhancedOrderBook, SentimentData}",
      "crate::parameter_manager::ParameterManager",
      "crate::optimal_execution::ExecutionAlgorithm",
      "std::collections::HashMap",
      "crate::monte_carlo::{MonteCarloEngine, SimulationResult}",
      "crate::order_book_analytics_ext::OrderBookAnalytics",
      "chrono::Utc",
      "crate::auto_tuning::{AutoTuningSystem, MarketRegime as AutoTuneRegime}",
      "crate::portfolio_manager::{PortfolioManager, PortfolioConfig}",
      "crate::t_copula::{TCopula, TCopulaConfig}",
      "rust_decimal::prelude::{FromPrimitive, ToPrimitive}",
      "std::sync::Arc",
      "rust_decimal_macros::dec",
      "crate::unified_types::*",
      "crate::auto_tuning_persistence::AutoTuningPersistence",
      "crate::feature_importance::SHAPCalculator",
      "crate::kelly_sizing::{KellySizer, KellyRecommendation}",
      "crate::order_book_methods::PriceExt",
      "anyhow::{Result, anyhow}",
      "crate::historical_regime_calibration::{HistoricalRegimeCalibration, HistoricalRegime}"
    ],
    "crates/risk/src/type_conversion.rs": [
      "rust_decimal_macros::dec",
      "rust_decimal::{Decimal, prelude::*}",
      "anyhow::{Result, Context}",
      "std::convert::{From, TryFrom}",
      "crate::unified_types::{Price, Quantity, Percentage, MarketData, TradingSignal, Candle, Tick}"
    ],
    "crates/risk/src/auto_tuning_persistence.rs": [
      "anyhow::Result",
      "rust_decimal_macros::dec",
      "chrono::{DateTime, Utc}",
      "rust_decimal::Decimal",
      "sqlx::{PgPool, postgres::PgPoolOptions}",
      "std::collections::HashMap",
      "serde::{Serialize, Deserialize}"
    ],
    "crates/risk/src/game_theory_advanced.rs": [
      "std::sync::Arc",
      "parking_lot::RwLock",
      "crate::parameter_manager::ParameterManager",
      "std::collections::HashMap"
    ],
    "crates/risk/src/order_book_analytics.rs": [
      "anyhow::Result",
      "rust_decimal_macros::dec",
      "rust_decimal::Decimal",
      "crate::unified_types::*",
      "std::collections::{VecDeque, HashMap}",
      "rust_decimal::prelude::ToPrimitive"
    ],
    "crates/risk/src/deep_dive_tests.rs": [
      "std::sync::Arc",
      "crate::kelly_sizing::*",
      "crate::isotonic::IsotonicCalibrator",
      "crate::profit_extractor::*",
      "crate::unified_types::*",
      "crate::garch::*",
      "rust_decimal::Decimal",
      "crate::market_analytics::{MarketAnalytics, Candle, Tick}",
      "rust_decimal::prelude::*",
      "crate::clamps::*",
      "parking_lot::RwLock",
      "crate::ml_feedback::{MLFeedbackSystem, MLMetrics, MarketState}",
      "crate::auto_tuning::{AutoTuningSystem, MarketRegime}"
    ],
    "crates/risk/src/vpin_validation.rs": [
      "rust_decimal_macros::dec",
      "crate::order_book_analytics::{OrderBookAnalytics, OrderBookSnapshot, PriceLevel, Trade}",
      "rand::rngs::StdRng",
      "rust_decimal::Decimal",
      "rand::{Rng, SeedableRng}",
      "rand_distr::{Normal, Beta, Distribution}",
      "std::collections::VecDeque",
      "crate::unified_types::{Price, Quantity, Side}"
    ],
    "crates/risk/src/historical_regime_calibration.rs": [
      "std::sync::Arc",
      "crate::unified_types::{Price, Quantity, Percentage}",
      "parking_lot::RwLock",
      "statrs::distribution::{Normal, ContinuousCDF, Continuous}",
      "crate::parameter_manager::ParameterManager",
      "rand::distributions::Distribution",
      "std::collections::{HashMap, VecDeque}",
      "chrono::{DateTime, Utc, Duration}",
      "nalgebra::{DMatrix, DVector}",
      "serde::{Serialize, Deserialize}"
    ],
    "crates/risk/src/funding_rates.rs": [
      "std::sync::Arc",
      "rust_decimal_macros::dec",
      "crate::decision_orchestrator::ExecutionResult",
      "crate::unified_types::*",
      "parking_lot::RwLock",
      "rust_decimal::Decimal",
      "rust_decimal::prelude::*",
      "chrono::{DateTime, Utc, Duration}",
      "std::collections::{HashMap, VecDeque}",
      "crate::portfolio_manager::PortfolioManager"
    ],
    "crates/risk/src/auto_tuning.rs": [
      "std::sync::Arc",
      "rand",
      "parking_lot::RwLock",
      "std::collections::VecDeque",
      "serde::{Serialize, Deserialize}"
    ],
    "crates/risk/src/ml_extensions.rs": [
      "std::collections::{HashMap, VecDeque}",
      "crate::unified_types::SignalAction",
      "chrono::{DateTime, Utc}",
      "rust_decimal::Decimal"
    ],
    "crates/risk/src/portfolio_manager.rs": [
      "std::sync::Arc",
      "rust_decimal_macros::dec",
      "rust_decimal::Decimal",
      "parking_lot::RwLock",
      "crate::unified_types::*",
      "rust_decimal::prelude::*",
      "std::collections::HashMap"
    ],
    "crates/risk/src/kelly_validation.rs": [
      "rust_decimal_macros::dec",
      "rust_decimal::Decimal",
      "super::*"
    ],
    "crates/risk/src/clamps.rs": [
      "std::sync::Arc",
      "crate::kelly_sizing::{KellySizer, KellyConfig, TradeOutcome}",
      "rust_decimal::Decimal",
      "parking_lot::RwLock",
      "rust_decimal::prelude::FromPrimitive",
      "crate::isotonic::{IsotonicCalibrator, MarketRegime}",
      "crate::auto_tuning::{AutoTuningSystem, AdaptiveParameters}",
      "crate::unified_types::{TradingSignal, Quantity}",
      "crate::garch::GARCHModel",
      "std::str::FromStr",
      "log::info",
      "serde::{Serialize, Deserialize}"
    ],
    "crates/risk/src/ml_complete_impl.rs": [
      "std::sync::Arc",
      "chrono::{DateTime, Utc}",
      "crate::ml_feedback::MLFeedbackSystem",
      "crate::market_analytics::MarketAnalytics",
      "crate::unified_types::{TradingSignal, SignalAction, OrderLevel}",
      "rust_decimal::Decimal",
      "parking_lot::RwLock",
      "crate::feature_importance::SHAPCalculator",
      "crate::order_book_analytics::EnhancedOrderBook",
      "std::collections::{HashMap, VecDeque}"
    ],
    "crates/risk/src/optimal_execution.rs": [
      "std::sync::Arc",
      "anyhow::Result",
      "rust_decimal_macros::dec",
      "crate::decision_orchestrator::ExecutionResult",
      "rust_decimal::Decimal",
      "crate::unified_types::*",
      "parking_lot::RwLock",
      "rust_decimal::prelude::*",
      "std::collections::VecDeque",
      "crate::order_book_analytics::OrderBookAnalytics",
      "crate::profit_extractor::ExtendedMarketData"
    ],
    "crates/risk/src/unified_types.rs": [
      "rust_decimal::Decimal",
      "std::fmt",
      "rust_decimal::prelude::{ToPrimitive, FromPrimitive}",
      "uuid",
      "std::ops::{Add, Sub, Mul, Div}",
      "serde::{Serialize, Deserialize}"
    ],
    "crates/risk/src/feature_importance.rs": [
      "std::collections::{HashMap, BTreeMap}",
      "rand::rngs::StdRng",
      "rayon::prelude::*",
      "std::sync::{Arc, RwLock}",
      "ndarray::{Array1, Array2, ArrayView1, Axis}",
      "rand::{SeedableRng, Rng}"
    ],
    "crates/risk/src/isotonic.rs": [
      "anyhow::Result",
      "std::cmp::Ordering",
      "serde::{Serialize, Deserialize}"
    ],
    "crates/order_management/src/state_machine.rs": [
      "std::sync::Arc",
      "std::sync::atomic::{AtomicU8, Ordering}",
      "chrono::{DateTime, Utc}",
      "parking_lot::RwLock",
      "serde::{Deserialize, Serialize}",
      "thiserror::Error",
      "crate::order::OrderId",
      "tracing::{debug, warn, error}",
      "strum_macros::{Display, EnumString, FromRepr}"
    ],
    "crates/order_management/src/position.rs": [
      "std::sync::Arc",
      "tracing::{info, warn}",
      "rust_decimal_macros::dec",
      "chrono::{DateTime, Utc}",
      "dashmap::DashMap",
      "rust_decimal::Decimal",
      "parking_lot::RwLock",
      "crate::order::{Order, OrderId, OrderSide}",
      "serde::{Deserialize, Serialize}",
      "uuid::Uuid"
    ],
    "crates/order_management/src/router.rs": [
      "std::sync::Arc",
      "dashmap::DashMap",
      "rust_decimal::Decimal",
      "parking_lot::RwLock",
      "std::time::{Duration, Instant}",
      "tracing::{debug, info}",
      "serde::{Deserialize, Serialize}",
      "thiserror::Error",
      "crate::order::Order"
    ],
    "crates/order_management/src/manager.rs": [
      "std::sync::Arc",
      "dashmap::DashMap",
      "rust_decimal::Decimal",
      "parking_lot::RwLock",
      "crate::state_machine::{OrderStateMachine, OrderState, OrderEvent, StateTransitionError}",
      "sqlx::PgPool",
      "serde::{Deserialize, Serialize}",
      "thiserror::Error",
      "crate::order::{Order, OrderId, OrderFill, OrderValidationError}",
      "tracing::{info, error, debug, warn}",
      "std::time::Instant",
      "std::sync::atomic::AtomicU64"
    ],
    "crates/order_management/src/order.rs": [
      "chrono::{DateTime, Utc}",
      "rust_decimal::Decimal",
      "strum_macros::{Display, EnumString}",
      "std::fmt",
      "serde::{Deserialize, Serialize}",
      "uuid::Uuid"
    ],
    "crates/types/src/trading.rs": [
      "serde::{Deserialize, Serialize}"
    ],
    "crates/types/src/market.rs": [
      "serde::{Deserialize, Serialize}",
      "rust_decimal::Decimal"
    ],
    "crates/risk_engine/src/emergency.rs": [
      "std::sync::Arc",
      "std::time::{Duration, SystemTime, UNIX_EPOCH}",
      "rust_decimal::Decimal",
      "parking_lot::RwLock",
      "tracing::{error, warn, info}",
      "serde::{Deserialize, Serialize}",
      "std::sync::atomic::{AtomicBool, AtomicU64, Ordering}"
    ],
    "crates/risk_engine/src/checks.rs": [
      "std::sync::Arc",
      "order_management::{Order, Position}",
      "rust_decimal_macros::dec",
      "crate::limits::RiskLimits",
      "dashmap::DashMap",
      "rust_decimal::Decimal",
      "parking_lot::RwLock",
      "serde::{Deserialize, Serialize}",
      "thiserror::Error",
      "tracing::{debug, warn, error}",
      "std::time::Instant"
    ],
    "crates/risk_engine/src/limits.rs": [
      "rust_decimal_macros::dec",
      "serde::{Deserialize, Serialize}",
      "rust_decimal::Decimal"
    ],
    "crates/risk_engine/src/stop_loss_manager.rs": [
      "std::sync::Arc",
      "order_management::{Order, OrderSide, Position, PositionId}",
      "rust_decimal_macros::dec",
      "chrono::{DateTime, Utc}",
      "dashmap::DashMap",
      "rust_decimal::Decimal",
      "parking_lot::RwLock",
      "tracing::{error, warn, info}",
      "tokio::sync::mpsc"
    ],
    "crates/risk_engine/src/correlation.rs": [
      "std::sync::Arc",
      "parking_lot::RwLock",
      "serde::{Deserialize, Serialize}",
      "ndarray::Array2",
      "std::collections::HashMap",
      "statrs::statistics::Statistics"
    ],
    "crates/risk_engine/src/correlation_avx512.rs": [
      "std::sync::Arc",
      "parking_lot::RwLock"
    ],
    "crates/risk_engine/src/market_maker_detection.rs": [
      "std::sync::Arc",
      "tracing::{info, debug}",
      "dashmap::DashMap",
      "rust_decimal::Decimal",
      "parking_lot::RwLock",
      "std::collections::VecDeque",
      "statrs::statistics::Statistics",
      "chrono::{DateTime, Utc, Duration}",
      "rust_decimal::prelude::ToPrimitive",
      "serde::{Serialize, Deserialize}"
    ],
    "crates/risk_engine/src/correlation_portable.rs": [
      "std::sync::Arc",
      "parking_lot::RwLock",
      "std::sync::OnceLock"
    ],
    "crates/risk_engine/src/stress_testing.rs": [
      "std::sync::Arc",
      "anyhow::Result",
      "rust_decimal_macros::dec",
      "rust_decimal::Decimal",
      "super::checks::RiskChecker",
      "rand_distr::{Normal, StudentT}",
      "rand::distributions::Distribution",
      "std::collections::HashMap",
      "serde::{Serialize, Deserialize}"
    ],
    "crates/risk_engine/src/monitor.rs": [
      "std::sync::Arc",
      "rust_decimal_macros::dec",
      "dashmap::DashMap",
      "rust_decimal::Decimal",
      "parking_lot::RwLock",
      "std::collections::VecDeque",
      "serde::{Deserialize, Serialize}",
      "std::sync::atomic::{AtomicU64, Ordering}",
      "rust_decimal::prelude::ToPrimitive",
      "tracing::error"
    ],
    "crates/risk_engine/src/latency_arbitrage_detection.rs": [
      "std::sync::Arc",
      "rust_decimal_macros::dec",
      "dashmap::DashMap",
      "rust_decimal::Decimal",
      "parking_lot::RwLock",
      "std::collections::VecDeque",
      "tracing::{error, warn, debug}",
      "statrs::statistics::Statistics",
      "std::sync::atomic::{AtomicU64, Ordering}",
      "chrono::{DateTime, Utc, Duration}",
      "rust_decimal::prelude::ToPrimitive",
      "serde::{Serialize, Deserialize}"
    ],
    "crates/risk_engine/src/correlation_simd.rs": [
      "packed_simd2::{f32x8, f64x4}",
      "std::sync::Arc",
      "parking_lot::RwLock",
      "rust_decimal::Decimal"
    ],
    "crates/risk_engine/src/adverse_selection.rs": [
      "std::sync::Arc",
      "order_management::{OrderId, OrderSide, Fill}",
      "rust_decimal_macros::dec",
      "dashmap::DashMap",
      "rust_decimal::Decimal",
      "parking_lot::RwLock",
      "std::collections::VecDeque",
      "chrono::{DateTime, Utc, Duration}",
      "tracing::{error, warn}",
      "rust_decimal::prelude::ToPrimitive",
      "serde::{Serialize, Deserialize}"
    ],
    "crates/analysis/src/historical_calibration.rs": [
      "statrs::distribution::{ContinuousCDF, Normal, StudentsT}",
      "anyhow::{Result, Context}",
      "rust_decimal::Decimal",
      "serde::{Deserialize, Serialize}",
      "chrono::{DateTime, Utc, Duration}",
      "std::collections::HashMap",
      "statrs::statistics::Statistics"
    ],
    "crates/analysis/src/statistical_tests.rs": [
      "statrs::distribution::{ChiSquared, ContinuousCDF, Normal}",
      "ndarray::{Array1, Array2, s}"
    ],
    "crates/analysis/src/dcc_garch.rs": [
      "anyhow::Result",
      "nalgebra::{DMatrix, DVector}"
    ],
    "crates/ml/src/integrated_optimization.rs": [
      "std::sync::Arc",
      "std::time::Instant",
      "rayon::prelude::*",
      "crate::math_opt::{StrassenMultiplier, RandomizedSVD, CSRMatrix, FFTConvolution, KahanSum}",
      "infrastructure::zero_copy::{ObjectPool, Arena, MemoryPoolManager}",
      "crate::simd::{AlignedVec, dot_product_avx512, has_avx512}",
      "ndarray::{Array1, Array2, s}"
    ],
    "crates/ml/src/optimization.rs": [
      "std::sync::Arc",
      "parking_lot::RwLock"
    ],
    "crates/ml/src/garch.rs": [
      "std::arch::x86_64::*",
      "anyhow::Result",
      "serde::{Serialize, Deserialize}"
    ],
    "crates/ml/src/data_normalization.rs": [
      "std::collections::VecDeque",
      "anyhow::{Result, Context, bail}",
      "serde::{Serialize, Deserialize}",
      "ndarray::{Array1, Array2, Axis}"
    ],
    "crates/ml/src/signal_processing.rs": [
      "anyhow::{Result, Context, bail}",
      "tracing::info",
      "ndarray_rand::RandomExt",
      "ndarray::{Array1, Array2, Axis, s}",
      "rand_distr::StandardNormal",
      "serde::{Serialize, Deserialize}"
    ],
    "crates/ml/src/math_opt/mod.rs": [
      "ndarray::{Array2, s}",
      "num_complex::Complex",
      "rustfft::{FftPlanner, num_traits::Zero}",
      "ndarray::Array1",
      "std::cmp::min",
      "rayon::prelude::*",
      "crate::simd::gemm_avx512",
      "rand::prelude::*"
    ],
    "crates/ml/src/validation/purged_cv.rs": [
      "ndarray::ArrayView1",
      "rand::thread_rng",
      "ndarray::{Array1, Array2, s}",
      "statrs::distribution::{ContinuousCDF, Normal}",
      "rand::seq::SliceRandom"
    ],
    "crates/ml/src/features/microstructure.rs": [
      "chrono::{DateTime, Utc}",
      "std::collections::VecDeque",
      "std::arch::x86_64::*",
      "ndarray::Array1",
      "serde::{Serialize, Deserialize}"
    ],
    "crates/ml/src/calibration/isotonic.rs": [
      "ndarray::Array1",
      "std::collections::HashMap",
      "serde::{Serialize, Deserialize}"
    ],
    "crates/ml/src/simd/mod.rs": [
      "std::arch::x86_64::*",
      "std::alloc::{alloc, dealloc, Layout}",
      "std::mem"
    ],
    "crates/ml/src/inference/engine.rs": [
      "std::sync::Arc",
      "dashmap::DashMap",
      "std::time::{Duration, Instant}",
      "parking_lot::RwLock",
      "std::sync::atomic::{AtomicU64, AtomicBool, Ordering}",
      "crossbeam::channel::{bounded, Sender, Receiver}"
    ],
    "crates/ml/src/training/convergence_monitor.rs": [
      "std::sync::Arc",
      "std::collections::VecDeque",
      "parking_lot::RwLock",
      "serde::{Serialize, Deserialize}"
    ],
    "crates/ml/src/training/hyperparameter.rs": [
      "serde::{Deserialize, Serialize}",
      "rayon::prelude::*",
      "std::cmp::Ordering",
      "ndarray::Array2",
      "rand::prelude::*",
      "std::collections::HashMap"
    ],
    "crates/ml/src/training/cross_validation.rs": [
      "anyhow::{Result, Context}",
      "ndarray::{Array2, Axis}",
      "serde::{Deserialize, Serialize}",
      "rayon::prelude::*",
      "std::collections::HashMap"
    ],
    "crates/ml/src/training/optimizer.rs": [
      "std::collections::HashMap",
      "anyhow::Result",
      "ndarray::Array1",
      "serde::{Deserialize, Serialize}"
    ],
    "crates/ml/src/training/storage.rs": [
      "anyhow::{Result, Context}",
      "tokio::io::{AsyncReadExt, AsyncWriteExt}",
      "chrono::{DateTime, Utc}",
      "tokio::fs",
      "serde::{Deserialize, Serialize}",
      "std::path::{Path, PathBuf}",
      "std::collections::HashMap"
    ],
    "crates/ml/src/training/metrics.rs": [
      "std::collections::HashMap",
      "serde::{Deserialize, Serialize}",
      "ndarray::{Array1, Array2}"
    ],
    "crates/ml/src/training/mod.rs": [
      "std::sync::Arc",
      "tracing::{info, warn}",
      "anyhow::{Result, Context}",
      "std::time::{Duration, SystemTime, UNIX_EPOCH}",
      "crate::feature_engine::FeatureExtractor",
      "crate::models::registry::ModelRegistry",
      "serde::{Deserialize, Serialize}",
      "rayon::prelude::*",
      "tokio::sync::RwLock",
      "ndarray::{Array2, ArrayView2, s}",
      "crate::models::{ModelType, BaseModel}",
      "rand::prelude::*",
      "std::collections::HashMap"
    ],
    "crates/ml/src/feature_engine/pipeline.rs": [
      "std::sync::Arc",
      "anyhow::Result",
      "parking_lot::RwLock",
      "super::{\n    FeatureVector, MarketSnapshot, FeatureStats, FeatureMetadata, TechnicalIndicators, ExtendedIndicators,\n    FeatureScaler, FeatureSelector, ScalingMethod, SelectionMethod,\n}",
      "rayon::prelude::*",
      "std::time::Instant",
      "rust_decimal::prelude::ToPrimitive"
    ],
    "crates/ml/src/feature_engine/selector.rs": [
      "anyhow::Result"
    ],
    "crates/ml/src/feature_engine/indicators.rs": [
      "std::sync::Arc",
      "anyhow::Result",
      "dashmap::DashMap",
      "thiserror::Error",
      "std::arch::x86_64::*",
      "std::collections::HashMap"
    ],
    "crates/ml/src/feature_engine/advanced_features.rs": [
      "std::sync::Arc",
      "num_complex::Complex",
      "ndarray::{Array1, Array2, Array3, Axis, s}",
      "statrs::distribution::{Normal, Continuous}",
      "crate::simd::{dot_product_avx512, has_avx512}",
      "infrastructure::zero_copy::{ObjectPool, MemoryPoolManager}",
      "statrs::statistics::{Statistics, OrderStatistics}",
      "std::collections::HashMap",
      "crate::math_opt::{FFTConvolution, KahanSum}"
    ],
    "crates/ml/src/feature_engine/indicators_extended.rs": [
      "super::indicators::*",
      "std::collections::HashMap"
    ],
    "crates/ml/src/feature_engine/ichimoku.rs": [
      "anyhow::Result",
      "std::cmp::Ordering",
      "super::indicators::*"
    ],
    "crates/ml/src/feature_engine/harmonic_patterns.rs": [
      "anyhow::Result",
      "super::indicators::*",
      "std::collections::HashMap"
    ],
    "crates/ml/src/feature_engine/elliott_wave.rs": [
      "anyhow::Result",
      "std::collections::VecDeque",
      "super::indicators::*"
    ],
    "crates/ml/src/feature_engine/scaler.rs": [
      "anyhow::Result"
    ],
    "crates/ml/src/feature_engine/mod.rs": [
      "anyhow::Result",
      "rust_decimal::Decimal"
    ],
    "crates/ml/src/models/attention_lstm.rs": [
      "ndarray::{Array1, Array2, Array3, Axis, s}",
      "std::collections::VecDeque",
      "rand_distr::{Normal, Distribution}",
      "std::arch::x86_64::*",
      "rand::prelude::*"
    ],
    "crates/ml/src/models/gru.rs": [
      "std::sync::Arc",
      "ndarray::{Array1, Array2, Array3, Axis}",
      "parking_lot::RwLock",
      "rand::distributions::{Distribution, Uniform}",
      "serde::{Deserialize, Serialize}"
    ],
    "crates/ml/src/models/arima.rs": [
      "std::sync::Arc",
      "parking_lot::RwLock",
      "serde::{Deserialize, Serialize}",
      "log::{debug, info, warn, error}",
      "ndarray::Array1"
    ],
    "crates/ml/src/models/lstm.rs": [
      "std::sync::Arc",
      "ndarray::{Array1, Array2, Array3, Axis}",
      "parking_lot::RwLock",
      "rand::distributions::{Distribution, Uniform}",
      "serde::{Deserialize, Serialize}"
    ],
    "crates/ml/src/models/garch.rs": [
      "std::arch::x86_64::*",
      "serde::{Serialize, Deserialize}",
      "rand::prelude::*",
      "statrs::distribution::StudentsT"
    ],
    "crates/ml/src/models/ensemble.rs": [
      "std::sync::Arc",
      "parking_lot::RwLock",
      "super::{\n    ARIMAModel,\n    LSTMModel,\n    GRUModel,\n    ModelId,\n}",
      "serde::{Deserialize, Serialize}",
      "std::collections::HashMap"
    ],
    "crates/ml/src/models/deep_lstm.rs": [
      "std::sync::Arc",
      "infrastructure::zero_copy::MemoryPoolManager",
      "rand_distr::Normal",
      "std::f64::consts::SQRT_2",
      "crate::math_opt::StrassenMultiplier",
      "ndarray::{Array1, Array2, Axis, s}",
      "crate::simd::{dot_product_avx512, gemm_avx512, has_avx512}",
      "log::{debug, info, warn, error}",
      "rand::prelude::*",
      "serde::{Serialize, Deserialize}"
    ],
    "crates/ml/src/models/xgboost_optimized.rs": [
      "std::sync::Arc",
      "crate::optimization::MemoryPoolManager",
      "crate::feature_engine::AdvancedFeatureEngine",
      "ordered_float::OrderedFloat",
      "dashmap::DashMap",
      "parking_lot::RwLock",
      "rayon::prelude::*",
      "ndarray::{Array1, Array2, ArrayView1}",
      "serde::{Deserialize, Serialize}",
      "std::arch::x86_64::*",
      "std::collections::HashMap"
    ],
    "crates/ml/src/models/ensemble_optimized.rs": [
      "std::sync::Arc",
      "crate::models::DeepLSTM",
      "infrastructure::zero_copy::MemoryPoolManager",
      "crate::simd::{dot_product_avx512, has_avx512}",
      "crate::math_opt::KahanSum",
      "ndarray::{Array1, Array2, Axis}",
      "rand::prelude::*",
      "std::collections::HashMap",
      "serde::{Serialize, Deserialize}"
    ],
    "crates/ml/src/models/stacking_ensemble.rs": [
      "std::sync::Arc",
      "parking_lot::RwLock",
      "async_trait::async_trait",
      "tracing::{info, error}",
      "ndarray::{Array1, Array2, Axis, s, concatenate}",
      "std::collections::HashMap",
      "serde::{Serialize, Deserialize}"
    ],
    "crates/ml/src/models/registry.rs": [
      "std::sync::Arc",
      "parking_lot::RwLock",
      "serde::{Deserialize, Serialize}",
      "std::collections::{HashMap, BTreeMap, VecDeque}",
      "std::sync::atomic::{AtomicU64, Ordering}",
      "memmap2::{Mmap, MmapOptions}",
      "uuid::Uuid",
      "chrono::{DateTime, Utc, Duration}",
      "std::fs::File",
      "std::path::PathBuf"
    ],
    "crates/ml/src/backtesting/walk_forward.rs": [
      "anyhow::Result",
      "ndarray::{Array1, Array2}",
      "anyhow::bail",
      "crate::training::convergence_monitor::{ConvergenceMonitor, ConvergenceConfig}",
      "crate::validation::purged_cv::PurgedWalkForwardCV",
      "std::collections::HashMap",
      "serde::{Serialize, Deserialize}"
    ],
    "crates/ml/tests/arima_integration.rs": [
      "chrono::{DateTime, Utc}",
      "std::fs",
      "ml::models::{ARIMAModel, ARIMAConfig, ModelRegistry, DeploymentStrategy}",
      "approx::assert_relative_eq",
      "ml::feature_engine::indicators::IndicatorEngine"
    ],
    "crates/ml/benches/ml_benchmarks.rs": [
      "ml::{\n    models::{ARIMAModel, ARIMAConfig, ModelRegistry, DeploymentStrategy},\n    feature_engine::indicators::IndicatorEngine,\n    inference::{InferenceEngine, InferenceRequest, Priority, ModelData, ModelType, LayerConfig},\n}",
      "std::time::Duration",
      "criterion::{black_box, criterion_group, criterion_main, Criterion, BenchmarkId}"
    ],
    "crates/ml/benches/feature_bench.rs": [
      "std::time::Duration",
      "ml::feature_engine::{FeatureEngine, Candle}",
      "criterion::{black_box, criterion_group, criterion_main, Criterion, BenchmarkId}"
    ],
    "crates/infrastructure/src/hot_path_verification.rs": [
      "crate::parallelization::memory_ordering",
      "crate::memory::pools",
      "std::sync::atomic::AtomicU64",
      "std::time::Instant"
    ],
    "crates/infrastructure/src/circuit_breaker_sophia.rs": [
      "std::sync::Arc",
      "crossbeam_utils::CachePadded",
      "dashmap::DashMap",
      "std::time::{Duration, Instant}",
      "thiserror::Error",
      "serde::{Deserialize, Serialize}",
      "tokio::sync::mpsc",
      "std::sync::atomic::{AtomicU8, AtomicU64, AtomicU32, Ordering}",
      "arc_swap::ArcSwap"
    ],
    "crates/infrastructure/src/position_reconciliation.rs": [
      "std::sync::Arc",
      "chrono::{DateTime, Utc}",
      "anyhow::{Result, Context, bail}",
      "crate::mode_persistence::ModePersistenceManager",
      "std::collections::{HashMap, HashSet}",
      "rust_decimal::{Decimal, prelude::FromStr}",
      "sha2::{Sha256, Digest}",
      "tokio::sync::{RwLock, Mutex, broadcast}",
      "std::time::{Duration, SystemTime}",
      "crate::software_control_modes::ControlMode",
      "tracing::{info, warn, error, debug}",
      "serde::{Serialize, Deserialize}"
    ],
    "crates/infrastructure/src/network_partition_handler.rs": [
      "std::sync::Arc",
      "anyhow::{Result, Context, bail}",
      "crate::mode_persistence::ModePersistenceManager",
      "std::time::{Duration, SystemTime, Instant}",
      "rust_decimal::Decimal",
      "tokio::sync::{RwLock, Mutex, broadcast, oneshot}",
      "crate::software_control_modes::{ControlMode, ControlModeManager}",
      "crate::position_reconciliation::PositionReconciliationEngine",
      "crate::circuit_breaker::{ComponentBreaker as CircuitBreaker, CircuitConfig, CircuitState, GlobalTripConditions}",
      "std::collections::{HashMap, VecDeque}",
      "tokio::time::{interval, timeout}",
      "tracing::{info, warn, error, debug}",
      "serde::{Serialize, Deserialize}"
    ],
    "crates/infrastructure/src/circuit_breaker_integration.rs": [
      "std::sync::Arc",
      "crate::emergency_coordinator::{EmergencyCoordinator, EmergencyReason}",
      "dashmap::DashMap",
      "std::time::{Duration, Instant}",
      "parking_lot::RwLock",
      "async_trait::async_trait",
      "tracing::{error, warn, info}",
      "crate::circuit_breaker::{ComponentBreaker, CircuitState, CircuitConfig, Outcome, SystemClock}",
      "tokio::sync::broadcast",
      "std::sync::atomic::{AtomicBool, AtomicU64, Ordering}"
    ],
    "crates/infrastructure/src/cpu_features.rs": [
      "once_cell::sync::Lazy",
      "std::sync::Arc"
    ],
    "crates/infrastructure/src/simd_ops.rs": [
      "std::arch::x86_64::*",
      "crate::cpu_features::{CPU_FEATURES, SimdStrategy}"
    ],
    "crates/infrastructure/src/simd_avx512.rs": [
      "std::arch::x86_64::*"
    ],
    "crates/infrastructure/src/allocator.rs": [
      "mimalloc::MiMalloc"
    ],
    "crates/infrastructure/src/circuit_breaker.rs": [
      "std::sync::Arc",
      "crossbeam_utils::CachePadded",
      "dashmap::DashMap",
      "std::time::{Duration, Instant}",
      "thiserror::Error",
      "serde::{Deserialize, Serialize}",
      "std::sync::atomic::{AtomicU8, AtomicU64, AtomicU32, Ordering}",
      "arc_swap::ArcSwap"
    ],
    "crates/infrastructure/src/rayon_enhanced.rs": [
      "std::sync::Arc",
      "crossbeam::utils::CachePadded",
      "anyhow::{Result, Context}",
      "dashmap::DashMap",
      "std::time::{Duration, Instant}",
      "rust_decimal::prelude::*",
      "rayon::prelude::*",
      "crate::object_pools::{\n    acquire_signal,\n    Order, Signal, MarketData, SignalType,\n}",
      "rayon::{ThreadPool, ThreadPoolBuilder}",
      "std::sync::atomic::{AtomicU64, AtomicUsize, Ordering}"
    ],
    "crates/infrastructure/src/panic_conditions.rs": [
      "std::sync::Arc",
      "anyhow::Result",
      "tracing::{info, warn, error}",
      "std::time::{Duration, Instant}",
      "parking_lot::RwLock",
      "chrono::{Local, Timelike}",
      "crate::hardware_kill_switch::HardwareKillSwitch",
      "crate::software_control_modes::{ControlModeManager, ControlMode}",
      "std::collections::{VecDeque, HashMap}",
      "std::sync::atomic::{AtomicU64, AtomicBool, Ordering}",
      "crate::circuit_breaker_integration::{CircuitBreakerHub, ToxicitySignals}",
      "tokio::sync::broadcast"
    ],
    "crates/infrastructure/src/alert_management.rs": [
      "std::sync::Arc",
      "std::cmp::Ordering as CmpOrdering",
      "tracing::{info, debug}",
      "parking_lot::RwLock",
      "std::collections::{BinaryHeap, HashMap, HashSet, VecDeque}",
      "anyhow::{Result, bail}",
      "std::sync::atomic::{AtomicU64, Ordering}",
      "tokio::sync::broadcast",
      "std::time::{Duration, Instant, SystemTime, UNIX_EPOCH}",
      "serde::{Serialize, Deserialize}"
    ],
    "crates/infrastructure/src/object_pools.rs": [
      "std::sync::Arc",
      "rust_decimal::Decimal",
      "lazy_static::lazy_static",
      "crate::zero_copy::{ObjectPool, PoolGuard}",
      "std::collections::HashMap",
      "serde::{Serialize, Deserialize}"
    ],
    "crates/infrastructure/src/mode_persistence.rs": [
      "std::sync::Arc",
      "chrono::{DateTime, Utc}",
      "tracing::{info, warn, error}",
      "anyhow::{Result, Context, bail}",
      "sqlx::{PgPool, postgres::PgPoolOptions, Row}",
      "crate::software_control_modes::ControlMode",
      "tokio::sync::{RwLock, broadcast}",
      "std::time::Duration",
      "serde::{Serialize, Deserialize}"
    ],
    "crates/infrastructure/src/deployment_config.rs": [
      "std::sync::Arc",
      "anyhow::{Result, Context, bail}",
      "tracing::info",
      "parking_lot::RwLock",
      "std::fs",
      "tokio::sync::broadcast",
      "std::path::{Path, PathBuf}",
      "std::collections::HashMap",
      "serde::{Serialize, Deserialize}"
    ],
    "crates/infrastructure/src/emergency_coordinator.rs": [
      "std::sync::Arc",
      "chrono::{DateTime, Utc}",
      "async_trait::async_trait",
      "parking_lot::RwLock",
      "tracing::{error, warn, info}",
      "tokio::sync::broadcast",
      "std::sync::atomic::{AtomicBool, AtomicU64, Ordering}",
      "serde::{Serialize, Deserialize}"
    ],
    "crates/infrastructure/src/software_control_modes.rs": [
      "std::sync::Arc",
      "tracing::{info, warn}",
      "std::time::{Duration, Instant}",
      "parking_lot::RwLock",
      "serde::{Serialize, Deserialize}",
      "crate::circuit_breaker_integration::CircuitBreakerHub",
      "anyhow::{Result, bail}",
      "crate::hardware_kill_switch::HardwareKillSwitch",
      "crate::emergency_coordinator::EmergencyCoordinator",
      "std::sync::atomic::{AtomicU64, AtomicBool, Ordering}",
      "std::collections::HashMap",
      "tokio::sync::broadcast"
    ],
    "crates/infrastructure/src/historical_charts.rs": [
      "std::sync::Arc",
      "parking_lot::RwLock",
      "std::sync::atomic::{AtomicU64, Ordering}",
      "std::collections::{VecDeque, HashMap}",
      "std::time::{Duration, Instant, SystemTime, UNIX_EPOCH}",
      "serde::{Serialize, Deserialize}"
    ],
    "crates/infrastructure/src/runtime_optimization.rs": [
      "std::sync::Arc",
      "anyhow::{Result, Context}",
      "crossbeam::utils::CachePadded",
      "tokio::runtime::{Builder, Runtime}",
      "std::sync::atomic::{AtomicBool, AtomicU64, Ordering}",
      "std::time::Duration"
    ],
    "crates/infrastructure/src/parallelization.rs": [
      "std::sync::Arc",
      "crossbeam::utils::CachePadded",
      "anyhow::{Result, Context}",
      "dashmap::DashMap",
      "rayon::prelude::*",
      "std::sync::atomic::{AtomicUsize, Ordering}"
    ],
    "crates/infrastructure/src/external_control.rs": [
      "std::sync::Arc",
      "crate::mode_persistence::{ModePersistenceManager, ModeTransition}",
      "std::time::{Duration, SystemTime, UNIX_EPOCH}",
      "anyhow::{Result, Context, bail}",
      "tracing::{info, warn, error}",
      "axum::{\n    Router,\n    routing::{get, post, put},\n    response::{Json, IntoResponse, Response},\n    extract::{State, Path, Query},\n    http::{StatusCode, header},\n    middleware,\n}",
      "tower_http::cors::CorsLayer",
      "crate::deployment_config::Environment",
      "jsonwebtoken::{encode, decode, Header, Algorithm, Validation, EncodingKey, DecodingKey}",
      "tower_http::limit::RequestBodyLimitLayer",
      "uuid::Uuid",
      "crate::software_control_modes::ControlMode",
      "tokio::sync::{RwLock, broadcast, Mutex}",
      "std::collections::HashMap",
      "serde::{Serialize, Deserialize}"
    ],
    "crates/infrastructure/src/circuit_breaker_layer_integration.rs": [
      "std::sync::Arc",
      "tokio::sync::{broadcast, mpsc}",
      "dashmap::DashMap",
      "std::time::{Duration, Instant}",
      "parking_lot::RwLock",
      "async_trait::async_trait",
      "crate::circuit_breaker_integration::{\n    CircuitBreakerHub, ToxicitySignals, RiskCalculationType,\n    CircuitBreakerError, ToxicityBreach,\n}",
      "statrs::distribution::{Normal, ContinuousCDF}",
      "statrs::statistics::Statistics",
      "std::sync::atomic::{AtomicBool, AtomicU64, AtomicU32, Ordering}",
      "tracing::{error, warn, info, debug, instrument}",
      "std::collections::{HashMap, VecDeque}",
      "serde::{Serialize, Deserialize}"
    ],
    "crates/infrastructure/src/audit_system.rs": [
      "std::sync::Arc",
      "anyhow::Result",
      "std::time::{Duration, SystemTime, UNIX_EPOCH}",
      "tracing::{info, warn, error}",
      "std::collections::{HashMap, VecDeque}",
      "parking_lot::RwLock",
      "std::fs::{File, OpenOptions}",
      "chrono::Utc",
      "sha2::{Sha256, Digest}",
      "std::io::{Write, BufWriter}",
      "std::sync::atomic::{AtomicU64, AtomicBool, Ordering}",
      "std::path::{Path, PathBuf}",
      "serde::{Serialize, Deserialize}"
    ],
    "crates/infrastructure/src/cache_padding.rs": [
      "std::sync::atomic::{AtomicU64, AtomicU32, AtomicU8}",
      "crossbeam_utils::CachePadded"
    ],
    "crates/infrastructure/src/retry_logic.rs": [
      "std::sync::Arc",
      "rand::Rng",
      "chrono::{DateTime, Utc}",
      "tokio::time::sleep",
      "async_trait::async_trait",
      "tracing::{error, warn, info, debug}",
      "thiserror::Error",
      "std::sync::atomic::{AtomicU32, AtomicU64, Ordering}",
      "std::future::Future",
      "std::time::Duration"
    ],
    "crates/infrastructure/src/perf_manifest.rs": [
      "std::time::{Duration, Instant}",
      "std::arch::x86_64::*",
      "prometheus::{Histogram, HistogramOpts, Registry, register_histogram_vec_with_registry}",
      "std::collections::HashMap",
      "serde::{Serialize, Deserialize}"
    ],
    "crates/infrastructure/src/statistical_circuit_breakers.rs": [
      "std::sync::Arc",
      "rust_decimal_macros::dec",
      "anyhow::{Result, Context, bail}",
      "std::time::{Duration, SystemTime, Instant}",
      "rust_decimal::prelude::*",
      "std::collections::{VecDeque, HashMap}",
      "parking_lot::RwLock as SyncRwLock",
      "tracing::{info, warn, error, debug}",
      "tokio::sync::{RwLock, Mutex}",
      "serde::{Serialize, Deserialize}"
    ],
    "crates/infrastructure/src/monitoring_dashboards.rs": [
      "std::sync::Arc",
      "std::collections::{HashMap, VecDeque}",
      "parking_lot::RwLock",
      "serde::{Serialize, Deserialize}",
      "tracing::{info, error, debug}",
      "crate::software_control_modes::ControlModeManager",
      "anyhow::{Result, bail}",
      "crate::hardware_kill_switch::HardwareKillSwitch",
      "crate::circuit_breaker_integration::CircuitBreakerHub",
      "crate::historical_charts::{ChartDataAggregator, ChartRenderer, Timeframe}",
      "crate::panic_conditions::PanicDetector",
      "futures_util::{StreamExt, SinkExt}",
      "crate::alert_management::{AlertManager, Alert as SystemAlert, AlertSeverity as SystemAlertSeverity}",
      "std::sync::atomic::{AtomicU64, AtomicBool, Ordering}",
      "std::time::{Duration, Instant, SystemTime, UNIX_EPOCH}",
      "tokio_tungstenite::tungstenite::Message as WsMessage",
      "tokio::sync::broadcast"
    ],
    "crates/infrastructure/src/exchange_specific_safety.rs": [
      "std::sync::Arc",
      "rust_decimal_macros::dec",
      "anyhow::{Result, Context, bail}",
      "std::time::{Duration, SystemTime, Instant}",
      "rust_decimal::prelude::*",
      "crate::statistical_circuit_breakers::{StatisticalBreakerIntegration, StatisticalConfig}",
      "crate::circuit_breaker::{ComponentBreaker as CircuitBreaker, CircuitConfig, CircuitState, GlobalTripConditions}",
      "tokio::sync::{RwLock, Mutex, Semaphore}",
      "std::collections::{HashMap, VecDeque}",
      "parking_lot::RwLock as SyncRwLock",
      "tracing::{info, warn, error, debug}",
      "serde::{Serialize, Deserialize}"
    ],
    "crates/infrastructure/src/hardware_kill_switch.rs": [
      "std::sync::Arc",
      "anyhow::Result",
      "std::time::{Duration, Instant}",
      "parking_lot::RwLock",
      "tracing::{error, info}",
      "crossbeam::channel::{bounded, Sender, Receiver}",
      "std::sync::atomic::{AtomicBool, AtomicU64, Ordering}"
    ],
    "crates/infrastructure/src/stream_processing/producer.rs": [
      "std::sync::Arc",
      "anyhow::Result",
      "redis::AsyncCommands",
      "redis::aio::ConnectionManager",
      "tokio::sync::RwLock",
      "super::*",
      "super::circuit_wrapper::StreamCircuitBreaker"
    ],
    "crates/infrastructure/src/stream_processing/circuit_wrapper.rs": [
      "std::sync::Arc",
      "std::time::Duration",
      "crate::circuit_breaker::{ComponentBreaker, CircuitConfig, GlobalTripConditions, SystemClock, Outcome}"
    ],
    "crates/infrastructure/src/stream_processing/consumer.rs": [
      "std::sync::Arc",
      "anyhow::Result",
      "async_trait::async_trait",
      "redis::AsyncCommands",
      "redis::aio::ConnectionManager",
      "tokio::sync::RwLock",
      "super::*",
      "std::collections::HashMap",
      "super::circuit_wrapper::StreamCircuitBreaker",
      "redis::streams::{StreamId, StreamKey, StreamReadOptions, StreamReadReply}"
    ],
    "crates/infrastructure/src/stream_processing/router.rs": [
      "std::sync::Arc",
      "anyhow::Result",
      "async_trait::async_trait",
      "tokio::sync::RwLock",
      "super::*",
      "std::collections::HashMap"
    ],
    "crates/infrastructure/src/stream_processing/processor.rs": [
      "std::sync::Arc",
      "anyhow::Result",
      "async_trait::async_trait",
      "tokio::sync::RwLock",
      "super::*",
      "super::circuit_wrapper::StreamCircuitBreaker"
    ],
    "crates/infrastructure/src/stream_processing/mod.rs": [
      "std::sync::Arc",
      "anyhow::Result",
      "std::time::{Duration, SystemTime, UNIX_EPOCH}",
      "tracing::{debug, error, info, warn}",
      "redis::{AsyncCommands, RedisResult}",
      "serde::{Deserialize, Serialize}",
      "redis::aio::ConnectionManager",
      "tokio::sync::{broadcast, mpsc, RwLock}",
      "std::collections::HashMap",
      "circuit_wrapper::StreamCircuitBreaker",
      "redis::streams::{StreamId, StreamKey, StreamReadOptions, StreamReadReply}",
      "tokio::task::JoinHandle"
    ],
    "crates/infrastructure/src/memory/rings.rs": [
      "std::sync::Arc",
      "std::sync::atomic::{AtomicUsize, Ordering}",
      "super::metrics::metrics",
      "crossbeam::queue::{ArrayQueue, SegQueue}"
    ],
    "crates/infrastructure/src/memory/metrics.rs": [
      "std::sync::Arc",
      "lazy_static::lazy_static",
      "std::sync::atomic::{AtomicU64, Ordering}",
      "crossbeam_utils::CachePadded",
      "std::time::Duration"
    ],
    "crates/infrastructure/src/memory/pools_upgraded.rs": [
      "std::sync::Arc",
      "parking_lot::RwLock",
      "thread_local::ThreadLocal",
      "std::sync::atomic::{AtomicU64, Ordering}",
      "std::time::Instant",
      "crossbeam::queue::ArrayQueue",
      "std::cell::RefCell"
    ],
    "crates/infrastructure/src/memory/safe_pools.rs": [
      "std::sync::Arc",
      "crossbeam::epoch::{self, Atomic, Shared}",
      "std::time::{Duration, Instant}",
      "std::thread::{self, ThreadId}",
      "parking_lot::{RwLock, Mutex}",
      "thread_local::ThreadLocal",
      "std::sync::atomic::{AtomicUsize, AtomicBool, AtomicU64, Ordering}",
      "std::collections::HashMap",
      "crossbeam::queue::ArrayQueue",
      "std::cell::RefCell"
    ],
    "crates/infrastructure/src/memory/pools.rs": [
      "std::sync::Arc",
      "std::sync::atomic::{AtomicUsize, Ordering}",
      "thread_local::ThreadLocal",
      "super::metrics::{metrics, PoolType}",
      "crossbeam::queue::ArrayQueue",
      "std::cell::RefCell"
    ],
    "crates/infrastructure/src/zero_copy/mod.rs": [
      "std::sync::Arc",
      "dashmap::DashMap",
      "std::sync::atomic::{AtomicUsize, AtomicU64, Ordering}",
      "std::alloc::{alloc, dealloc, Layout}",
      "crossbeam_queue::ArrayQueue",
      "std::mem::{self}"
    ],
    "crates/trading_engine/src/fast_order_processor.rs": [
      "std::sync::Arc",
      "anyhow::Result",
      "rust_decimal::Decimal",
      "std::time::Instant",
      "std::sync::atomic::{AtomicU64, AtomicBool, Ordering}",
      "tracing::{info, warn, debug}",
      "infrastructure::{\n    acquire_order, acquire_signal, acquire_market_data, acquire_risk_check,\n    acquire_execution, Order, Signal,\n    OrderSide, OrderType, OrderStatus, SignalType, POOL_REGISTRY,\n}"
    ],
    "crates/trading_engine/src/fees_slippage.rs": [
      "std::collections::HashMap",
      "rust_decimal::Decimal"
    ],
    "crates/trading_engine/src/simple_integration_test.rs": [
      "std::sync::Arc",
      "anyhow::Result",
      "rust_decimal::Decimal",
      "risk::{\n    kelly_sizing::{KellySizer, KellyConfig},\n    clamps::{RiskClampSystem, ClampConfig},\n}",
      "crate::transactions::{\n    Transaction, TransactionType, TransactionManager,\n    OrderSide, TransactionStatus,\n}",
      "uuid::Uuid"
    ],
    "crates/trading_engine/src/fee_optimization.rs": [
      "std::sync::Arc",
      "rust_decimal_macros::dec",
      "chrono::{DateTime, Utc}",
      "rust_decimal::Decimal",
      "parking_lot::RwLock",
      "rust_decimal::prelude::ToPrimitive",
      "std::collections::HashMap",
      "serde::{Serialize, Deserialize}"
    ],
    "crates/trading_engine/src/liquidation_engine.rs": [
      "std::sync::Arc",
      "rust_decimal_macros::dec",
      "rust_decimal::Decimal",
      "parking_lot::RwLock",
      "tracing::{error, warn, info}",
      "tokio::sync::{mpsc, broadcast}",
      "std::collections::{HashMap, VecDeque}",
      "chrono::{DateTime, Utc, Duration}",
      "std::sync::atomic::{AtomicBool, AtomicU64, Ordering}",
      "serde::{Serialize, Deserialize}"
    ],
    "crates/trading_engine/src/orders/oco.rs": [
      "std::sync::Arc",
      "parking_lot::RwLock",
      "async_trait::async_trait",
      "std::collections::{HashMap, HashSet}",
      "uuid::Uuid",
      "chrono::{DateTime, Utc, Duration}",
      "serde::{Serialize, Deserialize}"
    ],
    "crates/trading_engine/src/transactions/saga.rs": [
      "std::sync::Arc",
      "tokio::sync::{mpsc, oneshot}",
      "anyhow::{Result, Context}",
      "std::time::{Duration, SystemTime, UNIX_EPOCH}",
      "parking_lot::RwLock",
      "async_trait::async_trait",
      "std::sync::atomic::{AtomicU64, Ordering}",
      "uuid::Uuid",
      "std::collections::HashMap",
      "serde::{Serialize, Deserialize}"
    ],
    "crates/trading_engine/src/transactions/compensator.rs": [
      "std::sync::Arc",
      "anyhow::{Result, Context}",
      "rust_decimal::Decimal",
      "async_trait::async_trait",
      "parking_lot::RwLock",
      "super::{Transaction, TransactionType, OrderSide, FeeType}",
      "tokio::sync::mpsc",
      "uuid::Uuid",
      "std::collections::HashMap",
      "serde::{Serialize, Deserialize}"
    ],
    "crates/trading_engine/src/transactions/mod.rs": [
      "std::sync::Arc",
      "anyhow::{Result, Context}",
      "std::time::{Duration, SystemTime, UNIX_EPOCH}",
      "rust_decimal::Decimal",
      "parking_lot::RwLock",
      "tokio::sync::mpsc",
      "std::collections::{HashMap, VecDeque}",
      "uuid::Uuid",
      "serde::{Serialize, Deserialize}"
    ],
    "crates/trading_engine/src/transactions/retry.rs": [
      "std::sync::Arc",
      "rand::Rng",
      "anyhow::{Result, Context}",
      "std::time::{Duration, SystemTime, UNIX_EPOCH}",
      "tokio::time::sleep",
      "parking_lot::RwLock",
      "std::sync::atomic::{AtomicU32, AtomicU64, AtomicBool, Ordering}",
      "std::collections::{HashMap, VecDeque}",
      "uuid::Uuid",
      "serde::{Serialize, Deserialize}"
    ],
    "crates/trading_engine/src/transactions/wal.rs": [
      "std::sync::Arc",
      "anyhow::{Result, Context}",
      "memmap2::{MmapMut, MmapOptions}",
      "crc32fast::Hasher",
      "parking_lot::{RwLock, Mutex}",
      "std::fs::{File, OpenOptions}",
      "crossbeam_queue::ArrayQueue",
      "tokio::sync::mpsc",
      "std::io::{self, Write, Read, Seek, SeekFrom, BufReader, BufWriter}",
      "std::sync::atomic::{AtomicU64, AtomicBool, Ordering}",
      "std::time::{SystemTime, UNIX_EPOCH}",
      "std::path::{Path, PathBuf}",
      "serde::{Serialize, Deserialize}"
    ],
    "crates/trading_engine/src/transactions/tests.rs": [
      "tempfile::TempDir",
      "std::sync::Arc",
      "rust_decimal::Decimal",
      "std::sync::atomic::{AtomicU32, AtomicBool, Ordering}",
      "async_trait::async_trait",
      "tokio::time::{sleep, Duration}",
      "super::*",
      "uuid::Uuid"
    ],
    "crates/trading_engine/src/costs/comprehensive_costs.rs": [
      "anyhow::{Result, Context}",
      "rust_decimal_macros::dec",
      "rust_decimal::Decimal",
      "std::collections::HashMap",
      "serde::{Serialize, Deserialize}"
    ],
    "crates/feature_store/src/market_microstructure.rs": [
      "std::sync::Arc",
      "statrs::distribution::{Normal, ContinuousCDF, Poisson, Discrete}",
      "anyhow::{Result, Context}",
      "parking_lot::RwLock",
      "std::collections::VecDeque",
      "nalgebra::{DVector, DMatrix}",
      "serde::{Deserialize, Serialize}",
      "tracing::{debug, instrument}",
      "chrono::{DateTime, Utc, Duration}",
      "crate::{FeatureUpdate, FeatureValue}"
    ],
    "crates/feature_store/src/game_theory.rs": [
      "std::sync::Arc",
      "anyhow::{Result, Context}",
      "parking_lot::RwLock",
      "statrs::distribution::{Normal, ContinuousCDF}",
      "serde::{Deserialize, Serialize}",
      "tracing::{info, debug, warn, instrument}",
      "std::collections::{HashMap, VecDeque}",
      "chrono::{DateTime, Utc, Duration}",
      "nalgebra::{DMatrix, DVector}",
      "crate::{FeatureUpdate, FeatureValue}"
    ],
    "crates/feature_store/src/online_store.rs": [
      "std::sync::Arc",
      "parking_lot::Mutex",
      "anyhow::{Result, Context}",
      "redis::{aio::MultiplexedConnection, AsyncCommands, Client, cluster::ClusterClient}",
      "tokio::sync::{RwLock, Semaphore}",
      "std::time::{Duration, Instant}",
      "async_trait::async_trait",
      "dashmap::DashMap",
      "lru::LruCache",
      "serde::{Deserialize, Serialize}",
      "arrow::record_batch::RecordBatch",
      "tracing::{info, warn, debug, instrument}",
      "arrow::array::{Float64Array, ArrayRef}"
    ],
    "crates/feature_store/src/point_in_time.rs": [
      "std::sync::Arc",
      "std::collections::{HashMap, BTreeMap}",
      "anyhow::{Result, Context}",
      "crate::online_store::FeatureVector",
      "serde::{Deserialize, Serialize}",
      "tracing::{info, debug, warn, instrument}",
      "crate::offline_store::{OfflineStore, FeatureWrite}",
      "chrono::{DateTime, Utc, Duration}"
    ],
    "crates/feature_store/src/monitoring.rs": [
      "std::sync::Arc",
      "anyhow::{Result, Context}",
      "chrono::{DateTime, Utc}",
      "std::time::{Duration, Instant}",
      "crate::{OnlineStore, OfflineStore}",
      "prometheus::{Counter, Histogram, Gauge, HistogramOpts, register_histogram, register_counter, register_gauge}",
      "serde::{Deserialize, Serialize}",
      "tracing::{info, warn, debug, instrument}",
      "tokio::sync::RwLock"
    ],
    "crates/feature_store/src/feature_registry.rs": [
      "std::sync::Arc",
      "deadpool_postgres::{Config, Pool}",
      "anyhow::{Result, Context}",
      "chrono::{DateTime, Utc}",
      "tokio_postgres::NoTls",
      "async_trait::async_trait",
      "std::collections::{HashMap, HashSet}",
      "serde::{Deserialize, Serialize}",
      "tracing::{info, debug, warn, instrument}",
      "uuid::Uuid"
    ],
    "crates/feature_store/src/lib.rs": [
      "std::sync::Arc",
      "anyhow::{Result, Context}",
      "chrono::{DateTime, Utc}",
      "async_trait::async_trait",
      "serde::{Deserialize, Serialize}",
      "tracing::{info, warn, error, debug}"
    ],
    "crates/feature_store/src/drift_detection.rs": [
      "std::sync::Arc",
      "anyhow::{Result, Context}",
      "crate::offline_store::OfflineStore",
      "ndarray::{Array1, Array2}",
      "async_trait::async_trait",
      "statrs::distribution::{Normal, ContinuousCDF}",
      "serde::{Deserialize, Serialize}",
      "tokio::sync::RwLock",
      "tracing::{info, warn, error, debug, instrument}",
      "chrono::{DateTime, Utc, Duration}",
      "crate::feature_registry::FeatureRegistry",
      "std::collections::HashMap",
      "statrs::statistics::Statistics"
    ],
    "crates/feature_store/src/feature_pipeline.rs": [
      "std::sync::Arc",
      "crossbeam_channel::{bounded, Sender, Receiver}",
      "anyhow::{Result, Context}",
      "chrono::{DateTime, Utc}",
      "crate::{OnlineStore, OfflineStore, FeatureRegistry, FeatureUpdate, FeatureValue}",
      "async_trait::async_trait",
      "serde::{Deserialize, Serialize}",
      "tracing::{info, warn, debug, instrument}",
      "tokio::sync::{RwLock, mpsc}",
      "std::collections::HashMap"
    ],
    "crates/feature_store/src/offline_store.rs": [
      "std::sync::Arc",
      "anyhow::{Result, Context}",
      "bytes::BytesMut",
      "tokio_postgres::NoTls",
      "async_trait::async_trait",
      "crate::online_store::FeatureVector",
      "serde::{Deserialize, Serialize}",
      "arrow::array::{Float64Array, TimestampMicrosecondArray, StringArray}",
      "arrow::record_batch::RecordBatch",
      "deadpool_postgres::{Config, Pool, ManagerConfig, RecyclingMethod}",
      "parquet::arrow::AsyncArrowWriter",
      "tokio_postgres::types::{ToSql, Type}",
      "chrono::{DateTime, Utc, Duration}",
      "tracing::{info, debug, instrument}"
    ],
    "crates/feature_store/src/ab_testing.rs": [
      "std::sync::Arc",
      "anyhow::{Result, Context}",
      "async_trait::async_trait",
      "rand::{Rng, SeedableRng}",
      "statrs::distribution::{Normal, ContinuousCDF, StudentsT}",
      "serde::{Deserialize, Serialize}",
      "tracing::{info, warn, debug, instrument}",
      "tokio::sync::RwLock",
      "uuid::Uuid",
      "rand_chacha::ChaCha8Rng",
      "chrono::{DateTime, Utc, Duration}",
      "crate::feature_registry::FeatureRegistry",
      "std::collections::HashMap",
      "statrs::statistics::Statistics"
    ],
    "crates/data_ingestion/src/sinks/parquet_writer.rs": [
      "arrow::datatypes::{DataType, Field, Schema, TimeUnit}",
      "std::sync::atomic::{AtomicU64, AtomicUsize, AtomicBool, Ordering}",
      "dashmap::DashMap",
      "parquet::arrow::{ArrowWriter, AsyncArrowWriter}",
      "tokio::io::AsyncWriteExt",
      "std::collections::{HashMap, VecDeque}",
      "parquet::basic::{Compression, Encoding, ZstdLevel}",
      "arrow::record_batch::RecordBatch",
      "bytes::Bytes",
      "parquet::file::properties::{\n    WriterProperties, WriterPropertiesBuilder, EnabledStatistics,\n}",
      "chrono::{DateTime, Utc, Datelike, Timelike}",
      "std::path::{Path, PathBuf}",
      "tokio::sync::{Mutex, RwLock}",
      "aws_sdk_s3::primitives::ByteStream",
      "arrow::array::{\n    ArrayRef, Float64Array, Int64Array, StringArray, TimestampNanosecondArray,\n    BooleanArray, StructArray, UInt64Array,\n}",
      "parquet::schema::types::ColumnPath",
      "tokio::time::{interval, Duration, Instant}",
      "std::sync::Arc",
      "anyhow::{Result, Context}",
      "crate::producers::{MarketEvent, TradeSide}",
      "aws_sdk_s3::Client as S3Client",
      "tokio::fs::{self, File, OpenOptions}",
      "tracing::{info, warn, error, debug}"
    ],
    "crates/data_ingestion/src/sinks/clickhouse_sink.rs": [
      "std::sync::Arc",
      "chrono::{DateTime, Utc}",
      "anyhow::{Result, Context}",
      "tokio::time::{interval, MissedTickBehavior}",
      "std::sync::atomic::{AtomicU64, AtomicBool, Ordering}",
      "rust_decimal::Decimal",
      "ahash::AHashMap",
      "crate::monitoring::ClickHouseMetrics",
      "clickhouse::{Client, Row, Compression}",
      "parking_lot::RwLock as SyncRwLock",
      "crate::producers::{MarketEvent, TradeSide}",
      "bytes::Bytes",
      "tracing::{info, warn, error, debug, instrument}",
      "std::collections::{HashMap, VecDeque}",
      "tokio::sync::{Mutex, RwLock, Semaphore, mpsc}",
      "std::time::{Duration, Instant, SystemTime, UNIX_EPOCH}",
      "clickhouse::sql::Identifier",
      "serde::{Serialize, Deserialize}"
    ],
    "crates/data_ingestion/src/aggregators/timescale_aggregator.rs": [
      "std::sync::Arc",
      "anyhow::{Result, Context}",
      "std::sync::atomic::{AtomicU64, AtomicBool, AtomicUsize, Ordering}",
      "sqlx::postgres::{PgConnectOptions, PgPoolOptions}",
      "sqlx::{PgPool, PgConnection, Pool, Postgres, Row}",
      "chrono::{DateTime, Utc, Datelike, Timelike, NaiveDateTime}",
      "rust_decimal::Decimal",
      "rust_decimal::prelude::*",
      "dashmap::DashMap",
      "tracing::{info, warn, error, debug, trace}",
      "crate::producers::{MarketEvent, TradeSide}",
      "futures::stream::{StreamExt, TryStreamExt}",
      "std::collections::{HashMap, BTreeMap, VecDeque}",
      "tokio::sync::{Mutex, RwLock, Semaphore}",
      "tokio::time::{interval, Duration, Instant}"
    ],
    "crates/data_ingestion/src/timescale/hypertable.rs": [
      "std::sync::Arc",
      "anyhow::{Result, Context}",
      "deadpool_postgres::Pool",
      "chrono::Duration",
      "serde::{Deserialize, Serialize}",
      "tracing::{info, warn, debug}"
    ],
    "crates/data_ingestion/src/timescale/monitoring.rs": [
      "std::sync::Arc",
      "anyhow::Result",
      "deadpool_postgres::Pool",
      "std::time::{Duration, Instant}",
      "std::collections::VecDeque",
      "serde::{Deserialize, Serialize}",
      "tokio::sync::RwLock",
      "tracing::{info, warn, debug}"
    ],
    "crates/data_ingestion/src/timescale/aggregates.rs": [
      "std::sync::Arc",
      "anyhow::{Result, Context}",
      "chrono::{DateTime, Utc}",
      "deadpool_postgres::Pool",
      "serde::{Deserialize, Serialize}",
      "tracing::{info, warn, debug, instrument}"
    ],
    "crates/data_ingestion/src/timescale/compression.rs": [
      "std::sync::Arc",
      "anyhow::Result",
      "deadpool_postgres::Pool",
      "chrono::Duration",
      "tracing::{info, debug, warn}",
      "serde::{Deserialize, Serialize}"
    ],
    "crates/data_ingestion/src/timescale/mod.rs": [
      "std::sync::Arc",
      "anyhow::{Result, Context}",
      "chrono::{DateTime, Utc}",
      "tokio::sync::{RwLock, Semaphore}",
      "std::time::{Duration, Instant}",
      "async_trait::async_trait",
      "rust_decimal::Decimal",
      "crate::producers::MarketEvent",
      "serde::{Deserialize, Serialize}",
      "futures::stream::{StreamExt, TryStreamExt}",
      "bytes::{Bytes, BytesMut}",
      "tokio::time::{interval, sleep}",
      "tracing::{info, warn, error, debug, instrument}",
      "types::{Price, Quantity, Symbol, Exchange}",
      "tokio_postgres::{NoTls, types::ToSql}",
      "deadpool_postgres::{Config, Manager, ManagerConfig, Pool, RecyclingMethod}"
    ],
    "crates/data_ingestion/src/timescale/replication.rs": [
      "std::sync::Arc",
      "anyhow::{Result, Context}",
      "chrono::{DateTime, Utc}",
      "deadpool_postgres::Pool",
      "serde::{Deserialize, Serialize}",
      "tracing::{info, warn, debug}"
    ],
    "crates/data_ingestion/src/event_driven/time_window.rs": [
      "serde::{Deserialize, Serialize}"
    ],
    "crates/data_ingestion/src/event_driven/adaptive_sampler.rs": [
      "std::sync::Arc",
      "anyhow::{Result, Context}",
      "rust_decimal::Decimal",
      "parking_lot::RwLock",
      "std::collections::VecDeque",
      "rust_decimal::prelude::*",
      "types::{Price, Quantity, Symbol}",
      "serde::{Deserialize, Serialize}",
      "tracing::{debug, info, warn, instrument}",
      "chrono::{DateTime, Utc, Duration}",
      "statrs::statistics::Statistics"
    ],
    "crates/data_ingestion/src/event_driven/event_dispatcher.rs": [
      "serde::{Deserialize, Serialize}"
    ],
    "crates/data_ingestion/src/event_driven/processor.rs": [
      "std::sync::Arc",
      "chrono::{DateTime, Utc}",
      "anyhow::{Result, Context}",
      "dashmap::DashMap",
      "std::time::{Duration, Instant}",
      "rust_decimal::Decimal",
      "parking_lot::{RwLock, Mutex}",
      "std::collections::VecDeque",
      "types::{Price, Quantity, Symbol}",
      "serde::{Deserialize, Serialize}",
      "tokio::time::{interval, sleep}",
      "tokio::sync::mpsc",
      "std::sync::atomic::{AtomicU64, AtomicBool, Ordering}",
      "crossbeam_channel::{bounded, unbounded, Sender, Receiver, TryRecvError}",
      "tracing::{debug, info, warn, error, instrument}"
    ],
    "crates/data_ingestion/src/event_driven/volatility_tracker.rs": [
      "serde::{Deserialize, Serialize}"
    ],
    "crates/data_ingestion/src/event_driven/bucketed_aggregator.rs": [
      "std::sync::Arc",
      "anyhow::{Result, Context}",
      "crate::monitoring::{MetricsCollector, register_histogram}",
      "rust_decimal::Decimal",
      "parking_lot::RwLock",
      "rust_decimal::prelude::*",
      "std::collections::{BTreeMap, VecDeque}",
      "types::{Price, Quantity, Symbol}",
      "serde::{Deserialize, Serialize}",
      "tracing::{debug, info, warn, instrument}",
      "std::sync::atomic::{AtomicU64, Ordering}",
      "chrono::{DateTime, Utc, Duration}"
    ],
    "crates/data_ingestion/src/producers/redpanda_producer.rs": [
      "std::sync::Arc",
      "tokio::sync::{Mutex, RwLock, Semaphore}",
      "anyhow::{Result, Context}",
      "rdkafka::config::ClientConfig",
      "tokio::time::{interval, MissedTickBehavior}",
      "ahash::AHashMap",
      "std::collections::VecDeque",
      "rdkafka::util::Timeout",
      "parking_lot::RwLock as SyncRwLock",
      "rdkafka::producer::{FutureProducer, FutureRecord, Producer}",
      "rkyv::{Archive, Deserialize, Serialize, AlignedVec}",
      "crate::schema::SchemaRegistry",
      "bytes::{Bytes, BytesMut}",
      "tracing::{info, warn, error, debug, instrument}",
      "std::sync::atomic::{AtomicU64, AtomicBool, Ordering}",
      "std::time::{Duration, Instant, SystemTime, UNIX_EPOCH}",
      "rdkafka::message::{Header, OwnedHeaders}",
      "crate::monitoring::ProducerMetrics"
    ],
    "crates/data_ingestion/src/monitoring/mod.rs": [
      "std::sync::Arc",
      "parking_lot::RwLock",
      "std::sync::atomic::{AtomicU64, Ordering}",
      "std::time::Duration"
    ],
    "crates/data_ingestion/src/schema/mod.rs": [
      "serde_json::{json, Value}",
      "std::sync::Arc",
      "schema_registry_converter::{\n    async_impl::schema_registry::{SrSettings, get_schema_by_id},\n    schema_registry_common::{SubjectNameStrategy, RegisteredSchema},\n}",
      "dashmap::DashMap",
      "lru::LruCache",
      "tracing::{info, warn, error, debug, trace}",
      "serde::{Deserialize, Serialize}",
      "reqwest::{Client, StatusCode}",
      "bytes::Bytes",
      "std::collections::{HashMap, BTreeMap, VecDeque}",
      "tokio::sync::{RwLock, Mutex, Semaphore}",
      "std::sync::atomic::{AtomicU64, AtomicBool, Ordering}",
      "std::num::NonZeroUsize",
      "tokio::time::{interval, Duration, Instant}",
      "apache_avro::{Schema as AvroSchema, types::Value as AvroValue}",
      "anyhow::{Result, Context, anyhow}"
    ],
    "crates/data_ingestion/src/data_quality/quality_scorer.rs": [
      "anyhow::Result",
      "chrono::{DateTime, Utc}",
      "serde::{Deserialize, Serialize}"
    ],
    "crates/data_ingestion/src/data_quality/monitoring.rs": [
      "std::sync::Arc",
      "anyhow::Result",
      "chrono::{DateTime, Utc}",
      "tracing::{info, warn, error}",
      "async_trait::async_trait",
      "super::{ValidationResult, IssueCategory}",
      "std::collections::VecDeque",
      "tokio::time::interval",
      "serde::{Deserialize, Serialize}",
      "tokio::sync::{RwLock, mpsc}"
    ],
    "crates/data_ingestion/src/data_quality/kalman_filter.rs": [
      "tracing::{debug, warn, info}",
      "nalgebra::{DMatrix, DVector}",
      "super::DataBatch",
      "serde::{Deserialize, Serialize}",
      "std::collections::{VecDeque, HashMap}",
      "chrono::{DateTime, Utc, Duration}",
      "anyhow::{Result, Context, anyhow}"
    ],
    "crates/data_ingestion/src/data_quality/change_detection.rs": [
      "chrono::{DateTime, Utc}",
      "super::DataBatch",
      "std::collections::VecDeque",
      "serde::{Deserialize, Serialize}",
      "anyhow::{Result, anyhow}"
    ],
    "crates/data_ingestion/src/data_quality/reconciliation.rs": [
      "std::sync::Arc",
      "statistical::{median, standard_deviation}",
      "async_trait::async_trait",
      "super::DataBatch",
      "std::collections::{HashMap, HashSet}",
      "serde::{Deserialize, Serialize}",
      "tokio::sync::RwLock",
      "chrono::{DateTime, Utc, Duration}",
      "anyhow::{Result, Context, anyhow}",
      "tracing::{info, warn, error, debug}"
    ],
    "crates/data_ingestion/src/data_quality/benford.rs": [
      "anyhow::{Result, Context}",
      "chrono::{DateTime, Utc}",
      "super::DataBatch",
      "serde::{Deserialize, Serialize}",
      "tracing::{debug, warn}",
      "std::collections::HashMap"
    ],
    "crates/data_ingestion/src/data_quality/mod.rs": [
      "std::sync::Arc",
      "anyhow::{Result, Context}",
      "async_trait::async_trait",
      "serde::{Deserialize, Serialize}",
      "std::collections::{HashMap, VecDeque, BTreeMap}",
      "chrono::{DateTime, Utc, Duration}",
      "tracing::{info, warn, error, debug}",
      "tokio::sync::{RwLock, Mutex}"
    ],
    "crates/data_ingestion/src/data_quality/backfill.rs": [
      "std::cmp::{Ordering, Reverse}",
      "std::sync::Arc",
      "async_trait::async_trait",
      "serde::{Deserialize, Serialize}",
      "tokio::sync::{RwLock, Mutex, mpsc}",
      "std::collections::{BinaryHeap, HashMap, HashSet}",
      "tokio::time::{sleep, timeout}",
      "chrono::{DateTime, Utc, Duration}",
      "anyhow::{Result, Context, anyhow}",
      "tracing::{info, warn, error, debug}"
    ],
    "crates/data_ingestion/src/replay/slippage_model.rs": [
      "std::sync::Arc",
      "anyhow::{Result, Context}",
      "rust_decimal::Decimal",
      "parking_lot::RwLock",
      "rust_decimal::prelude::*",
      "statrs::distribution::{Normal, ContinuousCDF}",
      "serde::{Deserialize, Serialize}",
      "chrono::{DateTime, Utc, Timelike}",
      "types::{Price, Quantity, Symbol}",
      "crate::replay::lob_simulator::OrderBook",
      "statrs::statistics::Statistics"
    ],
    "crates/data_ingestion/src/replay/playback_engine.rs": [
      "std::sync::Arc",
      "anyhow::{Result, Context}",
      "rust_decimal::Decimal",
      "parking_lot::RwLock",
      "tokio::time::{sleep, Instant}",
      "async_trait::async_trait",
      "std::collections::VecDeque",
      "serde::{Deserialize, Serialize}",
      "tracing::{info, debug, warn, instrument}",
      "crate::replay::{\n    lob_simulator::{LOBSimulator, OrderBookUpdate, SimulatorConfig},\n    microburst_detector::{MicroburstDetector, DetectorConfig, MicroburstEvent},\n    slippage_model::{SlippageModel, SlippageConfig, ExecutionCost, TradeSide},\n    fee_calculator::{FeeCalculator, OrderType},\n    historical_loader::{HistoricalDataLoader, DataSource, TickData, TickType},\n    market_impact::{MarketImpactCalculator, ImpactParameters},\n}",
      "tokio::sync::mpsc",
      "types::{Price, Quantity, Symbol, Exchange}",
      "chrono::{DateTime, Utc, Duration}"
    ],
    "crates/data_ingestion/src/replay/fee_calculator.rs": [
      "std::sync::Arc",
      "anyhow::{Result, Context}",
      "rust_decimal::Decimal",
      "parking_lot::RwLock",
      "rust_decimal::prelude::*",
      "std::collections::VecDeque",
      "serde::{Deserialize, Serialize}",
      "types::{Price, Quantity, Symbol, Exchange}",
      "chrono::{DateTime, Utc, Duration}",
      "std::collections::HashMap"
    ],
    "crates/data_ingestion/src/replay/lob_simulator.rs": [
      "std::sync::Arc",
      "anyhow::{Result, Context}",
      "dashmap::DashMap",
      "rust_decimal::Decimal",
      "ahash::AHashMap",
      "parking_lot::{RwLock, Mutex}",
      "rust_decimal::prelude::*",
      "tracing::{debug, warn, error, instrument}",
      "serde::{Deserialize, Serialize}",
      "std::collections::{BTreeMap, HashMap, VecDeque}",
      "types::{Price, Quantity, Symbol, Exchange}",
      "chrono::{DateTime, Utc, Duration}"
    ],
    "crates/data_ingestion/src/replay/microburst_detector.rs": [
      "std::sync::Arc",
      "anyhow::{Result, Context}",
      "rust_decimal::Decimal",
      "parking_lot::RwLock",
      "std::collections::VecDeque",
      "rust_decimal::prelude::*",
      "statrs::distribution::{Normal, ContinuousCDF}",
      "serde::{Deserialize, Serialize}",
      "types::{Price, Quantity, Symbol}",
      "tracing::{debug, warn, info, instrument}",
      "chrono::{DateTime, Utc, Duration}",
      "statrs::statistics::Statistics"
    ],
    "crates/data_ingestion/src/replay/market_impact.rs": [
      "std::sync::Arc",
      "anyhow::Result",
      "chrono::{DateTime, Utc}",
      "rust_decimal::Decimal",
      "parking_lot::RwLock",
      "rust_decimal::prelude::*",
      "statrs::distribution::{Normal, ContinuousCDF}",
      "serde::{Deserialize, Serialize}",
      "crate::replay::lob_simulator::OrderBook",
      "types::{Price, Quantity}"
    ],
    "crates/data_ingestion/src/replay/historical_loader.rs": [
      "std::sync::Arc",
      "csv_async::{AsyncReaderBuilder, AsyncDeserializer}",
      "parquet::record::{Row, RowAccessor}",
      "chrono::{DateTime, Utc, NaiveDateTime}",
      "rust_decimal::Decimal",
      "parking_lot::RwLock",
      "async_trait::async_trait",
      "parquet::file::reader::{FileReader, SerializedFileReader}",
      "rust_decimal::prelude::*",
      "serde::{Deserialize, Serialize}",
      "anyhow::{Result, Context as AnyhowContext}",
      "crate::replay::lob_simulator::{OrderBookUpdate, UpdateType, Side}",
      "tokio::fs::File",
      "types::{Price, Quantity, Symbol, Exchange}",
      "std::path::{Path, PathBuf}",
      "tokio::io::{AsyncBufReadExt, BufReader}"
    ],
    "crates/data_ingestion/src/consumers/redpanda_consumer.rs": [
      "dashmap::DashMap",
      "std::time::{Duration, Instant}",
      "rdkafka::consumer::{Consumer, StreamConsumer, CommitMode}",
      "crate::monitoring::ConsumerMetrics",
      "rkyv::{Archived, Deserialize}",
      "std::sync::atomic::{AtomicU64, AtomicBool, AtomicI64, Ordering}",
      "rdkafka::topic_partition_list::Offset",
      "tokio::time::{interval, MissedTickBehavior, sleep}",
      "bytes::Bytes",
      "crate::sinks::{ClickHouseSink, ParquetWriter}",
      "tracing::{info, warn, error, debug, instrument}",
      "rdkafka::message::{Message, BorrowedMessage}",
      "std::sync::Arc",
      "anyhow::{Result, Context}",
      "rdkafka::config::ClientConfig",
      "tokio::sync::{mpsc, RwLock, Semaphore}",
      "tokio_stream::StreamExt",
      "std::collections::VecDeque",
      "crate::producers::MarketEvent",
      "rdkafka::{TopicPartitionList, Timestamp}"
    ],
    "crates/data_ingestion/tests/event_driven_performance.rs": [
      "std::time::{Duration, Instant}",
      "data_ingestion::producers::{MarketEvent, TradeSide}",
      "std::sync::{Arc, atomic::{AtomicU64, AtomicBool, Ordering}}",
      "std::thread",
      "data_ingestion::event_driven::{\n    EventProcessor, ProcessorConfig, EventPriority,\n    AdaptiveSampler, SamplerConfig, VolatilityRegime,\n    BucketedAggregator, BucketConfig, AggregateWindow,\n}",
      "statrs::statistics::{Data, OrderStatistics}",
      "crossbeam_channel::{unbounded, bounded}",
      "rand::prelude::*",
      "types::{Price, Quantity}"
    ],
    "crates/data_ingestion/tests/integration_test.rs": [
      "rand::{Rng, SeedableRng}",
      "rand::distributions::{Distribution, Uniform}",
      "tokio::time::{Duration, Instant, interval, sleep}",
      "serde::{Serialize, Deserialize}",
      "criterion::{black_box, Criterion}",
      "chrono::{DateTime, Utc}",
      "std::sync::atomic::{AtomicU64, AtomicBool, AtomicUsize, Ordering}",
      "tracing_subscriber::EnvFilter",
      "rand_distr::{Normal, Pareto, Exponential}",
      "tokio::sync::{Mutex, Semaphore, RwLock, mpsc}",
      "tracing::{info, warn, error, debug, trace}",
      "futures::stream::{StreamExt, FuturesUnordered}",
      "statrs::statistics::{Statistics, OrderStatistics, Data}",
      "std::sync::Arc",
      "futures::future::join_all",
      "hdrhistogram::Histogram",
      "data_ingestion::{\n    RedpandaProducer, ProducerConfig, MarketEvent, TradeSide, CompressionType, AckLevel,\n    RedpandaConsumer, ConsumerConfig, BackpressureConfig,\n    ClickHouseSink, ClickHouseConfig,\n    ParquetWriter, ParquetConfig, PartitionStrategy,\n    TimescaleAggregator, TimescaleConfig, CandleInterval,\n    SchemaRegistry, SchemaRegistryConfig, SchemaType, CompatibilityLevel,\n}",
      "std::collections::{HashMap, VecDeque, BTreeMap}",
      "anyhow::{Result, Context, anyhow}"
    ],
    "benches/risk_engine_bench.rs": [
      "std::sync::Arc",
      "rust_decimal_macros::dec",
      "risk_engine::{\n    checks::{RiskEngine, RiskConfig, PositionLimit},\n    correlation::CorrelationAnalyzer,\n    emergency::{KillSwitch, EmergencyStop},\n}",
      "order_management::order::{Order, OrderSide, OrderType, OrderState}",
      "criterion::{black_box, criterion_group, criterion_main, Criterion, BenchmarkId, Throughput}",
      "std::time::Duration"
    ],
    "benches/contention_bench.rs": [
      "std::sync::Arc",
      "infrastructure::circuit_breaker::{\n    GlobalCircuitBreaker, CircuitConfig, SystemClock, CircuitState\n}",
      "std::time::{Duration, Instant}",
      "std::thread",
      "criterion::{black_box, criterion_group, criterion_main, Criterion, BenchmarkId, Throughput}",
      "std::sync::atomic::{AtomicU64, Ordering}"
    ],
    "benches/performance_benchmarks.rs": [
      "rust_decimal_macros::dec",
      "infrastructure::*",
      "order_management::*",
      "bot4_main::*",
      "ml::*",
      "trading_engine::*",
      "criterion::{black_box, criterion_group, criterion_main, Criterion, BenchmarkId, Throughput}",
      "risk_engine::*",
      "std::time::Duration"
    ],
    "benches/network_jitter_bench.rs": [
      "std::sync::Arc",
      "std::time::{Duration, Instant}",
      "rand_distr::{Normal, Distribution}",
      "criterion::{black_box, criterion_group, criterion_main, Criterion, BenchmarkId}",
      "rand::{Rng, thread_rng}"
    ],
    "benches/order_management_bench.rs": [
      "std::sync::Arc",
      "rust_decimal_macros::dec",
      "criterion::{black_box, criterion_group, criterion_main, Criterion, BenchmarkId, Throughput}",
      "std::time::Duration",
      "order_management::{\n    order::{Order, OrderId, OrderSide, OrderType, OrderState},\n    state_machine::{OrderStateMachine, StateTransition},\n    manager::OrderManager,\n    router::{OrderRouter, RoutingStrategy, ExchangeRoute},\n}"
    ],
    "infrastructure/src/event_ordering.rs": [
      "std::sync::Arc",
      "std::time::{Duration, Instant}",
      "parking_lot::RwLock",
      "std::sync::atomic::{AtomicU64, Ordering}",
      "std::collections::BTreeMap"
    ],
    "infrastructure/src/backpressure.rs": [
      "std::sync::Arc",
      "std::time::{Duration, Instant}",
      "async_trait::async_trait",
      "std::sync::atomic::{AtomicU64, AtomicBool, Ordering}",
      "tokio::sync::{Semaphore, SemaphorePermit}"
    ],
    "adapters/outbound/exchanges/bounded_idempotency.rs": [
      "std::sync::Arc",
      "parking_lot::Mutex",
      "dashmap::DashMap",
      "lru::LruCache",
      "std::time::{Duration, Instant}",
      "sha2::{Sha256, Digest}"
    ],
    "adapters/outbound/exchanges/symbol_actor.rs": [
      "std::sync::Arc",
      "std::time::Duration",
      "crate::domain::value_objects::{Symbol, Price, Quantity}",
      "chrono::Utc",
      "anyhow::{Result, bail}",
      "tokio::sync::{mpsc, oneshot, RwLock}",
      "crate::domain::entities::{Order, OrderId, OrderStatus}",
      "tracing::{info, warn, error, debug}",
      "std::collections::HashMap",
      "tokio::task::JoinHandle"
    ],
    "adapters/outbound/exchanges/idempotency_manager.rs": [
      "std::sync::Arc",
      "chrono::{DateTime, Utc}",
      "dashmap::DashMap",
      "std::time::{Duration, Instant}",
      "anyhow::{Result, bail}"
    ],
    "adapters/outbound/exchanges/binance_real.rs": [
      "anyhow::{Result, Context, bail}",
      "dashmap::DashMap",
      "std::time::{Duration, Instant}",
      "rust_decimal::Decimal",
      "hex",
      "serde::{Deserialize, Serialize}",
      "chrono::{DateTime, Utc}",
      "sha2::Sha256",
      "tokio::sync::RwLock",
      "async_trait::async_trait",
      "hmac::{Hmac, Mac}",
      "reqwest::{Client, header}",
      "domain::value_objects::{Symbol, Price, Quantity}",
      "std::sync::Arc",
      "rust_decimal_macros::dec",
      "tokio_tungstenite::{connect_async, tungstenite::Message as WsMessage}",
      "futures::{StreamExt, SinkExt}",
      "serde_json::json",
      "super::{ExchangeAdapter, ExchangeConfig, ExchangeHealth, OrderStatus}",
      "domain::entities::{Order, OrderId, OrderSide, OrderType, OrderTimeInForce}"
    ],
    "adapters/outbound/exchanges/exchange_simulator.rs": [
      "std::sync::Arc",
      "chrono::{DateTime, Utc}",
      "crate::domain::value_objects::statistical_distributions::{\n    FillDistribution, LatencyDistribution, SlippageDistribution, MarketStatistics\n}",
      "async_trait::async_trait",
      "crate::domain::value_objects::{Symbol, Price, Quantity}",
      "anyhow::{Result, bail}",
      "idempotency_manager::{IdempotencyManager, hash_order_request}",
      "tokio::sync::RwLock",
      "rand::{Rng, thread_rng}",
      "crate::domain::entities::{Order, OrderId, OrderStatus, OrderSide, OrderType, TimeInForce}",
      "crate::ports::outbound::exchange_port::{\n    ExchangePort, OrderBook, OrderBookLevel, Trade, Balance, ExchangeCapabilities\n}",
      "std::collections::{HashMap, VecDeque}",
      "std::time::Duration"
    ],
    "adapters/outbound/exchanges/mod.rs": [
      "std::sync::Arc",
      "anyhow::Result"
    ],
    "adapters/outbound/exchanges/exchange_adapter_trait.rs": [
      "anyhow::Result",
      "chrono::{DateTime, Utc}",
      "async_trait::async_trait",
      "crate::domain::value_objects::{Symbol, Price, Quantity}",
      "crate::ports::outbound::exchange_port::Balance",
      "crate::domain::entities::{Order, OrderId, OrderStatus}",
      "crate::ports::outbound::exchange_port::ExchangePort",
      "std::collections::HashMap"
    ],
    "adapters/outbound/persistence/postgres_order_repository.rs": [
      "std::sync::Arc",
      "anyhow::{Result, Context}",
      "chrono::{DateTime, Utc}",
      "async_trait::async_trait",
      "crate::domain::value_objects::{Symbol, Price, Quantity}",
      "crate::domain::entities::{Order, OrderId, OrderStatus, OrderSide, OrderType}",
      "crate::dto::database::OrderDto",
      "sqlx::{PgPool, Row}",
      "crate::ports::outbound::repository_port::{Repository, OrderRepository, OrderStatistics}",
      "std::time::Duration"
    ],
    "adapters/outbound/persistence/transaction_manager.rs": [
      "std::sync::Arc",
      "anyhow::{Result, Context, bail}",
      "tracing::{info, warn, error}",
      "tokio::sync::{RwLock, Semaphore}",
      "std::time::{Duration, Instant}",
      "async_trait::async_trait",
      "sqlx::{PgPool, Transaction, Postgres, Acquire}"
    ],
    "adapters/outbound/persistence/postgres_connection.rs": [
      "std::sync::Arc",
      "anyhow::{Result, Context}",
      "sqlx::{PgPool, PgPoolOptions, postgres::PgConnectOptions}",
      "tracing::{info, error, debug}",
      "std::time::Duration"
    ],
    "adapters/inbound/rest/api_server.rs": [
      "std::sync::Arc",
      "anyhow::Result",
      "crate::ports::inbound::TradingService",
      "tracing::{info, error, debug}",
      "serde::{Deserialize, Serialize}",
      "crate::application::commands::{PlaceOrderCommand, CancelOrderCommand}",
      "crate::domain::entities::{Order, OrderId}",
      "tower::ServiceBuilder",
      "axum::{\n    Router,\n    routing::{get, post, put, delete},\n    extract::{State, Path, Query},\n    response::{Json, IntoResponse, Response},\n    http::StatusCode,\n    middleware,\n}",
      "tower_http::{\n    cors::CorsLayer,\n    trace::TraceLayer,\n    compression::CompressionLayer,\n    limit::RequestBodyLimitLayer,\n}"
    ]
  }
}